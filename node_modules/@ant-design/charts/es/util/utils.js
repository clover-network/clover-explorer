/**
 * 下划线转驼峰命名
 */
export var camelCase = function (name) {
    return name.charAt(0).toUpperCase() + name.slice(1).replace(/-(\w)/g, function (_, n) { return n.toUpperCase(); });
};
/**
 * 获取对象差异
 * @param {source} object 原始对象
 * @param {target} object 目标对象
 */
export var checkChanged = function (source, target) {
    return JSON.stringify(source) === JSON.stringify(target);
};
/**
 * 判断两数组是否完全相同
 * @param {source} [] 原数组
 * @param {target} [] 目标数组
 */
export var sameArray = function (source, target) {
    return new Set(source.concat(target)).size === source.length;
};
export var isType = function (value, type) {
    var toString = {}.toString;
    return toString.call(value) === '[object ' + type + ']';
};
export var clone = function (source) {
    if (!source) {
        return source;
    }
    var target = {};
    for (var k in source) {
        target[k] = source[k];
    }
    return target;
};
/**
 * 存在时返回路径值，不存在时返回 undefined
 */
export var hasPath = function (source, path) {
    var current = source;
    for (var i = 0; i < path.length; i++) {
        if (current[path[i]]) {
            current = current[path[i]];
        }
        else {
            current = undefined;
            break;
        }
    }
    return current;
};
// 路径设置，不考虑复杂情况
export var setPath = function (source, path, value) {
    var o = source;
    path.forEach(function (key, idx) {
        // 不是最后一个
        if (idx < path.length - 1) {
            o = o[key];
        }
        else {
            o[key] = value;
        }
    });
    return source;
};
