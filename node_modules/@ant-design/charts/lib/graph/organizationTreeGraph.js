"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var es_1 = __importDefault(require("@antv/g6/es"));
var base_1 = require("../base");
var customItems_1 = require("./customItems");
var util_1 = require("./util");
var useGraph_1 = __importDefault(require("../hooks/useGraph"));
var defaultStateStyles = {
    hover: {
        stroke: '#1890ff',
        lineWidth: 2
    }
};
var defaultNodeStyle = {
    fill: '#91d5ff',
    stroke: '#40a9ff',
    radius: 5
};
var defaultEdgeStyle = {
    stroke: '#91d5ff',
    endArrow: {
        path: 'M 0,0 L 12, 6 L 9,0 L 12, -6 Z',
        fill: '#91d5ff',
        d: -20
    }
};
var defaultLayout = {
    type: 'compactBox',
    direction: 'TB',
    getId: function getId(d) {
        return d.id;
    },
    getHeight: function getHeight() {
        return 16;
    },
    getWidth: function getWidth() {
        return 16;
    },
    getVGap: function getVGap() {
        return 40;
    },
    getHGap: function getHGap() {
        return 70;
    },
};
var defaultLabelCfg = {
    style: {
        fill: '#000',
        fontSize: 12
    }
};
var graph;
var OrganizationTreeGraphComponent = function (_a) {
    var data = _a.data, className = _a.className, style = _a.style, width = _a.width, height = _a.height, _b = _a.nodeType, nodeType = _b === void 0 ? 'rect' : _b, _c = _a.edgeType, edgeType = _c === void 0 ? 'flow-line' : _c, _d = _a.collapseExpand, collapseExpand = _d === void 0 ? false : _d, _e = _a.nodeSize, nodeSize = _e === void 0 ? [120, 40] : _e, _f = _a.nodeLabelCfg, nodeLabelCfg = _f === void 0 ? defaultLabelCfg : _f, _g = _a.edgeLabelCfg, edgeLabelCfg = _g === void 0 ? defaultLabelCfg : _g, _h = _a.layout, layout = _h === void 0 ? defaultLayout : _h, _j = _a.enableEdit, enableEdit = _j === void 0 ? false : _j, minimapCfg = _a.minimapCfg, _k = _a.nodeStyle, nodeStyle = _k === void 0 ? defaultNodeStyle : _k, _l = _a.edgeStyle, edgeStyle = _l === void 0 ? defaultEdgeStyle : _l, _m = _a.nodeStateStyles, nodeStateStyles = _m === void 0 ? defaultStateStyles : _m, _o = _a.edgeStateStyles, edgeStateStyles = _o === void 0 ? defaultStateStyles : _o, handleNodeClick = _a.handleNodeClick, handleEdgeClick = _a.handleEdgeClick, handleNodeHover = _a.handleNodeHover, handleNodeUnHover = _a.handleNodeUnHover, handleEdgeHover = _a.handleEdgeHover, handleEdgeUnHover = _a.handleEdgeUnHover, handleCanvasClick = _a.handleCanvasClick, graphRef = _a.graphRef;
    var props = {
        data: data,
        className: className,
        style: style,
        width: width,
        height: height,
        nodeType: nodeType,
        edgeType: edgeType,
        collapseExpand: collapseExpand,
        nodeSize: nodeSize,
        nodeLabelCfg: nodeLabelCfg,
        edgeLabelCfg: edgeLabelCfg,
        layout: layout,
        enableEdit: enableEdit,
        minimapCfg: minimapCfg,
        nodeStyle: nodeStyle,
        edgeStyle: edgeStyle,
        nodeStateStyles: nodeStateStyles,
        edgeStateStyles: edgeStateStyles,
        handleNodeClick: handleNodeClick,
        handleEdgeClick: handleEdgeClick,
        handleNodeHover: handleNodeHover,
        handleNodeUnHover: handleNodeUnHover,
        handleEdgeHover: handleEdgeHover,
        handleEdgeUnHover: handleEdgeUnHover,
        handleCanvasClick: handleCanvasClick,
        graphRef: graphRef
    };
    var container = react_1.default.useRef(null);
    useGraph_1.default(graph, props, container);
    react_1.useEffect(function () {
        var graphSize = util_1.getGraphSize(width, height, container);
        if (!graph || graph.destroyed) {
            if (nodeType === 'icon-node') {
                customItems_1.customIconNode({ enableEdit: enableEdit });
            }
            graph = new es_1.default.TreeGraph({
                container: container.current,
                width: graphSize[0],
                height: graphSize[1],
                linkCenter: true,
                modes: {
                    default: [
                        'drag-canvas',
                        'zoom-canvas',
                    ],
                },
                defaultNode: {
                    type: nodeType,
                    size: nodeSize,
                    style: nodeStyle,
                    labelCfg: nodeLabelCfg
                },
                defaultEdge: {
                    type: edgeType,
                    style: edgeStyle,
                    labelCfg: edgeLabelCfg
                },
                nodeStateStyles: nodeStateStyles,
                edgeStateStyles: edgeStateStyles,
                layout: layout
            });
            if (graphRef) {
                graphRef.current = graph;
            }
        }
        util_1.processMinimap(minimapCfg, graph);
        graph.data(data);
        graph.render();
        graph.fitView();
        if (collapseExpand) {
            graph.addBehaviors({
                type: 'collapse-expand',
                onChange: function onChange(item, collapsed) {
                    if (!item) {
                        return false;
                    }
                    var data = item.get('model').data;
                    data.collapsed = collapsed;
                    return true;
                },
            }, 'default');
        }
        graph.on('node:mouseenter', function (evt) {
            var item = evt.item;
            graph.setItemState(item, 'hover', true);
            if (handleNodeHover) {
                handleNodeHover(item, graph);
            }
        });
        graph.on('node:mouseleave', function (evt) {
            var item = evt.item;
            graph.setItemState(item, 'hover', false);
            if (handleNodeUnHover) {
                handleNodeUnHover(item, graph);
            }
        });
        graph.on('node:click', function (evt) {
            var item = evt.item, target = evt.target;
            var targetType = target.get('type');
            var name = target.get('name');
            // 增加元素
            if (targetType === 'marker') {
                var model = item.getModel();
                if (name === 'add-item') {
                    if (!model.children) {
                        model.children = [];
                    }
                    var tmpId = Math.random().toString(36).slice(-8);
                    model.children.push({
                        id: tmpId,
                        label: tmpId
                    });
                    graph.updateChild(model, model.id);
                }
                else if (name === 'remove-item') {
                    graph.removeChild(model.id);
                }
            }
            else {
                if (handleNodeClick) {
                    handleNodeClick(item, graph);
                }
            }
        });
        graph.on('edge:mouseenter', function (evt) {
            var item = evt.item;
            graph.setItemState(item, 'hover', true);
            if (handleEdgeHover) {
                handleEdgeHover(item, graph);
            }
        });
        graph.on('edge:mouseleave', function (evt) {
            var item = evt.item;
            graph.setItemState(item, 'hover', false);
            if (handleEdgeUnHover) {
                handleEdgeUnHover(item, graph);
            }
        });
        graph.on('edge:click', function (evt) {
            var item = evt.item;
            if (handleEdgeClick) {
                handleEdgeClick(item, graph);
            }
        });
        graph.on('canvas:click', function (evt) {
            handleCanvasClick && handleCanvasClick(graph);
        });
        return function () { return graph.destroy(); };
    }, []);
    return (react_1.default.createElement(base_1.ErrorBoundary, null,
        react_1.default.createElement("div", { className: className, style: style, ref: container })));
};
exports.default = OrganizationTreeGraphComponent;
