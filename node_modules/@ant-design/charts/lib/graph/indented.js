"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var es_1 = __importDefault(require("@antv/g6/es"));
var base_1 = require("../base");
require("./customItems");
var util_1 = require("./util");
var useGraph_1 = __importDefault(require("../hooks/useGraph"));
var defaultStateStyles = {
    hover: {
        stroke: '#1890ff',
        lineWidth: 2
    }
};
var defaultNodeSize = [120, 40];
var defaultNodeStyle = {
    stroke: '#40a9ff',
};
var defaultNodeAnchorPoints = [[0, 0.5], [1, 0.5]];
var defaultEdgeStyle = {
    stroke: '#ccc',
    endArrow: {
        path: es_1.default.Arrow.vee(10, 10),
        fill: '#ccc',
    }
};
var defaultLayout = {
    type: 'indented',
    direction: 'LR',
    dropCap: false,
    indent: 250,
    getHeight: function () {
        return 60;
    },
    getWidth: function (d) {
        return 100;
    }
};
var defaultLabelCfg = {
    style: {
        fill: '#000',
        fontSize: 12
    }
};
var graph;
var IndentedTree = function (_a) {
    var data = _a.data, className = _a.className, style = _a.style, width = _a.width, height = _a.height, _b = _a.nodeType, nodeType = _b === void 0 ? 'card-node' : _b, _c = _a.edgeType, edgeType = _c === void 0 ? 'cubic-horizontal' : _c, _d = _a.behaviors, behaviors = _d === void 0 ? ['zoom-canvas', 'drag-canvas'] : _d, _e = _a.nodeSize, nodeSize = _e === void 0 ? defaultNodeSize : _e, _f = _a.nodeLabelCfg, nodeLabelCfg = _f === void 0 ? defaultLabelCfg : _f, _g = _a.nodeAnchorPoints, nodeAnchorPoints = _g === void 0 ? defaultNodeAnchorPoints : _g, _h = _a.layout, layout = _h === void 0 ? defaultLayout : _h, minimapCfg = _a.minimapCfg, _j = _a.nodeStyle, nodeStyle = _j === void 0 ? defaultNodeStyle : _j, _k = _a.edgeStyle, edgeStyle = _k === void 0 ? defaultEdgeStyle : _k, _l = _a.nodeStateStyles, nodeStateStyles = _l === void 0 ? defaultStateStyles : _l, _m = _a.edgeStateStyles, edgeStateStyles = _m === void 0 ? defaultStateStyles : _m, _o = _a.collapseExpand, collapseExpand = _o === void 0 ? true : _o, handleEdgeClick = _a.handleEdgeClick, handleEdgeHover = _a.handleEdgeHover, handleEdgeUnHover = _a.handleEdgeUnHover, handleNodeClick = _a.handleNodeClick, handleNodeHover = _a.handleNodeHover, handleNodeUnHover = _a.handleNodeUnHover, handleCanvasClick = _a.handleCanvasClick, graphRef = _a.graphRef;
    var container = react_1.default.useRef(null);
    var props = {
        data: data,
        className: className,
        style: style,
        width: width,
        height: height,
        nodeType: nodeType,
        edgeType: edgeType,
        behaviors: behaviors,
        nodeSize: nodeSize,
        nodeLabelCfg: nodeLabelCfg,
        nodeAnchorPoints: nodeAnchorPoints,
        layout: layout,
        minimapCfg: minimapCfg,
        nodeStyle: nodeStyle,
        edgeStyle: edgeStyle,
        nodeStateStyles: nodeStateStyles,
        edgeStateStyles: edgeStateStyles,
        collapseExpand: collapseExpand,
        handleEdgeClick: handleEdgeClick,
        handleEdgeHover: handleEdgeHover,
        handleEdgeUnHover: handleEdgeUnHover,
        handleNodeClick: handleNodeClick,
        handleNodeHover: handleNodeHover,
        handleNodeUnHover: handleNodeUnHover,
        handleCanvasClick: handleCanvasClick,
        graphRef: graphRef
    };
    useGraph_1.default(graph, props, container);
    react_1.useEffect(function () {
        var graphSize = util_1.getGraphSize(width, height, container);
        if (!graph || graph.destroyed) {
            graph = new es_1.default.TreeGraph({
                container: container.current,
                width: graphSize[0],
                height: graphSize[1],
                modes: {
                    default: behaviors,
                },
                defaultNode: {
                    type: nodeType,
                    size: nodeSize,
                    style: nodeStyle,
                    anchorPoints: nodeAnchorPoints,
                    labelCfg: nodeLabelCfg
                },
                defaultEdge: {
                    type: edgeType,
                    style: edgeStyle,
                },
                nodeStateStyles: nodeStateStyles,
                edgeStateStyles: edgeStateStyles,
                layout: layout,
            });
            if (graphRef) {
                graphRef.current = graph;
            }
        }
        util_1.processMinimap(minimapCfg, graph);
        graph.data(data);
        graph.render();
        graph.fitView();
        if (collapseExpand) {
            var onClick_1 = function (e) {
                var item = e.item;
                if (e.target.get('name') === 'collapse-icon') {
                    graph.updateItem(item, {
                        collapsed: !item.getModel().collapsed
                    });
                    graph.layout();
                }
                else {
                    if (handleNodeClick) {
                        handleNodeClick(item, graph);
                    }
                }
            };
            graph.on('node:click', function (e) {
                onClick_1(e);
            });
            graph.on('node:touchstart', function (e) {
                onClick_1(e);
            });
        }
        graph.on('edge:mouseenter', function (evt) {
            var item = evt.item;
            graph.setItemState(item, 'hover', true);
            if (handleEdgeHover) {
                handleEdgeHover(item, graph);
            }
        });
        graph.on('edge:mouseleave', function (evt) {
            var item = evt.item;
            graph.setItemState(item, 'hover', false);
            if (handleEdgeUnHover) {
                handleEdgeUnHover(item, graph);
            }
        });
        graph.on('edge:click', function (evt) {
            var item = evt.item;
            if (handleEdgeClick) {
                handleEdgeClick(item, graph);
            }
        });
        graph.on('edge:touchstart', function (evt) {
            var item = evt.item;
            if (handleEdgeClick) {
                handleEdgeClick(item, graph);
            }
        });
        graph.on('node:mouseenter', function (evt) {
            var item = evt.item;
            graph.setItemState(item, 'hover', false);
            if (handleNodeHover) {
                handleNodeHover(item, graph);
            }
        });
        graph.on('node:mouseleave', function (evt) {
            var item = evt.item;
            graph.setItemState(item, 'hover', false);
            if (handleNodeUnHover) {
                handleNodeUnHover(item, graph);
            }
        });
        graph.on('canvas:click', function (evt) {
            handleCanvasClick && handleCanvasClick(graph);
        });
        graph.on('canvas:touchstart', function (evt) {
            handleCanvasClick && handleCanvasClick(graph);
        });
        return function () { return graph.destroy(); };
    }, []);
    return (react_1.default.createElement(base_1.ErrorBoundary, null,
        react_1.default.createElement("div", { className: className, style: style, ref: container })));
};
exports.default = IndentedTree;
