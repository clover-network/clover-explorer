"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.LEDGER_DEFAULT_INDEX = exports.LEDGER_DEFAULT_CHANGE = exports.LEDGER_DEFAULT_ACCOUNT = void 0;

var _classPrivateFieldLooseBase2 = _interopRequireDefault(require("@babel/runtime/helpers/classPrivateFieldLooseBase"));

var _classPrivateFieldLooseKey2 = _interopRequireDefault(require("@babel/runtime/helpers/classPrivateFieldLooseKey"));

var _ledgerPolkadot = require("@zondax/ledger-polkadot");

var _util = require("@polkadot/util");

var _transportsNode = _interopRequireDefault(require("./transportsNode"));

var _transportsWeb = _interopRequireDefault(require("./transportsWeb"));

// Copyright 2017-2020 @polkadot/ui-keyring authors & contributors
// SPDX-License-Identifier: Apache-2.0
const LEDGER_DEFAULT_ACCOUNT = 0x80000000;
exports.LEDGER_DEFAULT_ACCOUNT = LEDGER_DEFAULT_ACCOUNT;
const LEDGER_DEFAULT_CHANGE = 0x80000000;
exports.LEDGER_DEFAULT_CHANGE = LEDGER_DEFAULT_CHANGE;
const LEDGER_DEFAULT_INDEX = 0x80000000;
exports.LEDGER_DEFAULT_INDEX = LEDGER_DEFAULT_INDEX;
const SUCCESS_CODE = 0x9000;

const transports = _transportsNode.default.concat(_transportsWeb.default);

const APPS = {
  kusama: _ledgerPolkadot.newKusamaApp,
  polkadot: _ledgerPolkadot.newPolkadotApp
};

var _app = (0, _classPrivateFieldLooseKey2.default)("app");

var _chain = (0, _classPrivateFieldLooseKey2.default)("chain");

var _transport = (0, _classPrivateFieldLooseKey2.default)("transport");

// A very basic wrapper for a ledger app -
//  - it connects automatically, creating an app as required
//  - Promises return errors (instead of wrapper errors)
class Ledger {
  constructor(transport, chain) {
    Object.defineProperty(this, _app, {
      writable: true,
      value: null
    });
    Object.defineProperty(this, _chain, {
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, _transport, {
      writable: true,
      value: void 0
    });
    // u2f is deprecated
    (0, _util.assert)(['hid', 'webusb'].includes(transport), `Unsupported transport ${transport}`);
    (0, _util.assert)(Object.keys(APPS).includes(chain), `Unsupported chain ${chain}`);
    (0, _classPrivateFieldLooseBase2.default)(this, _chain)[_chain] = chain;
    (0, _classPrivateFieldLooseBase2.default)(this, _transport)[_transport] = transport;
  }

  async _getApp() {
    if (!(0, _classPrivateFieldLooseBase2.default)(this, _app)[_app]) {
      const def = transports.find(({
        type
      }) => type === (0, _classPrivateFieldLooseBase2.default)(this, _transport)[_transport]);
      (0, _util.assert)(def, `Unable to find a transport for ${(0, _classPrivateFieldLooseBase2.default)(this, _transport)[_transport]}`);
      const transport = await def.create();
      (0, _classPrivateFieldLooseBase2.default)(this, _app)[_app] = APPS[(0, _classPrivateFieldLooseBase2.default)(this, _chain)[_chain]](transport);
    }

    return (0, _classPrivateFieldLooseBase2.default)(this, _app)[_app];
  }

  async _withApp(fn) {
    try {
      const app = await this._getApp();
      return await fn(app);
    } catch (error) {
      (0, _classPrivateFieldLooseBase2.default)(this, _app)[_app] = null;
      throw error;
    }
  }

  async _wrapError(promise) {
    const result = await promise;
    (0, _util.assert)(result.return_code === SUCCESS_CODE, result.error_message);
    return result;
  }

  async getAddress(confirm = false, accountOffset = 0, addressOffset = 0, {
    account = LEDGER_DEFAULT_ACCOUNT,
    addressIndex = LEDGER_DEFAULT_INDEX,
    change = LEDGER_DEFAULT_CHANGE
  } = {}) {
    return this._withApp(async app => {
      const {
        address,
        pubKey
      } = await this._wrapError(app.getAddress(account + accountOffset, change, addressIndex + addressOffset, confirm));
      return {
        address,
        publicKey: `0x${pubKey}`
      };
    });
  }

  async getVersion() {
    return this._withApp(async app => {
      const {
        device_locked: isLocked,
        major,
        minor,
        patch,
        test_mode: isTestMode
      } = await this._wrapError(app.getVersion());
      return {
        isLocked,
        isTestMode,
        version: [major, minor, patch]
      };
    });
  }

  async sign(message, accountOffset = 0, addressOffset = 0, {
    account = LEDGER_DEFAULT_ACCOUNT,
    addressIndex = LEDGER_DEFAULT_INDEX,
    change = LEDGER_DEFAULT_CHANGE
  } = {}) {
    return this._withApp(async app => {
      const buffer = (0, _util.u8aToBuffer)(message);
      const {
        signature
      } = await this._wrapError(app.sign(account + accountOffset, change, addressIndex + addressOffset, buffer));
      return {
        signature: (0, _util.u8aToHex)((0, _util.bufferToU8a)(signature))
      };
    });
  }

}

exports.default = Ledger;