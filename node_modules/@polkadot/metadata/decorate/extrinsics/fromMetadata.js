"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.extrinsicsFromMeta = extrinsicsFromMeta;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _util = require("@polkadot/util");

var _createUnchecked = require("./createUnchecked");

var _ = _interopRequireDefault(require("."));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/** @internal */
function extrinsicsFromMeta(registry, metadata) {
  const modules = metadata.asLatest.modules;
  const isIndexed = modules.some(({
    index
  }) => !index.eqn(255));
  return modules.filter(({
    calls
  }) => calls.isSome).reduce((result, {
    calls,
    index,
    name
  }, _sectionIndex) => {
    const sectionIndex = isIndexed ? index.toNumber() : _sectionIndex;
    const section = (0, _util.stringCamelCase)(name);
    result[section] = calls.unwrap().reduce((newModule, callMetadata, methodIndex) => {
      const method = (0, _util.stringCamelCase)(callMetadata.name);
      newModule[method] = (0, _createUnchecked.createUnchecked)(registry, section, new Uint8Array([sectionIndex, methodIndex]), callMetadata);
      return newModule;
    }, {});
    return result;
  }, _objectSpread({}, _.default));
}