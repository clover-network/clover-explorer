"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _create = require("@polkadot/types/create");

var _Metadata = require("../../Metadata");

var _static = _interopRequireDefault(require("../../static"));

var _fromMetadata = require("./fromMetadata");

// Copyright 2017-2020 @polkadot/metadata authors & contributors
// SPDX-License-Identifier: Apache-2.0
// Use the pre-generated metadata
const registry = new _create.TypeRegistry();
const metadata = new _Metadata.Metadata(registry, _static.default);
registry.setMetadata(metadata);
const newExtrinsics = (0, _fromMetadata.extrinsicsFromMeta)(registry, metadata);
describe('fromMetadata', () => {
  it('should throw if an incorrect number of args is supplied', () => {
    expect(() => newExtrinsics.balances.setBalance()).toThrowError(/expects 3 arguments/);
  });
  it('should return a value if the storage function does not expect an argument', () => {
    expect(() => newExtrinsics.balances.setBalance('5C62W7ELLAAfix9LYrcx5smtcffbhvThkM5x7xfMeYXCtGwF', 2, 3)).not.toThrow();
  });
  it('should return properly-encoded transactions', () => {
    expect(registry.createType('Extrinsic', newExtrinsics.timestamp.set([10101])).toU8a()).toEqual(new Uint8Array([// length (encoded)
    4 << 2, // version, no signature
    4, // index
    3, 0, // values, Compact<Moment>
    116]));
  });
});