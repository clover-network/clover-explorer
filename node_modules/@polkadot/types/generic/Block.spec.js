"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _metadata = require("@polkadot/metadata");

var _static = _interopRequireDefault(require("@polkadot/metadata/static"));

var _create = require("../create");

var _SignedBlock = _interopRequireDefault(require("../json/SignedBlock.003.00.json"));

var _Block = require("./Block");

// Copyright 2017-2020 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/* eslint-disable sort-keys */

/* eslint-disable @typescript-eslint/no-unsafe-member-access */
const registry = new _create.TypeRegistry();
const metadata = new _metadata.Metadata(registry, _static.default);
registry.setMetadata(metadata);
describe('Block', () => {
  it('has a valid toRawType', () => {
    expect(new _Block.GenericBlock(registry).toRawType()).toEqual( // each of the containing structures have been stringified on their own
    JSON.stringify({
      header: 'Header',
      extrinsics: 'Vec<Extrinsic>'
    }));
  });
  it('re-encodes digest items correctly', () => {
    const digest = new _Block.GenericBlock(registry, _SignedBlock.default.result.block).header.digest;
    expect(digest.logs[0].toHex()).toEqual(_SignedBlock.default.result.block.header.digest.logs[0]);
    expect(digest.logs[1].toHex()).toEqual(_SignedBlock.default.result.block.header.digest.logs[1]);
  });
});