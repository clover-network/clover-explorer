"use strict";

var _types = require("./types");

var _encodeTypes = require("./encodeTypes");

// Copyright 2017-2020 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
describe('encodeTypeDef', () => {
  it('correctly encodes a complex struct', () => {
    expect(JSON.parse((0, _encodeTypes.encodeTypeDef)({
      info: _types.TypeDefInfo.Struct,
      sub: [{
        info: _types.TypeDefInfo.Plain,
        name: 'a',
        type: 'u32'
      }, {
        info: _types.TypeDefInfo.Struct,
        name: 'b',
        sub: [{
          info: _types.TypeDefInfo.Plain,
          name: 'c',
          type: 'u32'
        }, {
          info: _types.TypeDefInfo.Vec,
          name: 'd',
          sub: {
            info: _types.TypeDefInfo.Plain,
            type: 'u32'
          },
          type: ''
        }],
        type: ''
      }],
      type: ''
    }))).toEqual({
      a: 'u32',
      b: '{"c":"u32","d":"Vec<u32>"}'
    });
  });
  it('correctly encodes a complex struct (named)', () => {
    expect(JSON.parse((0, _encodeTypes.encodeTypeDef)({
      info: _types.TypeDefInfo.Struct,
      sub: [{
        info: _types.TypeDefInfo.Plain,
        name: 'a',
        type: 'u32'
      }, {
        info: _types.TypeDefInfo.Struct,
        name: 'b',
        sub: [{
          info: _types.TypeDefInfo.Plain,
          name: 'c',
          type: 'u32'
        }, {
          displayName: 'Something',
          info: _types.TypeDefInfo.Vec,
          name: 'd',
          sub: {
            info: _types.TypeDefInfo.Plain,
            type: 'u32'
          },
          type: ''
        }],
        type: ''
      }],
      type: ''
    }))).toEqual({
      a: 'u32',
      b: '{"c":"u32","d":"Something"}'
    });
  });
  it('correctly encodes a complex enum', () => {
    expect(JSON.parse((0, _encodeTypes.encodeTypeDef)({
      info: _types.TypeDefInfo.Enum,
      sub: [{
        info: _types.TypeDefInfo.Plain,
        name: 'a',
        type: 'u32'
      }, {
        info: _types.TypeDefInfo.Struct,
        name: 'b',
        sub: [{
          info: _types.TypeDefInfo.Plain,
          name: 'c',
          type: 'u32'
        }, {
          info: _types.TypeDefInfo.Vec,
          name: 'd',
          sub: {
            info: _types.TypeDefInfo.Plain,
            type: 'u32'
          },
          type: ''
        }],
        type: ''
      }, {
        info: _types.TypeDefInfo.Enum,
        name: 'f',
        sub: [{
          info: _types.TypeDefInfo.Plain,
          name: 'g',
          type: 'Null'
        }, {
          info: _types.TypeDefInfo.Plain,
          name: 'h',
          type: 'Null'
        }],
        type: ''
      }],
      type: ''
    }))).toEqual({
      _enum: {
        a: 'u32',
        b: '{"c":"u32","d":"Vec<u32>"}',
        f: '{"_enum":["g","h"]}'
      }
    });
  });
  it('correctly encodes a complex enum (named)', () => {
    expect(JSON.parse((0, _encodeTypes.encodeTypeDef)({
      info: _types.TypeDefInfo.Enum,
      sub: [{
        info: _types.TypeDefInfo.Plain,
        name: 'a',
        type: 'u32'
      }, {
        displayName: 'Something',
        info: _types.TypeDefInfo.Struct,
        name: 'b',
        sub: [{
          info: _types.TypeDefInfo.Plain,
          name: 'c',
          type: 'u32'
        }, {
          info: _types.TypeDefInfo.Vec,
          name: 'd',
          sub: {
            info: _types.TypeDefInfo.Plain,
            type: 'u32'
          },
          type: ''
        }],
        type: ''
      }, {
        displayName: 'Option',
        info: _types.TypeDefInfo.Option,
        name: 'e',
        sub: {
          displayName: 'Result',
          info: _types.TypeDefInfo.Result,
          sub: [{
            info: _types.TypeDefInfo.Null,
            type: ''
          }, {
            info: _types.TypeDefInfo.Plain,
            type: 'u32'
          }],
          type: ''
        },
        type: ''
      }],
      type: ''
    }))).toEqual({
      _enum: {
        a: 'u32',
        b: 'Something',
        e: 'Option<Result<Null, u32>>'
      }
    });
  });
});