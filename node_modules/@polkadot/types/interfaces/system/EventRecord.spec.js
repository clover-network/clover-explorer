"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _metadata = require("@polkadot/metadata");

var _static = _interopRequireDefault(require("@polkadot/metadata/static"));

var _create = require("../../create");

var _EventRecord = _interopRequireDefault(require("../../json/EventRecord.001.json"));

var _EventRecord2 = _interopRequireDefault(require("../../json/EventRecord.003.json"));

// Copyright 2017-2020 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0

/* eslint-disable @typescript-eslint/no-unsafe-assignment */

/* eslint-disable @typescript-eslint/no-unsafe-member-access */
describe('EventRecord', () => {
  const registry = new _create.TypeRegistry();
  describe('EventRecord (current)', () => {
    beforeEach(() => {
      const metadata = new _metadata.Metadata(registry, _static.default);
      registry.setMetadata(metadata);
    });
    it('decodes older EventRecord correctly', () => {
      const records = registry.createType('Vec<EventRecord>', _EventRecord.default.params.result.changes[0][1], true);
      const er = records[0];
      expect(er.phase.type).toEqual('ApplyExtrinsic');
    });
    it('decodes EventRecord with topics correctly', () => {
      const hex = _EventRecord2.default.params.result.changes[0][1];
      const records = registry.createType('Vec<EventRecord>', hex, true);
      const er = records[0];
      expect(er.phase.type).toEqual('ApplyExtrinsic'); // additional payment info, weight u64 (vs u32)

      expect(records.toHex()).toEqual(`${hex}00000000000000000000`);
    });
  });
});