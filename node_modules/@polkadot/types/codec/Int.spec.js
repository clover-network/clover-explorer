"use strict";

var _create = require("../create");

var _ = require(".");

// Copyright 2017-2020 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
describe('Int', () => {
  const registry = new _create.TypeRegistry();
  it('provides a toBigInt interface', () => {
    expect(new _.Int(registry, -1234).toBigInt()).toEqual(-1234n);
  });
  it('provides a toBn interface', () => {
    expect(new _.Int(registry, -1234).toBn().toNumber()).toEqual(-1234);
  });
  it('provides a toNumber interface', () => {
    expect(new _.Int(registry, -1234).toNumber()).toEqual(-1234);
  });
  it('converts to Little Endian from the provided value', () => {
    expect(new _.Int(registry, -1234).toU8a()).toEqual(new Uint8Array([46, 251, 255, 255, 255, 255, 255, 255]));
  });
  it('converts to Little Endian from the provided value (bitLength)', () => {
    expect(new _.Int(registry, -1234, 32).toU8a()).toEqual(new Uint8Array([46, 251, 255, 255]));
  });
  it('converts to hex/string', () => {
    const i = new _.Int(registry, '0x12', 16);
    expect(i.toHex()).toEqual('0x0012');
    expect(i.toString()).toEqual('18');
  });
  it('converts to equivalents', () => {
    const a = new _.Int(registry, '-123');
    expect(new _.Int(registry, a).toNumber()).toEqual(-123);
  });
  describe('static with', () => {
    it('allows default toRawType', () => {
      expect(new (_.Int.with(64))(registry).toRawType()).toEqual('i64');
    });
    it('allows toRawType override', () => {
      expect(new (_.Int.with(64, 'SomethingElse'))(registry).toRawType()).toEqual('SomethingElse');
    });
  });
});