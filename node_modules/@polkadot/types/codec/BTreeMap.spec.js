"use strict";

var _create = require("../create");

var _primitive = require("../primitive");

var _ = require(".");

// Copyright 2017-2020 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
const registry = new _create.TypeRegistry();
const mockU32TextMap = new Map();
mockU32TextMap.set(new _primitive.Text(registry, 'bazzing'), new _primitive.U32(registry, 69));
describe('BTreeMap', () => {
  it('decodes null', () => {
    expect(new (_.BTreeMap.with(_primitive.Text, _primitive.U32))(registry, null).toString()).toEqual('{}');
  });
  it('decodes reusing instantiated inputs', () => {
    const key = new _primitive.Text(registry, 'foo');
    const val = new _primitive.Text(registry, 'bar');
    expect(new (_.BTreeMap.with(_primitive.Text, _primitive.Text))(registry, new Map([[key, val]])).eq(new Map([[key, val]]))).toBe(true);
  });
  it('decodes within more complicated types', () => {
    const s = new _.Struct(registry, {
      placeholder: _primitive.U32,
      value: 'BTreeMap<Text, U32>'
    });
    s.set('value', new (_.BTreeMap.with(_primitive.Text, _primitive.U32))(registry, mockU32TextMap));
    expect(s.toString()).toBe('{"placeholder":0,"value":{"bazzing":69}}');
  });
  it('throws when it cannot decode', () => {
    expect(() => new (_.BTreeMap.with(_primitive.Text, _primitive.U32))(registry, 'ABC')).toThrowError(/Map: cannot decode type/);
  });
  it('correctly encodes length', () => {
    expect(new (_.BTreeMap.with(_primitive.Text, _primitive.U32))(registry, mockU32TextMap).encodedLength).toEqual(13);
  });
  it('generates sane toRawTypes', () => {
    expect(new (_.BTreeMap.with(_primitive.Text, _primitive.U32))(registry).toRawType()).toBe('BTreeMap<Text,u32>');
    expect(new (_.BTreeMap.with(_primitive.Text, _primitive.Text))(registry).toRawType()).toBe('BTreeMap<Text,Text>');
    expect(new (_.BTreeMap.with(_primitive.Text, _.Struct.with({
      a: _primitive.U32,
      b: _primitive.Text
    })))(registry).toRawType()).toBe('BTreeMap<Text,{"a":"u32","b":"Text"}>');
  });
});