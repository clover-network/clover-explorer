"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _bn = _interopRequireDefault(require("bn.js"));

var _create = require("../create");

var _primitive = require("../primitive");

var _Date = require("./Date");

var _ = require(".");

// Copyright 2017-2020 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
describe('Compact', () => {
  const registry = new _create.TypeRegistry();
  describe('constructor', () => {
    it('has support for BigInt', () => {
      expect(new _.Compact(registry, 'u128', 123456789000123456789n).toHuman()).toEqual('123,456,789,000,123,456,789');
    });
    it('has the correct bitLength for constructor values (BlockNumber)', () => {
      expect(new (_.Compact.with(registry.createClass('BlockNumber')))(registry, 0xfffffff9).bitLength()).toEqual(32);
    });
    it('has the correct encodedLength for constructor values (string BlockNumber)', () => {
      expect(new (_.Compact.with('BlockNumber'))(registry, 0xfffffff9).encodedLength).toEqual(5);
    });
    it('has the correct encodedLength for constructor values (class BlockNumber)', () => {
      expect(new (_.Compact.with(registry.createClass('BlockNumber')))(registry, 0xfffffff9).encodedLength).toEqual(5);
    });
    it('has the correct encodedLength for constructor values (u32)', () => {
      expect(new (_.Compact.with(_primitive.U32))(registry, 0xffff9).encodedLength).toEqual(4);
    });
    it('constructs properly via Uint8Array as U32', () => {
      expect(new (_.Compact.with(_primitive.U32))(registry, new Uint8Array([254, 255, 3, 0])).toNumber()).toEqual(new _bn.default(0xffff).toNumber());
    });
    it('constructs properly via number as Moment', () => {
      expect(new (_.Compact.with(_Date.CodecDate))(registry, 1537968546).toString().startsWith('Wed Sep 26 2018') // The time depends on the timezone this test is run in
      ).toBe(true);
    });
  });
  describe('utils', () => {
    it('compares against another Compact', () => {
      expect(new (_.Compact.with(_primitive.U32))(registry, 12345).eq(new (_.Compact.with(_primitive.U32))(registry, 12345))).toBe(true);
    });
    it('compares against a primitive', () => {
      expect(new (_.Compact.with(_primitive.U32))(registry, 12345).eq(12345)).toBe(true);
    });
    it('unwraps to the wrapped value', () => {
      expect(new (_.Compact.with(_primitive.U32))(registry, 12345).unwrap() instanceof _primitive.U32).toBe(true);
    });
    it('has a valid toBn interface', () => {
      expect(new (_.Compact.with('u128'))(registry, '12345678987654321').toBn().eq(new _bn.default('12345678987654321'))).toBe(true);
    });
    it('has a valid toBigInt interface', () => {
      expect(new (_.Compact.with('u128'))(registry, 12345678987654321n).toBigInt() === 12345678987654321n).toBe(true);
    });
  });
});