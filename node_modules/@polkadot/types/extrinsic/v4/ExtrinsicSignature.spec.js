"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _testingPairs = require("@polkadot/keyring/testingPairs");

var _metadata = require("@polkadot/metadata");

var _static = _interopRequireDefault(require("@polkadot/metadata/static"));

var _util = require("@polkadot/util");

var _create = require("../../create");

var _ = require(".");

// Copyright 2017-2020 @polkadot/types authors & contributors
// SPDX-License-Identifier: Apache-2.0
const signOptions = {
  blockHash: '0x1234567890123456789012345678901234567890123456789012345678901234',
  genesisHash: '0x1234567890123456789012345678901234567890123456789012345678901234',
  nonce: '0x69',
  runtimeVersion: {
    apis: [],
    authoringVersion: _util.BN_ZERO,
    implName: String('test'),
    implVersion: _util.BN_ZERO,
    specName: String('test'),
    specVersion: _util.BN_ZERO,
    transactionVersion: _util.BN_ZERO
  }
};
describe('ExtrinsicSignatureV4', () => {
  const pairs = (0, _testingPairs.createTestPairs)({
    type: 'ed25519'
  });
  it('encodes to a sane Uint8Array (default)', () => {
    const registry = new _create.TypeRegistry();
    const u8a = new Uint8Array([// signer as an AccountIndex
    0x09, // signature type
    0x01, // signature
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, // extra stuff
    0x00, // immortal,
    0x04, // nonce, compact
    0x08 // tip, compact
    ]);
    expect(new _.GenericExtrinsicSignatureV4(registry, u8a, {
      isSigned: true
    }).toU8a()).toEqual(u8a);
  });
  it('fake signs default', () => {
    const registry = new _create.TypeRegistry();
    const metadata = new _metadata.Metadata(registry, _static.default);
    registry.setMetadata(metadata);
    expect(new _.GenericExtrinsicSignatureV4(registry, undefined).signFake(registry.createType('Call'), pairs.alice.address, signOptions).toHex()).toEqual('0x' + 'ff' + 'd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d' + '01' + '4242424242424242424242424242424242424242424242424242424242424242' + '4242424242424242424242424242424242424242424242424242424242424242' + '00a50100');
  });
  it('fake signs default', () => {
    const registry = new _create.TypeRegistry();
    const metadata = new _metadata.Metadata(registry, _static.default);
    registry.setMetadata(metadata);
    registry.register({
      Address: 'AccountId',
      ExtrinsicSignature: 'AnySignature'
    });
    expect(new _.GenericExtrinsicSignatureV4(registry, undefined).signFake(registry.createType('Call'), pairs.alice.address, signOptions).toHex()).toEqual('0x' + // Address = AccountId
    // 'ff' +
    'd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d' + // This is a prefix-less signature, anySignture as opposed to Multi above
    // '01' +
    '4242424242424242424242424242424242424242424242424242424242424242' + '4242424242424242424242424242424242424242424242424242424242424242' + '00a50100');
  });
});