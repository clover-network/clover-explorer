import { ApiInterfaceRx } from '@polkadot/api/types';
import { AccountId, Registration } from '@polkadot/types/interfaces';
import { ITuple } from '@polkadot/types/types';
import { DeriveAccountRegistration, DeriveHasIdentity } from '../types';
import { Observable } from 'rxjs';
import { Data, Option } from '@polkadot/types';
export declare function _identityBase(instanceId: string, api: ApiInterfaceRx): (accountId?: AccountId | Uint8Array | string) => Observable<[Option<Registration> | undefined, Option<ITuple<[AccountId, Data]>> | undefined]>;
/**
 * @name identity
 * @description Returns identity info for an account
 */
export declare function identity(instanceId: string, api: ApiInterfaceRx): (accountId?: AccountId | Uint8Array | string) => Observable<DeriveAccountRegistration>;
export declare function hasIdentity(instanceId: string, api: ApiInterfaceRx): (accountId: AccountId | Uint8Array | string) => Observable<DeriveHasIdentity>;
export declare function hasIdentityMulti(instanceId: string, api: ApiInterfaceRx): (accountIds: (AccountId | Uint8Array | string)[]) => Observable<DeriveHasIdentity[]>;
