"use strict";

var _util = require("@polkadot/util");

var _testingPairs = require("../../../keyring/src/testingPairs");

var _ = require(".");

// Copyright 2017-2020 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
describe('decodeAddress', () => {
  let keyring;
  beforeAll(() => {
    keyring = (0, _testingPairs.createTestPairs)({
      type: 'sr25519'
    });
  });
  it('decodes an address', () => {
    expect((0, _.decodeAddress)('5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY')).toEqual(keyring.alice.publicKey);
  });
  it('decodes the council address', () => {
    expect((0, _util.u8aToHex)((0, _.decodeAddress)('F3opxRbN5ZbjJNU511Kj2TLuzFcDq9BGduA9TgiECafpg29'))).toEqual((0, _util.u8aToHex)((0, _util.stringToU8a)('modlpy/trsry'.padEnd(32, '\0'))));
  });
  it('converts a publicKey (u8a) as-is', () => {
    expect((0, _.decodeAddress)(new Uint8Array([1, 2, 3]))).toEqual(new Uint8Array([1, 2, 3]));
  });
  it('converts a publicKey (hex) as-is', () => {
    expect((0, _.decodeAddress)('0x01020304')).toEqual(new Uint8Array([1, 2, 3, 4]));
  });
  it('decodes a short address', () => {
    expect((0, _.decodeAddress)('F7NZ')).toEqual(new Uint8Array([1]));
  });
  it('decodes a 1-byte accountId (with prefix)', () => {
    expect((0, _.decodeAddress)('PqtB', false, 68)).toEqual(new Uint8Array([1]));
  });
  it('decodes a 2-byte accountId', () => {
    expect((0, _.decodeAddress)('2jpAFn', false, 68)).toEqual(new Uint8Array([0, 1]));
  });
  it('encodes a 4-byte address', () => {
    expect((0, _.decodeAddress)('as7QnGMf', false, 68)).toEqual(new Uint8Array([1, 2, 3, 4]));
  });
  it('decodes a 8-byte address', () => {
    expect((0, _.decodeAddress)('4q7qY5RBG7Z4wv', false, 68)).toEqual(new Uint8Array([42, 44, 10, 0, 0, 0, 0, 0]));
  });
  it('decodes a 33-byte address', () => {
    expect((0, _.decodeAddress)('KWCv1L3QX9LDPwY4VzvLmarEmXjVJidUzZcinvVnmxAJJCBou')).toEqual((0, _util.hexToU8a)('0x03b9dc646dd71118e5f7fda681ad9eca36eb3ee96f344f582fbe7b5bcdebb13077'));
  });
  it.skip('allows invalid prefix (in list)', () => {
    expect(() => (0, _.decodeAddress)('6GfvWUvHvU8otbZ7sFhXH4eYeMcKdUkL61P3nFy52efEPVUx')).toThrow(/address prefix/);
  });
  it('fails when length is invalid', () => {
    expect(() => (0, _.decodeAddress)('y9EMHt34JJo4rWLSaxoLGdYXvjgSXEd4zHUnQgfNzwES8b')).toThrow(/address length/);
  });
  it('fails when the checksum does not match', () => {
    expect(() => (0, _.decodeAddress)('5GoKvZWG5ZPYL1WUovuHW3zJBWBP5eT8CbqjdRY4Q6iMa9cj')).toThrow(/address checksum/);
    expect(() => (0, _.decodeAddress)('5GoKvZWG5ZPYL1WUovuHW3zJBWBP5eT8CbqjdRY4Q6iMaDwU')).toThrow(/address checksum/);
  });
  it('fails when invalid base58 encoded address is found', () => {
    expect(() => (0, _util.u8aToHex)((0, _.decodeAddress)('F3opIRbN5ZbjJNU511Kj2TLuzFcDq9BGduA9TgiECafpg29'))).toThrow(/Decoding F3opIRbN5ZbjJNU511Kj2TLuzFcDq9BGduA9TgiECafpg29: Invalid base58 character "I" \(0x49\) at index 4/);
  });
});