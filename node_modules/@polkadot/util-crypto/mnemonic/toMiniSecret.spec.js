"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _util = require("@polkadot/util");

var _toMiniSecret = require("./toMiniSecret");

var _testing = _interopRequireDefault(require("../schnorrkel/keypair/testing"));

var _ = require("..");

// Copyright 2017-2020 @polkadot/util-crypto authors & contributors
// SPDX-License-Identifier: Apache-2.0
const MNEMONIC = 'seed sock milk update focus rotate barely fade car face mechanic mercy';
const SEED = '0x4d1ab2a57929edfd018aaa974e62ed557e3f54b4104acabedf73c8f5a1dbb029';
describe('mnemonicToMiniSecret', () => {
  beforeEach(async () => {
    await (0, _.cryptoWaitReady)();
  });
  [false, true].forEach(onlyJs => {
    it(`generates a valid seed (onlyJs = ${onlyJs.toString()})`, () => {
      expect((0, _util.u8aToHex)((0, _toMiniSecret.mnemonicToMiniSecret)(MNEMONIC, undefined, onlyJs))).toEqual(SEED);
    });
  });

  _testing.default.forEach(([mnemonic,, seed], index) => {
    [false, true].forEach(onlyJs => {
      it(`Created correct seed for ${index} (onlyJs = ${onlyJs.toString()})`, () => {
        expect((0, _util.u8aToHex)((0, _toMiniSecret.mnemonicToMiniSecret)(mnemonic, 'Substrate', onlyJs))).toEqual( // mini returned here, only check first 32-bytes (64 hex + 2 prefix)
        seed.substr(0, 66));
      });
    });
  });
});