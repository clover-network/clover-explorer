{"ast":null,"code":"import * as d3Force from 'd3-force'; // https://github.com/john-guerra/forceInABox/blob/master/src/forceInABox.js\n\nexport default function forceInABox() {\n  function constant(_) {\n    return function () {\n      return _;\n    };\n  }\n\n  var groupBy = function groupBy(d) {\n    return d.cluster;\n  };\n\n  var forceNodeSize = constant(1);\n  var forceCharge = constant(-1);\n  var forceLinkDistance = constant(100);\n  var forceLinkStrength = constant(0.1);\n  var offset = [0, 0];\n  var nodes = [];\n  var nodesMap = {};\n  var links = [];\n  var centerX = 100;\n  var centerY = 100;\n  var foci = {\n    none: {\n      x: 0,\n      y: 0\n    }\n  };\n  var templateNodes = [];\n  var templateForce;\n  var template = 'force';\n  var enableGrouping = true;\n  var strength = 0.1;\n\n  function force(alpha) {\n    if (!enableGrouping) {\n      return force;\n    }\n\n    templateForce.tick();\n    getFocisFromTemplate();\n\n    for (var i = 0, n = nodes.length, node = void 0, k = alpha * strength; i < n; ++i) {\n      node = nodes[i];\n      node.vx += (foci[groupBy(node)].x - node.x) * k;\n      node.vy += (foci[groupBy(node)].y - node.y) * k;\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    initializeWithForce();\n  }\n\n  function initializeWithForce() {\n    if (!nodes || !nodes.length) {\n      return;\n    }\n\n    if (groupBy(nodes[0]) === undefined) {\n      throw Error(\"Couldnt find the grouping attribute for the nodes. Make sure to set it up with forceInABox.groupBy('clusterAttr') before calling .links()\");\n    } // checkLinksAsObjects();\n\n\n    var net = getGroupsGraph();\n    templateForce = d3Force.forceSimulation(net.nodes).force('x', d3Force.forceX(centerX).strength(0.1)).force('y', d3Force.forceY(centerY).strength(0.1)).force('collide', d3Force.forceCollide(function (d) {\n      return d.r;\n    }).iterations(4)).force('charge', d3Force.forceManyBody().strength(forceCharge)).force('links', d3Force.forceLink(net.nodes.length ? net.links : []).distance(forceLinkDistance).strength(forceLinkStrength));\n    templateNodes = templateForce.nodes();\n    getFocisFromTemplate();\n  }\n\n  function getGroupsGraph() {\n    var gnodes = [];\n    var glinks = [];\n    var dNodes = {};\n    var clustersList = [],\n        clustersCounts = {},\n        clustersLinks = [];\n    clustersCounts = computeClustersNodeCounts(nodes);\n    clustersLinks = computeClustersLinkCounts(links);\n    clustersList = Object.keys(clustersCounts);\n    clustersList.forEach(function (key, index) {\n      var val = clustersCounts[key]; // Uses approx meta-node size\n\n      gnodes.push({\n        id: key,\n        size: val.count,\n        r: Math.sqrt(val.sumforceNodeSize / Math.PI)\n      });\n      dNodes[key] = index;\n    });\n    clustersLinks.forEach(function (l) {\n      var source = dNodes[l.source];\n      var target = dNodes[l.target];\n\n      if (source !== undefined && target !== undefined) {\n        glinks.push({\n          source: source,\n          target: target,\n          count: l.count\n        });\n      }\n    });\n    return {\n      nodes: gnodes,\n      links: glinks\n    };\n  }\n\n  function computeClustersNodeCounts(nodes) {\n    var clustersCounts = {};\n    nodes.forEach(function (d) {\n      var key = groupBy(d);\n\n      if (!clustersCounts[key]) {\n        clustersCounts[key] = {\n          count: 0,\n          sumforceNodeSize: 0\n        };\n      }\n    });\n    nodes.forEach(function (d) {\n      var key = groupBy(d);\n      var nodeSize = forceNodeSize(d);\n      var tmpCount = clustersCounts[key];\n      tmpCount.count = tmpCount.count + 1;\n      tmpCount.sumforceNodeSize = tmpCount.sumforceNodeSize + Math.PI * (nodeSize * nodeSize) * 1.3;\n      clustersCounts[key] = tmpCount;\n    });\n    return clustersCounts;\n  }\n\n  function computeClustersLinkCounts(links) {\n    var dClusterLinks = {};\n    var clusterLinks = [];\n    links.forEach(function (l) {\n      var key = getLinkKey(l);\n      var count = 0;\n\n      if (dClusterLinks[key] !== undefined) {\n        count = dClusterLinks[key];\n      }\n\n      count += 1;\n      dClusterLinks[key] = count;\n    });\n    var entries = Object.entries(dClusterLinks);\n    entries.forEach(function (_a) {\n      var key = _a[0],\n          count = _a[1];\n      var source = key.split('~')[0];\n      var target = key.split('~')[1];\n\n      if (source !== undefined && target !== undefined) {\n        clusterLinks.push({\n          source: source,\n          target: target,\n          count: count\n        });\n      }\n    });\n    return clusterLinks;\n  }\n\n  function getFocisFromTemplate() {\n    foci = {\n      none: {\n        x: 0,\n        y: 0\n      }\n    };\n    templateNodes.forEach(function (d) {\n      foci[d.id] = {\n        x: d.x - offset[0],\n        y: d.y - offset[1]\n      };\n    });\n    return foci;\n  }\n\n  function getLinkKey(l) {\n    var sourceID = groupBy(nodesMap[l.source]);\n    var targetID = groupBy(nodesMap[l.target]);\n    return sourceID <= targetID ? sourceID + \"~\" + targetID : targetID + \"~\" + sourceID;\n  }\n\n  function genNodesMap(nodes) {\n    nodesMap = {};\n    nodes.forEach(function (node) {\n      nodesMap[node.id] = node;\n    });\n  }\n\n  function setTemplate(x) {\n    if (!arguments.length) return template;\n    template = x;\n    initialize();\n    return force;\n  }\n\n  function setGroupBy(x) {\n    if (!arguments.length) return groupBy;\n\n    if (typeof x === 'string') {\n      groupBy = function groupBy(d) {\n        return d[x];\n      };\n\n      return force;\n    }\n\n    groupBy = x;\n    return force;\n  }\n\n  function setEnableGrouping(x) {\n    if (!arguments.length) return enableGrouping;\n    enableGrouping = x;\n    return force;\n  }\n\n  function setStrength(x) {\n    if (!arguments.length) return strength;\n    strength = x;\n    return force;\n  }\n\n  function setCenterX(_) {\n    if (arguments.length) {\n      centerX = _;\n      return force;\n    }\n\n    return centerX;\n  }\n\n  function setCenterY(_) {\n    if (arguments.length) {\n      centerY = _;\n      return force;\n    }\n\n    return centerY;\n  }\n\n  function setNodes(_) {\n    if (arguments.length) {\n      genNodesMap(_ || []);\n      nodes = _ || [];\n      return force;\n    }\n\n    return nodes;\n  }\n\n  function setLinks(_) {\n    if (arguments.length) {\n      links = _ || [];\n      initialize();\n      return force;\n    }\n\n    return links;\n  }\n\n  function setForceNodeSize(_) {\n    if (arguments.length) {\n      if (typeof _ === 'function') {\n        forceNodeSize = _;\n      } else {\n        forceNodeSize = constant(+_);\n      }\n\n      initialize();\n      return force;\n    }\n\n    return forceNodeSize;\n  }\n\n  function setForceCharge(_) {\n    if (arguments.length) {\n      if (typeof _ === 'function') {\n        forceCharge = _;\n      } else {\n        forceCharge = constant(+_);\n      }\n\n      initialize();\n      return force;\n    }\n\n    return forceCharge;\n  }\n\n  function setForceLinkDistance(_) {\n    if (arguments.length) {\n      if (typeof _ === 'function') {\n        forceLinkDistance = _;\n      } else {\n        forceLinkDistance = constant(+_);\n      }\n\n      initialize();\n      return force;\n    }\n\n    return forceLinkDistance;\n  }\n\n  function setForceLinkStrength(_) {\n    if (arguments.length) {\n      if (typeof _ === 'function') {\n        forceLinkStrength = _;\n      } else {\n        forceLinkStrength = constant(+_);\n      }\n\n      initialize();\n      return force;\n    }\n\n    return forceLinkStrength;\n  }\n\n  function setOffset(_) {\n    if (arguments.length) {\n      offset = _;\n      return force;\n    }\n\n    return offset;\n  }\n\n  force.initialize = function (_) {\n    nodes = _;\n    initialize();\n  };\n\n  force.template = setTemplate;\n  force.groupBy = setGroupBy;\n  force.enableGrouping = setEnableGrouping;\n  force.strength = setStrength;\n  force.centerX = setCenterX;\n  force.centerY = setCenterY;\n  force.nodes = setNodes;\n  force.links = setLinks;\n  force.forceNodeSize = setForceNodeSize; // Legacy support\n\n  force.nodeSize = force.forceNodeSize;\n  force.forceCharge = setForceCharge;\n  force.forceLinkDistance = setForceLinkDistance;\n  force.forceLinkStrength = setForceLinkStrength;\n  force.offset = setOffset;\n  force.getFocis = getFocisFromTemplate;\n  return force;\n}","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/@antv/g6/es/layout/force/force-in-a-box.js"],"names":["d3Force","forceInABox","constant","_","groupBy","d","cluster","forceNodeSize","forceCharge","forceLinkDistance","forceLinkStrength","offset","nodes","nodesMap","links","centerX","centerY","foci","none","x","y","templateNodes","templateForce","template","enableGrouping","strength","force","alpha","tick","getFocisFromTemplate","i","n","length","node","k","vx","vy","initialize","initializeWithForce","undefined","Error","net","getGroupsGraph","forceSimulation","forceX","forceY","forceCollide","r","iterations","forceManyBody","forceLink","distance","gnodes","glinks","dNodes","clustersList","clustersCounts","clustersLinks","computeClustersNodeCounts","computeClustersLinkCounts","Object","keys","forEach","key","index","val","push","id","size","count","Math","sqrt","sumforceNodeSize","PI","l","source","target","nodeSize","tmpCount","dClusterLinks","clusterLinks","getLinkKey","entries","_a","split","sourceID","targetID","genNodesMap","setTemplate","arguments","setGroupBy","setEnableGrouping","setStrength","setCenterX","setCenterY","setNodes","setLinks","setForceNodeSize","setForceCharge","setForceLinkDistance","setForceLinkStrength","setOffset","getFocis"],"mappings":"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","sourcesContent":["import * as d3Force from 'd3-force'; // https://github.com/john-guerra/forceInABox/blob/master/src/forceInABox.js\n\nexport default function forceInABox() {\n  function constant(_) {\n    return function () {\n      return _;\n    };\n  }\n\n  var groupBy = function groupBy(d) {\n    return d.cluster;\n  };\n\n  var forceNodeSize = constant(1);\n  var forceCharge = constant(-1);\n  var forceLinkDistance = constant(100);\n  var forceLinkStrength = constant(0.1);\n  var offset = [0, 0];\n  var nodes = [];\n  var nodesMap = {};\n  var links = [];\n  var centerX = 100;\n  var centerY = 100;\n  var foci = {\n    none: {\n      x: 0,\n      y: 0\n    }\n  };\n  var templateNodes = [];\n  var templateForce;\n  var template = 'force';\n  var enableGrouping = true;\n  var strength = 0.1;\n\n  function force(alpha) {\n    if (!enableGrouping) {\n      return force;\n    }\n\n    templateForce.tick();\n    getFocisFromTemplate();\n\n    for (var i = 0, n = nodes.length, node = void 0, k = alpha * strength; i < n; ++i) {\n      node = nodes[i];\n      node.vx += (foci[groupBy(node)].x - node.x) * k;\n      node.vy += (foci[groupBy(node)].y - node.y) * k;\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    initializeWithForce();\n  }\n\n  function initializeWithForce() {\n    if (!nodes || !nodes.length) {\n      return;\n    }\n\n    if (groupBy(nodes[0]) === undefined) {\n      throw Error(\"Couldnt find the grouping attribute for the nodes. Make sure to set it up with forceInABox.groupBy('clusterAttr') before calling .links()\");\n    } // checkLinksAsObjects();\n\n\n    var net = getGroupsGraph();\n    templateForce = d3Force.forceSimulation(net.nodes).force('x', d3Force.forceX(centerX).strength(0.1)).force('y', d3Force.forceY(centerY).strength(0.1)).force('collide', d3Force.forceCollide(function (d) {\n      return d.r;\n    }).iterations(4)).force('charge', d3Force.forceManyBody().strength(forceCharge)).force('links', d3Force.forceLink(net.nodes.length ? net.links : []).distance(forceLinkDistance).strength(forceLinkStrength));\n    templateNodes = templateForce.nodes();\n    getFocisFromTemplate();\n  }\n\n  function getGroupsGraph() {\n    var gnodes = [];\n    var glinks = [];\n    var dNodes = {};\n    var clustersList = [],\n        clustersCounts = {},\n        clustersLinks = [];\n    clustersCounts = computeClustersNodeCounts(nodes);\n    clustersLinks = computeClustersLinkCounts(links);\n    clustersList = Object.keys(clustersCounts);\n    clustersList.forEach(function (key, index) {\n      var val = clustersCounts[key]; // Uses approx meta-node size\n\n      gnodes.push({\n        id: key,\n        size: val.count,\n        r: Math.sqrt(val.sumforceNodeSize / Math.PI)\n      });\n      dNodes[key] = index;\n    });\n    clustersLinks.forEach(function (l) {\n      var source = dNodes[l.source];\n      var target = dNodes[l.target];\n\n      if (source !== undefined && target !== undefined) {\n        glinks.push({\n          source: source,\n          target: target,\n          count: l.count\n        });\n      }\n    });\n    return {\n      nodes: gnodes,\n      links: glinks\n    };\n  }\n\n  function computeClustersNodeCounts(nodes) {\n    var clustersCounts = {};\n    nodes.forEach(function (d) {\n      var key = groupBy(d);\n\n      if (!clustersCounts[key]) {\n        clustersCounts[key] = {\n          count: 0,\n          sumforceNodeSize: 0\n        };\n      }\n    });\n    nodes.forEach(function (d) {\n      var key = groupBy(d);\n      var nodeSize = forceNodeSize(d);\n      var tmpCount = clustersCounts[key];\n      tmpCount.count = tmpCount.count + 1;\n      tmpCount.sumforceNodeSize = tmpCount.sumforceNodeSize + Math.PI * (nodeSize * nodeSize) * 1.3;\n      clustersCounts[key] = tmpCount;\n    });\n    return clustersCounts;\n  }\n\n  function computeClustersLinkCounts(links) {\n    var dClusterLinks = {};\n    var clusterLinks = [];\n    links.forEach(function (l) {\n      var key = getLinkKey(l);\n      var count = 0;\n\n      if (dClusterLinks[key] !== undefined) {\n        count = dClusterLinks[key];\n      }\n\n      count += 1;\n      dClusterLinks[key] = count;\n    });\n    var entries = Object.entries(dClusterLinks);\n    entries.forEach(function (_a) {\n      var key = _a[0],\n          count = _a[1];\n      var source = key.split('~')[0];\n      var target = key.split('~')[1];\n\n      if (source !== undefined && target !== undefined) {\n        clusterLinks.push({\n          source: source,\n          target: target,\n          count: count\n        });\n      }\n    });\n    return clusterLinks;\n  }\n\n  function getFocisFromTemplate() {\n    foci = {\n      none: {\n        x: 0,\n        y: 0\n      }\n    };\n    templateNodes.forEach(function (d) {\n      foci[d.id] = {\n        x: d.x - offset[0],\n        y: d.y - offset[1]\n      };\n    });\n    return foci;\n  }\n\n  function getLinkKey(l) {\n    var sourceID = groupBy(nodesMap[l.source]);\n    var targetID = groupBy(nodesMap[l.target]);\n    return sourceID <= targetID ? sourceID + \"~\" + targetID : targetID + \"~\" + sourceID;\n  }\n\n  function genNodesMap(nodes) {\n    nodesMap = {};\n    nodes.forEach(function (node) {\n      nodesMap[node.id] = node;\n    });\n  }\n\n  function setTemplate(x) {\n    if (!arguments.length) return template;\n    template = x;\n    initialize();\n    return force;\n  }\n\n  function setGroupBy(x) {\n    if (!arguments.length) return groupBy;\n\n    if (typeof x === 'string') {\n      groupBy = function groupBy(d) {\n        return d[x];\n      };\n\n      return force;\n    }\n\n    groupBy = x;\n    return force;\n  }\n\n  function setEnableGrouping(x) {\n    if (!arguments.length) return enableGrouping;\n    enableGrouping = x;\n    return force;\n  }\n\n  function setStrength(x) {\n    if (!arguments.length) return strength;\n    strength = x;\n    return force;\n  }\n\n  function setCenterX(_) {\n    if (arguments.length) {\n      centerX = _;\n      return force;\n    }\n\n    return centerX;\n  }\n\n  function setCenterY(_) {\n    if (arguments.length) {\n      centerY = _;\n      return force;\n    }\n\n    return centerY;\n  }\n\n  function setNodes(_) {\n    if (arguments.length) {\n      genNodesMap(_ || []);\n      nodes = _ || [];\n      return force;\n    }\n\n    return nodes;\n  }\n\n  function setLinks(_) {\n    if (arguments.length) {\n      links = _ || [];\n      initialize();\n      return force;\n    }\n\n    return links;\n  }\n\n  function setForceNodeSize(_) {\n    if (arguments.length) {\n      if (typeof _ === 'function') {\n        forceNodeSize = _;\n      } else {\n        forceNodeSize = constant(+_);\n      }\n\n      initialize();\n      return force;\n    }\n\n    return forceNodeSize;\n  }\n\n  function setForceCharge(_) {\n    if (arguments.length) {\n      if (typeof _ === 'function') {\n        forceCharge = _;\n      } else {\n        forceCharge = constant(+_);\n      }\n\n      initialize();\n      return force;\n    }\n\n    return forceCharge;\n  }\n\n  function setForceLinkDistance(_) {\n    if (arguments.length) {\n      if (typeof _ === 'function') {\n        forceLinkDistance = _;\n      } else {\n        forceLinkDistance = constant(+_);\n      }\n\n      initialize();\n      return force;\n    }\n\n    return forceLinkDistance;\n  }\n\n  function setForceLinkStrength(_) {\n    if (arguments.length) {\n      if (typeof _ === 'function') {\n        forceLinkStrength = _;\n      } else {\n        forceLinkStrength = constant(+_);\n      }\n\n      initialize();\n      return force;\n    }\n\n    return forceLinkStrength;\n  }\n\n  function setOffset(_) {\n    if (arguments.length) {\n      offset = _;\n      return force;\n    }\n\n    return offset;\n  }\n\n  force.initialize = function (_) {\n    nodes = _;\n    initialize();\n  };\n\n  force.template = setTemplate;\n  force.groupBy = setGroupBy;\n  force.enableGrouping = setEnableGrouping;\n  force.strength = setStrength;\n  force.centerX = setCenterX;\n  force.centerY = setCenterY;\n  force.nodes = setNodes;\n  force.links = setLinks;\n  force.forceNodeSize = setForceNodeSize; // Legacy support\n\n  force.nodeSize = force.forceNodeSize;\n  force.forceCharge = setForceCharge;\n  force.forceLinkDistance = setForceLinkDistance;\n  force.forceLinkStrength = setForceLinkStrength;\n  force.offset = setOffset;\n  force.getFocis = getFocisFromTemplate;\n  return force;\n}"]},"metadata":{},"sourceType":"module"}