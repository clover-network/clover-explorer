{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { map } from '@antv/util';\nimport { flow, findGeometry } from '../../../utils';\nimport { getTooltipMapping } from '../../../utils/tooltip';\nimport { geometry as baseGeometry } from '../../../adaptor/geometries/base';\nimport { FUNNEL_CONVERSATION, FUNNEL_PERCENT } from '../constant';\nimport { geometryLabel, conversionTagComponent } from './common';\n/**\n * 处理字段数据\n * @param params\n */\n\nfunction field(params) {\n  var chart = params.chart,\n      options = params.options;\n  var _a = options.data,\n      data = _a === void 0 ? [] : _a,\n      yField = options.yField;\n  var formatData = []; // format 数据\n\n  if (data[0][yField]) {\n    formatData = map(data, function (row, index) {\n      if (row[yField] !== undefined) {\n        row[FUNNEL_PERCENT] = row[yField] / data[0][yField];\n        row[FUNNEL_CONVERSATION] = index === 0 ? 1 : row[yField] / data[index - 1][yField];\n      }\n\n      return row;\n    });\n  } // 绘制漏斗图\n\n\n  chart.data(formatData);\n  return params;\n}\n/**\n * geometry处理\n * @param params\n */\n\n\nfunction geometry(params) {\n  var chart = params.chart,\n      options = params.options;\n  var xField = options.xField,\n      yField = options.yField,\n      color = options.color,\n      tooltip = options.tooltip;\n\n  var _a = getTooltipMapping(tooltip, [xField, yField, FUNNEL_PERCENT, FUNNEL_CONVERSATION]),\n      fields = _a.fields,\n      formatter = _a.formatter;\n\n  baseGeometry({\n    chart: chart,\n    options: {\n      type: 'interval',\n      xField: xField,\n      yField: yField,\n      colorField: xField,\n      tooltipFields: fields,\n      mapping: {\n        shape: 'funnel',\n        tooltip: formatter,\n        color: color\n      }\n    }\n  });\n  var geo = findGeometry(params.chart, 'interval');\n  geo.adjust('symmetric');\n  return params;\n}\n/**\n * 转置处理\n * @param params\n */\n\n\nfunction transpose(params) {\n  var chart = params.chart,\n      options = params.options;\n  var isTransposed = options.isTransposed;\n  chart.coordinate({\n    type: 'rect',\n    actions: !isTransposed ? [['transpose'], ['scale', 1, -1]] : []\n  });\n  return params;\n}\n/**\n * label 处理\n * @param params\n */\n\n\nfunction label(params) {\n  geometryLabel(findGeometry(params.chart, 'interval'))(params);\n  return params;\n}\n/**\n * 转化率组件\n * @param params\n */\n\n\nfunction conversionTag(params) {\n  var options = params.options;\n  var yField = options.yField;\n\n  var getLineCoordinate = function (datum, datumIndex, data, initLineOption) {\n    var percent = 1 - (1 - datum[FUNNEL_PERCENT]) / 2;\n    return __assign(__assign({}, initLineOption), {\n      start: [datumIndex - 0.5, data[0][yField] * percent],\n      end: [datumIndex - 0.5, data[0][yField] * (percent + 0.05)]\n    });\n  };\n\n  conversionTagComponent(getLineCoordinate)(params);\n  return params;\n}\n/**\n * 基础漏斗\n * @param chart\n * @param options\n */\n\n\nexport function basicFunnel(params) {\n  return flow(field, geometry, transpose, conversionTag, label)(params);\n}","map":{"version":3,"sources":["../../../../src/plots/funnel/geometries/basic.ts"],"names":[],"mappings":"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","sourcesContent":["import { map } from '@antv/util';\nimport { LineOption } from '@antv/g2/lib/interface';\nimport { flow, findGeometry } from '../../../utils';\nimport { getTooltipMapping } from '../../../utils/tooltip';\nimport { Params } from '../../../core/adaptor';\nimport { Datum, Data } from '../../../types/common';\nimport { geometry as baseGeometry } from '../../../adaptor/geometries/base';\nimport { FunnelOptions } from '../types';\nimport { FUNNEL_CONVERSATION, FUNNEL_PERCENT } from '../constant';\nimport { geometryLabel, conversionTagComponent } from './common';\n\n/**\n * 处理字段数据\n * @param params\n */\nfunction field(params: Params<FunnelOptions>): Params<FunnelOptions> {\n  const { chart, options } = params;\n  const { data = [], yField } = options;\n  let formatData = [];\n  // format 数据\n  if (data[0][yField]) {\n    formatData = map(data, (row, index) => {\n      if (row[yField] !== undefined) {\n        row[FUNNEL_PERCENT] = row[yField] / data[0][yField];\n        row[FUNNEL_CONVERSATION] = index === 0 ? 1 : row[yField] / data[index - 1][yField];\n      }\n      return row;\n    });\n  }\n\n  // 绘制漏斗图\n  chart.data(formatData);\n  return params;\n}\n\n/**\n * geometry处理\n * @param params\n */\nfunction geometry(params: Params<FunnelOptions>): Params<FunnelOptions> {\n  const { chart, options } = params;\n  const { xField, yField, color, tooltip } = options;\n\n  const { fields, formatter } = getTooltipMapping(tooltip, [xField, yField, FUNNEL_PERCENT, FUNNEL_CONVERSATION]);\n\n  baseGeometry({\n    chart,\n    options: {\n      type: 'interval',\n      xField: xField,\n      yField: yField,\n      colorField: xField,\n      tooltipFields: fields,\n      mapping: {\n        shape: 'funnel',\n        tooltip: formatter,\n        color,\n      },\n    },\n  });\n\n  const geo = findGeometry(params.chart, 'interval');\n  geo.adjust('symmetric');\n\n  return params;\n}\n\n/**\n * 转置处理\n * @param params\n */\nfunction transpose(params: Params<FunnelOptions>): Params<FunnelOptions> {\n  const { chart, options } = params;\n  const { isTransposed } = options;\n  chart.coordinate({\n    type: 'rect',\n    actions: !isTransposed ? [['transpose'], ['scale', 1, -1]] : [],\n  });\n  return params;\n}\n\n/**\n * label 处理\n * @param params\n */\nfunction label(params: Params<FunnelOptions>): Params<FunnelOptions> {\n  geometryLabel(findGeometry(params.chart, 'interval'))(params);\n\n  return params;\n}\n\n/**\n * 转化率组件\n * @param params\n */\nfunction conversionTag(params: Params<FunnelOptions>): Params<FunnelOptions> {\n  const { options } = params;\n  const { yField } = options;\n\n  const getLineCoordinate = (\n    datum: Datum,\n    datumIndex: number,\n    data: Data,\n    initLineOption: Record<string, any>\n  ): LineOption => {\n    const percent = 1 - (1 - datum[FUNNEL_PERCENT]) / 2;\n    return {\n      ...initLineOption,\n      start: [datumIndex - 0.5, data[0][yField] * percent],\n      end: [datumIndex - 0.5, data[0][yField] * (percent + 0.05)],\n    };\n  };\n\n  conversionTagComponent(getLineCoordinate)(params);\n\n  return params;\n}\n\n/**\n * 基础漏斗\n * @param chart\n * @param options\n */\nexport function basicFunnel(params: Params<FunnelOptions>) {\n  return flow(field, geometry, transpose, conversionTag, label)(params);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}