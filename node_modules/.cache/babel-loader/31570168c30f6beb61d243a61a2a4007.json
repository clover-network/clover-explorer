{"ast":null,"code":"function initCallbacks(callbacks) {\n  if (callbacks === void 0) {\n    callbacks = {};\n  }\n\n  var initiatedCallback = callbacks;\n\n  var stubCallback = function stubCallback() {};\n\n  var allowTraversalCallback = function () {\n    var seen = {};\n    return function (_a) {\n      var next = _a.next;\n\n      if (!seen[next.get('id')]) {\n        seen[next.get('id')] = true;\n        return true;\n      }\n\n      return false;\n    };\n  }();\n\n  initiatedCallback.allowTraversal = callbacks.allowTraversal || allowTraversalCallback;\n  initiatedCallback.enter = callbacks.enter || stubCallback;\n  initiatedCallback.leave = callbacks.leave || stubCallback;\n  return initiatedCallback;\n}\n/**\n * @param {Graph} graph\n * @param {GraphNode} currentNode\n * @param {GraphNode} previousNode\n * @param {Callbacks} callbacks\n */\n\n\nfunction depthFirstSearchRecursive(graph, currentNode, previousNode, callbacks) {\n  callbacks.enter({\n    current: currentNode,\n    previous: previousNode\n  });\n  graph.getNeighbors(currentNode, 'target').forEach(function (nextNode) {\n    if (callbacks.allowTraversal({\n      previous: previousNode,\n      current: currentNode,\n      next: nextNode\n    })) {\n      depthFirstSearchRecursive(graph, nextNode, currentNode, callbacks);\n    }\n  });\n  callbacks.leave({\n    current: currentNode,\n    previous: previousNode\n  });\n}\n/**\n * 深度优先遍历图\n * @param data GraphData 图数据\n * @param startNodeId 开始遍历的节点的 ID\n * @param originalCallbacks 回调\n */\n\n\nexport default function depthFirstSearch(graph, startNodeId, callbacks) {\n  var previousNode = null;\n  var startNode = graph.findById(startNodeId);\n  depthFirstSearchRecursive(graph, startNode, previousNode, initCallbacks(callbacks));\n}","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/@antv/g6/es/algorithm/dfs.js"],"names":["initCallbacks","callbacks","initiatedCallback","stubCallback","allowTraversalCallback","seen","_a","next","get","allowTraversal","enter","leave","depthFirstSearchRecursive","graph","currentNode","previousNode","current","previous","getNeighbors","forEach","nextNode","depthFirstSearch","startNodeId","startNode","findById"],"mappings":"AAAA,SAASA,aAAT,CAAuBC,SAAvB,EAAkC;AAChC,MAAIA,SAAS,KAAK,KAAK,CAAvB,EAA0B;AACxBA,IAAAA,SAAS,GAAG,EAAZ;AACD;;AAED,MAAIC,iBAAiB,GAAGD,SAAxB;;AAEA,MAAIE,YAAY,GAAG,SAASA,YAAT,GAAwB,CAAE,CAA7C;;AAEA,MAAIC,sBAAsB,GAAG,YAAY;AACvC,QAAIC,IAAI,GAAG,EAAX;AACA,WAAO,UAAUC,EAAV,EAAc;AACnB,UAAIC,IAAI,GAAGD,EAAE,CAACC,IAAd;;AAEA,UAAI,CAACF,IAAI,CAACE,IAAI,CAACC,GAAL,CAAS,IAAT,CAAD,CAAT,EAA2B;AACzBH,QAAAA,IAAI,CAACE,IAAI,CAACC,GAAL,CAAS,IAAT,CAAD,CAAJ,GAAuB,IAAvB;AACA,eAAO,IAAP;AACD;;AAED,aAAO,KAAP;AACD,KATD;AAUD,GAZ4B,EAA7B;;AAcAN,EAAAA,iBAAiB,CAACO,cAAlB,GAAmCR,SAAS,CAACQ,cAAV,IAA4BL,sBAA/D;AACAF,EAAAA,iBAAiB,CAACQ,KAAlB,GAA0BT,SAAS,CAACS,KAAV,IAAmBP,YAA7C;AACAD,EAAAA,iBAAiB,CAACS,KAAlB,GAA0BV,SAAS,CAACU,KAAV,IAAmBR,YAA7C;AACA,SAAOD,iBAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASU,yBAAT,CAAmCC,KAAnC,EAA0CC,WAA1C,EAAuDC,YAAvD,EAAqEd,SAArE,EAAgF;AAC9EA,EAAAA,SAAS,CAACS,KAAV,CAAgB;AACdM,IAAAA,OAAO,EAAEF,WADK;AAEdG,IAAAA,QAAQ,EAAEF;AAFI,GAAhB;AAIAF,EAAAA,KAAK,CAACK,YAAN,CAAmBJ,WAAnB,EAAgC,QAAhC,EAA0CK,OAA1C,CAAkD,UAAUC,QAAV,EAAoB;AACpE,QAAInB,SAAS,CAACQ,cAAV,CAAyB;AAC3BQ,MAAAA,QAAQ,EAAEF,YADiB;AAE3BC,MAAAA,OAAO,EAAEF,WAFkB;AAG3BP,MAAAA,IAAI,EAAEa;AAHqB,KAAzB,CAAJ,EAII;AACFR,MAAAA,yBAAyB,CAACC,KAAD,EAAQO,QAAR,EAAkBN,WAAlB,EAA+Bb,SAA/B,CAAzB;AACD;AACF,GARD;AASAA,EAAAA,SAAS,CAACU,KAAV,CAAgB;AACdK,IAAAA,OAAO,EAAEF,WADK;AAEdG,IAAAA,QAAQ,EAAEF;AAFI,GAAhB;AAID;AACD;AACA;AACA;AACA;AACA;AACA;;;AAGA,eAAe,SAASM,gBAAT,CAA0BR,KAA1B,EAAiCS,WAAjC,EAA8CrB,SAA9C,EAAyD;AACtE,MAAIc,YAAY,GAAG,IAAnB;AACA,MAAIQ,SAAS,GAAGV,KAAK,CAACW,QAAN,CAAeF,WAAf,CAAhB;AACAV,EAAAA,yBAAyB,CAACC,KAAD,EAAQU,SAAR,EAAmBR,YAAnB,EAAiCf,aAAa,CAACC,SAAD,CAA9C,CAAzB;AACD","sourcesContent":["function initCallbacks(callbacks) {\n  if (callbacks === void 0) {\n    callbacks = {};\n  }\n\n  var initiatedCallback = callbacks;\n\n  var stubCallback = function stubCallback() {};\n\n  var allowTraversalCallback = function () {\n    var seen = {};\n    return function (_a) {\n      var next = _a.next;\n\n      if (!seen[next.get('id')]) {\n        seen[next.get('id')] = true;\n        return true;\n      }\n\n      return false;\n    };\n  }();\n\n  initiatedCallback.allowTraversal = callbacks.allowTraversal || allowTraversalCallback;\n  initiatedCallback.enter = callbacks.enter || stubCallback;\n  initiatedCallback.leave = callbacks.leave || stubCallback;\n  return initiatedCallback;\n}\n/**\n * @param {Graph} graph\n * @param {GraphNode} currentNode\n * @param {GraphNode} previousNode\n * @param {Callbacks} callbacks\n */\n\n\nfunction depthFirstSearchRecursive(graph, currentNode, previousNode, callbacks) {\n  callbacks.enter({\n    current: currentNode,\n    previous: previousNode\n  });\n  graph.getNeighbors(currentNode, 'target').forEach(function (nextNode) {\n    if (callbacks.allowTraversal({\n      previous: previousNode,\n      current: currentNode,\n      next: nextNode\n    })) {\n      depthFirstSearchRecursive(graph, nextNode, currentNode, callbacks);\n    }\n  });\n  callbacks.leave({\n    current: currentNode,\n    previous: previousNode\n  });\n}\n/**\n * 深度优先遍历图\n * @param data GraphData 图数据\n * @param startNodeId 开始遍历的节点的 ID\n * @param originalCallbacks 回调\n */\n\n\nexport default function depthFirstSearch(graph, startNodeId, callbacks) {\n  var previousNode = null;\n  var startNode = graph.findById(startNodeId);\n  depthFirstSearchRecursive(graph, startNode, previousNode, initCallbacks(callbacks));\n}"]},"metadata":{},"sourceType":"module"}