{"ast":null,"code":"import { flow, deepAssign } from '../../utils';\nimport { scale, theme, animation, annotation, tooltip } from '../../adaptor/common';\nimport { line, point } from '../../adaptor/geometries';\nimport { adjustYMetaByZero } from '../../utils/data';\nimport { X_FIELD, Y_FIELD } from './constants';\n/**\n * 字段\n * @param params\n */\n\nfunction geometry(params) {\n  var _a, _b;\n\n  var chart = params.chart,\n      options = params.options;\n  var data = options.data,\n      xAxis = options.xAxis,\n      yAxis = options.yAxis,\n      color = options.color,\n      lineStyle = options.lineStyle,\n      pointMapping = options.point;\n  var seriesData = data.map(function (y, x) {\n    return {\n      x: x,\n      y: y\n    };\n  });\n  chart.data(seriesData); // line geometry 处理\n\n  var p = deepAssign({}, params, {\n    options: {\n      xField: X_FIELD,\n      yField: Y_FIELD,\n      line: {\n        color: color,\n        style: lineStyle\n      },\n      point: pointMapping\n    }\n  });\n  line(p);\n  point(p);\n  chart.axis(false);\n  chart.legend(false); // scale\n\n  scale((_a = {}, _a[X_FIELD] = xAxis, _a[Y_FIELD] = yAxis, _a), (_b = {}, _b[X_FIELD] = {\n    type: 'cat'\n  }, _b[Y_FIELD] = adjustYMetaByZero(seriesData, Y_FIELD), _b))(params);\n  return params;\n}\n/**\n * 迷你折线图适配器\n * @param chart\n * @param options\n */\n\n\nexport function adaptor(params) {\n  return flow(geometry, theme, tooltip, animation, annotation())(params);\n}","map":{"version":3,"sources":["../../../src/plots/tiny-line/adaptor.ts"],"names":[],"mappings":"AACA,SAAS,IAAT,EAAe,UAAf,QAAiC,aAAjC;AACA,SAAS,KAAT,EAAgB,KAAhB,EAAuB,SAAvB,EAAkC,UAAlC,EAA8C,OAA9C,QAA6D,sBAA7D;AACA,SAAS,IAAT,EAAe,KAAf,QAA4B,0BAA5B;AACA,SAAS,iBAAT,QAAkC,kBAAlC;AAEA,SAAS,OAAT,EAAkB,OAAlB,QAAiC,aAAjC;AAEA;;;AAGG;;AACH,SAAS,QAAT,CAAkB,MAAlB,EAAiD;;;AACvC,MAAA,KAAK,GAAc,MAAM,CAApB,KAAL;AAAA,MAAO,OAAO,GAAK,MAAM,CAAX,OAAd;AACA,MAAA,IAAI,GAA0D,OAAO,CAAjE,IAAJ;AAAA,MAAM,KAAK,GAAmD,OAAO,CAA1D,KAAX;AAAA,MAAa,KAAK,GAA4C,OAAO,CAAnD,KAAlB;AAAA,MAAoB,KAAK,GAAqC,OAAO,CAA5C,KAAzB;AAAA,MAA2B,SAAS,GAA0B,OAAO,CAAjC,SAApC;AAAA,MAA6C,YAAY,GAAK,OAAO,CAAZ,KAAzD;AAER,MAAM,UAAU,GAAG,IAAI,CAAC,GAAL,CAAS,UAAC,CAAD,EAAY,CAAZ,EAAqB;AAC/C,WAAO;AAAE,MAAA,CAAC,EAAA,CAAH;AAAK,MAAA,CAAC,EAAA;AAAN,KAAP;AACD,GAFkB,CAAnB;AAIA,EAAA,KAAK,CAAC,IAAN,CAAW,UAAX,EAR+C,CAU/C;;AACA,MAAM,CAAC,GAAG,UAAU,CAAC,EAAD,EAAK,MAAL,EAAa;AAC/B,IAAA,OAAO,EAAE;AACP,MAAA,MAAM,EAAE,OADD;AAEP,MAAA,MAAM,EAAE,OAFD;AAGP,MAAA,IAAI,EAAE;AACJ,QAAA,KAAK,EAAA,KADD;AAEJ,QAAA,KAAK,EAAE;AAFH,OAHC;AAOP,MAAA,KAAK,EAAE;AAPA;AADsB,GAAb,CAApB;AAYA,EAAA,IAAI,CAAC,CAAD,CAAJ;AACA,EAAA,KAAK,CAAC,CAAD,CAAL;AAEA,EAAA,KAAK,CAAC,IAAN,CAAW,KAAX;AACA,EAAA,KAAK,CAAC,MAAN,CAAa,KAAb,EA3B+C,CA6B/C;;AACA,EAAA,KAAK,EAAA,EAAA,GAAA,EAAA,EAED,EAAA,CAAC,OAAD,CAAA,GAAW,KAFV,EAGD,EAAA,CAAC,OAAD,CAAA,GAAW,KAHV,E,EAAA,I,SAMD,EAAA,CAAC,OAAD,CAAA,GAAW;AACT,IAAA,IAAI,EAAE;AADG,G,EAGX,EAAA,CAAC,OAAD,CAAA,GAAW,iBAAiB,CAAC,UAAD,EAAa,OAAb,C,EAE/B,EAXI,EAAL,CAWE,MAXF;AAaA,SAAO,MAAP;AACD;AAED;;;;AAIG;;;AACH,OAAM,SAAU,OAAV,CAAkB,MAAlB,EAAiD;AACrD,SAAO,IAAI,CAAC,QAAD,EAAW,KAAX,EAAkB,OAAlB,EAA2B,SAA3B,EAAsC,UAAU,EAAhD,CAAJ,CAAwD,MAAxD,CAAP;AACD","sourcesContent":["import { Params } from '../../core/adaptor';\nimport { flow, deepAssign } from '../../utils';\nimport { scale, theme, animation, annotation, tooltip } from '../../adaptor/common';\nimport { line, point } from '../../adaptor/geometries';\nimport { adjustYMetaByZero } from '../../utils/data';\nimport { TinyLineOptions } from './types';\nimport { X_FIELD, Y_FIELD } from './constants';\n\n/**\n * 字段\n * @param params\n */\nfunction geometry(params: Params<TinyLineOptions>): Params<TinyLineOptions> {\n  const { chart, options } = params;\n  const { data, xAxis, yAxis, color, lineStyle, point: pointMapping } = options;\n\n  const seriesData = data.map((y: number, x: number) => {\n    return { x, y };\n  });\n\n  chart.data(seriesData);\n\n  // line geometry 处理\n  const p = deepAssign({}, params, {\n    options: {\n      xField: X_FIELD,\n      yField: Y_FIELD,\n      line: {\n        color,\n        style: lineStyle,\n      },\n      point: pointMapping,\n    },\n  });\n\n  line(p);\n  point(p);\n\n  chart.axis(false);\n  chart.legend(false);\n\n  // scale\n  scale(\n    {\n      [X_FIELD]: xAxis,\n      [Y_FIELD]: yAxis,\n    },\n    {\n      [X_FIELD]: {\n        type: 'cat',\n      },\n      [Y_FIELD]: adjustYMetaByZero(seriesData, Y_FIELD),\n    }\n  )(params);\n\n  return params;\n}\n\n/**\n * 迷你折线图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<TinyLineOptions>) {\n  return flow(geometry, theme, tooltip, animation, annotation())(params);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}