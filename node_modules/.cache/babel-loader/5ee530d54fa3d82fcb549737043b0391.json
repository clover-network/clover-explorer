{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar segments_1 = require(\"./segments\");\n\nvar util_1 = require(\"./util\");\n\nexports.default = {\n  /**\n   * 计算多折线的包围盒\n   * @param {array} points 点的集合 [x,y] 的形式\n   * @return {object} 包围盒\n   */\n  box: function (points) {\n    var xArr = [];\n    var yArr = [];\n\n    for (var i = 0; i < points.length; i++) {\n      var point = points[i];\n      xArr.push(point[0]);\n      yArr.push(point[1]);\n    }\n\n    return util_1.getBBoxByArray(xArr, yArr);\n  },\n\n  /**\n   * 计算多折线的长度\n   * @param {array} points 点的集合 [x,y] 的形式\n   * @return {object} 多条边的长度\n   */\n  length: function (points) {\n    return segments_1.lengthOfSegment(points);\n  },\n\n  /**\n   * 根据比例获取多折线的点\n   * @param {array} points 点的集合 [x,y] 的形式\n   * @param {number} t 在多折线的长度上的比例\n   * @return {object} 根据比例值计算出来的点\n   */\n  pointAt: function (points, t) {\n    return segments_1.pointAtSegments(points, t);\n  },\n\n  /**\n   * 指定点到多折线的距离\n   * @param {array} points 点的集合 [x,y] 的形式\n   * @param {number} x 指定点的 x\n   * @param {number} y 指定点的 y\n   * @return {number} 点到多折线的距离\n   */\n  pointDistance: function (points, x, y) {\n    return segments_1.distanceAtSegment(points, x, y);\n  },\n\n  /**\n   * 根据比例获取多折线的切线角度\n   * @param {array} points 点的集合 [x,y] 的形式\n   * @param {number} t 在多折线的长度上的比例\n   * @return {object} 根据比例值计算出来的角度\n   */\n  tangentAngle: function (points, t) {\n    return segments_1.angleAtSegments(points, t);\n  }\n};","map":{"version":3,"sources":["../src/polyline.ts"],"names":[],"mappings":";;;;;;AAAA,IAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AAGA,OAAA,CAAA,OAAA,GAAe;AACb;;;;AAIG;AACH,EAAA,GAAG,EAAH,UAAI,MAAJ,EAAwB;AACtB,QAAM,IAAI,GAAG,EAAb;AACA,QAAM,IAAI,GAAG,EAAb;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAAM,CAAC,MAA3B,EAAmC,CAAC,EAApC,EAAwC;AACtC,UAAM,KAAK,GAAG,MAAM,CAAC,CAAD,CAApB;AACA,MAAA,IAAI,CAAC,IAAL,CAAU,KAAK,CAAC,CAAD,CAAf;AACA,MAAA,IAAI,CAAC,IAAL,CAAU,KAAK,CAAC,CAAD,CAAf;AACD;;AACD,WAAO,MAAA,CAAA,cAAA,CAAe,IAAf,EAAqB,IAArB,CAAP;AACD,GAfY;;AAgBb;;;;AAIG;AACH,EAAA,MAAM,EAAN,UAAO,MAAP,EAA2B;AACzB,WAAO,UAAA,CAAA,eAAA,CAAgB,MAAhB,CAAP;AACD,GAvBY;;AAwBb;;;;;AAKG;AACH,EAAA,OAAO,EAAP,UAAQ,MAAR,EAA8B,CAA9B,EAAuC;AACrC,WAAO,UAAA,CAAA,eAAA,CAAgB,MAAhB,EAAwB,CAAxB,CAAP;AACD,GAhCY;;AAiCb;;;;;;AAMG;AACH,EAAA,aAAa,EAAb,UAAc,MAAd,EAAoC,CAApC,EAA+C,CAA/C,EAAwD;AACtD,WAAO,UAAA,CAAA,iBAAA,CAAkB,MAAlB,EAA0B,CAA1B,EAA6B,CAA7B,CAAP;AACD,GA1CY;;AA2Cb;;;;;AAKG;AACH,EAAA,YAAY,EAAZ,UAAa,MAAb,EAAmC,CAAnC,EAA4C;AAC1C,WAAO,UAAA,CAAA,eAAA,CAAgB,MAAhB,EAAwB,CAAxB,CAAP;AACD;AAnDY,CAAf","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar segments_1 = require(\"./segments\");\nvar util_1 = require(\"./util\");\nexports.default = {\n    /**\n     * 计算多折线的包围盒\n     * @param {array} points 点的集合 [x,y] 的形式\n     * @return {object} 包围盒\n     */\n    box: function (points) {\n        var xArr = [];\n        var yArr = [];\n        for (var i = 0; i < points.length; i++) {\n            var point = points[i];\n            xArr.push(point[0]);\n            yArr.push(point[1]);\n        }\n        return util_1.getBBoxByArray(xArr, yArr);\n    },\n    /**\n     * 计算多折线的长度\n     * @param {array} points 点的集合 [x,y] 的形式\n     * @return {object} 多条边的长度\n     */\n    length: function (points) {\n        return segments_1.lengthOfSegment(points);\n    },\n    /**\n     * 根据比例获取多折线的点\n     * @param {array} points 点的集合 [x,y] 的形式\n     * @param {number} t 在多折线的长度上的比例\n     * @return {object} 根据比例值计算出来的点\n     */\n    pointAt: function (points, t) {\n        return segments_1.pointAtSegments(points, t);\n    },\n    /**\n     * 指定点到多折线的距离\n     * @param {array} points 点的集合 [x,y] 的形式\n     * @param {number} x 指定点的 x\n     * @param {number} y 指定点的 y\n     * @return {number} 点到多折线的距离\n     */\n    pointDistance: function (points, x, y) {\n        return segments_1.distanceAtSegment(points, x, y);\n    },\n    /**\n     * 根据比例获取多折线的切线角度\n     * @param {array} points 点的集合 [x,y] 的形式\n     * @param {number} t 在多折线的长度上的比例\n     * @return {object} 根据比例值计算出来的角度\n     */\n    tangentAngle: function (points, t) {\n        return segments_1.angleAtSegments(points, t);\n    },\n};\n//# sourceMappingURL=polyline.js.map"]},"metadata":{},"sourceType":"script"}