{"ast":null,"code":"import { interaction, animation, theme } from '../../adaptor/common';\nimport { flow } from '../../utils';\nimport { sankeyLayout } from '../../utils/transform/sankey';\nimport { polygon, edge } from '../../adaptor/geometries';\nimport { transformDataToSankey } from './util/data';\nimport { X_FIELD, Y_FIELD, COLOR_FIELD } from './constant';\n/**\n * geometry 处理\n * @param params\n */\n\nfunction geometry(params) {\n  var chart = params.chart,\n      options = params.options;\n  var data = options.data,\n      sourceField = options.sourceField,\n      targetField = options.targetField,\n      weightField = options.weightField,\n      color = options.color,\n      nodeStyle = options.nodeStyle,\n      edgeStyle = options.edgeStyle,\n      label = options.label,\n      tooltip = options.tooltip,\n      nodeAlign = options.nodeAlign,\n      nodePaddingRatio = options.nodePaddingRatio,\n      nodeWidthRatio = options.nodeWidthRatio,\n      nodeSort = options.nodeSort; // 1. 组件，优先设置，因为子 view 会继承配置\n\n  chart.legend(false);\n  chart.tooltip(tooltip);\n  chart.axis(false); // 2. 转换出 layout 前数据\n\n  var sankeyLayoutInputData = transformDataToSankey(data, sourceField, targetField, weightField); // 3. layout 之后的数据\n\n  var _a = sankeyLayout({\n    nodeAlign: nodeAlign,\n    nodePadding: nodePaddingRatio,\n    nodeWidth: nodeWidthRatio,\n    nodeSort: nodeSort\n  }, sankeyLayoutInputData),\n      nodes = _a.nodes,\n      links = _a.links; // 4. 生成绘图数据\n\n\n  var nodesData = nodes.map(function (node) {\n    return {\n      x: node.x,\n      y: node.y,\n      name: node.name\n    };\n  });\n  var edgesData = links.map(function (link) {\n    return {\n      source: link.source.name,\n      target: link.target.name,\n      name: link.source.name || link.target.name,\n      x: link.x,\n      y: link.y,\n      value: link.value\n    };\n  }); // 5. node edge views\n\n  var nodeView = chart.createView();\n  nodeView.data(nodesData);\n  polygon({\n    chart: nodeView,\n    options: {\n      xField: X_FIELD,\n      yField: Y_FIELD,\n      seriesField: COLOR_FIELD,\n      polygon: {\n        color: color,\n        style: nodeStyle\n      },\n      label: label,\n      tooltip: false\n    }\n  }); // edge view\n\n  var edgeView = chart.createView();\n  edgeView.data(edgesData);\n  edge({\n    chart: edgeView,\n    // @ts-ignore\n    options: {\n      xField: X_FIELD,\n      yField: Y_FIELD,\n      seriesField: COLOR_FIELD,\n      edge: {\n        color: color,\n        style: edgeStyle,\n        shape: 'arc'\n      },\n      tooltip: tooltip,\n      state: {\n        active: {\n          style: {\n            opacity: 0.8,\n            lineWidth: 0\n          }\n        }\n      }\n    }\n  });\n  chart.interaction('element-active'); // scale\n\n  chart.scale({\n    x: {\n      sync: true,\n      nice: true\n    },\n    y: {\n      sync: true,\n      nice: true\n    },\n    name: {\n      sync: 'color'\n    }\n  });\n  return params;\n}\n/**\n * 图适配器\n * @param chart\n * @param options\n */\n\n\nexport function adaptor(params) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(geometry, interaction, animation, theme // ... 其他的 adaptor flow\n  )(params);\n}","map":{"version":3,"sources":["../../../src/plots/sankey/adaptor.ts"],"names":[],"mappings":"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","sourcesContent":["import { interaction, animation, theme } from '../../adaptor/common';\nimport { Params } from '../../core/adaptor';\nimport { flow } from '../../utils';\nimport { sankeyLayout } from '../../utils/transform/sankey';\nimport { polygon, edge } from '../../adaptor/geometries';\nimport { SankeyOptions } from './types';\nimport { transformDataToSankey } from './util/data';\nimport { X_FIELD, Y_FIELD, COLOR_FIELD } from './constant';\n\n/**\n * geometry 处理\n * @param params\n */\nfunction geometry(params: Params<SankeyOptions>): Params<SankeyOptions> {\n  const { chart, options } = params;\n  const {\n    data,\n    sourceField,\n    targetField,\n    weightField,\n    color,\n    nodeStyle,\n    edgeStyle,\n    label,\n    tooltip,\n    nodeAlign,\n    nodePaddingRatio,\n    nodeWidthRatio,\n    nodeSort,\n  } = options;\n\n  // 1. 组件，优先设置，因为子 view 会继承配置\n  chart.legend(false);\n  chart.tooltip(tooltip);\n  chart.axis(false);\n\n  // 2. 转换出 layout 前数据\n  const sankeyLayoutInputData = transformDataToSankey(data, sourceField, targetField, weightField);\n\n  // 3. layout 之后的数据\n  const { nodes, links } = sankeyLayout(\n    {\n      nodeAlign,\n      nodePadding: nodePaddingRatio,\n      nodeWidth: nodeWidthRatio,\n      nodeSort,\n    },\n    sankeyLayoutInputData\n  );\n\n  // 4. 生成绘图数据\n  const nodesData = nodes.map((node) => {\n    return {\n      x: node.x,\n      y: node.y,\n      name: node.name,\n    };\n  });\n  const edgesData = links.map((link) => {\n    return {\n      source: link.source.name,\n      target: link.target.name,\n      name: link.source.name || link.target.name,\n      x: link.x,\n      y: link.y,\n      value: link.value,\n    };\n  });\n\n  // 5. node edge views\n  const nodeView = chart.createView();\n  nodeView.data(nodesData);\n\n  polygon({\n    chart: nodeView,\n    options: {\n      xField: X_FIELD,\n      yField: Y_FIELD,\n      seriesField: COLOR_FIELD,\n      polygon: {\n        color,\n        style: nodeStyle,\n      },\n      label,\n      tooltip: false,\n    },\n  });\n\n  // edge view\n  const edgeView = chart.createView();\n  edgeView.data(edgesData);\n\n  edge({\n    chart: edgeView,\n    // @ts-ignore\n    options: {\n      xField: X_FIELD,\n      yField: Y_FIELD,\n      seriesField: COLOR_FIELD,\n      edge: {\n        color,\n        style: edgeStyle,\n        shape: 'arc',\n      },\n      tooltip,\n      state: {\n        active: {\n          style: {\n            opacity: 0.8,\n            lineWidth: 0,\n          },\n        },\n      },\n    },\n  });\n\n  chart.interaction('element-active');\n\n  // scale\n  chart.scale({\n    x: { sync: true, nice: true },\n    y: { sync: true, nice: true },\n    name: { sync: 'color' },\n  });\n\n  return params;\n}\n\n/**\n * 图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<SankeyOptions>) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(\n    geometry,\n    interaction,\n    animation,\n    theme\n    // ... 其他的 adaptor flow\n  )(params);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}