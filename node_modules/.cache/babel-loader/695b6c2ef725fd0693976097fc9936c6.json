{"ast":null,"code":"import { __assign } from \"tslib\";\nimport clone from '@antv/util/lib/clone';\nimport deepMix from '@antv/util/lib/deep-mix';\nimport each from '@antv/util/lib/each';\nimport isArray from '@antv/util/lib/is-array';\nimport isObject from '@antv/util/lib/is-object';\nimport isString from '@antv/util/lib/is-string';\nimport upperFirst from '@antv/util/lib/upper-first';\nimport Edge from '../../item/edge';\nimport Node from '../../item/node';\nimport Combo from '../../item/combo';\nimport { traverseTreeUp, traverseTree, getComboBBox } from '../../util/graphic';\nvar NODE = 'node';\nvar EDGE = 'edge';\nvar VEDGE = 'vedge';\nvar COMBO = 'combo';\nvar CFG_PREFIX = 'default';\nvar MAPPER_SUFFIX = 'Mapper';\nvar STATE_SUFFIX = 'stateStyles';\nvar hasOwnProperty = Object.hasOwnProperty;\n\nvar ItemController =\n/** @class */\nfunction () {\n  function ItemController(graph) {\n    this.graph = graph;\n    this.destroyed = false;\n  }\n  /**\n   * 增加 Item 实例\n   *\n   * @param {ITEM_TYPE} type 实例类型，node 或 edge\n   * @param {(NodeConfig & EdgeConfig)} model 数据模型\n   * @returns {(Item)}\n   * @memberof ItemController\n   */\n\n\n  ItemController.prototype.addItem = function (type, model) {\n    var _this = this;\n\n    var graph = this.graph;\n    var vType = type === VEDGE ? EDGE : type;\n    var parent = graph.get(vType + \"Group\") || graph.get('group');\n    var upperType = upperFirst(vType);\n    var item = null; // 获取 this.get('styles') 中的值\n\n    var styles = graph.get(vType + upperFirst(STATE_SUFFIX)) || {};\n    var defaultModel = graph.get(CFG_PREFIX + upperType);\n\n    if (model[STATE_SUFFIX]) {\n      // 设置 this.get('styles') 中的值\n      styles = model[STATE_SUFFIX];\n    }\n\n    var mapper = graph.get(vType + MAPPER_SUFFIX);\n\n    if (mapper) {\n      var mappedModel = mapper(model);\n\n      if (mappedModel[STATE_SUFFIX]) {\n        // 设置 this.get('styles') 中的值\n        styles = mappedModel[STATE_SUFFIX];\n        delete mappedModel[STATE_SUFFIX];\n      } // 如果配置了 defaultEdge 或 defaultNode，则将默认配置的数据也合并进去\n\n\n      model = deepMix({}, defaultModel, model, mappedModel);\n    } else if (defaultModel) {\n      // 很多布局会直接修改原数据模型，所以不能用 merge 的形式，逐个写入原 model 中\n      each(defaultModel, function (val, cfg) {\n        if (!hasOwnProperty.call(model, cfg)) {\n          if (isObject(val)) {\n            model[cfg] = clone(val);\n          } else {\n            model[cfg] = defaultModel[cfg];\n          }\n        }\n      });\n    }\n\n    if (model.shape && !model.type) {\n      console.warn('shape 字段即将被废弃，请使用 type 代替');\n    }\n\n    graph.emit('beforeadditem', {\n      type: type,\n      model: model\n    });\n\n    if (type === EDGE || type === VEDGE) {\n      var source = void 0;\n      var target = void 0;\n      source = model.source; // eslint-disable-line prefer-destructuring\n\n      target = model.target; // eslint-disable-line prefer-destructuring\n\n      if (source && isString(source)) {\n        source = graph.findById(source);\n      }\n\n      if (target && isString(target)) {\n        target = graph.findById(target);\n      }\n\n      if (!source || !target) {\n        console.warn(\"The source or target node of edge \" + model.id + \" does not exist!\");\n        return;\n      }\n\n      if (source.getType && source.getType() === 'combo') {\n        model.isComboEdge = true;\n        graph.updateCombo(source);\n      }\n\n      if (target.getType && target.getType() === 'combo') {\n        model.isComboEdge = true;\n        graph.updateCombo(target);\n      }\n\n      item = new Edge({\n        model: model,\n        source: source,\n        target: target,\n        styles: styles,\n        linkCenter: graph.get('linkCenter'),\n        group: parent.addGroup()\n      });\n    } else if (type === NODE) {\n      item = new Node({\n        model: model,\n        styles: styles,\n        group: parent.addGroup()\n      });\n    } else if (type === COMBO) {\n      var children = model.children;\n      var comboBBox = getComboBBox(children, graph);\n      model.x = comboBBox.x || model.x || Math.random() * 100;\n      model.y = comboBBox.y || model.y || Math.random() * 100;\n      var comboGroup = parent.addGroup();\n      comboGroup.setZIndex(model.depth);\n      item = new Combo({\n        model: model,\n        styles: styles,\n        bbox: comboBBox,\n        group: comboGroup\n      });\n      var comboModel_1 = item.getModel();\n      (children || []).forEach(function (child) {\n        var childItem = graph.findById(child.id);\n        item.addChild(childItem);\n        child.depth = comboModel_1.depth + 2;\n      }); // collapse the combo if the collapsed is true in the model\n\n      if (model.collapsed) {\n        setTimeout(function () {\n          graph.collapseCombo(item);\n\n          _this.updateCombo(item, []);\n        }, 250);\n      }\n    }\n\n    if (item) {\n      graph.get(type + \"s\").push(item);\n      graph.get('itemMap')[item.get('id')] = item;\n      graph.emit('afteradditem', {\n        item: item,\n        model: model\n      }); // eslint-disable-next-line consistent-return\n\n      return item;\n    }\n  };\n  /**\n   * 更新节点或边\n   *\n   * @param {Item} item ID 或 实例\n   * @param {(EdgeConfig | Partial<NodeConfig>)} cfg 数据模型\n   * @returns\n   * @memberof ItemController\n   */\n\n\n  ItemController.prototype.updateItem = function (item, cfg) {\n    var graph = this.graph;\n\n    if (isString(item)) {\n      item = graph.findById(item);\n    }\n\n    if (!item || item.destroyed) {\n      return;\n    } // 更新的 item 的类型\n\n\n    var type = '';\n    if (item.getType) type = item.getType();\n    var mapper = graph.get(type + MAPPER_SUFFIX);\n    var model = item.getModel();\n\n    if (mapper) {\n      var result = deepMix({}, model, cfg);\n      var mappedModel = mapper(result); // 将 update 时候用户传入的参数与mapperModel做deepMix，以便复用之前设置的参数值\n\n      var newModel = deepMix({}, model, mappedModel, cfg);\n\n      if (mappedModel[STATE_SUFFIX]) {\n        item.set('styles', newModel[STATE_SUFFIX]);\n        delete newModel[STATE_SUFFIX];\n      }\n\n      each(newModel, function (val, key) {\n        cfg[key] = val;\n      });\n    } else {\n      // merge update传进来的对象参数，model中没有的数据不做处理，对象和字符串值也不做处理，直接替换原来的\n      each(cfg, function (val, key) {\n        if (model[key]) {\n          if (isObject(val) && !isArray(val)) {\n            cfg[key] = __assign(__assign({}, model[key]), cfg[key]);\n          }\n        }\n      });\n    } // emit beforeupdateitem 事件\n\n\n    graph.emit('beforeupdateitem', {\n      item: item,\n      cfg: cfg\n    });\n\n    if (type === EDGE) {\n      // 若是边要更新source || target, 为了不影响示例内部model，并且重新计算startPoint和endPoint，手动设置\n      if (cfg.source) {\n        var source = cfg.source;\n\n        if (isString(source)) {\n          source = graph.findById(source);\n        }\n\n        item.setSource(source);\n      }\n\n      if (cfg.target) {\n        var target = cfg.target;\n\n        if (isString(target)) {\n          target = graph.findById(target);\n        }\n\n        item.setTarget(target);\n      }\n    }\n\n    item.update(cfg);\n\n    if (type === NODE || type === COMBO) {\n      var edges = item.getEdges();\n      each(edges, function (edge) {\n        edge.refresh();\n      });\n    }\n\n    graph.emit('afterupdateitem', {\n      item: item,\n      cfg: cfg\n    });\n  };\n  /**\n   * 根据 combo 的子元素更新 combo 的位置及大小\n   *\n   * @param {ICombo} combo ID 或 实例\n   * @returns\n   * @memberof ItemController\n   */\n\n\n  ItemController.prototype.updateCombo = function (combo, children) {\n    var graph = this.graph;\n\n    if (isString(combo)) {\n      combo = graph.findById(combo);\n    }\n\n    if (!combo || combo.destroyed) {\n      return;\n    }\n\n    var comboBBox = getComboBBox(children, graph);\n    combo.set('bbox', comboBBox);\n    combo.update({\n      x: comboBBox.x,\n      y: comboBBox.y\n    });\n    var combEdges = combo.getEdges() || [];\n    var length = combEdges.length;\n\n    for (var i = 0; i < length; i++) {\n      var edge = combEdges[i];\n      edge === null || edge === void 0 ? void 0 : edge.refresh();\n    }\n  };\n  /**\n   * 收起 combo，隐藏相关元素\n   */\n\n\n  ItemController.prototype.collapseCombo = function (combo) {\n    var graph = this.graph;\n\n    if (isString(combo)) {\n      combo = graph.findById(combo);\n    }\n\n    var children = combo.getChildren();\n    children.nodes.forEach(function (node) {\n      graph.hideItem(node);\n    });\n    children.combos.forEach(function (c) {\n      graph.hideItem(c);\n    });\n  };\n  /**\n   * 展开 combo，相关元素出现\n   * 若子 combo 原先是收起状态，则保持它的收起状态\n   */\n\n\n  ItemController.prototype.expandCombo = function (combo) {\n    var graph = this.graph;\n\n    if (isString(combo)) {\n      combo = graph.findById(combo);\n    }\n\n    var children = combo.getChildren();\n    children.nodes.forEach(function (node) {\n      graph.showItem(node);\n    });\n    children.combos.forEach(function (c) {\n      if (c.getModel().collapsed) {\n        c.show();\n      } else {\n        graph.showItem(c);\n      }\n    });\n  };\n  /**\n   * 删除指定的节点或边\n   *\n   * @param {Item} item item ID 或实例\n   * @returns {void}\n   * @memberof ItemController\n   */\n\n\n  ItemController.prototype.removeItem = function (item) {\n    var _this = this;\n\n    var graph = this.graph;\n\n    if (isString(item)) {\n      item = graph.findById(item);\n    }\n\n    if (!item || item.destroyed) {\n      return;\n    }\n\n    var itemModel = clone(item.getModel());\n    graph.emit('beforeremoveitem', {\n      item: itemModel\n    });\n    var type = '';\n    if (item.getType) type = item.getType();\n    var items = graph.get(type + \"s\");\n    var index = items.indexOf(item);\n    if (index > -1) items.splice(index, 1);\n\n    if (type === EDGE) {\n      var vitems = graph.get(\"v\" + type + \"s\");\n      var vindex = vitems.indexOf(item);\n      if (vindex > -1) vitems.splice(vindex, 1);\n    }\n\n    var itemId = item.get('id');\n    var itemMap = graph.get('itemMap');\n    delete itemMap[itemId];\n    var comboTrees = graph.get('comboTrees');\n    var id = item.get('id');\n\n    if (type === NODE) {\n      var comboId = item.getModel().comboId;\n\n      if (comboTrees) {\n        var brothers_1 = comboTrees;\n        var found_1 = false; // the flag to terminate the forEach circulation\n        // remove the node from the children array of its parent fromt he tree\n\n        comboTrees.forEach(function (ctree) {\n          if (found_1) return;\n          traverseTree(ctree, function (combo) {\n            if (combo.id === id && brothers_1) {\n              var bidx = brothers_1.indexOf(combo);\n              brothers_1.splice(bidx, 1);\n              found_1 = true;\n              return false; // terminate the traverse\n            }\n\n            brothers_1 = combo.children;\n            return true;\n          });\n        });\n      } // 若移除的是节点，需要将与之相连的边一同删除\n\n\n      var edges = item.getEdges();\n\n      for (var i = edges.length - 1; i >= 0; i--) {\n        graph.removeItem(edges[i], false);\n      }\n\n      if (comboId) graph.updateCombo(comboId);\n    } else if (type === COMBO) {\n      var parentId = item.getModel().parentId;\n      var comboInTree_1; // find the subtree rooted at the item to be removed\n\n      var found_2 = false; // the flag to terminate the forEach circulation\n\n      (comboTrees || []).forEach(function (ctree) {\n        if (found_2) return;\n        traverseTree(ctree, function (combo) {\n          if (combo.id === id) {\n            comboInTree_1 = combo;\n            found_2 = true;\n            return false; // terminate the traverse\n          }\n\n          return true;\n        });\n      });\n      comboInTree_1.removed = true;\n\n      if (comboInTree_1 && comboInTree_1.children) {\n        comboInTree_1.children.forEach(function (child) {\n          _this.removeItem(child.id);\n        });\n      } // 若移除的是 combo，需要将与之相连的边一同删除\n\n\n      var edges = item.getEdges();\n\n      for (var i = edges.length; i >= 0; i--) {\n        graph.removeItem(edges[i], false);\n      }\n\n      if (parentId) graph.updateCombo(parentId);\n    }\n\n    item.destroy();\n    graph.emit('afterremoveitem', {\n      item: itemModel\n    });\n  };\n  /**\n   * 更新 item 状态\n   *\n   * @param {Item} item Item 实例\n   * @param {string} state 状态名称\n   * @param {boolean} value 是否启用状态或状态值\n   * @returns {void}\n   * @memberof ItemController\n   */\n\n\n  ItemController.prototype.setItemState = function (item, state, value) {\n    var graph = this.graph;\n    var stateName = state;\n\n    if (isString(value)) {\n      stateName = state + \":\" + value;\n    } // 已经存在要设置的 state，或不存在 state 的样式为 undefined\n\n\n    if (item.hasState(stateName) === value || isString(value) && item.hasState(stateName)) {\n      return;\n    }\n\n    graph.emit('beforeitemstatechange', {\n      item: item,\n      state: stateName,\n      enabled: value\n    });\n    item.setState(state, value);\n    graph.autoPaint();\n    graph.emit('afteritemstatechange', {\n      item: item,\n      state: stateName,\n      enabled: value\n    });\n  };\n  /**\n   * 将指定状态的优先级提升为最高优先级\n   * @param {Item} item 元素id或元素实例\n   * @param state 状态名称\n   */\n\n\n  ItemController.prototype.priorityState = function (item, state) {\n    var graph = this.graph;\n    var currentItem = item;\n\n    if (isString(item)) {\n      currentItem = graph.findById(item);\n    } // 先取消已有的 state\n\n\n    this.setItemState(currentItem, state, false); // 再设置state，则此时该优先级为最高\n\n    this.setItemState(currentItem, state, true);\n  };\n  /**\n   * 清除所有指定的状态\n   *\n   * @param {Item} item Item 实例\n   * @param {string[]} states 状态名称集合\n   * @memberof ItemController\n   */\n\n\n  ItemController.prototype.clearItemStates = function (item, states) {\n    var graph = this.graph;\n\n    if (isString(item)) {\n      item = graph.findById(item);\n    }\n\n    graph.emit('beforeitemstatesclear', {\n      item: item,\n      states: states\n    });\n    item.clearStates(states);\n    graph.emit('afteritemstatesclear', {\n      item: item,\n      states: states\n    });\n  };\n  /**\n   * 刷新指定的 Item\n   *\n   * @param {Item} item Item ID 或 实例\n   * @memberof ItemController\n   */\n\n\n  ItemController.prototype.refreshItem = function (item) {\n    var graph = this.graph;\n\n    if (isString(item)) {\n      item = graph.findById(item);\n    }\n\n    graph.emit('beforeitemrefresh', {\n      item: item\n    }); // 调用 Item 的 refresh 方法，实现刷新功能\n\n    item.refresh();\n    graph.emit('afteritemrefresh', {\n      item: item\n    });\n  };\n  /**\n   * 根据 graph 上用 combos 数据生成的 comboTree 来增加所有 combos\n   *\n   * @param {ComboTree[]} comboTrees graph 上用 combos 数据生成的 comboTree\n   * @param {ComboConfig[]} comboModels combos 数据\n   * @memberof ItemController\n   */\n\n\n  ItemController.prototype.addCombos = function (comboTrees, comboModels) {\n    var _this = this;\n\n    var graph = this.graph;\n    (comboTrees || []).forEach(function (ctree) {\n      traverseTreeUp(ctree, function (child) {\n        var comboModel;\n        comboModels.forEach(function (model) {\n          if (model.id === child.id) {\n            model.children = child.children;\n            model.depth = child.depth;\n            comboModel = model;\n          }\n        });\n\n        if (comboModel) {\n          _this.addItem('combo', comboModel);\n        }\n\n        return true;\n      });\n    });\n    var comboGroup = graph.get('comboGroup');\n    if (comboGroup) comboGroup.sort();\n  };\n  /**\n   * 改变Item的显示状态\n   *\n   * @param {Item} item Item ID 或 实例\n   * @param {boolean} visible 是否显示\n   * @memberof ItemController\n   */\n\n\n  ItemController.prototype.changeItemVisibility = function (item, visible) {\n    var _this = this;\n\n    var graph = this.graph;\n\n    if (isString(item)) {\n      item = graph.findById(item);\n    }\n\n    if (!item) {\n      console.warn('The item to be shown or hidden does not exist!');\n      return;\n    }\n\n    graph.emit('beforeitemvisibilitychange', {\n      item: item,\n      visible: visible\n    });\n    item.changeVisibility(visible);\n\n    if (item.getType && item.getType() === NODE) {\n      var edges = item.getEdges();\n      each(edges, function (edge) {\n        // 若隐藏节点，则将与之关联的边也隐藏\n        // 若显示节点，则将与之关联的边也显示，但是需要判断边两端的节点都是可见的\n        if (visible && !(edge.get('source').isVisible() && edge.get('target').isVisible())) {\n          return;\n        }\n\n        _this.changeItemVisibility(edge, visible);\n      });\n    } else if (item.getType && item.getType() === COMBO) {\n      var comboTrees = graph.get('comboTrees');\n      var id_1 = item.get('id');\n      var children_1 = [];\n      var found_3 = false; // flag the terminate the forEach\n\n      (comboTrees || []).forEach(function (ctree) {\n        if (found_3) return;\n        if (!ctree.children || ctree.children.length === 0) return;\n        traverseTree(ctree, function (combo) {\n          if (combo.id === id_1) {\n            children_1 = combo.children;\n            found_3 = true;\n            return false; // terminate the traverse\n          }\n\n          return true;\n        });\n      });\n      children_1.forEach(function (child) {\n        var childItem = graph.findById(child.id);\n\n        _this.changeItemVisibility(childItem, visible);\n      });\n      var edges = item.getEdges();\n      each(edges, function (edge) {\n        // 若隐藏 combo，则将与 combo 本身关联的边也隐藏\n        // 若显示 combo，则将与 combo 本身关联的边也显示，但是需要判断边两端的节点都是可见的\n        if (visible && !(edge.get('source').isVisible() && edge.get('target').isVisible())) {\n          return;\n        }\n\n        _this.changeItemVisibility(edge, visible);\n      });\n    }\n\n    graph.emit('afteritemvisibilitychange', {\n      item: item,\n      visible: visible\n    });\n    return item;\n  };\n\n  ItemController.prototype.destroy = function () {\n    this.graph = null;\n    this.destroyed = true;\n  };\n\n  return ItemController;\n}();\n\nexport default ItemController;","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/@antv/g6/es/graph/controller/item.js"],"names":["__assign","clone","deepMix","each","isArray","isObject","isString","upperFirst","Edge","Node","Combo","traverseTreeUp","traverseTree","getComboBBox","NODE","EDGE","VEDGE","COMBO","CFG_PREFIX","MAPPER_SUFFIX","STATE_SUFFIX","hasOwnProperty","Object","ItemController","graph","destroyed","prototype","addItem","type","model","_this","vType","parent","get","upperType","item","styles","defaultModel","mapper","mappedModel","val","cfg","call","shape","console","warn","emit","source","target","findById","id","getType","isComboEdge","updateCombo","linkCenter","group","addGroup","children","comboBBox","x","Math","random","y","comboGroup","setZIndex","depth","bbox","comboModel_1","getModel","forEach","child","childItem","addChild","collapsed","setTimeout","collapseCombo","push","updateItem","result","newModel","set","key","setSource","setTarget","update","edges","getEdges","edge","refresh","combo","combEdges","length","i","getChildren","nodes","node","hideItem","combos","c","expandCombo","showItem","show","removeItem","itemModel","items","index","indexOf","splice","vitems","vindex","itemId","itemMap","comboTrees","comboId","brothers_1","found_1","ctree","bidx","parentId","comboInTree_1","found_2","removed","destroy","setItemState","state","value","stateName","hasState","enabled","setState","autoPaint","priorityState","currentItem","clearItemStates","states","clearStates","refreshItem","addCombos","comboModels","comboModel","sort","changeItemVisibility","visible","changeVisibility","isVisible","id_1","children_1","found_3"],"mappings":"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","sourcesContent":["import { __assign } from \"tslib\";\nimport clone from '@antv/util/lib/clone';\nimport deepMix from '@antv/util/lib/deep-mix';\nimport each from '@antv/util/lib/each';\nimport isArray from '@antv/util/lib/is-array';\nimport isObject from '@antv/util/lib/is-object';\nimport isString from '@antv/util/lib/is-string';\nimport upperFirst from '@antv/util/lib/upper-first';\nimport Edge from '../../item/edge';\nimport Node from '../../item/node';\nimport Combo from '../../item/combo';\nimport { traverseTreeUp, traverseTree, getComboBBox } from '../../util/graphic';\nvar NODE = 'node';\nvar EDGE = 'edge';\nvar VEDGE = 'vedge';\nvar COMBO = 'combo';\nvar CFG_PREFIX = 'default';\nvar MAPPER_SUFFIX = 'Mapper';\nvar STATE_SUFFIX = 'stateStyles';\nvar hasOwnProperty = Object.hasOwnProperty;\n\nvar ItemController =\n/** @class */\nfunction () {\n  function ItemController(graph) {\n    this.graph = graph;\n    this.destroyed = false;\n  }\n  /**\n   * 增加 Item 实例\n   *\n   * @param {ITEM_TYPE} type 实例类型，node 或 edge\n   * @param {(NodeConfig & EdgeConfig)} model 数据模型\n   * @returns {(Item)}\n   * @memberof ItemController\n   */\n\n\n  ItemController.prototype.addItem = function (type, model) {\n    var _this = this;\n\n    var graph = this.graph;\n    var vType = type === VEDGE ? EDGE : type;\n    var parent = graph.get(vType + \"Group\") || graph.get('group');\n    var upperType = upperFirst(vType);\n    var item = null; // 获取 this.get('styles') 中的值\n\n    var styles = graph.get(vType + upperFirst(STATE_SUFFIX)) || {};\n    var defaultModel = graph.get(CFG_PREFIX + upperType);\n\n    if (model[STATE_SUFFIX]) {\n      // 设置 this.get('styles') 中的值\n      styles = model[STATE_SUFFIX];\n    }\n\n    var mapper = graph.get(vType + MAPPER_SUFFIX);\n\n    if (mapper) {\n      var mappedModel = mapper(model);\n\n      if (mappedModel[STATE_SUFFIX]) {\n        // 设置 this.get('styles') 中的值\n        styles = mappedModel[STATE_SUFFIX];\n        delete mappedModel[STATE_SUFFIX];\n      } // 如果配置了 defaultEdge 或 defaultNode，则将默认配置的数据也合并进去\n\n\n      model = deepMix({}, defaultModel, model, mappedModel);\n    } else if (defaultModel) {\n      // 很多布局会直接修改原数据模型，所以不能用 merge 的形式，逐个写入原 model 中\n      each(defaultModel, function (val, cfg) {\n        if (!hasOwnProperty.call(model, cfg)) {\n          if (isObject(val)) {\n            model[cfg] = clone(val);\n          } else {\n            model[cfg] = defaultModel[cfg];\n          }\n        }\n      });\n    }\n\n    if (model.shape && !model.type) {\n      console.warn('shape 字段即将被废弃，请使用 type 代替');\n    }\n\n    graph.emit('beforeadditem', {\n      type: type,\n      model: model\n    });\n\n    if (type === EDGE || type === VEDGE) {\n      var source = void 0;\n      var target = void 0;\n      source = model.source; // eslint-disable-line prefer-destructuring\n\n      target = model.target; // eslint-disable-line prefer-destructuring\n\n      if (source && isString(source)) {\n        source = graph.findById(source);\n      }\n\n      if (target && isString(target)) {\n        target = graph.findById(target);\n      }\n\n      if (!source || !target) {\n        console.warn(\"The source or target node of edge \" + model.id + \" does not exist!\");\n        return;\n      }\n\n      if (source.getType && source.getType() === 'combo') {\n        model.isComboEdge = true;\n        graph.updateCombo(source);\n      }\n\n      if (target.getType && target.getType() === 'combo') {\n        model.isComboEdge = true;\n        graph.updateCombo(target);\n      }\n\n      item = new Edge({\n        model: model,\n        source: source,\n        target: target,\n        styles: styles,\n        linkCenter: graph.get('linkCenter'),\n        group: parent.addGroup()\n      });\n    } else if (type === NODE) {\n      item = new Node({\n        model: model,\n        styles: styles,\n        group: parent.addGroup()\n      });\n    } else if (type === COMBO) {\n      var children = model.children;\n      var comboBBox = getComboBBox(children, graph);\n      model.x = comboBBox.x || model.x || Math.random() * 100;\n      model.y = comboBBox.y || model.y || Math.random() * 100;\n      var comboGroup = parent.addGroup();\n      comboGroup.setZIndex(model.depth);\n      item = new Combo({\n        model: model,\n        styles: styles,\n        bbox: comboBBox,\n        group: comboGroup\n      });\n      var comboModel_1 = item.getModel();\n      (children || []).forEach(function (child) {\n        var childItem = graph.findById(child.id);\n        item.addChild(childItem);\n        child.depth = comboModel_1.depth + 2;\n      }); // collapse the combo if the collapsed is true in the model\n\n      if (model.collapsed) {\n        setTimeout(function () {\n          graph.collapseCombo(item);\n\n          _this.updateCombo(item, []);\n        }, 250);\n      }\n    }\n\n    if (item) {\n      graph.get(type + \"s\").push(item);\n      graph.get('itemMap')[item.get('id')] = item;\n      graph.emit('afteradditem', {\n        item: item,\n        model: model\n      }); // eslint-disable-next-line consistent-return\n\n      return item;\n    }\n  };\n  /**\n   * 更新节点或边\n   *\n   * @param {Item} item ID 或 实例\n   * @param {(EdgeConfig | Partial<NodeConfig>)} cfg 数据模型\n   * @returns\n   * @memberof ItemController\n   */\n\n\n  ItemController.prototype.updateItem = function (item, cfg) {\n    var graph = this.graph;\n\n    if (isString(item)) {\n      item = graph.findById(item);\n    }\n\n    if (!item || item.destroyed) {\n      return;\n    } // 更新的 item 的类型\n\n\n    var type = '';\n    if (item.getType) type = item.getType();\n    var mapper = graph.get(type + MAPPER_SUFFIX);\n    var model = item.getModel();\n\n    if (mapper) {\n      var result = deepMix({}, model, cfg);\n      var mappedModel = mapper(result); // 将 update 时候用户传入的参数与mapperModel做deepMix，以便复用之前设置的参数值\n\n      var newModel = deepMix({}, model, mappedModel, cfg);\n\n      if (mappedModel[STATE_SUFFIX]) {\n        item.set('styles', newModel[STATE_SUFFIX]);\n        delete newModel[STATE_SUFFIX];\n      }\n\n      each(newModel, function (val, key) {\n        cfg[key] = val;\n      });\n    } else {\n      // merge update传进来的对象参数，model中没有的数据不做处理，对象和字符串值也不做处理，直接替换原来的\n      each(cfg, function (val, key) {\n        if (model[key]) {\n          if (isObject(val) && !isArray(val)) {\n            cfg[key] = __assign(__assign({}, model[key]), cfg[key]);\n          }\n        }\n      });\n    } // emit beforeupdateitem 事件\n\n\n    graph.emit('beforeupdateitem', {\n      item: item,\n      cfg: cfg\n    });\n\n    if (type === EDGE) {\n      // 若是边要更新source || target, 为了不影响示例内部model，并且重新计算startPoint和endPoint，手动设置\n      if (cfg.source) {\n        var source = cfg.source;\n\n        if (isString(source)) {\n          source = graph.findById(source);\n        }\n\n        item.setSource(source);\n      }\n\n      if (cfg.target) {\n        var target = cfg.target;\n\n        if (isString(target)) {\n          target = graph.findById(target);\n        }\n\n        item.setTarget(target);\n      }\n    }\n\n    item.update(cfg);\n\n    if (type === NODE || type === COMBO) {\n      var edges = item.getEdges();\n      each(edges, function (edge) {\n        edge.refresh();\n      });\n    }\n\n    graph.emit('afterupdateitem', {\n      item: item,\n      cfg: cfg\n    });\n  };\n  /**\n   * 根据 combo 的子元素更新 combo 的位置及大小\n   *\n   * @param {ICombo} combo ID 或 实例\n   * @returns\n   * @memberof ItemController\n   */\n\n\n  ItemController.prototype.updateCombo = function (combo, children) {\n    var graph = this.graph;\n\n    if (isString(combo)) {\n      combo = graph.findById(combo);\n    }\n\n    if (!combo || combo.destroyed) {\n      return;\n    }\n\n    var comboBBox = getComboBBox(children, graph);\n    combo.set('bbox', comboBBox);\n    combo.update({\n      x: comboBBox.x,\n      y: comboBBox.y\n    });\n    var combEdges = combo.getEdges() || [];\n    var length = combEdges.length;\n\n    for (var i = 0; i < length; i++) {\n      var edge = combEdges[i];\n      edge === null || edge === void 0 ? void 0 : edge.refresh();\n    }\n  };\n  /**\n   * 收起 combo，隐藏相关元素\n   */\n\n\n  ItemController.prototype.collapseCombo = function (combo) {\n    var graph = this.graph;\n\n    if (isString(combo)) {\n      combo = graph.findById(combo);\n    }\n\n    var children = combo.getChildren();\n    children.nodes.forEach(function (node) {\n      graph.hideItem(node);\n    });\n    children.combos.forEach(function (c) {\n      graph.hideItem(c);\n    });\n  };\n  /**\n   * 展开 combo，相关元素出现\n   * 若子 combo 原先是收起状态，则保持它的收起状态\n   */\n\n\n  ItemController.prototype.expandCombo = function (combo) {\n    var graph = this.graph;\n\n    if (isString(combo)) {\n      combo = graph.findById(combo);\n    }\n\n    var children = combo.getChildren();\n    children.nodes.forEach(function (node) {\n      graph.showItem(node);\n    });\n    children.combos.forEach(function (c) {\n      if (c.getModel().collapsed) {\n        c.show();\n      } else {\n        graph.showItem(c);\n      }\n    });\n  };\n  /**\n   * 删除指定的节点或边\n   *\n   * @param {Item} item item ID 或实例\n   * @returns {void}\n   * @memberof ItemController\n   */\n\n\n  ItemController.prototype.removeItem = function (item) {\n    var _this = this;\n\n    var graph = this.graph;\n\n    if (isString(item)) {\n      item = graph.findById(item);\n    }\n\n    if (!item || item.destroyed) {\n      return;\n    }\n\n    var itemModel = clone(item.getModel());\n    graph.emit('beforeremoveitem', {\n      item: itemModel\n    });\n    var type = '';\n    if (item.getType) type = item.getType();\n    var items = graph.get(type + \"s\");\n    var index = items.indexOf(item);\n    if (index > -1) items.splice(index, 1);\n\n    if (type === EDGE) {\n      var vitems = graph.get(\"v\" + type + \"s\");\n      var vindex = vitems.indexOf(item);\n      if (vindex > -1) vitems.splice(vindex, 1);\n    }\n\n    var itemId = item.get('id');\n    var itemMap = graph.get('itemMap');\n    delete itemMap[itemId];\n    var comboTrees = graph.get('comboTrees');\n    var id = item.get('id');\n\n    if (type === NODE) {\n      var comboId = item.getModel().comboId;\n\n      if (comboTrees) {\n        var brothers_1 = comboTrees;\n        var found_1 = false; // the flag to terminate the forEach circulation\n        // remove the node from the children array of its parent fromt he tree\n\n        comboTrees.forEach(function (ctree) {\n          if (found_1) return;\n          traverseTree(ctree, function (combo) {\n            if (combo.id === id && brothers_1) {\n              var bidx = brothers_1.indexOf(combo);\n              brothers_1.splice(bidx, 1);\n              found_1 = true;\n              return false; // terminate the traverse\n            }\n\n            brothers_1 = combo.children;\n            return true;\n          });\n        });\n      } // 若移除的是节点，需要将与之相连的边一同删除\n\n\n      var edges = item.getEdges();\n\n      for (var i = edges.length - 1; i >= 0; i--) {\n        graph.removeItem(edges[i], false);\n      }\n\n      if (comboId) graph.updateCombo(comboId);\n    } else if (type === COMBO) {\n      var parentId = item.getModel().parentId;\n      var comboInTree_1; // find the subtree rooted at the item to be removed\n\n      var found_2 = false; // the flag to terminate the forEach circulation\n\n      (comboTrees || []).forEach(function (ctree) {\n        if (found_2) return;\n        traverseTree(ctree, function (combo) {\n          if (combo.id === id) {\n            comboInTree_1 = combo;\n            found_2 = true;\n            return false; // terminate the traverse\n          }\n\n          return true;\n        });\n      });\n      comboInTree_1.removed = true;\n\n      if (comboInTree_1 && comboInTree_1.children) {\n        comboInTree_1.children.forEach(function (child) {\n          _this.removeItem(child.id);\n        });\n      } // 若移除的是 combo，需要将与之相连的边一同删除\n\n\n      var edges = item.getEdges();\n\n      for (var i = edges.length; i >= 0; i--) {\n        graph.removeItem(edges[i], false);\n      }\n\n      if (parentId) graph.updateCombo(parentId);\n    }\n\n    item.destroy();\n    graph.emit('afterremoveitem', {\n      item: itemModel\n    });\n  };\n  /**\n   * 更新 item 状态\n   *\n   * @param {Item} item Item 实例\n   * @param {string} state 状态名称\n   * @param {boolean} value 是否启用状态或状态值\n   * @returns {void}\n   * @memberof ItemController\n   */\n\n\n  ItemController.prototype.setItemState = function (item, state, value) {\n    var graph = this.graph;\n    var stateName = state;\n\n    if (isString(value)) {\n      stateName = state + \":\" + value;\n    } // 已经存在要设置的 state，或不存在 state 的样式为 undefined\n\n\n    if (item.hasState(stateName) === value || isString(value) && item.hasState(stateName)) {\n      return;\n    }\n\n    graph.emit('beforeitemstatechange', {\n      item: item,\n      state: stateName,\n      enabled: value\n    });\n    item.setState(state, value);\n    graph.autoPaint();\n    graph.emit('afteritemstatechange', {\n      item: item,\n      state: stateName,\n      enabled: value\n    });\n  };\n  /**\n   * 将指定状态的优先级提升为最高优先级\n   * @param {Item} item 元素id或元素实例\n   * @param state 状态名称\n   */\n\n\n  ItemController.prototype.priorityState = function (item, state) {\n    var graph = this.graph;\n    var currentItem = item;\n\n    if (isString(item)) {\n      currentItem = graph.findById(item);\n    } // 先取消已有的 state\n\n\n    this.setItemState(currentItem, state, false); // 再设置state，则此时该优先级为最高\n\n    this.setItemState(currentItem, state, true);\n  };\n  /**\n   * 清除所有指定的状态\n   *\n   * @param {Item} item Item 实例\n   * @param {string[]} states 状态名称集合\n   * @memberof ItemController\n   */\n\n\n  ItemController.prototype.clearItemStates = function (item, states) {\n    var graph = this.graph;\n\n    if (isString(item)) {\n      item = graph.findById(item);\n    }\n\n    graph.emit('beforeitemstatesclear', {\n      item: item,\n      states: states\n    });\n    item.clearStates(states);\n    graph.emit('afteritemstatesclear', {\n      item: item,\n      states: states\n    });\n  };\n  /**\n   * 刷新指定的 Item\n   *\n   * @param {Item} item Item ID 或 实例\n   * @memberof ItemController\n   */\n\n\n  ItemController.prototype.refreshItem = function (item) {\n    var graph = this.graph;\n\n    if (isString(item)) {\n      item = graph.findById(item);\n    }\n\n    graph.emit('beforeitemrefresh', {\n      item: item\n    }); // 调用 Item 的 refresh 方法，实现刷新功能\n\n    item.refresh();\n    graph.emit('afteritemrefresh', {\n      item: item\n    });\n  };\n  /**\n   * 根据 graph 上用 combos 数据生成的 comboTree 来增加所有 combos\n   *\n   * @param {ComboTree[]} comboTrees graph 上用 combos 数据生成的 comboTree\n   * @param {ComboConfig[]} comboModels combos 数据\n   * @memberof ItemController\n   */\n\n\n  ItemController.prototype.addCombos = function (comboTrees, comboModels) {\n    var _this = this;\n\n    var graph = this.graph;\n    (comboTrees || []).forEach(function (ctree) {\n      traverseTreeUp(ctree, function (child) {\n        var comboModel;\n        comboModels.forEach(function (model) {\n          if (model.id === child.id) {\n            model.children = child.children;\n            model.depth = child.depth;\n            comboModel = model;\n          }\n        });\n\n        if (comboModel) {\n          _this.addItem('combo', comboModel);\n        }\n\n        return true;\n      });\n    });\n    var comboGroup = graph.get('comboGroup');\n    if (comboGroup) comboGroup.sort();\n  };\n  /**\n   * 改变Item的显示状态\n   *\n   * @param {Item} item Item ID 或 实例\n   * @param {boolean} visible 是否显示\n   * @memberof ItemController\n   */\n\n\n  ItemController.prototype.changeItemVisibility = function (item, visible) {\n    var _this = this;\n\n    var graph = this.graph;\n\n    if (isString(item)) {\n      item = graph.findById(item);\n    }\n\n    if (!item) {\n      console.warn('The item to be shown or hidden does not exist!');\n      return;\n    }\n\n    graph.emit('beforeitemvisibilitychange', {\n      item: item,\n      visible: visible\n    });\n    item.changeVisibility(visible);\n\n    if (item.getType && item.getType() === NODE) {\n      var edges = item.getEdges();\n      each(edges, function (edge) {\n        // 若隐藏节点，则将与之关联的边也隐藏\n        // 若显示节点，则将与之关联的边也显示，但是需要判断边两端的节点都是可见的\n        if (visible && !(edge.get('source').isVisible() && edge.get('target').isVisible())) {\n          return;\n        }\n\n        _this.changeItemVisibility(edge, visible);\n      });\n    } else if (item.getType && item.getType() === COMBO) {\n      var comboTrees = graph.get('comboTrees');\n      var id_1 = item.get('id');\n      var children_1 = [];\n      var found_3 = false; // flag the terminate the forEach\n\n      (comboTrees || []).forEach(function (ctree) {\n        if (found_3) return;\n        if (!ctree.children || ctree.children.length === 0) return;\n        traverseTree(ctree, function (combo) {\n          if (combo.id === id_1) {\n            children_1 = combo.children;\n            found_3 = true;\n            return false; // terminate the traverse\n          }\n\n          return true;\n        });\n      });\n      children_1.forEach(function (child) {\n        var childItem = graph.findById(child.id);\n\n        _this.changeItemVisibility(childItem, visible);\n      });\n      var edges = item.getEdges();\n      each(edges, function (edge) {\n        // 若隐藏 combo，则将与 combo 本身关联的边也隐藏\n        // 若显示 combo，则将与 combo 本身关联的边也显示，但是需要判断边两端的节点都是可见的\n        if (visible && !(edge.get('source').isVisible() && edge.get('target').isVisible())) {\n          return;\n        }\n\n        _this.changeItemVisibility(edge, visible);\n      });\n    }\n\n    graph.emit('afteritemvisibilitychange', {\n      item: item,\n      visible: visible\n    });\n    return item;\n  };\n\n  ItemController.prototype.destroy = function () {\n    this.graph = null;\n    this.destroyed = true;\n  };\n\n  return ItemController;\n}();\n\nexport default ItemController;"]},"metadata":{},"sourceType":"module"}