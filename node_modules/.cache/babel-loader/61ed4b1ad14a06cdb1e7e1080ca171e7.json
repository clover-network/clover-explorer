{"ast":null,"code":"import { map } from '@antv/util';\nimport { flow, findGeometry, deepAssign } from '../../../utils';\nimport { getTooltipMapping } from '../../../utils/tooltip';\nimport { geometry as baseGeometry } from '../../../adaptor/geometries/base';\nimport { FUNNEL_PERCENT, FUNNEL_CONVERSATION } from '../constant';\nimport { geometryLabel, conversionTagComponent } from './common';\n/**\n * 处理字段数据\n * @param params\n */\n\nfunction field(params) {\n  var _a;\n\n  var chart = params.chart,\n      options = params.options;\n  var _b = options.data,\n      data = _b === void 0 ? [] : _b,\n      yField = options.yField,\n      compareField = options.compareField; // 处理数据\n\n  var formatData = [];\n\n  if (data[0][yField]) {\n    // format 数据\n    var depRecord_1 = {};\n    formatData = map(data, function (row) {\n      if (row[yField] !== undefined && row[compareField]) {\n        if (!depRecord_1[row[compareField]]) depRecord_1[row[compareField]] = row[yField];\n        if (!depRecord_1[\"last_\" + row[compareField]]) depRecord_1[\"last_\" + row[compareField]] = row[yField];\n        row[FUNNEL_PERCENT] = row[yField] / depRecord_1[row[compareField]];\n        row[FUNNEL_CONVERSATION] = row[yField] / depRecord_1[\"last_\" + row[compareField]]; // 更新 lastVersion\n\n        depRecord_1[\"last_\" + row[compareField]] = row[yField];\n      }\n\n      return row;\n    });\n  } // 绘制漏斗图\n\n\n  chart.data(formatData);\n  chart.scale((_a = {}, _a[yField] = {\n    sync: true\n  }, _a));\n  return params;\n}\n/**\n * geometry处理\n * @param params\n */\n\n\nfunction geometry(params) {\n  var chart = params.chart,\n      options = params.options;\n  var xField = options.xField,\n      yField = options.yField,\n      color = options.color,\n      compareField = options.compareField,\n      isTransposed = options.isTransposed,\n      tooltip = options.tooltip;\n  chart.facet('mirror', {\n    fields: [compareField],\n    // 漏斗图的转置规则与分面相反，默认是垂直布局\n    transpose: !isTransposed,\n    padding: isTransposed ? 0 : [32, 0, 0, 0],\n    eachView: function (view, facet) {\n      if (!isTransposed) {\n        view.coordinate({\n          type: 'rect',\n          actions: [['transpose'], ['scale', facet.columnIndex === 0 ? -1 : 1, -1]]\n        });\n      } // 绘制图形\n\n\n      var _a = getTooltipMapping(tooltip, [xField, yField, FUNNEL_PERCENT, FUNNEL_CONVERSATION]),\n          fields = _a.fields,\n          formatter = _a.formatter;\n\n      baseGeometry({\n        chart: view,\n        options: {\n          type: 'interval',\n          xField: xField,\n          yField: yField,\n          colorField: xField,\n          tooltipFields: fields,\n          mapping: {\n            shape: 'funnel',\n            tooltip: formatter,\n            color: color,\n            style: {\n              lineWidth: 1,\n              stroke: '#fff'\n            }\n          }\n        }\n      });\n    }\n  });\n  return params;\n}\n/**\n * label 处理\n * @param params\n */\n\n\nfunction label(params) {\n  var chart = params.chart,\n      options = params.options;\n  var label = options.label,\n      isTransposed = options.isTransposed;\n  chart.once('beforepaint', function () {\n    chart.views.forEach(function (view, index) {\n      var geometry = findGeometry(view, 'interval');\n      geometryLabel(geometry)(label ? deepAssign({}, params, {\n        chart: view,\n        options: {\n          label: isTransposed ? {\n            offset: index === 0 ? 10 : -23,\n            position: index === 0 ? 'bottom' : 'top'\n          } : {\n            offset: 10,\n            position: 'left',\n            style: {\n              textAlign: index === 0 ? 'end' : 'start'\n            }\n          }\n        }\n      }) : params);\n    });\n  });\n  return params;\n}\n/**\n * 转化率组件\n * @param params\n */\n\n\nfunction conversionTag(params) {\n  var chart = params.chart,\n      options = params.options;\n  var yField = options.yField,\n      conversionTag = options.conversionTag,\n      isTransposed = options.isTransposed;\n  chart.once('beforepaint', function () {\n    chart.views.forEach(function (view, viewIndex) {\n      var getLineCoordinate = function (datum, datumIndex, data, initLineOption) {\n        var ratio = viewIndex === 0 ? -1 : 1;\n        return deepAssign({}, initLineOption, {\n          start: [datumIndex - 0.5, data[0][yField] * datum[FUNNEL_PERCENT]],\n          end: [datumIndex - 0.5, data[0][yField] * (datum[FUNNEL_PERCENT] + 0.05)],\n          text: isTransposed ? {\n            style: {\n              textAlign: 'start'\n            }\n          } : {\n            offsetX: conversionTag !== false ? ratio * conversionTag.offsetX : 0,\n            style: {\n              textAlign: viewIndex === 0 ? 'end' : 'start'\n            }\n          }\n        });\n      };\n\n      conversionTagComponent(getLineCoordinate)(deepAssign({}, {\n        chart: view,\n        options: options\n      }));\n    });\n  });\n  return params;\n}\n/**\n * 对比漏斗\n * @param chart\n * @param options\n */\n\n\nexport function compareFunnel(params) {\n  return flow(field, geometry, label, conversionTag)(params);\n}","map":{"version":3,"sources":["../../../../src/plots/funnel/geometries/compare.ts"],"names":[],"mappings":"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","sourcesContent":["import { map } from '@antv/util';\nimport { LineOption } from '@antv/g2/lib/interface';\nimport { flow, findGeometry, deepAssign } from '../../../utils';\nimport { Params } from '../../../core/adaptor';\nimport { Datum, Data } from '../../../types/common';\nimport { getTooltipMapping } from '../../../utils/tooltip';\nimport { geometry as baseGeometry } from '../../../adaptor/geometries/base';\nimport { FunnelOptions } from '../types';\nimport { FUNNEL_PERCENT, FUNNEL_CONVERSATION } from '../constant';\nimport { geometryLabel, conversionTagComponent } from './common';\n\n/**\n * 处理字段数据\n * @param params\n */\nfunction field(params: Params<FunnelOptions>): Params<FunnelOptions> {\n  const { chart, options } = params;\n  const { data = [], yField, compareField } = options;\n  // 处理数据\n  let formatData = [];\n  if (data[0][yField]) {\n    // format 数据\n    const depRecord = {};\n    formatData = map(data, (row) => {\n      if (row[yField] !== undefined && row[compareField]) {\n        if (!depRecord[row[compareField]]) depRecord[row[compareField]] = row[yField];\n        if (!depRecord[`last_${row[compareField]}`]) depRecord[`last_${row[compareField]}`] = row[yField];\n        row[FUNNEL_PERCENT] = row[yField] / depRecord[row[compareField]];\n        row[FUNNEL_CONVERSATION] = row[yField] / depRecord[`last_${row[compareField]}`];\n        // 更新 lastVersion\n        depRecord[`last_${row[compareField]}`] = row[yField];\n      }\n      return row;\n    });\n  }\n\n  // 绘制漏斗图\n  chart.data(formatData);\n  chart.scale({\n    [yField]: {\n      sync: true,\n    },\n  });\n  return params;\n}\n\n/**\n * geometry处理\n * @param params\n */\nfunction geometry(params: Params<FunnelOptions>): Params<FunnelOptions> {\n  const { chart, options } = params;\n  const { xField, yField, color, compareField, isTransposed, tooltip } = options;\n\n  chart.facet('mirror', {\n    fields: [compareField],\n    // 漏斗图的转置规则与分面相反，默认是垂直布局\n    transpose: !isTransposed,\n    padding: isTransposed ? 0 : [32, 0, 0, 0],\n    eachView(view, facet) {\n      if (!isTransposed) {\n        view.coordinate({\n          type: 'rect',\n          actions: [['transpose'], ['scale', facet.columnIndex === 0 ? -1 : 1, -1]],\n        });\n      }\n      // 绘制图形\n      const { fields, formatter } = getTooltipMapping(tooltip, [xField, yField, FUNNEL_PERCENT, FUNNEL_CONVERSATION]);\n\n      baseGeometry({\n        chart: view,\n        options: {\n          type: 'interval',\n          xField: xField,\n          yField: yField,\n          colorField: xField,\n          tooltipFields: fields,\n          mapping: {\n            shape: 'funnel',\n            tooltip: formatter,\n            color,\n            style: {\n              lineWidth: 1,\n              stroke: '#fff',\n            },\n          },\n        },\n      });\n    },\n  });\n\n  return params;\n}\n\n/**\n * label 处理\n * @param params\n */\nfunction label(params: Params<FunnelOptions>): Params<FunnelOptions> {\n  const { chart, options } = params;\n  const { label, isTransposed } = options;\n\n  chart.once('beforepaint', () => {\n    chart.views.forEach((view, index) => {\n      const geometry = findGeometry(view, 'interval');\n      geometryLabel(geometry)(\n        label\n          ? deepAssign({}, params, {\n              chart: view,\n              options: {\n                label: isTransposed\n                  ? {\n                      offset: index === 0 ? 10 : -23,\n                      position: index === 0 ? 'bottom' : 'top',\n                    }\n                  : {\n                      offset: 10,\n                      position: 'left',\n                      style: {\n                        textAlign: index === 0 ? 'end' : 'start',\n                      },\n                    },\n              },\n            })\n          : params\n      );\n    });\n  });\n  return params;\n}\n\n/**\n * 转化率组件\n * @param params\n */\nfunction conversionTag(params: Params<FunnelOptions>): Params<FunnelOptions> {\n  const { chart, options } = params;\n  const { yField, conversionTag, isTransposed } = options;\n\n  chart.once('beforepaint', () => {\n    chart.views.forEach((view, viewIndex) => {\n      const getLineCoordinate = (\n        datum: Datum,\n        datumIndex: number,\n        data: Data,\n        initLineOption: Record<string, any>\n      ): LineOption => {\n        const ratio = viewIndex === 0 ? -1 : 1;\n        return deepAssign({}, initLineOption, {\n          start: [datumIndex - 0.5, data[0][yField] * datum[FUNNEL_PERCENT]],\n          end: [datumIndex - 0.5, data[0][yField] * (datum[FUNNEL_PERCENT] + 0.05)],\n          text: isTransposed\n            ? {\n                style: {\n                  textAlign: 'start',\n                },\n              }\n            : {\n                offsetX: conversionTag !== false ? ratio * conversionTag.offsetX : 0,\n                style: {\n                  textAlign: viewIndex === 0 ? 'end' : 'start',\n                },\n              },\n        });\n      };\n\n      conversionTagComponent(getLineCoordinate)(\n        deepAssign(\n          {},\n          {\n            chart: view,\n            options,\n          }\n        )\n      );\n    });\n  });\n  return params;\n}\n\n/**\n * 对比漏斗\n * @param chart\n * @param options\n */\nexport function compareFunnel(params: Params<FunnelOptions>) {\n  return flow(field, geometry, label, conversionTag)(params);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}