{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar line_1 = require(\"./line\");\n\nfunction inPolyline(points, lineWidth, x, y, isClose) {\n  var count = points.length;\n\n  if (count < 2) {\n    return false;\n  }\n\n  for (var i = 0; i < count - 1; i++) {\n    var x1 = points[i][0];\n    var y1 = points[i][1];\n    var x2 = points[i + 1][0];\n    var y2 = points[i + 1][1];\n\n    if (line_1.default(x1, y1, x2, y2, lineWidth, x, y)) {\n      return true;\n    }\n  } // 如果封闭，则计算起始点和结束点的边\n\n\n  if (isClose) {\n    var first = points[0];\n    var last = points[count - 1];\n\n    if (line_1.default(first[0], first[1], last[0], last[1], lineWidth, x, y)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexports.default = inPolyline;","map":{"version":3,"sources":["../../../src/util/in-stroke/polyline.ts"],"names":[],"mappings":";;;;;;AAAA,IAAA,MAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AAEA,SAAwB,UAAxB,CAAmC,MAAnC,EAAkD,SAAlD,EAAqE,CAArE,EAAgF,CAAhF,EAA2F,OAA3F,EAA2G;AACzG,MAAM,KAAK,GAAG,MAAM,CAAC,MAArB;;AACA,MAAI,KAAK,GAAG,CAAZ,EAAe;AACb,WAAO,KAAP;AACD;;AACD,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,GAAG,CAA5B,EAA+B,CAAC,EAAhC,EAAoC;AAClC,QAAM,EAAE,GAAG,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAAX;AACA,QAAM,EAAE,GAAG,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,CAAX;AACA,QAAM,EAAE,GAAG,MAAM,CAAC,CAAC,GAAG,CAAL,CAAN,CAAc,CAAd,CAAX;AACA,QAAM,EAAE,GAAG,MAAM,CAAC,CAAC,GAAG,CAAL,CAAN,CAAc,CAAd,CAAX;;AAEA,QAAI,MAAA,CAAA,OAAA,CAAO,EAAP,EAAW,EAAX,EAAe,EAAf,EAAmB,EAAnB,EAAuB,SAAvB,EAAkC,CAAlC,EAAqC,CAArC,CAAJ,EAA6C;AAC3C,aAAO,IAAP;AACD;AACF,GAdwG,CAgBzG;;;AACA,MAAI,OAAJ,EAAa;AACX,QAAM,KAAK,GAAG,MAAM,CAAC,CAAD,CAApB;AACA,QAAM,IAAI,GAAG,MAAM,CAAC,KAAK,GAAG,CAAT,CAAnB;;AACA,QAAI,MAAA,CAAA,OAAA,CAAO,KAAK,CAAC,CAAD,CAAZ,EAAiB,KAAK,CAAC,CAAD,CAAtB,EAA2B,IAAI,CAAC,CAAD,CAA/B,EAAoC,IAAI,CAAC,CAAD,CAAxC,EAA6C,SAA7C,EAAwD,CAAxD,EAA2D,CAA3D,CAAJ,EAAmE;AACjE,aAAO,IAAP;AACD;AACF;;AAED,SAAO,KAAP;AACD;;AA1BD,OAAA,CAAA,OAAA,GAAA,UAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar line_1 = require(\"./line\");\nfunction inPolyline(points, lineWidth, x, y, isClose) {\n    var count = points.length;\n    if (count < 2) {\n        return false;\n    }\n    for (var i = 0; i < count - 1; i++) {\n        var x1 = points[i][0];\n        var y1 = points[i][1];\n        var x2 = points[i + 1][0];\n        var y2 = points[i + 1][1];\n        if (line_1.default(x1, y1, x2, y2, lineWidth, x, y)) {\n            return true;\n        }\n    }\n    // 如果封闭，则计算起始点和结束点的边\n    if (isClose) {\n        var first = points[0];\n        var last = points[count - 1];\n        if (line_1.default(first[0], first[1], last[0], last[1], lineWidth, x, y)) {\n            return true;\n        }\n    }\n    return false;\n}\nexports.default = inPolyline;\n//# sourceMappingURL=polyline.js.map"]},"metadata":{},"sourceType":"script"}