{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { each, get, isNumber, isFunction, isString } from '@antv/util';\nimport { pick, kebabCase } from '.';\n/**\n * @desc 生成 html-statistic 的 style 字符串 (兼容 canvas 的 shapeStyle 到 css样式上)\n *\n * @param width\n * @param style\n */\n\nexport function adapteStyle(style) {\n  var styleObject = {\n    overflow: 'hidden',\n    'white-space': 'nowrap',\n    'text-overflow': 'ellipsis',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center'\n  };\n  var shapeStyleKeys = ['stroke', 'lineWidth', 'shadowColor', 'strokeOpacity', 'shadowBlur', 'shadowOffsetX', 'shadowOffsetY', 'fill']; // 兼容 shapeStyle 设置 · start\n\n  if (get(style, 'fill')) {\n    styleObject['color'] = style['fill'];\n  }\n\n  var _a = pick(style, shapeStyleKeys),\n      shadowColor = _a.shadowColor,\n      _b = _a.shadowBlur,\n      shadowBlur = _b === void 0 ? 0 : _b,\n      _c = _a.shadowOffsetX,\n      shadowOffsetX = _c === void 0 ? 0 : _c,\n      _d = _a.shadowOffsetY,\n      shadowOffsetY = _d === void 0 ? 0 : _d;\n\n  styleObject['text-shadow'] = \"\" + [shadowColor, shadowOffsetX + \"px\", shadowOffsetY + \"px\", shadowBlur + \"px\"].join(' ');\n\n  var _e = pick(style, shapeStyleKeys),\n      stroke = _e.stroke,\n      _f = _e.lineWidth,\n      lineWidth = _f === void 0 ? 0 : _f;\n\n  styleObject['-webkit-text-stroke'] = \"\" + [lineWidth + \"px\", stroke].join(' '); // 兼容 shapeStyle 设置 · end\n\n  each(style, function (v, k) {\n    //  兼容 shapeStyle 的 fontSize 没有单位\n    if (['fontSize'].includes(k) && isNumber(v)) {\n      styleObject[kebabCase(k)] = v + \"px\";\n    } else if (k && !shapeStyleKeys.includes(k)) {\n      styleObject[kebabCase(k)] = \"\" + v;\n    }\n  });\n  return styleObject;\n}\n/**\n * @desc 设置 html-statistic 容器的默认样式\n *\n * - 默认事件穿透\n */\n\nexport function setStatisticContainerStyle(container, style) {\n  container.style['pointer-events'] = 'none';\n  each(style, function (v, k) {\n    if (k && v) {\n      container.style[k] = v;\n    }\n  });\n}\n/**\n * 渲染环图 html-annotation（默认 position 居中 [50%, 50%]）\n * @param chart\n * @param options\n * @param meta 字段元信息\n * @param {optional} datum 当前的元数据\n */\n\nexport var renderStatistic = function (chart, options, datum) {\n  var statistic = options.statistic,\n      plotType = options.plotType;\n  var titleOpt = statistic.title,\n      contentOpt = statistic.content;\n  [titleOpt, contentOpt].forEach(function (option, idx) {\n    if (!option) {\n      return;\n    }\n\n    var text = '';\n    var transform = '';\n\n    if (idx === 0) {\n      transform = contentOpt ? 'translate(-50%, -100%)' : 'translate(-50%, -50%)';\n    } else {\n      transform = titleOpt ? 'translate(-50%, 0)' : 'translate(-50%, -50%)';\n    }\n\n    var style = isFunction(option.style) ? option.style(datum) : option.style;\n    chart.annotation().html(__assign({\n      position: ['50%', '50%'],\n      html: function (container, view) {\n        var coordinate = view.getCoordinate();\n        var containerW = 0;\n\n        if (plotType === 'pie' || plotType === 'ring-progress') {\n          containerW = coordinate.getRadius() * coordinate.innerRadius * 2;\n        } else if (plotType === 'liquid') {\n          var liquidShape = get(view.geometries, [0, 'elements', 0, 'shape']);\n\n          if (liquidShape) {\n            var circle = liquidShape.find(function (t) {\n              return t.get('type') === 'circle';\n            });\n            var width = circle.getCanvasBBox().width;\n            containerW = width;\n          }\n        } else if (!containerW) {\n          // 保底方案\n          containerW = coordinate.getWidth();\n        }\n\n        setStatisticContainerStyle(container, __assign({\n          width: containerW + \"px\",\n          transform: transform\n        }, adapteStyle(style)));\n        var filteredData = view.getData();\n\n        if (option.customHtml) {\n          return option.customHtml(container, view, datum, filteredData);\n        }\n\n        if (option.formatter) {\n          text = option.formatter(datum, filteredData);\n        } // todo G2 层修复可以返回空字符串 & G2 层修复允许返回非字符串的内容，比如数值 number\n\n\n        return text ? isString(text) ? text : \"\" + text : '<div></div>';\n      },\n      // @ts-ignore\n      key: (idx === 0 ? 'top' : 'bottom') + \"-statistic\"\n    }, pick(option, ['offsetX', 'offsetY', 'rotate', 'style', 'formatter'])\n    /** 透传配置 */\n    ));\n  });\n};\n/**\n * 渲染 html-annotation for gauge (等不规则 plot), 默认 position 居中居底 [50%, 100%]）\n * @param chart\n * @param options\n * @param meta 字段元信息\n * @param {optional} datum 当前的元数据\n */\n\nexport var renderGaugeStatistic = function (chart, options, datum) {\n  var statistic = options.statistic;\n  var titleOpt = statistic.title,\n      contentOpt = statistic.content;\n  [titleOpt, contentOpt].forEach(function (option) {\n    if (!option) {\n      return;\n    }\n\n    var text = '';\n    var style = isFunction(option.style) ? option.style(datum) : option.style;\n    chart.annotation().html(__assign({\n      position: ['50%', '100%'],\n      html: function (container, view) {\n        var coordinate = view.getCoordinate(); // 弧形的坐标\n\n        var polarCoord = view.views[0].getCoordinate();\n        var polarCenter = polarCoord.getCenter();\n        var polarRadius = polarCoord.getRadius();\n        var polarMaxY = Math.max(Math.sin(polarCoord.startAngle), Math.sin(polarCoord.endAngle)) * polarRadius;\n        var offsetY = polarCenter.y + polarMaxY - coordinate.y.start - parseFloat(get(style, 'fontSize', 0));\n        var containerWidth = coordinate.getRadius() * coordinate.innerRadius * 2;\n        setStatisticContainerStyle(container, __assign({\n          width: containerWidth + \"px\",\n          transform: \"translate(-50%, \" + offsetY + \"px)\"\n        }, adapteStyle(style)));\n        var filteredData = view.getData();\n\n        if (option.customHtml) {\n          return option.customHtml(container, view, datum, filteredData);\n        }\n\n        if (option.formatter) {\n          text = option.formatter(datum, filteredData);\n        } // todo G2 层修复可以返回空字符串 & G2 层修复允许返回非字符串的内容，比如数值 number\n\n\n        return text ? isString(text) ? text : \"\" + text : '<div></div>';\n      }\n    }, pick(option, ['offsetX', 'offsetY', 'rotate', 'style', 'formatter'])\n    /** 透传配置 */\n    ));\n  });\n};","map":{"version":3,"sources":["../../src/utils/statistic.ts"],"names":[],"mappings":"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","sourcesContent":["import { View } from '@antv/g2';\nimport { IGroup } from '@antv/g2/lib/dependents';\nimport { each, get, isNumber, isFunction, isString } from '@antv/util';\nimport { Datum, ShapeStyle, Statistic, StatisticText } from '../types';\nimport { pick, kebabCase } from '.';\n\n/**\n * @desc 生成 html-statistic 的 style 字符串 (兼容 canvas 的 shapeStyle 到 css样式上)\n *\n * @param width\n * @param style\n */\nexport function adapteStyle(style?: StatisticText['style']): object {\n  const styleObject = {\n    overflow: 'hidden',\n    'white-space': 'nowrap',\n    'text-overflow': 'ellipsis',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  };\n\n  const shapeStyleKeys = [\n    'stroke',\n    'lineWidth',\n    'shadowColor',\n    'strokeOpacity',\n    'shadowBlur',\n    'shadowOffsetX',\n    'shadowOffsetY',\n    'fill',\n  ];\n\n  // 兼容 shapeStyle 设置 · start\n  if (get(style, 'fill')) {\n    styleObject['color'] = style['fill'];\n  }\n  const { shadowColor, shadowBlur = 0, shadowOffsetX = 0, shadowOffsetY = 0 } = pick(\n    style,\n    shapeStyleKeys\n  ) as ShapeStyle;\n  styleObject['text-shadow'] = `${[shadowColor, `${shadowOffsetX}px`, `${shadowOffsetY}px`, `${shadowBlur}px`].join(\n    ' '\n  )}`;\n\n  const { stroke, lineWidth = 0 } = pick(style, shapeStyleKeys) as ShapeStyle;\n  styleObject['-webkit-text-stroke'] = `${[`${lineWidth}px`, stroke].join(' ')}`;\n  // 兼容 shapeStyle 设置 · end\n\n  each(style, (v, k) => {\n    //  兼容 shapeStyle 的 fontSize 没有单位\n    if (['fontSize'].includes(k) && isNumber(v)) {\n      styleObject[kebabCase(k)] = `${v}px`;\n    } else if (k && !shapeStyleKeys.includes(k)) {\n      styleObject[kebabCase(k)] = `${v}`;\n    }\n  });\n\n  return styleObject;\n}\n\n/**\n * @desc 设置 html-statistic 容器的默认样式\n *\n * - 默认事件穿透\n */\nexport function setStatisticContainerStyle(container: HTMLElement, style: Partial<CSSStyleDeclaration>) {\n  container.style['pointer-events'] = 'none';\n  each(style, (v, k) => {\n    if (k && v) {\n      container.style[k] = v;\n    }\n  });\n}\n\n/**\n * 渲染环图 html-annotation（默认 position 居中 [50%, 50%]）\n * @param chart\n * @param options\n * @param meta 字段元信息\n * @param {optional} datum 当前的元数据\n */\nexport const renderStatistic = (chart: View, options: { statistic: Statistic; plotType: string }, datum?: Datum) => {\n  const { statistic, plotType } = options;\n  const { title: titleOpt, content: contentOpt } = statistic;\n\n  [titleOpt, contentOpt].forEach((option, idx) => {\n    if (!option) {\n      return;\n    }\n    let text = '';\n    let transform = '';\n    if (idx === 0) {\n      transform = contentOpt ? 'translate(-50%, -100%)' : 'translate(-50%, -50%)';\n    } else {\n      transform = titleOpt ? 'translate(-50%, 0)' : 'translate(-50%, -50%)';\n    }\n    const style = isFunction(option.style) ? option.style(datum) : option.style;\n\n    chart.annotation().html({\n      position: ['50%', '50%'],\n      html: (container, view) => {\n        const coordinate = view.getCoordinate();\n        let containerW = 0;\n        if (plotType === 'pie' || plotType === 'ring-progress') {\n          containerW = coordinate.getRadius() * coordinate.innerRadius * 2;\n        } else if (plotType === 'liquid') {\n          const liquidShape = get(view.geometries, [0, 'elements', 0, 'shape']);\n          if (liquidShape) {\n            const circle = (liquidShape as IGroup).find((t) => t.get('type') === 'circle');\n            const { width } = circle.getCanvasBBox();\n            containerW = width;\n          }\n        } else if (!containerW) {\n          // 保底方案\n          containerW = coordinate.getWidth();\n        }\n        setStatisticContainerStyle(container, {\n          width: `${containerW}px`,\n          transform,\n          // user's style setting has high priority\n          ...adapteStyle(style),\n        });\n\n        const filteredData = view.getData();\n        if (option.customHtml) {\n          return option.customHtml(container, view, datum, filteredData);\n        }\n        if (option.formatter) {\n          text = option.formatter(datum, filteredData);\n        }\n\n        // todo G2 层修复可以返回空字符串 & G2 层修复允许返回非字符串的内容，比如数值 number\n        return text ? (isString(text) ? text : `${text}`) : '<div></div>';\n      },\n      // @ts-ignore\n      key: `${idx === 0 ? 'top' : 'bottom'}-statistic`,\n      ...pick(option, ['offsetX', 'offsetY', 'rotate', 'style', 'formatter']) /** 透传配置 */,\n    });\n  });\n};\n\n/**\n * 渲染 html-annotation for gauge (等不规则 plot), 默认 position 居中居底 [50%, 100%]）\n * @param chart\n * @param options\n * @param meta 字段元信息\n * @param {optional} datum 当前的元数据\n */\nexport const renderGaugeStatistic = (chart: View, options: { statistic: Statistic }, datum?: Datum) => {\n  const { statistic } = options;\n  const { title: titleOpt, content: contentOpt } = statistic;\n\n  [titleOpt, contentOpt].forEach((option) => {\n    if (!option) {\n      return;\n    }\n    let text = '';\n    const style = isFunction(option.style) ? option.style(datum) : option.style;\n    chart.annotation().html({\n      position: ['50%', '100%'],\n      html: (container, view) => {\n        const coordinate = view.getCoordinate();\n        // 弧形的坐标\n        const polarCoord = view.views[0].getCoordinate();\n        const polarCenter = polarCoord.getCenter();\n        const polarRadius = polarCoord.getRadius();\n        const polarMaxY = Math.max(Math.sin(polarCoord.startAngle), Math.sin(polarCoord.endAngle)) * polarRadius;\n        const offsetY = polarCenter.y + polarMaxY - coordinate.y.start - parseFloat(get(style, 'fontSize', 0));\n\n        const containerWidth = coordinate.getRadius() * coordinate.innerRadius * 2;\n        setStatisticContainerStyle(container, {\n          width: `${containerWidth}px`,\n          transform: `translate(-50%, ${offsetY}px)`,\n          // user's style setting has high priority\n          ...adapteStyle(style),\n        });\n\n        const filteredData = view.getData();\n        if (option.customHtml) {\n          return option.customHtml(container, view, datum, filteredData);\n        }\n        if (option.formatter) {\n          text = option.formatter(datum, filteredData);\n        }\n\n        // todo G2 层修复可以返回空字符串 & G2 层修复允许返回非字符串的内容，比如数值 number\n        return text ? (isString(text) ? text : `${text}`) : '<div></div>';\n      },\n      ...pick(option, ['offsetX', 'offsetY', 'rotate', 'style', 'formatter']) /** 透传配置 */,\n    });\n  });\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}