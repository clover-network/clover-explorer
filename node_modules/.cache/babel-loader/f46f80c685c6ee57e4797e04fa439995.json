{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { polygon as polygonAdaptor } from '../../adaptor/geometries';\nimport { interaction, animation, theme, annotation } from '../../adaptor/common';\nimport { flow, findGeometry, transformLabel, deepAssign } from '../../utils';\nimport { transformData, getTooltipTemplate } from './utils';\n/**\n * geometry 配置处理\n * @param params\n */\n\nfunction geometry(params) {\n  var chart = params.chart,\n      options = params.options;\n  var color = options.color,\n      colorField = options.colorField,\n      sunburstStyle = options.sunburstStyle;\n  var data = transformData(options);\n  chart.data(data); // geometry\n\n  polygonAdaptor(deepAssign({}, params, {\n    options: {\n      xField: 'x',\n      yField: 'y',\n      seriesField: colorField,\n      polygon: {\n        color: color,\n        style: sunburstStyle\n      }\n    }\n  }));\n  return params;\n}\n/**\n * axis 配置\n * @param params\n */\n\n\nexport function axis(params) {\n  var chart = params.chart;\n  chart.axis(false);\n  return params;\n}\n/**\n * legend 配置\n * @param params\n */\n\nexport function legend(params) {\n  var chart = params.chart;\n  chart.legend(false);\n  return params;\n}\n/**\n * 数据标签\n * @param params\n */\n\nfunction label(params) {\n  var chart = params.chart,\n      options = params.options;\n  var label = options.label,\n      seriesField = options.seriesField;\n  var geometry = findGeometry(chart, 'polygon'); // label 为 false, 空 则不显示 label\n\n  if (!label) {\n    geometry.label(false);\n  } else {\n    var callback = label.callback,\n        cfg = __rest(label, [\"callback\"]);\n\n    geometry.label({\n      fields: [seriesField],\n      callback: callback,\n      cfg: transformLabel(cfg)\n    });\n  }\n\n  return params;\n}\n/**\n * coord 配置\n * @param params\n */\n\n\nfunction coordinate(params) {\n  var chart = params.chart,\n      options = params.options;\n  var innerRadius = options.innerRadius,\n      radius = options.radius,\n      reflect = options.reflect;\n  var coord = chart.coordinate({\n    type: 'polar',\n    cfg: {\n      innerRadius: innerRadius,\n      radius: radius\n    }\n  });\n\n  if (reflect) {\n    coord.reflect(reflect);\n  }\n\n  return params;\n}\n/**\n * scale 配置\n * @param params\n */\n\n\nfunction scale(params) {\n  var chart = params.chart,\n      options = params.options;\n  var meta = options.meta;\n\n  if (meta) {\n    // @ts-ignore\n    chart.scale(meta);\n  }\n\n  return params;\n}\n/**\n * tooltip 配置\n * @param params\n */\n\n\nexport function tooltip(params) {\n  var chart = params.chart,\n      options = params.options;\n  var tooltip = options.tooltip,\n      seriesField = options.seriesField,\n      colorField = options.colorField;\n\n  if (tooltip) {\n    chart.tooltip(__assign(__assign({}, tooltip), {\n      customContent: tooltip && tooltip.customContent ? tooltip.customContent : function (value, items) {\n        return getTooltipTemplate({\n          value: value,\n          items: items,\n          formatter: tooltip && (tooltip === null || tooltip === void 0 ? void 0 : tooltip.formatter),\n          fields: tooltip && tooltip.fields || [seriesField, colorField]\n        });\n      }\n    }));\n  }\n\n  return params;\n}\n/**\n * 旭日图适配器\n * @param chart\n * @param options\n */\n\nexport function adaptor(params) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(geometry, theme, axis, scale, legend, coordinate, tooltip, label, interaction, animation, annotation())(params);\n}","map":{"version":3,"sources":["../../../src/plots/sunburst/adaptor.ts"],"names":[],"mappings":"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","sourcesContent":["import { Params } from '../../core/adaptor';\nimport { polygon as polygonAdaptor } from '../../adaptor/geometries';\nimport { interaction, animation, theme, annotation } from '../../adaptor/common';\nimport { flow, findGeometry, transformLabel, deepAssign } from '../../utils';\nimport { transformData, getTooltipTemplate } from './utils';\nimport { SunburstOptions } from './types';\n\n/**\n * geometry 配置处理\n * @param params\n */\nfunction geometry(params: Params<SunburstOptions>): Params<SunburstOptions> {\n  const { chart, options } = params;\n  const { color, colorField, sunburstStyle } = options;\n  const data = transformData(options);\n  chart.data(data);\n\n  // geometry\n  polygonAdaptor(\n    deepAssign({}, params, {\n      options: {\n        xField: 'x',\n        yField: 'y',\n        seriesField: colorField,\n        polygon: {\n          color,\n          style: sunburstStyle,\n        },\n      },\n    })\n  );\n\n  return params;\n}\n\n/**\n * axis 配置\n * @param params\n */\nexport function axis(params: Params<SunburstOptions>): Params<SunburstOptions> {\n  const { chart } = params;\n  chart.axis(false);\n  return params;\n}\n\n/**\n * legend 配置\n * @param params\n */\nexport function legend(params: Params<SunburstOptions>): Params<SunburstOptions> {\n  const { chart } = params;\n  chart.legend(false);\n  return params;\n}\n\n/**\n * 数据标签\n * @param params\n */\nfunction label(params: Params<SunburstOptions>): Params<SunburstOptions> {\n  const { chart, options } = params;\n  const { label, seriesField } = options;\n\n  const geometry = findGeometry(chart, 'polygon');\n\n  // label 为 false, 空 则不显示 label\n  if (!label) {\n    geometry.label(false);\n  } else {\n    const { callback, ...cfg } = label;\n    geometry.label({\n      fields: [seriesField],\n      callback,\n      cfg: transformLabel(cfg),\n    });\n  }\n\n  return params;\n}\n\n/**\n * coord 配置\n * @param params\n */\nfunction coordinate(params: Params<SunburstOptions>): Params<SunburstOptions> {\n  const { chart, options } = params;\n  const { innerRadius, radius, reflect } = options;\n\n  const coord = chart.coordinate({\n    type: 'polar',\n    cfg: {\n      innerRadius,\n      radius,\n    },\n  });\n  if (reflect) {\n    coord.reflect(reflect);\n  }\n\n  return params;\n}\n\n/**\n * scale 配置\n * @param params\n */\nfunction scale(params: Params<SunburstOptions>): Params<SunburstOptions> {\n  const { chart, options } = params;\n  const { meta } = options;\n\n  if (meta) {\n    // @ts-ignore\n    chart.scale(meta);\n  }\n\n  return params;\n}\n\n/**\n * tooltip 配置\n * @param params\n */\nexport function tooltip(params: Params<SunburstOptions>): Params<SunburstOptions> {\n  const { chart, options } = params;\n  const { tooltip, seriesField, colorField } = options;\n\n  if (tooltip) {\n    chart.tooltip({\n      ...tooltip,\n      customContent:\n        tooltip && tooltip.customContent\n          ? tooltip.customContent\n          : (value: string, items: any[]) => {\n              return getTooltipTemplate({\n                value,\n                items,\n                formatter: tooltip && tooltip?.formatter,\n                fields: (tooltip && tooltip.fields) || [seriesField, colorField],\n              });\n            },\n    });\n  }\n\n  return params;\n}\n\n/**\n * 旭日图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<SunburstOptions>) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(\n    geometry,\n    theme,\n    axis,\n    scale,\n    legend,\n    coordinate,\n    tooltip,\n    label,\n    interaction,\n    animation,\n    annotation()\n  )(params);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}