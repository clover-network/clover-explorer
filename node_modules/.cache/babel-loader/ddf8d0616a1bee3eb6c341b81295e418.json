{"ast":null,"code":"import { __extends } from \"tslib\";\nimport Path from '../Path';\nvar cos = Math.cos;\nvar sin = Math.sin;\n\nvar TrochoidShape = function () {\n  function TrochoidShape() {\n    this.cx = 0;\n    this.cy = 0;\n    this.r = 0;\n    this.r0 = 0;\n    this.d = 0;\n    this.location = 'out';\n  }\n\n  return TrochoidShape;\n}();\n\nvar Trochoid = function (_super) {\n  __extends(Trochoid, _super);\n\n  function Trochoid(opts) {\n    return _super.call(this, opts) || this;\n  }\n\n  Trochoid.prototype.getDefaultStyle = function () {\n    return {\n      stroke: '#000',\n      fill: null\n    };\n  };\n\n  Trochoid.prototype.getDefaultShape = function () {\n    return new TrochoidShape();\n  };\n\n  Trochoid.prototype.buildPath = function (ctx, shape) {\n    var R = shape.r;\n    var r = shape.r0;\n    var d = shape.d;\n    var offsetX = shape.cx;\n    var offsetY = shape.cy;\n    var delta = shape.location === 'out' ? 1 : -1;\n    var x1;\n    var y1;\n    var x2;\n    var y2;\n\n    if (shape.location && R <= r) {\n      return;\n    }\n\n    var num = 0;\n    var i = 1;\n    var theta;\n    x1 = (R + delta * r) * cos(0) - delta * d * cos(0) + offsetX;\n    y1 = (R + delta * r) * sin(0) - d * sin(0) + offsetY;\n    ctx.moveTo(x1, y1);\n\n    do {\n      num++;\n    } while (r * num % (R + delta * r) !== 0);\n\n    do {\n      theta = Math.PI / 180 * i;\n      x2 = (R + delta * r) * cos(theta) - delta * d * cos((R / r + delta) * theta) + offsetX;\n      y2 = (R + delta * r) * sin(theta) - d * sin((R / r + delta) * theta) + offsetY;\n      ctx.lineTo(x2, y2);\n      i++;\n    } while (i <= r * num / (R + delta * r) * 360);\n  };\n\n  return Trochoid;\n}(Path);\n\nTrochoid.prototype.type = 'trochoid';\nexport default Trochoid;","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/zrender/esm/graphic/shape/Trochoid.js"],"names":["__extends","Path","cos","Math","sin","TrochoidShape","cx","cy","r","r0","d","location","Trochoid","_super","opts","call","prototype","getDefaultStyle","stroke","fill","getDefaultShape","buildPath","ctx","shape","R","offsetX","offsetY","delta","x1","y1","x2","y2","num","i","theta","moveTo","PI","lineTo","type"],"mappings":"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","sourcesContent":["import { __extends } from \"tslib\";\nimport Path from '../Path';\nvar cos = Math.cos;\nvar sin = Math.sin;\nvar TrochoidShape = (function () {\n    function TrochoidShape() {\n        this.cx = 0;\n        this.cy = 0;\n        this.r = 0;\n        this.r0 = 0;\n        this.d = 0;\n        this.location = 'out';\n    }\n    return TrochoidShape;\n}());\nvar Trochoid = (function (_super) {\n    __extends(Trochoid, _super);\n    function Trochoid(opts) {\n        return _super.call(this, opts) || this;\n    }\n    Trochoid.prototype.getDefaultStyle = function () {\n        return {\n            stroke: '#000',\n            fill: null\n        };\n    };\n    Trochoid.prototype.getDefaultShape = function () {\n        return new TrochoidShape();\n    };\n    Trochoid.prototype.buildPath = function (ctx, shape) {\n        var R = shape.r;\n        var r = shape.r0;\n        var d = shape.d;\n        var offsetX = shape.cx;\n        var offsetY = shape.cy;\n        var delta = shape.location === 'out' ? 1 : -1;\n        var x1;\n        var y1;\n        var x2;\n        var y2;\n        if (shape.location && R <= r) {\n            return;\n        }\n        var num = 0;\n        var i = 1;\n        var theta;\n        x1 = (R + delta * r) * cos(0)\n            - delta * d * cos(0) + offsetX;\n        y1 = (R + delta * r) * sin(0)\n            - d * sin(0) + offsetY;\n        ctx.moveTo(x1, y1);\n        do {\n            num++;\n        } while ((r * num) % (R + delta * r) !== 0);\n        do {\n            theta = Math.PI / 180 * i;\n            x2 = (R + delta * r) * cos(theta)\n                - delta * d * cos((R / r + delta) * theta)\n                + offsetX;\n            y2 = (R + delta * r) * sin(theta)\n                - d * sin((R / r + delta) * theta)\n                + offsetY;\n            ctx.lineTo(x2, y2);\n            i++;\n        } while (i <= (r * num) / (R + delta * r) * 360);\n    };\n    return Trochoid;\n}(Path));\nTrochoid.prototype.type = 'trochoid';\nexport default Trochoid;\n"]},"metadata":{},"sourceType":"module"}