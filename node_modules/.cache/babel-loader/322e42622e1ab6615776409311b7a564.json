{"ast":null,"code":"import deepMix from '@antv/util/lib/deep-mix';\nimport each from '@antv/util/lib/each';\nimport wrapBehavior from '@antv/util/lib/wrap-behavior';\n\nvar PluginBase =\n/** @class */\nfunction () {\n  /**\n   * 插件基类的构造函数\n   * @param cfgs 插件的配置项\n   */\n  function PluginBase(cfgs) {\n    this._cfgs = deepMix(this.getDefaultCfgs(), cfgs);\n    this._events = {};\n    this.destroyed = false;\n  }\n  /**\n   * 获取默认的插件配置\n   */\n\n\n  PluginBase.prototype.getDefaultCfgs = function () {\n    return {};\n  };\n  /**\n   * 初始化插件\n   * @param graph Graph 实例\n   */\n\n\n  PluginBase.prototype.initPlugin = function (graph) {\n    var self = this;\n    self.set('graph', graph);\n    var events = self.getEvents();\n    var bindEvents = {};\n    each(events, function (v, k) {\n      var event = wrapBehavior(self, v);\n      bindEvents[k] = event;\n      graph.on(k, event);\n    });\n    this._events = bindEvents;\n    this.init();\n  };\n  /**\n   * 初始化方法，供子类实现\n   */\n\n\n  PluginBase.prototype.init = function () {};\n  /**\n   * 获取插件中的事件和事件处理方法，供子类实现\n   */\n\n\n  PluginBase.prototype.getEvents = function () {\n    return {};\n  };\n  /**\n   * 获取配置项中的某个值\n   * @param key 键值\n   */\n\n\n  PluginBase.prototype.get = function (key) {\n    return this._cfgs[key];\n  };\n  /**\n   * 将指定的值存储到 cfgs 中\n   * @param key 键值\n   * @param val 设置的值\n   */\n\n\n  PluginBase.prototype.set = function (key, val) {\n    this._cfgs[key] = val;\n  };\n  /**\n   * 销毁方法，供子类复写\n   */\n\n\n  PluginBase.prototype.destroy = function () {};\n  /**\n   * 销毁插件\n   */\n\n\n  PluginBase.prototype.destroyPlugin = function () {\n    this.destroy();\n    var graph = this.get('graph');\n    var events = this._events;\n    each(events, function (v, k) {\n      graph.off(k, v);\n    });\n    this._events = null;\n    this._cfgs = null;\n    this.destroyed = true;\n  };\n\n  return PluginBase;\n}();\n\nexport default PluginBase;","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/@antv/g6/es/plugins/base.js"],"names":["deepMix","each","wrapBehavior","PluginBase","cfgs","_cfgs","getDefaultCfgs","_events","destroyed","prototype","initPlugin","graph","self","set","events","getEvents","bindEvents","v","k","event","on","init","get","key","val","destroy","destroyPlugin","off"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,yBAApB;AACA,OAAOC,IAAP,MAAiB,qBAAjB;AACA,OAAOC,YAAP,MAAyB,8BAAzB;;AAEA,IAAIC,UAAU;AACd;AACA,YAAY;AACV;AACF;AACA;AACA;AACE,WAASA,UAAT,CAAoBC,IAApB,EAA0B;AACxB,SAAKC,KAAL,GAAaL,OAAO,CAAC,KAAKM,cAAL,EAAD,EAAwBF,IAAxB,CAApB;AACA,SAAKG,OAAL,GAAe,EAAf;AACA,SAAKC,SAAL,GAAiB,KAAjB;AACD;AACD;AACF;AACA;;;AAGEL,EAAAA,UAAU,CAACM,SAAX,CAAqBH,cAArB,GAAsC,YAAY;AAChD,WAAO,EAAP;AACD,GAFD;AAGA;AACF;AACA;AACA;;;AAGEH,EAAAA,UAAU,CAACM,SAAX,CAAqBC,UAArB,GAAkC,UAAUC,KAAV,EAAiB;AACjD,QAAIC,IAAI,GAAG,IAAX;AACAA,IAAAA,IAAI,CAACC,GAAL,CAAS,OAAT,EAAkBF,KAAlB;AACA,QAAIG,MAAM,GAAGF,IAAI,CAACG,SAAL,EAAb;AACA,QAAIC,UAAU,GAAG,EAAjB;AACAf,IAAAA,IAAI,CAACa,MAAD,EAAS,UAAUG,CAAV,EAAaC,CAAb,EAAgB;AAC3B,UAAIC,KAAK,GAAGjB,YAAY,CAACU,IAAD,EAAOK,CAAP,CAAxB;AACAD,MAAAA,UAAU,CAACE,CAAD,CAAV,GAAgBC,KAAhB;AACAR,MAAAA,KAAK,CAACS,EAAN,CAASF,CAAT,EAAYC,KAAZ;AACD,KAJG,CAAJ;AAKA,SAAKZ,OAAL,GAAeS,UAAf;AACA,SAAKK,IAAL;AACD,GAZD;AAaA;AACF;AACA;;;AAGElB,EAAAA,UAAU,CAACM,SAAX,CAAqBY,IAArB,GAA4B,YAAY,CAAE,CAA1C;AACA;AACF;AACA;;;AAGElB,EAAAA,UAAU,CAACM,SAAX,CAAqBM,SAArB,GAAiC,YAAY;AAC3C,WAAO,EAAP;AACD,GAFD;AAGA;AACF;AACA;AACA;;;AAGEZ,EAAAA,UAAU,CAACM,SAAX,CAAqBa,GAArB,GAA2B,UAAUC,GAAV,EAAe;AACxC,WAAO,KAAKlB,KAAL,CAAWkB,GAAX,CAAP;AACD,GAFD;AAGA;AACF;AACA;AACA;AACA;;;AAGEpB,EAAAA,UAAU,CAACM,SAAX,CAAqBI,GAArB,GAA2B,UAAUU,GAAV,EAAeC,GAAf,EAAoB;AAC7C,SAAKnB,KAAL,CAAWkB,GAAX,IAAkBC,GAAlB;AACD,GAFD;AAGA;AACF;AACA;;;AAGErB,EAAAA,UAAU,CAACM,SAAX,CAAqBgB,OAArB,GAA+B,YAAY,CAAE,CAA7C;AACA;AACF;AACA;;;AAGEtB,EAAAA,UAAU,CAACM,SAAX,CAAqBiB,aAArB,GAAqC,YAAY;AAC/C,SAAKD,OAAL;AACA,QAAId,KAAK,GAAG,KAAKW,GAAL,CAAS,OAAT,CAAZ;AACA,QAAIR,MAAM,GAAG,KAAKP,OAAlB;AACAN,IAAAA,IAAI,CAACa,MAAD,EAAS,UAAUG,CAAV,EAAaC,CAAb,EAAgB;AAC3BP,MAAAA,KAAK,CAACgB,GAAN,CAAUT,CAAV,EAAaD,CAAb;AACD,KAFG,CAAJ;AAGA,SAAKV,OAAL,GAAe,IAAf;AACA,SAAKF,KAAL,GAAa,IAAb;AACA,SAAKG,SAAL,GAAiB,IAAjB;AACD,GAVD;;AAYA,SAAOL,UAAP;AACD,CA9FD,EAFA;;AAkGA,eAAeA,UAAf","sourcesContent":["import deepMix from '@antv/util/lib/deep-mix';\nimport each from '@antv/util/lib/each';\nimport wrapBehavior from '@antv/util/lib/wrap-behavior';\n\nvar PluginBase =\n/** @class */\nfunction () {\n  /**\n   * 插件基类的构造函数\n   * @param cfgs 插件的配置项\n   */\n  function PluginBase(cfgs) {\n    this._cfgs = deepMix(this.getDefaultCfgs(), cfgs);\n    this._events = {};\n    this.destroyed = false;\n  }\n  /**\n   * 获取默认的插件配置\n   */\n\n\n  PluginBase.prototype.getDefaultCfgs = function () {\n    return {};\n  };\n  /**\n   * 初始化插件\n   * @param graph Graph 实例\n   */\n\n\n  PluginBase.prototype.initPlugin = function (graph) {\n    var self = this;\n    self.set('graph', graph);\n    var events = self.getEvents();\n    var bindEvents = {};\n    each(events, function (v, k) {\n      var event = wrapBehavior(self, v);\n      bindEvents[k] = event;\n      graph.on(k, event);\n    });\n    this._events = bindEvents;\n    this.init();\n  };\n  /**\n   * 初始化方法，供子类实现\n   */\n\n\n  PluginBase.prototype.init = function () {};\n  /**\n   * 获取插件中的事件和事件处理方法，供子类实现\n   */\n\n\n  PluginBase.prototype.getEvents = function () {\n    return {};\n  };\n  /**\n   * 获取配置项中的某个值\n   * @param key 键值\n   */\n\n\n  PluginBase.prototype.get = function (key) {\n    return this._cfgs[key];\n  };\n  /**\n   * 将指定的值存储到 cfgs 中\n   * @param key 键值\n   * @param val 设置的值\n   */\n\n\n  PluginBase.prototype.set = function (key, val) {\n    this._cfgs[key] = val;\n  };\n  /**\n   * 销毁方法，供子类复写\n   */\n\n\n  PluginBase.prototype.destroy = function () {};\n  /**\n   * 销毁插件\n   */\n\n\n  PluginBase.prototype.destroyPlugin = function () {\n    this.destroy();\n    var graph = this.get('graph');\n    var events = this._events;\n    each(events, function (v, k) {\n      graph.off(k, v);\n    });\n    this._events = null;\n    this._cfgs = null;\n    this.destroyed = true;\n  };\n\n  return PluginBase;\n}();\n\nexport default PluginBase;"]},"metadata":{},"sourceType":"module"}