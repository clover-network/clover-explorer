{"ast":null,"code":"import { each, clone } from '@antv/util';\nimport mat3 from './mat3';\nexport default (function (m, ts) {\n  // 上层使用时会传入为 null 的 matrix，此时按照单位矩阵处理\n  var matrix = m ? clone(m) : [1, 0, 0, 0, 1, 0, 0, 0, 1];\n  each(ts, function (t) {\n    switch (t[0]) {\n      case 't':\n        mat3.translate(matrix, matrix, [t[1], t[2]]);\n        break;\n\n      case 's':\n        mat3.scale(matrix, matrix, [t[1], t[2]]);\n        break;\n\n      case 'r':\n        mat3.rotate(matrix, matrix, t[1]);\n        break;\n\n      case 'm':\n        mat3.multiply(matrix, matrix, t[1]);\n        break;\n\n      default:\n        return false;\n    }\n  });\n  return matrix;\n});","map":{"version":3,"sources":["../src/transform.ts"],"names":[],"mappings":"AAAA,SAAS,IAAT,EAAe,KAAf,QAA4B,YAA5B;AACA,OAAO,IAAP,MAAiB,QAAjB;AAEA,gBAAe,UAAC,CAAD,EAAI,EAAJ,EAAM;AACnB;AACA,MAAM,MAAM,GAAG,CAAC,GAAG,KAAK,CAAC,CAAD,CAAR,GAAc,CAAE,CAAF,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,CAA9B;AACA,EAAA,IAAI,CAAC,EAAD,EAAK,UAAC,CAAD,EAAE;AACT,YAAQ,CAAC,CAAC,CAAD,CAAT;AACE,WAAK,GAAL;AACE,QAAA,IAAI,CAAC,SAAL,CAAe,MAAf,EAAuB,MAAvB,EAA+B,CAAE,CAAC,CAAC,CAAD,CAAH,EAAQ,CAAC,CAAC,CAAD,CAAT,CAA/B;AACA;;AACF,WAAK,GAAL;AACE,QAAA,IAAI,CAAC,KAAL,CAAW,MAAX,EAAmB,MAAnB,EAA2B,CAAE,CAAC,CAAC,CAAD,CAAH,EAAQ,CAAC,CAAC,CAAD,CAAT,CAA3B;AACA;;AACF,WAAK,GAAL;AACE,QAAA,IAAI,CAAC,MAAL,CAAY,MAAZ,EAAoB,MAApB,EAA4B,CAAC,CAAC,CAAD,CAA7B;AACA;;AACF,WAAK,GAAL;AACE,QAAA,IAAI,CAAC,QAAL,CAAc,MAAd,EAAsB,MAAtB,EAA8B,CAAC,CAAC,CAAD,CAA/B;AACA;;AACF;AACE,eAAO,KAAP;AAdJ;AAgBD,GAjBG,CAAJ;AAkBA,SAAO,MAAP;AACD,CAtBD","sourceRoot":"","sourcesContent":["import { each, clone } from '@antv/util';\nimport mat3 from './mat3';\nexport default (function (m, ts) {\n    // 上层使用时会传入为 null 的 matrix，此时按照单位矩阵处理\n    var matrix = m ? clone(m) : [1, 0, 0, 0, 1, 0, 0, 0, 1];\n    each(ts, function (t) {\n        switch (t[0]) {\n            case 't':\n                mat3.translate(matrix, matrix, [t[1], t[2]]);\n                break;\n            case 's':\n                mat3.scale(matrix, matrix, [t[1], t[2]]);\n                break;\n            case 'r':\n                mat3.rotate(matrix, matrix, t[1]);\n                break;\n            case 'm':\n                mat3.multiply(matrix, matrix, t[1]);\n                break;\n            default:\n                return false;\n        }\n    });\n    return matrix;\n});\n//# sourceMappingURL=transform.js.map"]},"metadata":{},"sourceType":"module"}