{"ast":null,"code":"import { get } from '@antv/util';\nimport { interaction, animation, theme, scale } from '../../adaptor/common';\nimport { flow, deepAssign, renderStatistic } from '../../utils';\nimport { interval } from '../../adaptor/geometries';\nvar CAT_VALUE = 'liquid';\n/**\n * geometry 处理\n * @param params\n */\n\nfunction geometry(params) {\n  var chart = params.chart,\n      options = params.options;\n  var percent = options.percent,\n      color = options.color,\n      liquidStyle = options.liquidStyle,\n      radius = options.radius;\n  var data = [{\n    percent: percent,\n    type: CAT_VALUE\n  }];\n  chart.scale({\n    percent: {\n      min: 0,\n      max: 1\n    }\n  });\n  chart.data(data);\n  var p = deepAssign({}, params, {\n    options: {\n      xField: 'type',\n      yField: 'percent',\n      // radius 放到 columnWidthRatio 中。\n      // 保证横向的大小是根据  redius 生成的\n      widthRatio: radius,\n      interval: {\n        color: color,\n        style: liquidStyle,\n        shape: 'liquid-fill-gauge'\n      }\n    }\n  });\n  var ext = interval(p).ext;\n  var geometry = ext.geometry; // 将 radius 传入到自定义 shape 中\n\n  geometry.customInfo({\n    radius: radius\n  }); // 关闭组件\n\n  chart.legend(false);\n  chart.axis(false);\n  chart.tooltip(false);\n  return params;\n}\n/**\n * 统计指标文档\n * @param params\n */\n\n\nfunction statistic(params) {\n  var chart = params.chart,\n      options = params.options;\n  var statistic = options.statistic,\n      percent = options.percent,\n      meta = options.meta;\n\n  if (statistic.content && !statistic.content.formatter) {\n    var metaFormatter_1 = get(meta, ['percent', 'formatter']); // @ts-ignore\n\n    statistic.content.formatter = function (_a) {\n      var percent = _a.percent;\n      return metaFormatter_1 ? metaFormatter_1(percent) : (percent * 100).toFixed(2) + \"%\";\n    };\n  }\n\n  renderStatistic(chart, {\n    statistic: statistic,\n    plotType: 'liquid'\n  }, {\n    percent: percent\n  });\n  return params;\n}\n/**\n * 水波图适配器\n * @param chart\n * @param options\n */\n\n\nexport function adaptor(params) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(geometry, statistic, scale({}), animation, theme, interaction)(params);\n}","map":{"version":3,"sources":["../../../src/plots/liquid/adaptor.ts"],"names":[],"mappings":"AACA,SAAS,GAAT,QAAoB,YAApB;AACA,SAAS,WAAT,EAAsB,SAAtB,EAAiC,KAAjC,EAAwC,KAAxC,QAAqD,sBAArD;AAEA,SAAS,IAAT,EAAe,UAAf,EAA2B,eAA3B,QAAkD,aAAlD;AACA,SAAS,QAAT,QAAyB,0BAAzB;AAGA,IAAM,SAAS,GAAG,QAAlB;AAEA;;;AAGG;;AACH,SAAS,QAAT,CAAkB,MAAlB,EAA+C;AACrC,MAAA,KAAK,GAAc,MAAM,CAApB,KAAL;AAAA,MAAO,OAAO,GAAK,MAAM,CAAX,OAAd;AACA,MAAA,OAAO,GAAiC,OAAO,CAAxC,OAAP;AAAA,MAAS,KAAK,GAA0B,OAAO,CAAjC,KAAd;AAAA,MAAgB,WAAW,GAAa,OAAO,CAApB,WAA3B;AAAA,MAA6B,MAAM,GAAK,OAAO,CAAZ,MAAnC;AAER,MAAM,IAAI,GAAG,CAAC;AAAE,IAAA,OAAO,EAAA,OAAT;AAAW,IAAA,IAAI,EAAE;AAAjB,GAAD,CAAb;AAEA,EAAA,KAAK,CAAC,KAAN,CAAY;AACV,IAAA,OAAO,EAAE;AACP,MAAA,GAAG,EAAE,CADE;AAEP,MAAA,GAAG,EAAE;AAFE;AADC,GAAZ;AAOA,EAAA,KAAK,CAAC,IAAN,CAAW,IAAX;AAEA,MAAM,CAAC,GAAG,UAAU,CAAC,EAAD,EAAK,MAAL,EAAa;AAC/B,IAAA,OAAO,EAAE;AACP,MAAA,MAAM,EAAE,MADD;AAEP,MAAA,MAAM,EAAE,SAFD;AAGP;AACA;AACA,MAAA,UAAU,EAAE,MALL;AAMP,MAAA,QAAQ,EAAE;AACR,QAAA,KAAK,EAAA,KADG;AAER,QAAA,KAAK,EAAE,WAFC;AAGR,QAAA,KAAK,EAAE;AAHC;AANH;AADsB,GAAb,CAApB;AAcQ,MAAA,GAAG,GAAK,QAAQ,CAAC,CAAD,CAAR,CAAL,GAAH;AACR,MAAM,QAAQ,GAAG,GAAG,CAAC,QAArB,CA9B6C,CAgC7C;;AACA,EAAA,QAAQ,CAAC,UAAT,CAAoB;AAClB,IAAA,MAAM,EAAA;AADY,GAApB,EAjC6C,CAqC7C;;AACA,EAAA,KAAK,CAAC,MAAN,CAAa,KAAb;AACA,EAAA,KAAK,CAAC,IAAN,CAAW,KAAX;AACA,EAAA,KAAK,CAAC,OAAN,CAAc,KAAd;AAEA,SAAO,MAAP;AACD;AAED;;;AAGG;;;AACH,SAAS,SAAT,CAAmB,MAAnB,EAAgD;AACtC,MAAA,KAAK,GAAc,MAAM,CAApB,KAAL;AAAA,MAAO,OAAO,GAAK,MAAM,CAAX,OAAd;AACA,MAAA,SAAS,GAAoB,OAAO,CAA3B,SAAT;AAAA,MAAW,OAAO,GAAW,OAAO,CAAlB,OAAlB;AAAA,MAAoB,IAAI,GAAK,OAAO,CAAZ,IAAxB;;AAER,MAAI,SAAS,CAAC,OAAV,IAAqB,CAAC,SAAS,CAAC,OAAV,CAAkB,SAA5C,EAAuD;AACrD,QAAM,eAAa,GAAG,GAAG,CAAC,IAAD,EAAO,CAAC,SAAD,EAAY,WAAZ,CAAP,CAAzB,CADqD,CAErD;;AACA,IAAA,SAAS,CAAC,OAAV,CAAkB,SAAlB,GAA8B,UAAC,EAAD,EAAY;UAAT,OAAO,GAAA,EAAA,CAAA,O;AACtC,aAAA,eAAa,GAAG,eAAa,CAAC,OAAD,CAAhB,GAA+B,CAAC,OAAO,GAAG,GAAX,EAAgB,OAAhB,CAAwB,CAAxB,IAA0B,GAAtE;AAAyE,KAD3E;AAED;;AAED,EAAA,eAAe,CAAC,KAAD,EAAQ;AAAE,IAAA,SAAS,EAAA,SAAX;AAAa,IAAA,QAAQ,EAAE;AAAvB,GAAR,EAA2C;AAAE,IAAA,OAAO,EAAA;AAAT,GAA3C,CAAf;AAEA,SAAO,MAAP;AACD;AAED;;;;AAIG;;;AACH,OAAM,SAAU,OAAV,CAAkB,MAAlB,EAA+C;AACnD;AACA,SAAO,IAAI,CAAC,QAAD,EAAW,SAAX,EAAsB,KAAK,CAAC,EAAD,CAA3B,EAAiC,SAAjC,EAA4C,KAA5C,EAAmD,WAAnD,CAAJ,CAAoE,MAApE,CAAP;AACD","sourcesContent":["import { Geometry } from '@antv/g2';\nimport { get } from '@antv/util';\nimport { interaction, animation, theme, scale } from '../../adaptor/common';\nimport { Params } from '../../core/adaptor';\nimport { flow, deepAssign, renderStatistic } from '../../utils';\nimport { interval } from '../../adaptor/geometries';\nimport { LiquidOptions } from './types';\n\nconst CAT_VALUE = 'liquid';\n\n/**\n * geometry 处理\n * @param params\n */\nfunction geometry(params: Params<LiquidOptions>): Params<LiquidOptions> {\n  const { chart, options } = params;\n  const { percent, color, liquidStyle, radius } = options;\n\n  const data = [{ percent, type: CAT_VALUE }];\n\n  chart.scale({\n    percent: {\n      min: 0,\n      max: 1,\n    },\n  });\n\n  chart.data(data);\n\n  const p = deepAssign({}, params, {\n    options: {\n      xField: 'type',\n      yField: 'percent',\n      // radius 放到 columnWidthRatio 中。\n      // 保证横向的大小是根据  redius 生成的\n      widthRatio: radius,\n      interval: {\n        color,\n        style: liquidStyle,\n        shape: 'liquid-fill-gauge',\n      },\n    },\n  });\n  const { ext } = interval(p);\n  const geometry = ext.geometry as Geometry;\n\n  // 将 radius 传入到自定义 shape 中\n  geometry.customInfo({\n    radius,\n  });\n\n  // 关闭组件\n  chart.legend(false);\n  chart.axis(false);\n  chart.tooltip(false);\n\n  return params;\n}\n\n/**\n * 统计指标文档\n * @param params\n */\nfunction statistic(params: Params<LiquidOptions>): Params<LiquidOptions> {\n  const { chart, options } = params;\n  const { statistic, percent, meta } = options;\n\n  if (statistic.content && !statistic.content.formatter) {\n    const metaFormatter = get(meta, ['percent', 'formatter']);\n    // @ts-ignore\n    statistic.content.formatter = ({ percent }) =>\n      metaFormatter ? metaFormatter(percent) : `${(percent * 100).toFixed(2)}%`;\n  }\n\n  renderStatistic(chart, { statistic, plotType: 'liquid' }, { percent });\n\n  return params;\n}\n\n/**\n * 水波图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<LiquidOptions>) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(geometry, statistic, scale({}), animation, theme, interaction)(params);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}