{"ast":null,"code":"import { interaction, animation, theme, scale, tooltip, legend, annotation } from '../../adaptor/common';\nimport { flow, deepAssign } from '../../utils';\nimport { interval } from '../../adaptor/geometries';\nimport { getScaleMax } from './utils';\n/**\n * geometry 处理\n * @param params\n */\n\nfunction geometry(params) {\n  var chart = params.chart,\n      options = params.options;\n  var data = options.data,\n      style = options.barStyle,\n      color = options.color,\n      tooltip = options.tooltip,\n      colorField = options.colorField,\n      type = options.type,\n      xField = options.xField,\n      yField = options.yField;\n  chart.data(data);\n  var p = deepAssign({}, params, {\n    options: {\n      tooltip: tooltip,\n      seriesField: colorField,\n      interval: {\n        style: style,\n        color: color,\n        shape: type === 'line' ? 'line' : 'intervel'\n      }\n    }\n  });\n  interval(p);\n\n  if (type === 'line') {\n    chart.point().position(xField + \"*\" + yField).shape('circle');\n  }\n\n  return params;\n}\n/**\n * meta 配置\n * @param params\n */\n\n\nexport function meta(params) {\n  var _a;\n\n  var options = params.options;\n  var yField = options.yField,\n      data = options.data,\n      maxAngle = options.maxAngle;\n  return flow(scale((_a = {}, _a[yField] = {\n    min: 0,\n    max: getScaleMax(maxAngle, yField, data)\n  }, _a)))(params);\n}\n/**\n * coordinate 配置\n * @param params\n */\n\nfunction coordinate(params) {\n  var chart = params.chart,\n      options = params.options;\n  var radius = options.radius,\n      innerRadius = options.innerRadius;\n  chart.coordinate({\n    type: 'polar',\n    cfg: {\n      radius: radius,\n      innerRadius: innerRadius\n    }\n  }).transpose();\n  return params;\n}\n/**\n * axis 配置\n * @param params\n */\n\n\nexport function axis(params) {\n  var chart = params.chart,\n      options = params.options;\n  var xField = options.xField,\n      xAxis = options.xAxis;\n  chart.axis(xField, xAxis);\n  return params;\n}\n/**\n * 图适配器\n * @param chart\n * @param options\n */\n\nexport function adaptor(params) {\n  return flow(geometry, meta, axis, coordinate, interaction, animation, theme, tooltip, legend, annotation())(params);\n}","map":{"version":3,"sources":["../../../src/plots/radial-bar/adaptor.ts"],"names":[],"mappings":"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","sourcesContent":["import { interaction, animation, theme, scale, tooltip, legend, annotation } from '../../adaptor/common';\nimport { Params } from '../../core/adaptor';\nimport { flow, deepAssign } from '../../utils';\nimport { interval } from '../../adaptor/geometries';\nimport { RadialBarOptions } from './types';\nimport { getScaleMax } from './utils';\n\n/**\n * geometry 处理\n * @param params\n */\nfunction geometry(params: Params<RadialBarOptions>): Params<RadialBarOptions> {\n  const { chart, options } = params;\n  const { data, barStyle: style, color, tooltip, colorField, type, xField, yField } = options;\n  chart.data(data);\n  const p = deepAssign({}, params, {\n    options: {\n      tooltip,\n      seriesField: colorField,\n      interval: {\n        style,\n        color,\n        shape: type === 'line' ? 'line' : 'intervel',\n      },\n    },\n  });\n  interval(p);\n  if (type === 'line') {\n    chart.point().position(`${xField}*${yField}`).shape('circle');\n  }\n  return params;\n}\n\n/**\n * meta 配置\n * @param params\n */\nexport function meta(params: Params<RadialBarOptions>): Params<RadialBarOptions> {\n  const { options } = params;\n  const { yField, data, maxAngle } = options;\n  return flow(\n    scale({\n      [yField]: {\n        min: 0,\n        max: getScaleMax(maxAngle, yField, data),\n      },\n    })\n  )(params);\n}\n\n/**\n * coordinate 配置\n * @param params\n */\nfunction coordinate(params: Params<RadialBarOptions>): Params<RadialBarOptions> {\n  const { chart, options } = params;\n  const { radius, innerRadius } = options;\n\n  chart\n    .coordinate({\n      type: 'polar',\n      cfg: {\n        radius,\n        innerRadius,\n      },\n    })\n    .transpose();\n  return params;\n}\n\n/**\n * axis 配置\n * @param params\n */\nexport function axis(params: Params<RadialBarOptions>): Params<RadialBarOptions> {\n  const { chart, options } = params;\n  const { xField, xAxis } = options;\n  chart.axis(xField, xAxis);\n  return params;\n}\n\n/**\n * 图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<RadialBarOptions>) {\n  return flow(geometry, meta, axis, coordinate, interaction, animation, theme, tooltip, legend, annotation())(params);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}