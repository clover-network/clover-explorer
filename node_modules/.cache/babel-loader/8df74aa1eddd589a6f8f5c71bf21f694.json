{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCallbackAction = exports.unregisterAction = exports.registerAction = exports.getActionClass = exports.createAction = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar callback_1 = tslib_1.__importDefault(require(\"./callback\"));\n\nvar util_1 = require(\"@antv/util\"); // Action 类的缓存\n\n\nvar ActionCache = {};\n/**\n * 根据名称获取 Action 实例\n * @param actionName - action 的名称\n * @param context 上下文\n * @returns Action 实例\n */\n\nfunction createAction(actionName, context) {\n  var actionOption = ActionCache[actionName];\n  var action = null;\n\n  if (actionOption) {\n    var ActionClass = actionOption.ActionClass,\n        cfg = actionOption.cfg;\n    action = new ActionClass(context, cfg);\n    action.name = actionName;\n    action.init();\n  }\n\n  return action;\n}\n\nexports.createAction = createAction;\n/**\n * 根据 action 的 name 获取定义的类\n * @param actionName action 的 name\n */\n\nfunction getActionClass(actionName) {\n  var actionOption = ActionCache[actionName];\n  return util_1.get(actionOption, 'ActionClass');\n}\n\nexports.getActionClass = getActionClass;\n/**\n * 注册 Action\n * @param actionName - action 的名称\n * @param ActionClass - 继承自 action 的类\n */\n\nfunction registerAction(actionName, ActionClass, cfg) {\n  ActionCache[actionName] = {\n    ActionClass: ActionClass,\n    cfg: cfg\n  };\n}\n\nexports.registerAction = registerAction;\n/**\n * 取消注册 Action\n * @param actionName action 名称\n */\n\nfunction unregisterAction(actionName) {\n  delete ActionCache[actionName];\n}\n\nexports.unregisterAction = unregisterAction;\n/**\n * 根据回调函数获取 Action 实例\n * @param callback - action 的回调函数\n * @param context 上下文\n * @returns Action 实例\n */\n\nfunction createCallbackAction(callback, context) {\n  var action = new callback_1.default(context);\n  action.callback = callback;\n  action.name = 'callback';\n  return action;\n}\n\nexports.createCallbackAction = createCallbackAction;","map":{"version":3,"sources":["../../../src/interaction/action/register.ts"],"names":[],"mappings":";;;;;;;;;AAEA,IAAA,UAAA,GAAA,OAAA,CAAA,eAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,YAAA,CAAA,C,CAWA;;;AACA,IAAM,WAAW,GAAiC,EAAlD;AAEA;;;;;AAKG;;AACH,SAAgB,YAAhB,CAA6B,UAA7B,EAAiD,OAAjD,EAA6E;AAC3E,MAAM,YAAY,GAAG,WAAW,CAAC,UAAD,CAAhC;AACA,MAAI,MAAM,GAAG,IAAb;;AACA,MAAI,YAAJ,EAAkB;AACR,QAAA,WAAW,GAAU,YAAY,CAAtB,WAAX;AAAA,QAAa,GAAG,GAAK,YAAY,CAAjB,GAAhB;AACR,IAAA,MAAM,GAAG,IAAI,WAAJ,CAAgB,OAAhB,EAAyB,GAAzB,CAAT;AACA,IAAA,MAAM,CAAC,IAAP,GAAc,UAAd;AACA,IAAA,MAAM,CAAC,IAAP;AACD;;AACD,SAAO,MAAP;AACD;;AAVD,OAAA,CAAA,YAAA,GAAA,YAAA;AAYA;;;AAGG;;AACH,SAAgB,cAAhB,CAA+B,UAA/B,EAAiD;AAC/C,MAAM,YAAY,GAAG,WAAW,CAAC,UAAD,CAAhC;AACA,SAAO,MAAA,CAAA,GAAA,CAAI,YAAJ,EAAkB,aAAlB,CAAP;AACD;;AAHD,OAAA,CAAA,cAAA,GAAA,cAAA;AAKA;;;;AAIG;;AACH,SAAgB,cAAhB,CAA+B,UAA/B,EAAmD,WAAnD,EAAmF,GAAnF,EAAoG;AAClG,EAAA,WAAW,CAAC,UAAD,CAAX,GAA0B;AACxB,IAAA,WAAW,EAAA,WADa;AAExB,IAAA,GAAG,EAAA;AAFqB,GAA1B;AAID;;AALD,OAAA,CAAA,cAAA,GAAA,cAAA;AAOA;;;AAGG;;AACH,SAAgB,gBAAhB,CAAiC,UAAjC,EAAmD;AACjD,SAAO,WAAW,CAAC,UAAD,CAAlB;AACD;;AAFD,OAAA,CAAA,gBAAA,GAAA,gBAAA;AAIA;;;;;AAKG;;AACH,SAAgB,oBAAhB,CAAqC,QAArC,EAA+D,OAA/D,EAA2F;AACzF,MAAM,MAAM,GAAG,IAAI,UAAA,CAAA,OAAJ,CAAmB,OAAnB,CAAf;AACA,EAAA,MAAM,CAAC,QAAP,GAAkB,QAAlB;AACA,EAAA,MAAM,CAAC,IAAP,GAAc,UAAd;AACA,SAAO,MAAP;AACD;;AALD,OAAA,CAAA,oBAAA,GAAA,oBAAA","sourcesContent":["import { ActionCallback, IInteractionContext, LooseObject } from '../../interface';\nimport Action from './base';\nimport CallbackAction from './callback';\nimport { get } from '@antv/util';\n\n/** Action 构造函数 */\ntype ActionConstructor = new (context: IInteractionContext, cfg?: LooseObject) => Action;\n\n/** @ignore */\ninterface ActionOption {\n  ActionClass: ActionConstructor;\n  cfg: LooseObject;\n}\n\n// Action 类的缓存\nconst ActionCache: Record<string, ActionOption> = {};\n\n/**\n * 根据名称获取 Action 实例\n * @param actionName - action 的名称\n * @param context 上下文\n * @returns Action 实例\n */\nexport function createAction(actionName: string, context: IInteractionContext): Action {\n  const actionOption = ActionCache[actionName];\n  let action = null;\n  if (actionOption) {\n    const { ActionClass, cfg } = actionOption;\n    action = new ActionClass(context, cfg);\n    action.name = actionName;\n    action.init();\n  }\n  return action;\n}\n\n/**\n * 根据 action 的 name 获取定义的类\n * @param actionName action 的 name\n */\nexport function getActionClass(actionName: string) {\n  const actionOption = ActionCache[actionName];\n  return get(actionOption, 'ActionClass');\n}\n\n/**\n * 注册 Action\n * @param actionName - action 的名称\n * @param ActionClass - 继承自 action 的类\n */\nexport function registerAction(actionName: string, ActionClass: ActionConstructor, cfg?: LooseObject) {\n  ActionCache[actionName] = {\n    ActionClass,\n    cfg,\n  };\n}\n\n/**\n * 取消注册 Action\n * @param actionName action 名称\n */\nexport function unregisterAction(actionName: string) {\n  delete ActionCache[actionName];\n}\n\n/**\n * 根据回调函数获取 Action 实例\n * @param callback - action 的回调函数\n * @param context 上下文\n * @returns Action 实例\n */\nexport function createCallbackAction(callback: ActionCallback, context: IInteractionContext): CallbackAction {\n  const action = new CallbackAction(context);\n  action.callback = callback;\n  action.name = 'callback';\n  return action;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}