{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { partition } from './hierarchy/partition';\nimport { treemap } from './hierarchy/treemap';\n/**\n * sunburst 处理数据\n * @param options\n */\n\nexport function transformData(options) {\n  var data = options.data,\n      type = options.type,\n      seriesField = options.seriesField,\n      colorField = options.colorField,\n      hierarchyConfig = options.hierarchyConfig;\n  var transform = {\n    partition: partition,\n    treemap: treemap\n  };\n  var nodes = transform[type](data, __assign(__assign({}, hierarchyConfig), {\n    // @ts-ignore\n    type: \"hierarchy.\" + type,\n    field: seriesField,\n    as: ['x', 'y']\n  }));\n  var result = [];\n  nodes.forEach(function (node) {\n    var _a;\n\n    var _b, _c, _d, _e;\n\n    if (node.depth === 0) {\n      return null;\n    }\n\n    var nodeInfo = __assign((_a = {}, _a[seriesField] = node.data[seriesField] || ((_c = (_b = node.parent) === null || _b === void 0 ? void 0 : _b.data) === null || _c === void 0 ? void 0 : _c[seriesField]), _a[colorField] = node.data[colorField] || ((_e = (_d = node.parent) === null || _d === void 0 ? void 0 : _d.data) === null || _e === void 0 ? void 0 : _e[colorField]), _a), node);\n\n    nodeInfo.ext = hierarchyConfig;\n    result.push(nodeInfo);\n  });\n  return result;\n}\n/**\n * customContent\n * @param {string} value\n * @param {any[]} items\n * @param {Function} formatter\n * @param {string} field\n * @returns HTMLElement\n */\n\nexport function getTooltipTemplate(params) {\n  var items = params.items,\n      formatter = params.formatter,\n      fields = params.fields;\n\n  var _a = items[0] || {},\n      color = _a.color,\n      mappingData = _a.mappingData,\n      data = _a.data; // 不会有分组情况\n\n\n  var container = document.createElement('ul');\n  container.className = 'g2-tooltip';\n  var listItem = '';\n\n  var formatterItem = function (item, field) {\n    var _a;\n\n    if (formatter) {\n      return formatter(__assign(__assign({}, item), {\n        field: field\n      }));\n    }\n\n    return {\n      name: field,\n      value: (item === null || item === void 0 ? void 0 : item[field]) || ((_a = item === null || item === void 0 ? void 0 : item.data) === null || _a === void 0 ? void 0 : _a[field])\n    };\n  };\n\n  fields.forEach(function (field) {\n    var _a = formatterItem(data, field),\n        name = _a.name,\n        value = _a.value;\n\n    listItem += \"<li class=\\\"g2-tooltip-list-item\\\" data-index={index} style=\\\"margin-bottom:4px;display:flex;align-items: center;\\\">\\n        <span style=\\\"background-color:\" + ((mappingData === null || mappingData === void 0 ? void 0 : mappingData.color) || color) + \";\\\" class=\\\"g2-tooltip-marker\\\"></span>\\n        <span style=\\\"display:inline-flex;flex:1;justify-content:space-between\\\">\\n        <span style=\\\"margin-right: 16px;\\\">\" + name + \":</span>\\n        <span class=\\\"g2-tooltip-list-item-value\\\">\" + value + \"</span>\\n        </span>\\n    </li>\";\n  });\n  container.innerHTML = listItem;\n  return container;\n}","map":{"version":3,"sources":["../../../src/plots/sunburst/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { SunburstOptions } from './types';\nimport { partition } from './hierarchy/partition';\nimport { treemap } from './hierarchy/treemap';\n\n/**\n * sunburst 处理数据\n * @param options\n */\nexport function transformData(options: SunburstOptions) {\n  const { data, type, seriesField, colorField, hierarchyConfig } = options;\n  const transform = {\n    partition: partition,\n    treemap: treemap,\n  };\n  const nodes = transform[type](data, {\n    ...hierarchyConfig,\n    // @ts-ignore\n    type: `hierarchy.${type}`,\n    field: seriesField,\n    as: ['x', 'y'],\n  });\n\n  const result = [];\n  nodes.forEach((node) => {\n    if (node.depth === 0) {\n      return null;\n    }\n    const nodeInfo = {\n      [seriesField]: node.data[seriesField] || node.parent?.data?.[seriesField],\n      [colorField]: node.data[colorField] || node.parent?.data?.[colorField],\n      ...node,\n    };\n    nodeInfo.ext = hierarchyConfig;\n    result.push(nodeInfo);\n  });\n\n  return result;\n}\n\n/**\n * customContent\n * @param {string} value\n * @param {any[]} items\n * @param {Function} formatter\n * @param {string} field\n * @returns HTMLElement\n */\nexport function getTooltipTemplate(params: {\n  value: string;\n  items: any[];\n  formatter?: (item: any) => { name: string; value: string | number };\n  fields?: string[];\n}): HTMLElement {\n  const { items, formatter, fields } = params;\n  const { color, mappingData, data } = items[0] || {}; // 不会有分组情况\n  const container = document.createElement('ul');\n  container.className = 'g2-tooltip';\n  let listItem = '';\n  const formatterItem = (item, field) => {\n    if (formatter) {\n      return formatter({ ...item, field });\n    }\n    return { name: field, value: item?.[field] || item?.data?.[field] };\n  };\n\n  fields.forEach((field) => {\n    const { name, value } = formatterItem(data, field);\n    listItem += `<li class=\"g2-tooltip-list-item\" data-index={index} style=\"margin-bottom:4px;display:flex;align-items: center;\">\n        <span style=\"background-color:${mappingData?.color || color};\" class=\"g2-tooltip-marker\"></span>\n        <span style=\"display:inline-flex;flex:1;justify-content:space-between\">\n        <span style=\"margin-right: 16px;\">${name}:</span>\n        <span class=\"g2-tooltip-list-item-value\">${value}</span>\n        </span>\n    </li>`;\n  });\n  container.innerHTML = listItem;\n  return container;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}