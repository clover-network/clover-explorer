{"ast":null,"code":"import { __assign, __rest, __spreadArrays } from \"tslib\";\nimport { uniq, isFunction, isObject, isString, isNumber, isEmpty } from '@antv/util';\nimport { transformLabel } from '../../utils';\n/**\n * 获得映射的字段列表\n * @param options\n * @param field\n */\n\nexport function getMappingField(o, field) {\n  var xField = o.xField,\n      yField = o.yField,\n      colorField = o.colorField,\n      shapeField = o.shapeField,\n      sizeField = o.sizeField,\n      styleField = o.styleField,\n      _a = o.rawFields,\n      rawFields = _a === void 0 ? [] : _a;\n  var fields = []; // 因为 color 会影响到数据分组，以及最后的图形映射。所以导致 bar 图中的 widthRatio 设置不生效\n  // 所以对于 color 字段，仅仅保留 colorField 好了！ + rawFields\n  // shape, size 同理\n\n  if (field === 'color') {\n    fields = __spreadArrays([colorField || xField], rawFields);\n  } else if (field === 'shape') {\n    fields = __spreadArrays([shapeField || xField], rawFields);\n  } else if (field === 'size') {\n    fields = __spreadArrays([sizeField || xField], rawFields);\n  } else {\n    fields = __spreadArrays([xField, yField, colorField, shapeField, sizeField, styleField], rawFields); // 一定能找到的！\n\n    var idx = ['x', 'y', 'color', 'shape', 'size', 'style'].indexOf(field);\n    var f = fields[idx]; // 删除当前字段\n\n    fields.splice(idx, 1); // 插入到第一个\n\n    fields.unshift(f);\n  }\n\n  return uniq(fields.filter(function (f) {\n    return !!f;\n  }));\n}\n/**\n * 获得映射函数\n * @param mappingFields\n * @param func\n */\n\nexport function getMappingFunction(mappingFields, func) {\n  if (!func) return undefined; // 返回函数\n\n  return function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    var params = {};\n    mappingFields.forEach(function (f, idx) {\n      params[f] = args[idx];\n    }); // 删除 undefined\n\n    delete params['undefined'];\n    return func(params);\n  };\n}\n/**\n * 通用 geometry 的配置处理的 adaptor\n * @param params\n */\n\nexport function geometry(params) {\n  var chart = params.chart,\n      options = params.options;\n  var type = options.type,\n      args = options.args,\n      mapping = options.mapping,\n      xField = options.xField,\n      yField = options.yField,\n      colorField = options.colorField,\n      shapeField = options.shapeField,\n      sizeField = options.sizeField,\n      tooltipFields = options.tooltipFields,\n      label = options.label,\n      state = options.state; // 如果没有 mapping 信息，那么直接返回\n\n  if (!mapping) {\n    return params;\n  }\n\n  var color = mapping.color,\n      shape = mapping.shape,\n      size = mapping.size,\n      style = mapping.style,\n      tooltip = mapping.tooltip; // 创建 geometry\n\n  var geometry = chart[type](args).position(xField + \"*\" + yField);\n  /**\n   * color 的几种情况\n   * g.color('red');\n   * g.color('color', ['red', 'blue']);\n   * g.color('x', (x, y) => 'red');\n   * g.color('color', (color, x, y) => 'red');\n   */\n\n  if (isString(color)) {\n    colorField ? geometry.color(colorField, color) : geometry.color(color);\n  } else if (isFunction(color)) {\n    var mappingFields = getMappingField(options, 'color');\n    geometry.color(mappingFields.join('*'), getMappingFunction(mappingFields, color));\n  } else {\n    colorField && geometry.color(colorField, color);\n  }\n  /**\n   * shape 的几种情况\n   * g.shape('rect');\n   * g.shape('shape', ['rect', 'circle']);\n   * g.shape('x*y', (x, y) => 'rect');\n   * g.shape('shape*x*y', (shape, x, y) => 'rect');\n   */\n\n\n  if (isString(shape)) {\n    shapeField ? geometry.shape(shapeField, [shape]) : geometry.shape(shape); // [shape] 需要在 G2 做掉\n  } else if (isFunction(shape)) {\n    var mappingFields = getMappingField(options, 'shape');\n    geometry.shape(mappingFields.join('*'), getMappingFunction(mappingFields, shape));\n  } else {\n    shapeField && geometry.shape(shapeField, shape);\n  }\n  /**\n   * size 的几种情况\n   * g.size(10);\n   * g.size('size', [10, 20]);\n   * g.size('x*y', (x, y) => 10);\n   * g.color('size*x*y', (size, x, y) => 1-);\n   */\n\n\n  if (isNumber(size)) {\n    sizeField ? geometry.size(sizeField, size) : geometry.size(size);\n  } else if (isFunction(size)) {\n    var mappingFields = getMappingField(options, 'size');\n    geometry.size(mappingFields.join('*'), getMappingFunction(mappingFields, size));\n  } else {\n    sizeField && geometry.size(sizeField, size);\n  }\n  /**\n   * style 的几种情况\n   * g.style({ fill: 'red' });\n   * g.style('x*y*color', (x, y, color) => ({ fill: 'red' }));\n   */\n\n\n  if (isFunction(style)) {\n    var mappingFields = getMappingField(options, 'style');\n    geometry.style(mappingFields.join('*'), getMappingFunction(mappingFields, style));\n  } else if (isObject(style)) {\n    geometry.style(style);\n  }\n  /**\n   * tooltip 的 API\n   * g.tooltip('x*y*color', (x, y, color) => ({ name, value }));\n   * g.tooltip(false);\n   */\n\n\n  if (tooltipFields === false) {\n    geometry.tooltip(false);\n  } else if (!isEmpty(tooltipFields)) {\n    geometry.tooltip(tooltipFields.join('*'), getMappingFunction(tooltipFields, tooltip));\n  }\n  /**\n   * label 的映射\n   */\n\n\n  if (label === false) {\n    geometry.label(false);\n  } else if (label) {\n    var callback = label.callback,\n        fields = label.fields,\n        cfg = __rest(label, [\"callback\", \"fields\"]);\n\n    geometry.label({\n      fields: fields || [yField],\n      callback: callback,\n      cfg: transformLabel(cfg)\n    });\n  }\n  /**\n   * state 状态样式\n   */\n\n\n  if (state) {\n    geometry.state(state);\n  } // 防止因为 x y 字段做了通道映射，导致生成图例\n\n\n  [xField, yField].filter(function (f) {\n    return f !== colorField;\n  }).forEach(function (f) {\n    chart.legend(f, false);\n  });\n  return __assign(__assign({}, params), {\n    // geometry adaptor 额外需要做的事情，就是将创建好的 geometry 返回到下一层 adaptor，防止通过 type 查询的时候容易误判\n    ext: {\n      geometry: geometry\n    }\n  });\n}","map":{"version":3,"sources":["../../../src/adaptor/geometries/base.ts"],"names":[],"mappings":"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","sourcesContent":["import { uniq, isFunction, isObject, isString, isNumber, isEmpty } from '@antv/util';\nimport { Params } from '../../core/adaptor';\nimport { ColorAttr, ShapeAttr, SizeAttr, StyleAttr, TooltipAttr, Options, Datum } from '../../types';\nimport { Label } from '../../types/label';\nimport { State } from '../../types/state';\nimport { transformLabel } from '../../utils';\n\n/**\n * 图形映射属性，按照优先级来的\n */\nexport type MappingOptions = {\n  /** point color 映射 */\n  readonly color?: ColorAttr;\n  /** point shape 映射 */\n  readonly shape?: ShapeAttr;\n  /** 大小映射, 提供回调的方式 */\n  readonly size?: SizeAttr;\n  /** 样式映射 */\n  readonly style?: StyleAttr;\n  /** tooltip 映射 */\n  readonly tooltip?: TooltipAttr;\n};\n\n/**\n * 一个图形映射的逻辑，纯粹的图形语法\n * // TODO 后续需要处理 adjust 的配置，然后通过 field 信息。比如 styleField，labelField 等一定是一个数组形式\n */\nexport type Geometry = {\n  /** geometry 类型, 'line' | 'interval' | 'point' | 'area' | 'polygon' */\n  readonly type?: string;\n  /** x 轴字段 */\n  readonly xField?: string;\n  /** y 轴字段 */\n  readonly yField?: string;\n  /** 分组字段 */\n  readonly colorField?: string;\n  /** shape 的映射字段 */\n  readonly shapeField?: string;\n  /** size 映射字段 */\n  readonly sizeField?: string;\n  /** style 的映射字段 */\n  readonly styleField?: string;\n  /** tooltip 的映射字段 */\n  readonly tooltipFields?: string[] | false;\n  /** 其他原始字段, 用于 mapping 回调参数 */\n  readonly rawFields?: string[];\n  /** 图形映射规则 */\n  readonly mapping?: MappingOptions;\n  /** label 映射通道，因为历史原因导致实现略有区别 */\n  readonly label?: Label;\n  /** 不同状态的样式 */\n  readonly state?: State;\n  /** geometry params */\n  readonly args?: any;\n};\n\n/**\n * geometry options\n */\nexport type GeometryOptions = Geometry & Partial<Options>;\n\n/**\n * 获得映射的字段列表\n * @param options\n * @param field\n */\nexport function getMappingField(o: GeometryOptions, field: 'color' | 'shape' | 'size' | 'style'): string[] {\n  const { xField, yField, colorField, shapeField, sizeField, styleField, rawFields = [] } = o;\n\n  let fields = [];\n\n  // 因为 color 会影响到数据分组，以及最后的图形映射。所以导致 bar 图中的 widthRatio 设置不生效\n  // 所以对于 color 字段，仅仅保留 colorField 好了！ + rawFields\n  // shape, size 同理\n  if (field === 'color') {\n    fields = [colorField || xField, ...rawFields];\n  } else if (field === 'shape') {\n    fields = [shapeField || xField, ...rawFields];\n  } else if (field === 'size') {\n    fields = [sizeField || xField, ...rawFields];\n  } else {\n    fields = [xField, yField, colorField, shapeField, sizeField, styleField, ...rawFields];\n\n    // 一定能找到的！\n    const idx = ['x', 'y', 'color', 'shape', 'size', 'style'].indexOf(field);\n\n    const f = fields[idx];\n    // 删除当前字段\n    fields.splice(idx, 1);\n    // 插入到第一个\n    fields.unshift(f);\n  }\n\n  return uniq(fields.filter((f) => !!f));\n}\n\n/**\n * 获得映射函数\n * @param mappingFields\n * @param func\n */\nexport function getMappingFunction(mappingFields: string[], func: (datum: Datum) => any) {\n  if (!func) return undefined;\n  // 返回函数\n  return (...args: any[]) => {\n    const params: Datum = {};\n\n    mappingFields.forEach((f: string, idx: number) => {\n      params[f] = args[idx];\n    });\n\n    // 删除 undefined\n    delete params['undefined'];\n\n    return func(params);\n  };\n}\n\n/**\n * 通用 geometry 的配置处理的 adaptor\n * @param params\n */\nexport function geometry<O extends GeometryOptions>(params: Params<O>): Params<O> {\n  const { chart, options } = params;\n  const {\n    type,\n    args,\n    mapping,\n    xField,\n    yField,\n    colorField,\n    shapeField,\n    sizeField,\n    tooltipFields,\n    label,\n    state,\n  } = options;\n\n  // 如果没有 mapping 信息，那么直接返回\n  if (!mapping) {\n    return params;\n  }\n\n  const { color, shape, size, style, tooltip } = mapping;\n\n  // 创建 geometry\n  const geometry = chart[type](args).position(`${xField}*${yField}`);\n\n  /**\n   * color 的几种情况\n   * g.color('red');\n   * g.color('color', ['red', 'blue']);\n   * g.color('x', (x, y) => 'red');\n   * g.color('color', (color, x, y) => 'red');\n   */\n  if (isString(color)) {\n    colorField ? geometry.color(colorField, color) : geometry.color(color);\n  } else if (isFunction(color)) {\n    const mappingFields = getMappingField(options, 'color');\n    geometry.color(mappingFields.join('*'), getMappingFunction(mappingFields, color));\n  } else {\n    colorField && geometry.color(colorField, color);\n  }\n\n  /**\n   * shape 的几种情况\n   * g.shape('rect');\n   * g.shape('shape', ['rect', 'circle']);\n   * g.shape('x*y', (x, y) => 'rect');\n   * g.shape('shape*x*y', (shape, x, y) => 'rect');\n   */\n  if (isString(shape)) {\n    shapeField ? geometry.shape(shapeField, [shape]) : geometry.shape(shape); // [shape] 需要在 G2 做掉\n  } else if (isFunction(shape)) {\n    const mappingFields = getMappingField(options, 'shape');\n    geometry.shape(mappingFields.join('*'), getMappingFunction(mappingFields, shape));\n  } else {\n    shapeField && geometry.shape(shapeField, shape);\n  }\n\n  /**\n   * size 的几种情况\n   * g.size(10);\n   * g.size('size', [10, 20]);\n   * g.size('x*y', (x, y) => 10);\n   * g.color('size*x*y', (size, x, y) => 1-);\n   */\n  if (isNumber(size)) {\n    sizeField ? geometry.size(sizeField, size) : geometry.size(size);\n  } else if (isFunction(size)) {\n    const mappingFields = getMappingField(options, 'size');\n    geometry.size(mappingFields.join('*'), getMappingFunction(mappingFields, size));\n  } else {\n    sizeField && geometry.size(sizeField, size);\n  }\n\n  /**\n   * style 的几种情况\n   * g.style({ fill: 'red' });\n   * g.style('x*y*color', (x, y, color) => ({ fill: 'red' }));\n   */\n  if (isFunction(style)) {\n    const mappingFields = getMappingField(options, 'style');\n    geometry.style(mappingFields.join('*'), getMappingFunction(mappingFields, style));\n  } else if (isObject(style)) {\n    geometry.style(style);\n  }\n\n  /**\n   * tooltip 的 API\n   * g.tooltip('x*y*color', (x, y, color) => ({ name, value }));\n   * g.tooltip(false);\n   */\n  if (tooltipFields === false) {\n    geometry.tooltip(false);\n  } else if (!isEmpty(tooltipFields)) {\n    geometry.tooltip(tooltipFields.join('*'), getMappingFunction(tooltipFields, tooltip));\n  }\n\n  /**\n   * label 的映射\n   */\n  if (label === false) {\n    geometry.label(false);\n  } else if (label) {\n    const { callback, fields, ...cfg } = label;\n    geometry.label({\n      fields: fields || [yField],\n      callback,\n      cfg: transformLabel(cfg),\n    });\n  }\n\n  /**\n   * state 状态样式\n   */\n  if (state) {\n    geometry.state(state);\n  }\n\n  // 防止因为 x y 字段做了通道映射，导致生成图例\n  [xField, yField]\n    .filter((f: string) => f !== colorField)\n    .forEach((f: string) => {\n      chart.legend(f, false);\n    });\n  return {\n    ...params,\n    // geometry adaptor 额外需要做的事情，就是将创建好的 geometry 返回到下一层 adaptor，防止通过 type 查询的时候容易误判\n    ext: { geometry },\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}