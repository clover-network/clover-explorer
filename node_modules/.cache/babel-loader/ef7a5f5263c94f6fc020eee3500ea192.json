{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\"use strict\";\n\nexports.__esModule = true;\n\nvar tslib_1 = require(\"tslib\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar Scale_1 = require(\"./Scale\");\n\nvar numberUtil = require(\"../util/number\");\n\nvar scaleHelper = require(\"./helper\");\n\nvar Interval_1 = require(\"./Interval\");\n\nvar scaleProto = Scale_1[\"default\"].prototype;\nvar intervalScaleProto = Interval_1[\"default\"].prototype;\nvar getPrecisionSafe = numberUtil.getPrecisionSafe;\nvar roundingErrorFix = numberUtil.round;\nvar mathFloor = Math.floor;\nvar mathCeil = Math.ceil;\nvar mathPow = Math.pow;\nvar mathLog = Math.log;\n\nvar LogScale = function (_super) {\n  tslib_1.__extends(LogScale, _super);\n\n  function LogScale() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'log';\n    _this.base = 10;\n    _this._originalScale = new Interval_1[\"default\"]();\n    _this._interval = 0;\n    return _this;\n  }\n\n  LogScale.prototype.getTicks = function (expandToNicedExtent) {\n    var originalScale = this._originalScale;\n    var extent = this._extent;\n    var originalExtent = originalScale.getExtent();\n    var ticks = intervalScaleProto.getTicks.call(this, expandToNicedExtent);\n    return zrUtil.map(ticks, function (tick) {\n      var val = tick.value;\n      var powVal = numberUtil.round(mathPow(this.base, val));\n      powVal = val === extent[0] && this._fixMin ? fixRoundingError(powVal, originalExtent[0]) : powVal;\n      powVal = val === extent[1] && this._fixMax ? fixRoundingError(powVal, originalExtent[1]) : powVal;\n      return {\n        value: powVal\n      };\n    }, this);\n  };\n\n  LogScale.prototype.setExtent = function (start, end) {\n    var base = this.base;\n    start = mathLog(start) / mathLog(base);\n    end = mathLog(end) / mathLog(base);\n    intervalScaleProto.setExtent.call(this, start, end);\n  };\n\n  LogScale.prototype.getExtent = function () {\n    var base = this.base;\n    var extent = scaleProto.getExtent.call(this);\n    extent[0] = mathPow(base, extent[0]);\n    extent[1] = mathPow(base, extent[1]);\n    var originalScale = this._originalScale;\n    var originalExtent = originalScale.getExtent();\n    this._fixMin && (extent[0] = fixRoundingError(extent[0], originalExtent[0]));\n    this._fixMax && (extent[1] = fixRoundingError(extent[1], originalExtent[1]));\n    return extent;\n  };\n\n  LogScale.prototype.unionExtent = function (extent) {\n    this._originalScale.unionExtent(extent);\n\n    var base = this.base;\n    extent[0] = mathLog(extent[0]) / mathLog(base);\n    extent[1] = mathLog(extent[1]) / mathLog(base);\n    scaleProto.unionExtent.call(this, extent);\n  };\n\n  LogScale.prototype.unionExtentFromData = function (data, dim) {\n    this.unionExtent(data.getApproximateExtent(dim));\n  };\n\n  LogScale.prototype.niceTicks = function (approxTickNum) {\n    approxTickNum = approxTickNum || 10;\n    var extent = this._extent;\n    var span = extent[1] - extent[0];\n\n    if (span === Infinity || span <= 0) {\n      return;\n    }\n\n    var interval = numberUtil.quantity(span);\n    var err = approxTickNum / span * interval;\n\n    if (err <= 0.5) {\n      interval *= 10;\n    }\n\n    while (!isNaN(interval) && Math.abs(interval) < 1 && Math.abs(interval) > 0) {\n      interval *= 10;\n    }\n\n    var niceExtent = [numberUtil.round(mathCeil(extent[0] / interval) * interval), numberUtil.round(mathFloor(extent[1] / interval) * interval)];\n    this._interval = interval;\n    this._niceExtent = niceExtent;\n  };\n\n  LogScale.prototype.niceExtent = function (opt) {\n    intervalScaleProto.niceExtent.call(this, opt);\n    this._fixMin = opt.fixMin;\n    this._fixMax = opt.fixMax;\n  };\n\n  LogScale.prototype.parse = function (val) {\n    return val;\n  };\n\n  LogScale.prototype.contain = function (val) {\n    val = mathLog(val) / mathLog(this.base);\n    return scaleHelper.contain(val, this._extent);\n  };\n\n  LogScale.prototype.normalize = function (val) {\n    val = mathLog(val) / mathLog(this.base);\n    return scaleHelper.normalize(val, this._extent);\n  };\n\n  LogScale.prototype.scale = function (val) {\n    val = scaleHelper.scale(val, this._extent);\n    return mathPow(this.base, val);\n  };\n\n  LogScale.type = 'log';\n  return LogScale;\n}(Scale_1[\"default\"]);\n\nvar proto = LogScale.prototype;\nproto.getMinorTicks = intervalScaleProto.getMinorTicks;\nproto.getLabel = intervalScaleProto.getLabel;\n\nfunction fixRoundingError(val, originalVal) {\n  return roundingErrorFix(val, getPrecisionSafe(originalVal));\n}\n\nScale_1[\"default\"].registerClass(LogScale);\nexports[\"default\"] = LogScale;","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/echarts/lib/scale/Log.js"],"names":["exports","__esModule","tslib_1","require","zrUtil","Scale_1","numberUtil","scaleHelper","Interval_1","scaleProto","prototype","intervalScaleProto","getPrecisionSafe","roundingErrorFix","round","mathFloor","Math","floor","mathCeil","ceil","mathPow","pow","mathLog","log","LogScale","_super","__extends","_this","apply","arguments","type","base","_originalScale","_interval","getTicks","expandToNicedExtent","originalScale","extent","_extent","originalExtent","getExtent","ticks","call","map","tick","val","value","powVal","_fixMin","fixRoundingError","_fixMax","setExtent","start","end","unionExtent","unionExtentFromData","data","dim","getApproximateExtent","niceTicks","approxTickNum","span","Infinity","interval","quantity","err","isNaN","abs","niceExtent","_niceExtent","opt","fixMin","fixMax","parse","contain","normalize","scale","proto","getMinorTicks","getLabel","originalVal","registerClass"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n\"use strict\";\n\nexports.__esModule = true;\n\nvar tslib_1 = require(\"tslib\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar Scale_1 = require(\"./Scale\");\n\nvar numberUtil = require(\"../util/number\");\n\nvar scaleHelper = require(\"./helper\");\n\nvar Interval_1 = require(\"./Interval\");\n\nvar scaleProto = Scale_1[\"default\"].prototype;\nvar intervalScaleProto = Interval_1[\"default\"].prototype;\nvar getPrecisionSafe = numberUtil.getPrecisionSafe;\nvar roundingErrorFix = numberUtil.round;\nvar mathFloor = Math.floor;\nvar mathCeil = Math.ceil;\nvar mathPow = Math.pow;\nvar mathLog = Math.log;\n\nvar LogScale = function (_super) {\n  tslib_1.__extends(LogScale, _super);\n\n  function LogScale() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'log';\n    _this.base = 10;\n    _this._originalScale = new Interval_1[\"default\"]();\n    _this._interval = 0;\n    return _this;\n  }\n\n  LogScale.prototype.getTicks = function (expandToNicedExtent) {\n    var originalScale = this._originalScale;\n    var extent = this._extent;\n    var originalExtent = originalScale.getExtent();\n    var ticks = intervalScaleProto.getTicks.call(this, expandToNicedExtent);\n    return zrUtil.map(ticks, function (tick) {\n      var val = tick.value;\n      var powVal = numberUtil.round(mathPow(this.base, val));\n      powVal = val === extent[0] && this._fixMin ? fixRoundingError(powVal, originalExtent[0]) : powVal;\n      powVal = val === extent[1] && this._fixMax ? fixRoundingError(powVal, originalExtent[1]) : powVal;\n      return {\n        value: powVal\n      };\n    }, this);\n  };\n\n  LogScale.prototype.setExtent = function (start, end) {\n    var base = this.base;\n    start = mathLog(start) / mathLog(base);\n    end = mathLog(end) / mathLog(base);\n    intervalScaleProto.setExtent.call(this, start, end);\n  };\n\n  LogScale.prototype.getExtent = function () {\n    var base = this.base;\n    var extent = scaleProto.getExtent.call(this);\n    extent[0] = mathPow(base, extent[0]);\n    extent[1] = mathPow(base, extent[1]);\n    var originalScale = this._originalScale;\n    var originalExtent = originalScale.getExtent();\n    this._fixMin && (extent[0] = fixRoundingError(extent[0], originalExtent[0]));\n    this._fixMax && (extent[1] = fixRoundingError(extent[1], originalExtent[1]));\n    return extent;\n  };\n\n  LogScale.prototype.unionExtent = function (extent) {\n    this._originalScale.unionExtent(extent);\n\n    var base = this.base;\n    extent[0] = mathLog(extent[0]) / mathLog(base);\n    extent[1] = mathLog(extent[1]) / mathLog(base);\n    scaleProto.unionExtent.call(this, extent);\n  };\n\n  LogScale.prototype.unionExtentFromData = function (data, dim) {\n    this.unionExtent(data.getApproximateExtent(dim));\n  };\n\n  LogScale.prototype.niceTicks = function (approxTickNum) {\n    approxTickNum = approxTickNum || 10;\n    var extent = this._extent;\n    var span = extent[1] - extent[0];\n\n    if (span === Infinity || span <= 0) {\n      return;\n    }\n\n    var interval = numberUtil.quantity(span);\n    var err = approxTickNum / span * interval;\n\n    if (err <= 0.5) {\n      interval *= 10;\n    }\n\n    while (!isNaN(interval) && Math.abs(interval) < 1 && Math.abs(interval) > 0) {\n      interval *= 10;\n    }\n\n    var niceExtent = [numberUtil.round(mathCeil(extent[0] / interval) * interval), numberUtil.round(mathFloor(extent[1] / interval) * interval)];\n    this._interval = interval;\n    this._niceExtent = niceExtent;\n  };\n\n  LogScale.prototype.niceExtent = function (opt) {\n    intervalScaleProto.niceExtent.call(this, opt);\n    this._fixMin = opt.fixMin;\n    this._fixMax = opt.fixMax;\n  };\n\n  LogScale.prototype.parse = function (val) {\n    return val;\n  };\n\n  LogScale.prototype.contain = function (val) {\n    val = mathLog(val) / mathLog(this.base);\n    return scaleHelper.contain(val, this._extent);\n  };\n\n  LogScale.prototype.normalize = function (val) {\n    val = mathLog(val) / mathLog(this.base);\n    return scaleHelper.normalize(val, this._extent);\n  };\n\n  LogScale.prototype.scale = function (val) {\n    val = scaleHelper.scale(val, this._extent);\n    return mathPow(this.base, val);\n  };\n\n  LogScale.type = 'log';\n  return LogScale;\n}(Scale_1[\"default\"]);\n\nvar proto = LogScale.prototype;\nproto.getMinorTicks = intervalScaleProto.getMinorTicks;\nproto.getLabel = intervalScaleProto.getLabel;\n\nfunction fixRoundingError(val, originalVal) {\n  return roundingErrorFix(val, getPrecisionSafe(originalVal));\n}\n\nScale_1[\"default\"].registerClass(LogScale);\nexports[\"default\"] = LogScale;"]},"metadata":{},"sourceType":"script"}