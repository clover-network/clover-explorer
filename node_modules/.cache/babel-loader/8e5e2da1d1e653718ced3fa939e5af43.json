{"ast":null,"code":"var Comparator =\n/** @class */\nfunction () {\n  /**\n   * @param {function(a: *, b: *)} [compareFunction] - It may be custom compare function that, let's\n   * say may compare custom objects together.\n   */\n  function Comparator(compareFunction) {\n    this.compare = compareFunction || Comparator.defaultCompareFunction;\n  }\n  /**\n   * Default comparison function. It just assumes that \"a\" and \"b\" are strings or numbers.\n   * @param {(string|number)} a\n   * @param {(string|number)} b\n   * @returns {number}\n   */\n\n\n  Comparator.defaultCompareFunction = function (a, b) {\n    if (a === b) {\n      return 0;\n    }\n\n    return a < b ? -1 : 1;\n  };\n  /**\n   * Checks if two variables are equal.\n   * @param {*} a\n   * @param {*} b\n   * @return {boolean}\n   */\n\n\n  Comparator.prototype.equal = function (a, b) {\n    return this.compare(a, b) === 0;\n  };\n  /**\n   * Checks if variable \"a\" is less than \"b\".\n   * @param {*} a\n   * @param {*} b\n   * @return {boolean}\n   */\n\n\n  Comparator.prototype.lessThan = function (a, b) {\n    return this.compare(a, b) < 0;\n  };\n  /**\n   * Checks if variable \"a\" is greater than \"b\".\n   * @param {*} a\n   * @param {*} b\n   * @return {boolean}\n   */\n\n\n  Comparator.prototype.greaterThan = function (a, b) {\n    return this.compare(a, b) > 0;\n  };\n  /**\n   * Checks if variable \"a\" is less than or equal to \"b\".\n   * @param {*} a\n   * @param {*} b\n   * @return {boolean}\n   */\n\n\n  Comparator.prototype.lessThanOrEqual = function (a, b) {\n    return this.lessThan(a, b) || this.equal(a, b);\n  };\n  /**\n   * Checks if variable \"a\" is greater than or equal to \"b\".\n   * @param {*} a\n   * @param {*} b\n   * @return {boolean}\n   */\n\n\n  Comparator.prototype.greaterThanOrEqual = function (a, b) {\n    return this.greaterThan(a, b) || this.equal(a, b);\n  };\n  /**\n   * Reverses the comparison order.\n   */\n\n\n  Comparator.prototype.reverse = function () {\n    var compareOriginal = this.compare;\n\n    this.compare = function (a, b) {\n      return compareOriginal(b, a);\n    };\n  };\n\n  return Comparator;\n}();\n\nexport default Comparator;","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/@antv/g6/es/algorithm/comparator.js"],"names":["Comparator","compareFunction","compare","defaultCompareFunction","a","b","prototype","equal","lessThan","greaterThan","lessThanOrEqual","greaterThanOrEqual","reverse","compareOriginal"],"mappings":"AAAA,IAAIA,UAAU;AACd;AACA,YAAY;AACV;AACF;AACA;AACA;AACE,WAASA,UAAT,CAAoBC,eAApB,EAAqC;AACnC,SAAKC,OAAL,GAAeD,eAAe,IAAID,UAAU,CAACG,sBAA7C;AACD;AACD;AACF;AACA;AACA;AACA;AACA;;;AAGEH,EAAAA,UAAU,CAACG,sBAAX,GAAoC,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAClD,QAAID,CAAC,KAAKC,CAAV,EAAa;AACX,aAAO,CAAP;AACD;;AAED,WAAOD,CAAC,GAAGC,CAAJ,GAAQ,CAAC,CAAT,GAAa,CAApB;AACD,GAND;AAOA;AACF;AACA;AACA;AACA;AACA;;;AAGEL,EAAAA,UAAU,CAACM,SAAX,CAAqBC,KAArB,GAA6B,UAAUH,CAAV,EAAaC,CAAb,EAAgB;AAC3C,WAAO,KAAKH,OAAL,CAAaE,CAAb,EAAgBC,CAAhB,MAAuB,CAA9B;AACD,GAFD;AAGA;AACF;AACA;AACA;AACA;AACA;;;AAGEL,EAAAA,UAAU,CAACM,SAAX,CAAqBE,QAArB,GAAgC,UAAUJ,CAAV,EAAaC,CAAb,EAAgB;AAC9C,WAAO,KAAKH,OAAL,CAAaE,CAAb,EAAgBC,CAAhB,IAAqB,CAA5B;AACD,GAFD;AAGA;AACF;AACA;AACA;AACA;AACA;;;AAGEL,EAAAA,UAAU,CAACM,SAAX,CAAqBG,WAArB,GAAmC,UAAUL,CAAV,EAAaC,CAAb,EAAgB;AACjD,WAAO,KAAKH,OAAL,CAAaE,CAAb,EAAgBC,CAAhB,IAAqB,CAA5B;AACD,GAFD;AAGA;AACF;AACA;AACA;AACA;AACA;;;AAGEL,EAAAA,UAAU,CAACM,SAAX,CAAqBI,eAArB,GAAuC,UAAUN,CAAV,EAAaC,CAAb,EAAgB;AACrD,WAAO,KAAKG,QAAL,CAAcJ,CAAd,EAAiBC,CAAjB,KAAuB,KAAKE,KAAL,CAAWH,CAAX,EAAcC,CAAd,CAA9B;AACD,GAFD;AAGA;AACF;AACA;AACA;AACA;AACA;;;AAGEL,EAAAA,UAAU,CAACM,SAAX,CAAqBK,kBAArB,GAA0C,UAAUP,CAAV,EAAaC,CAAb,EAAgB;AACxD,WAAO,KAAKI,WAAL,CAAiBL,CAAjB,EAAoBC,CAApB,KAA0B,KAAKE,KAAL,CAAWH,CAAX,EAAcC,CAAd,CAAjC;AACD,GAFD;AAGA;AACF;AACA;;;AAGEL,EAAAA,UAAU,CAACM,SAAX,CAAqBM,OAArB,GAA+B,YAAY;AACzC,QAAIC,eAAe,GAAG,KAAKX,OAA3B;;AAEA,SAAKA,OAAL,GAAe,UAAUE,CAAV,EAAaC,CAAb,EAAgB;AAC7B,aAAOQ,eAAe,CAACR,CAAD,EAAID,CAAJ,CAAtB;AACD,KAFD;AAGD,GAND;;AAQA,SAAOJ,UAAP;AACD,CA5FD,EAFA;;AAgGA,eAAeA,UAAf","sourcesContent":["var Comparator =\n/** @class */\nfunction () {\n  /**\n   * @param {function(a: *, b: *)} [compareFunction] - It may be custom compare function that, let's\n   * say may compare custom objects together.\n   */\n  function Comparator(compareFunction) {\n    this.compare = compareFunction || Comparator.defaultCompareFunction;\n  }\n  /**\n   * Default comparison function. It just assumes that \"a\" and \"b\" are strings or numbers.\n   * @param {(string|number)} a\n   * @param {(string|number)} b\n   * @returns {number}\n   */\n\n\n  Comparator.defaultCompareFunction = function (a, b) {\n    if (a === b) {\n      return 0;\n    }\n\n    return a < b ? -1 : 1;\n  };\n  /**\n   * Checks if two variables are equal.\n   * @param {*} a\n   * @param {*} b\n   * @return {boolean}\n   */\n\n\n  Comparator.prototype.equal = function (a, b) {\n    return this.compare(a, b) === 0;\n  };\n  /**\n   * Checks if variable \"a\" is less than \"b\".\n   * @param {*} a\n   * @param {*} b\n   * @return {boolean}\n   */\n\n\n  Comparator.prototype.lessThan = function (a, b) {\n    return this.compare(a, b) < 0;\n  };\n  /**\n   * Checks if variable \"a\" is greater than \"b\".\n   * @param {*} a\n   * @param {*} b\n   * @return {boolean}\n   */\n\n\n  Comparator.prototype.greaterThan = function (a, b) {\n    return this.compare(a, b) > 0;\n  };\n  /**\n   * Checks if variable \"a\" is less than or equal to \"b\".\n   * @param {*} a\n   * @param {*} b\n   * @return {boolean}\n   */\n\n\n  Comparator.prototype.lessThanOrEqual = function (a, b) {\n    return this.lessThan(a, b) || this.equal(a, b);\n  };\n  /**\n   * Checks if variable \"a\" is greater than or equal to \"b\".\n   * @param {*} a\n   * @param {*} b\n   * @return {boolean}\n   */\n\n\n  Comparator.prototype.greaterThanOrEqual = function (a, b) {\n    return this.greaterThan(a, b) || this.equal(a, b);\n  };\n  /**\n   * Reverses the comparison order.\n   */\n\n\n  Comparator.prototype.reverse = function () {\n    var compareOriginal = this.compare;\n\n    this.compare = function (a, b) {\n      return compareOriginal(b, a);\n    };\n  };\n\n  return Comparator;\n}();\n\nexport default Comparator;"]},"metadata":{},"sourceType":"module"}