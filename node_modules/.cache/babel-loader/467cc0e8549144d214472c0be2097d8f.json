{"ast":null,"code":"import { determination } from \"./utils/determination\";\nimport { interpose } from \"./utils/interpose\";\nimport { ols } from \"./utils/ols\";\nimport { visitPoints } from \"./utils/points\";\nexport default function () {\n  let x = d => d[0],\n      y = d => d[1],\n      domain;\n\n  function logarithmic(data) {\n    let n = 0,\n        X = 0,\n        Y = 0,\n        XY = 0,\n        X2 = 0,\n        xmin = domain ? +domain[0] : Infinity,\n        xmax = domain ? +domain[1] : -Infinity;\n    visitPoints(data, x, y, (dx, dy) => {\n      const lx = Math.log(dx);\n      ++n;\n      X += (lx - X) / n;\n      Y += (dy - Y) / n;\n      XY += (lx * dy - XY) / n;\n      X2 += (lx * lx - X2) / n;\n\n      if (!domain) {\n        if (dx < xmin) xmin = dx;\n        if (dx > xmax) xmax = dx;\n      }\n    });\n\n    const [intercept, slope] = ols(X, Y, XY, X2),\n          fn = x => slope * Math.log(x) + intercept,\n          out = interpose(xmin, xmax, fn);\n\n    out.a = slope;\n    out.b = intercept;\n    out.predict = fn;\n    out.rSquared = determination(data, x, y, Y, fn);\n    return out;\n  }\n\n  logarithmic.domain = function (arr) {\n    return arguments.length ? (domain = arr, logarithmic) : domain;\n  };\n\n  logarithmic.x = function (fn) {\n    return arguments.length ? (x = fn, logarithmic) : x;\n  };\n\n  logarithmic.y = function (fn) {\n    return arguments.length ? (y = fn, logarithmic) : y;\n  };\n\n  return logarithmic;\n}","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/d3-regression/src/logarithmic.js"],"names":["determination","interpose","ols","visitPoints","x","d","y","domain","logarithmic","data","n","X","Y","XY","X2","xmin","Infinity","xmax","dx","dy","lx","Math","log","intercept","slope","fn","out","a","b","predict","rSquared","arr","arguments","length"],"mappings":"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","sourcesContent":["import { determination } from \"./utils/determination\";\nimport { interpose } from \"./utils/interpose\";\nimport { ols } from \"./utils/ols\";\nimport { visitPoints } from \"./utils/points\";\n\nexport default function() {\n  let x = d => d[0],\n      y = d => d[1],\n      domain;\n  \n  function logarithmic(data){\n    let n = 0,\n        X = 0,\n        Y = 0,\n        XY = 0,\n        X2 = 0,\n        xmin = domain ? +domain[0] : Infinity,\n        xmax = domain ? +domain[1] : -Infinity;\n    \n    visitPoints(data, x, y, (dx, dy) => {\n      const lx = Math.log(dx);\n      ++n;\n      X += (lx - X) / n;\n      Y += (dy - Y) / n;\n      XY += (lx * dy - XY) / n;\n      X2 += (lx * lx - X2) / n;\n      \n      if (!domain){\n        if (dx < xmin) xmin = dx;\n        if (dx > xmax) xmax = dx;\n      }\n    });\n    \n    const [intercept, slope] = ols(X, Y, XY, X2),\n        fn = x => slope * Math.log(x) + intercept,\n        out = interpose(xmin, xmax, fn);\n        \n    out.a = slope;\n    out.b = intercept;\n    out.predict = fn;\n    out.rSquared = determination(data, x, y, Y, fn);\n\n    return out; \n  }\n  \n  logarithmic.domain = function(arr){\n    return arguments.length ? (domain = arr, logarithmic) : domain;\n  }\n\n  logarithmic.x = function(fn){\n    return arguments.length ? (x = fn, logarithmic) : x;\n  }\n\n  logarithmic.y = function(fn){\n    return arguments.length ? (y = fn, logarithmic) : y;\n  }\n  \n  return logarithmic;\n}"]},"metadata":{},"sourceType":"module"}