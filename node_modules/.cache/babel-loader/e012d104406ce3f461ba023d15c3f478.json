{"ast":null,"code":"import { __extends } from \"tslib\";\nimport Hierarchy from '@antv/hierarchy/lib';\nimport { each, isString } from '@antv/util/lib';\nimport { radialLayout, traverseTree } from '../util/graphic';\nimport Graph from './graph';\n\nvar TreeGraph =\n/** @class */\nfunction (_super) {\n  __extends(TreeGraph, _super);\n\n  function TreeGraph(cfg) {\n    var _this = _super.call(this, cfg) || this;\n\n    _this.layoutAnimating = false; // 用于缓存动画结束后需要删除的节点\n\n    _this.set('removeList', []);\n\n    _this.set('layoutMethod', _this.getLayout());\n\n    return _this;\n  }\n  /**\n   * 通过 Layout 配置获取布局配置\n   */\n\n\n  TreeGraph.prototype.getLayout = function () {\n    var layout = this.get('layout');\n\n    if (!layout) {\n      return null;\n    }\n\n    if (typeof layout === 'function') {\n      return layout;\n    }\n\n    if (!layout.type) {\n      layout.type = 'dendrogram';\n    }\n\n    if (!layout.direction) {\n      layout.direction = 'TB';\n    }\n\n    if (layout.radial) {\n      return function (data) {\n        var layoutData = Hierarchy[layout.type](data, layout);\n        radialLayout(layoutData);\n        return layoutData;\n      };\n    }\n\n    return function (data) {\n      return Hierarchy[layout.type](data, layout);\n    };\n  };\n  /**\n   * 返回指定节点在树图数据中的索引\n   * @param children 树图数据\n   * @param child 树图中某一个 Item 的数据\n   */\n\n\n  TreeGraph.indexOfChild = function (children, id) {\n    var index = -1; // eslint-disable-next-line consistent-return\n\n    each(children, function (former, i) {\n      if (id === former.id) {\n        index = i;\n        return false;\n      }\n    });\n    return index;\n  };\n\n  TreeGraph.prototype.getDefaultCfg = function () {\n    var cfg = _super.prototype.getDefaultCfg.call(this); // 树图默认打开动画\n\n\n    cfg.animate = true;\n    return cfg;\n  };\n  /**\n   * 向🌲树中添加数据\n   * @param treeData 树图数据\n   * @param parent 父节点实例\n   * @param animate 是否开启动画\n   */\n\n\n  TreeGraph.prototype.innerAddChild = function (treeData, parent, animate) {\n    var self = this;\n    var model = treeData.data;\n\n    if (model) {\n      // model 中应存储真实的数据，特别是真实的 children\n      model.x = treeData.x;\n      model.y = treeData.y;\n      model.depth = treeData.depth;\n    }\n\n    var node = self.addItem('node', model, false);\n\n    if (parent) {\n      node.set('parent', parent);\n\n      if (animate) {\n        var origin_1 = parent.get('originAttrs');\n\n        if (origin_1) {\n          node.set('originAttrs', origin_1);\n        } else {\n          var parentModel = parent.getModel();\n          node.set('originAttrs', {\n            x: parentModel.x,\n            y: parentModel.y\n          });\n        }\n      }\n\n      var childrenList = parent.get('children');\n\n      if (!childrenList) {\n        parent.set('children', [node]);\n      } else {\n        childrenList.push(node);\n      }\n\n      self.addItem('edge', {\n        source: parent,\n        target: node,\n        id: parent.get('id') + \":\" + node.get('id')\n      }, false);\n    } // 渲染到视图上应参考布局的children, 避免多绘制了收起的节点\n\n\n    each(treeData.children || [], function (child) {\n      self.innerAddChild(child, node, animate);\n    });\n    self.emit('afteraddchild', {\n      item: node,\n      parent: parent\n    });\n    return node;\n  };\n  /**\n   * 将数据上的变更转换到视图上\n   * @param data\n   * @param parent\n   * @param animate\n   */\n\n\n  TreeGraph.prototype.innerUpdateChild = function (data, parent, animate) {\n    var self = this;\n    var current = self.findById(data.id); // 若子树不存在，整体添加即可\n\n    if (!current) {\n      self.innerAddChild(data, parent, animate);\n      return;\n    } // 更新新节点下所有子节点\n\n\n    each(data.children || [], function (child) {\n      self.innerUpdateChild(child, current, animate);\n    }); // 用现在节点的children实例来删除移除的子节点\n\n    var children = current.get('children');\n\n    if (children) {\n      var len = children.length;\n\n      if (len > 0) {\n        for (var i = children.length - 1; i >= 0; i--) {\n          var child = children[i].getModel();\n\n          if (TreeGraph.indexOfChild(data.children || [], child.id) === -1) {\n            self.innerRemoveChild(child.id, {\n              x: data.x,\n              y: data.y\n            }, animate); // 更新父节点下缓存的子节点 item 实例列表\n\n            children.splice(i, 1);\n          }\n        }\n      }\n    }\n\n    var oriX;\n    var oriY;\n\n    if (current.get('originAttrs')) {\n      oriX = current.get('originAttrs').x;\n      oriY = current.get('originAttrs').y;\n    }\n\n    var model = current.getModel();\n\n    if (animate) {\n      // 如果有动画，先缓存节点运动再更新节点\n      current.set('originAttrs', {\n        x: model.x,\n        y: model.y\n      });\n    }\n\n    current.set('model', data.data);\n\n    if (oriX !== data.x || oriY !== data.y) {\n      current.updatePosition({\n        x: data.x,\n        y: data.y\n      });\n    }\n  };\n  /**\n   * 删除子节点Item对象\n   * @param id\n   * @param to\n   * @param animate\n   */\n\n\n  TreeGraph.prototype.innerRemoveChild = function (id, to, animate) {\n    var self = this;\n    var node = self.findById(id);\n\n    if (!node) {\n      return;\n    }\n\n    each(node.get('children'), function (child) {\n      self.innerRemoveChild(child.getModel().id, to, animate);\n    });\n\n    if (animate) {\n      var model = node.getModel();\n      node.set('to', to);\n      node.set('originAttrs', {\n        x: model.x,\n        y: model.y\n      });\n      self.get('removeList').push(node);\n    } else {\n      self.removeItem(node);\n    }\n  };\n  /**\n   * 更新数据模型，差量更新并重新渲染\n   * @param {object} data 数据模型\n   */\n\n\n  TreeGraph.prototype.changeData = function (data) {\n    var self = this; // 更改数据源后，取消所有状态\n\n    this.getNodes().map(function (node) {\n      return self.clearItemStates(node);\n    });\n    this.getEdges().map(function (edge) {\n      return self.clearItemStates(edge);\n    });\n\n    if (data) {\n      self.data(data);\n      self.render();\n    } else {\n      self.layout(this.get('fitView'));\n    }\n  };\n  /**\n   * 已更名为 updateLayout，为保持兼容暂且保留。\n   * 更改并应用树布局算法\n   * @param {object} layout 布局算法\n   */\n\n\n  TreeGraph.prototype.changeLayout = function (layout) {\n    // eslint-disable-next-line no-console\n    console.warn('Please call updateLayout instead of changeLayout. changeLayout will be discarded soon');\n    var self = this;\n    self.updateLayout(layout);\n  };\n  /**\n   * 更改并应用树布局算法\n   * @param {object} layout 布局算法\n   */\n\n\n  TreeGraph.prototype.updateLayout = function (layout) {\n    var self = this;\n\n    if (!layout) {\n      // eslint-disable-next-line no-console\n      console.warn('layout cannot be null');\n      return;\n    }\n\n    self.set('layout', layout);\n    self.set('layoutMethod', self.getLayout());\n    self.layout();\n  };\n  /**\n   * 已更名为 layout，为保持兼容暂且保留。\n   * 根据目前的 data 刷新布局，更新到画布上。用于变更数据之后刷新视图。\n   * @param {boolean} fitView 更新布局时是否需要适应窗口\n   */\n\n\n  TreeGraph.prototype.refreshLayout = function (fitView) {\n    // eslint-disable-next-line no-console\n    console.warn('Please call layout instead of refreshLayout. refreshLayout will be discarded soon');\n    var self = this;\n    self.layout(fitView);\n  };\n  /**\n   * 根据目前的 data 刷新布局，更新到画布上。用于变更数据之后刷新视图。\n   * @param {boolean} fitView 更新布局时是否需要适应窗口\n   */\n\n\n  TreeGraph.prototype.layout = function (fitView) {\n    var self = this;\n    var data = self.get('data');\n    var layoutMethod = self.get('layoutMethod');\n    var layoutData = layoutMethod(data, self.get('layout'));\n    var animate = self.get('animate');\n    self.emit('beforerefreshlayout', {\n      data: data,\n      layoutData: layoutData\n    });\n    self.emit('beforelayout');\n    self.innerUpdateChild(layoutData, undefined, animate);\n\n    if (fitView) {\n      var viewController = self.get('viewController');\n      viewController.fitView();\n    }\n\n    if (!animate) {\n      // 如果没有动画，目前仅更新了节点的位置，刷新一下边的样式\n      self.refresh();\n      self.paint();\n    } else {\n      self.layoutAnimate(layoutData);\n    }\n\n    self.emit('afterrefreshlayout', {\n      data: data,\n      layoutData: layoutData\n    });\n    self.emit('afterlayout');\n  };\n  /**\n   * 添加子树到对应 id 的节点\n   * @param {TreeGraphData} data 子树数据模型\n   * @param {string} parent 子树的父节点id\n   */\n\n\n  TreeGraph.prototype.addChild = function (data, parent) {\n    var self = this;\n    self.emit('beforeaddchild', {\n      model: data,\n      parent: parent\n    }); // 将数据添加到源数据中，走changeData方法\n\n    if (!isString(parent)) {\n      parent = parent.get('id');\n    }\n\n    var parentData = self.findDataById(parent);\n\n    if (parentData) {\n      if (!parentData.children) {\n        parentData.children = [];\n      }\n\n      parentData.children.push(data);\n      self.changeData();\n    }\n  };\n  /**\n   * 更新源数据，差量更新子树\n   * @param {TreeGraphData} data 子树数据模型\n   * @param {string} parent 子树的父节点id\n   */\n\n\n  TreeGraph.prototype.updateChild = function (data, parent) {\n    var self = this; // 如果没有父节点或找不到该节点，是全量的更新，直接重置data\n\n    if (!parent || !self.findById(parent)) {\n      self.changeData(data);\n      return;\n    }\n\n    var parentModel = self.findById(parent).getModel();\n    var current = self.findById(data.id);\n\n    if (!parentModel.children) {\n      // 当 current 不存在时，children 为空数组\n      parentModel.children = [];\n    } // 如果不存在该节点，则添加\n\n\n    if (!current) {\n      parentModel.children.push(data);\n    } else {\n      var index = TreeGraph.indexOfChild(parentModel.children, data.id);\n      parentModel.children[index] = data;\n    }\n\n    self.changeData();\n  };\n  /**\n   * 删除子树\n   * @param {string} id 子树根节点id\n   */\n\n\n  TreeGraph.prototype.removeChild = function (id) {\n    var self = this;\n    var node = self.findById(id);\n\n    if (!node) {\n      return;\n    }\n\n    var parent = node.get('parent');\n\n    if (parent && !parent.destroyed) {\n      var parentNode = self.findDataById(parent.get('id'));\n      var siblings = parentNode && parentNode.children || [];\n      var model = node.getModel();\n      var index = TreeGraph.indexOfChild(siblings, model.id);\n      siblings.splice(index, 1);\n    }\n\n    self.changeData();\n  };\n  /**\n   * 根据id获取对应的源数据\n   * @param {string} id 元素id\n   * @param {TreeGraphData | undefined} parent 从哪个节点开始寻找，为空时从根节点开始查找\n   * @return {TreeGraphData} 对应源数据\n   */\n\n\n  TreeGraph.prototype.findDataById = function (id, parent) {\n    var self = this;\n\n    if (!parent) {\n      parent = self.get('data');\n    }\n\n    if (id === parent.id) {\n      return parent;\n    }\n\n    var result = null; // eslint-disable-next-line consistent-return\n\n    each(parent.children || [], function (child) {\n      if (child.id === id) {\n        result = child;\n        return false;\n      }\n\n      result = self.findDataById(id, child);\n\n      if (result) {\n        return false;\n      }\n    });\n    return result;\n  };\n  /**\n   * 布局动画接口，用于数据更新时做节点位置更新的动画\n   * @param {TreeGraphData} data 更新的数据\n   * @param {function} onFrame 定义节点位置更新时如何移动\n   */\n\n\n  TreeGraph.prototype.layoutAnimate = function (data, onFrame) {\n    var self = this;\n    var animateCfg = this.get('animateCfg');\n    self.emit('beforeanimate', {\n      data: data\n    }); // 如果边中没有指定锚点，但是本身有锚点控制，在动画过程中保持锚点不变\n\n    self.getEdges().forEach(function (edge) {\n      var model = edge.get('model');\n\n      if (!model.sourceAnchor) {\n        model.sourceAnchor = edge.get('sourceAnchorIndex');\n      }\n    });\n    this.get('canvas').animate(function (ratio) {\n      traverseTree(data, function (child) {\n        var node = self.findById(child.id); // 只有当存在node的时候才执行\n\n        if (node) {\n          var origin_2 = node.get('originAttrs');\n          var model = node.get('model');\n\n          if (!origin_2) {\n            origin_2 = {\n              x: model.x,\n              y: model.y\n            };\n            node.set('originAttrs', origin_2);\n          }\n\n          if (onFrame) {\n            var attrs = onFrame(node, ratio, origin_2, data);\n            node.set('model', Object.assign(model, attrs));\n          } else {\n            model.x = origin_2.x + (child.x - origin_2.x) * ratio;\n            model.y = origin_2.y + (child.y - origin_2.y) * ratio;\n          }\n        }\n\n        return true;\n      });\n      each(self.get('removeList'), function (node) {\n        var model = node.getModel();\n        var from = node.get('originAttrs');\n        var to = node.get('to');\n        model.x = from.x + (to.x - from.x) * ratio;\n        model.y = from.y + (to.y - from.y) * ratio;\n      });\n      self.refreshPositions();\n    }, {\n      duration: animateCfg.duration,\n      easing: animateCfg.ease,\n      callback: function callback() {\n        each(self.getNodes(), function (node) {\n          node.set('originAttrs', null);\n        });\n        each(self.get('removeList'), function (node) {\n          self.removeItem(node);\n        });\n        self.set('removeList', []);\n\n        if (animateCfg.callback) {\n          animateCfg.callback();\n        }\n\n        self.emit('afteranimate', {\n          data: data\n        });\n      },\n      delay: animateCfg.delay\n    });\n  };\n  /**\n   * 立即停止布局动画\n   */\n\n\n  TreeGraph.prototype.stopLayoutAnimate = function () {\n    this.get('canvas').stopAnimate();\n    this.emit('layoutanimateend', {\n      data: this.get('data')\n    });\n    this.layoutAnimating = false;\n  };\n  /**\n   * 是否在布局动画\n   * @return {boolean} 是否有布局动画\n   */\n\n\n  TreeGraph.prototype.isLayoutAnimating = function () {\n    return this.layoutAnimating;\n  };\n  /**\n   * 根据data接口的数据渲染视图\n   */\n\n\n  TreeGraph.prototype.render = function () {\n    var self = this;\n    var data = self.get('data');\n\n    if (!data) {\n      throw new Error('data must be defined first');\n    }\n\n    self.clear();\n    self.emit('beforerender');\n    self.layout(this.get('fitView'));\n    self.emit('afterrender');\n  };\n  /**\n   * 导出图数据\n   * @return {object} data\n   */\n\n\n  TreeGraph.prototype.save = function () {\n    return this.get('data');\n  };\n\n  return TreeGraph;\n}(Graph);\n\nexport default TreeGraph;","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/@antv/g6/es/graph/tree-graph.js"],"names":["__extends","Hierarchy","each","isString","radialLayout","traverseTree","Graph","TreeGraph","_super","cfg","_this","call","layoutAnimating","set","getLayout","prototype","layout","get","type","direction","radial","data","layoutData","indexOfChild","children","id","index","former","i","getDefaultCfg","animate","innerAddChild","treeData","parent","self","model","x","y","depth","node","addItem","origin_1","parentModel","getModel","childrenList","push","source","target","child","emit","item","innerUpdateChild","current","findById","len","length","innerRemoveChild","splice","oriX","oriY","updatePosition","to","removeItem","changeData","getNodes","map","clearItemStates","getEdges","edge","render","changeLayout","console","warn","updateLayout","refreshLayout","fitView","layoutMethod","undefined","viewController","refresh","paint","layoutAnimate","addChild","parentData","findDataById","updateChild","removeChild","destroyed","parentNode","siblings","result","onFrame","animateCfg","forEach","sourceAnchor","ratio","origin_2","attrs","Object","assign","from","refreshPositions","duration","easing","ease","callback","delay","stopLayoutAnimate","stopAnimate","isLayoutAnimating","Error","clear","save"],"mappings":"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","sourcesContent":["import { __extends } from \"tslib\";\nimport Hierarchy from '@antv/hierarchy/lib';\nimport { each, isString } from '@antv/util/lib';\nimport { radialLayout, traverseTree } from '../util/graphic';\nimport Graph from './graph';\n\nvar TreeGraph =\n/** @class */\nfunction (_super) {\n  __extends(TreeGraph, _super);\n\n  function TreeGraph(cfg) {\n    var _this = _super.call(this, cfg) || this;\n\n    _this.layoutAnimating = false; // 用于缓存动画结束后需要删除的节点\n\n    _this.set('removeList', []);\n\n    _this.set('layoutMethod', _this.getLayout());\n\n    return _this;\n  }\n  /**\n   * 通过 Layout 配置获取布局配置\n   */\n\n\n  TreeGraph.prototype.getLayout = function () {\n    var layout = this.get('layout');\n\n    if (!layout) {\n      return null;\n    }\n\n    if (typeof layout === 'function') {\n      return layout;\n    }\n\n    if (!layout.type) {\n      layout.type = 'dendrogram';\n    }\n\n    if (!layout.direction) {\n      layout.direction = 'TB';\n    }\n\n    if (layout.radial) {\n      return function (data) {\n        var layoutData = Hierarchy[layout.type](data, layout);\n        radialLayout(layoutData);\n        return layoutData;\n      };\n    }\n\n    return function (data) {\n      return Hierarchy[layout.type](data, layout);\n    };\n  };\n  /**\n   * 返回指定节点在树图数据中的索引\n   * @param children 树图数据\n   * @param child 树图中某一个 Item 的数据\n   */\n\n\n  TreeGraph.indexOfChild = function (children, id) {\n    var index = -1; // eslint-disable-next-line consistent-return\n\n    each(children, function (former, i) {\n      if (id === former.id) {\n        index = i;\n        return false;\n      }\n    });\n    return index;\n  };\n\n  TreeGraph.prototype.getDefaultCfg = function () {\n    var cfg = _super.prototype.getDefaultCfg.call(this); // 树图默认打开动画\n\n\n    cfg.animate = true;\n    return cfg;\n  };\n  /**\n   * 向🌲树中添加数据\n   * @param treeData 树图数据\n   * @param parent 父节点实例\n   * @param animate 是否开启动画\n   */\n\n\n  TreeGraph.prototype.innerAddChild = function (treeData, parent, animate) {\n    var self = this;\n    var model = treeData.data;\n\n    if (model) {\n      // model 中应存储真实的数据，特别是真实的 children\n      model.x = treeData.x;\n      model.y = treeData.y;\n      model.depth = treeData.depth;\n    }\n\n    var node = self.addItem('node', model, false);\n\n    if (parent) {\n      node.set('parent', parent);\n\n      if (animate) {\n        var origin_1 = parent.get('originAttrs');\n\n        if (origin_1) {\n          node.set('originAttrs', origin_1);\n        } else {\n          var parentModel = parent.getModel();\n          node.set('originAttrs', {\n            x: parentModel.x,\n            y: parentModel.y\n          });\n        }\n      }\n\n      var childrenList = parent.get('children');\n\n      if (!childrenList) {\n        parent.set('children', [node]);\n      } else {\n        childrenList.push(node);\n      }\n\n      self.addItem('edge', {\n        source: parent,\n        target: node,\n        id: parent.get('id') + \":\" + node.get('id')\n      }, false);\n    } // 渲染到视图上应参考布局的children, 避免多绘制了收起的节点\n\n\n    each(treeData.children || [], function (child) {\n      self.innerAddChild(child, node, animate);\n    });\n    self.emit('afteraddchild', {\n      item: node,\n      parent: parent\n    });\n    return node;\n  };\n  /**\n   * 将数据上的变更转换到视图上\n   * @param data\n   * @param parent\n   * @param animate\n   */\n\n\n  TreeGraph.prototype.innerUpdateChild = function (data, parent, animate) {\n    var self = this;\n    var current = self.findById(data.id); // 若子树不存在，整体添加即可\n\n    if (!current) {\n      self.innerAddChild(data, parent, animate);\n      return;\n    } // 更新新节点下所有子节点\n\n\n    each(data.children || [], function (child) {\n      self.innerUpdateChild(child, current, animate);\n    }); // 用现在节点的children实例来删除移除的子节点\n\n    var children = current.get('children');\n\n    if (children) {\n      var len = children.length;\n\n      if (len > 0) {\n        for (var i = children.length - 1; i >= 0; i--) {\n          var child = children[i].getModel();\n\n          if (TreeGraph.indexOfChild(data.children || [], child.id) === -1) {\n            self.innerRemoveChild(child.id, {\n              x: data.x,\n              y: data.y\n            }, animate); // 更新父节点下缓存的子节点 item 实例列表\n\n            children.splice(i, 1);\n          }\n        }\n      }\n    }\n\n    var oriX;\n    var oriY;\n\n    if (current.get('originAttrs')) {\n      oriX = current.get('originAttrs').x;\n      oriY = current.get('originAttrs').y;\n    }\n\n    var model = current.getModel();\n\n    if (animate) {\n      // 如果有动画，先缓存节点运动再更新节点\n      current.set('originAttrs', {\n        x: model.x,\n        y: model.y\n      });\n    }\n\n    current.set('model', data.data);\n\n    if (oriX !== data.x || oriY !== data.y) {\n      current.updatePosition({\n        x: data.x,\n        y: data.y\n      });\n    }\n  };\n  /**\n   * 删除子节点Item对象\n   * @param id\n   * @param to\n   * @param animate\n   */\n\n\n  TreeGraph.prototype.innerRemoveChild = function (id, to, animate) {\n    var self = this;\n    var node = self.findById(id);\n\n    if (!node) {\n      return;\n    }\n\n    each(node.get('children'), function (child) {\n      self.innerRemoveChild(child.getModel().id, to, animate);\n    });\n\n    if (animate) {\n      var model = node.getModel();\n      node.set('to', to);\n      node.set('originAttrs', {\n        x: model.x,\n        y: model.y\n      });\n      self.get('removeList').push(node);\n    } else {\n      self.removeItem(node);\n    }\n  };\n  /**\n   * 更新数据模型，差量更新并重新渲染\n   * @param {object} data 数据模型\n   */\n\n\n  TreeGraph.prototype.changeData = function (data) {\n    var self = this; // 更改数据源后，取消所有状态\n\n    this.getNodes().map(function (node) {\n      return self.clearItemStates(node);\n    });\n    this.getEdges().map(function (edge) {\n      return self.clearItemStates(edge);\n    });\n\n    if (data) {\n      self.data(data);\n      self.render();\n    } else {\n      self.layout(this.get('fitView'));\n    }\n  };\n  /**\n   * 已更名为 updateLayout，为保持兼容暂且保留。\n   * 更改并应用树布局算法\n   * @param {object} layout 布局算法\n   */\n\n\n  TreeGraph.prototype.changeLayout = function (layout) {\n    // eslint-disable-next-line no-console\n    console.warn('Please call updateLayout instead of changeLayout. changeLayout will be discarded soon');\n    var self = this;\n    self.updateLayout(layout);\n  };\n  /**\n   * 更改并应用树布局算法\n   * @param {object} layout 布局算法\n   */\n\n\n  TreeGraph.prototype.updateLayout = function (layout) {\n    var self = this;\n\n    if (!layout) {\n      // eslint-disable-next-line no-console\n      console.warn('layout cannot be null');\n      return;\n    }\n\n    self.set('layout', layout);\n    self.set('layoutMethod', self.getLayout());\n    self.layout();\n  };\n  /**\n   * 已更名为 layout，为保持兼容暂且保留。\n   * 根据目前的 data 刷新布局，更新到画布上。用于变更数据之后刷新视图。\n   * @param {boolean} fitView 更新布局时是否需要适应窗口\n   */\n\n\n  TreeGraph.prototype.refreshLayout = function (fitView) {\n    // eslint-disable-next-line no-console\n    console.warn('Please call layout instead of refreshLayout. refreshLayout will be discarded soon');\n    var self = this;\n    self.layout(fitView);\n  };\n  /**\n   * 根据目前的 data 刷新布局，更新到画布上。用于变更数据之后刷新视图。\n   * @param {boolean} fitView 更新布局时是否需要适应窗口\n   */\n\n\n  TreeGraph.prototype.layout = function (fitView) {\n    var self = this;\n    var data = self.get('data');\n    var layoutMethod = self.get('layoutMethod');\n    var layoutData = layoutMethod(data, self.get('layout'));\n    var animate = self.get('animate');\n    self.emit('beforerefreshlayout', {\n      data: data,\n      layoutData: layoutData\n    });\n    self.emit('beforelayout');\n    self.innerUpdateChild(layoutData, undefined, animate);\n\n    if (fitView) {\n      var viewController = self.get('viewController');\n      viewController.fitView();\n    }\n\n    if (!animate) {\n      // 如果没有动画，目前仅更新了节点的位置，刷新一下边的样式\n      self.refresh();\n      self.paint();\n    } else {\n      self.layoutAnimate(layoutData);\n    }\n\n    self.emit('afterrefreshlayout', {\n      data: data,\n      layoutData: layoutData\n    });\n    self.emit('afterlayout');\n  };\n  /**\n   * 添加子树到对应 id 的节点\n   * @param {TreeGraphData} data 子树数据模型\n   * @param {string} parent 子树的父节点id\n   */\n\n\n  TreeGraph.prototype.addChild = function (data, parent) {\n    var self = this;\n    self.emit('beforeaddchild', {\n      model: data,\n      parent: parent\n    }); // 将数据添加到源数据中，走changeData方法\n\n    if (!isString(parent)) {\n      parent = parent.get('id');\n    }\n\n    var parentData = self.findDataById(parent);\n\n    if (parentData) {\n      if (!parentData.children) {\n        parentData.children = [];\n      }\n\n      parentData.children.push(data);\n      self.changeData();\n    }\n  };\n  /**\n   * 更新源数据，差量更新子树\n   * @param {TreeGraphData} data 子树数据模型\n   * @param {string} parent 子树的父节点id\n   */\n\n\n  TreeGraph.prototype.updateChild = function (data, parent) {\n    var self = this; // 如果没有父节点或找不到该节点，是全量的更新，直接重置data\n\n    if (!parent || !self.findById(parent)) {\n      self.changeData(data);\n      return;\n    }\n\n    var parentModel = self.findById(parent).getModel();\n    var current = self.findById(data.id);\n\n    if (!parentModel.children) {\n      // 当 current 不存在时，children 为空数组\n      parentModel.children = [];\n    } // 如果不存在该节点，则添加\n\n\n    if (!current) {\n      parentModel.children.push(data);\n    } else {\n      var index = TreeGraph.indexOfChild(parentModel.children, data.id);\n      parentModel.children[index] = data;\n    }\n\n    self.changeData();\n  };\n  /**\n   * 删除子树\n   * @param {string} id 子树根节点id\n   */\n\n\n  TreeGraph.prototype.removeChild = function (id) {\n    var self = this;\n    var node = self.findById(id);\n\n    if (!node) {\n      return;\n    }\n\n    var parent = node.get('parent');\n\n    if (parent && !parent.destroyed) {\n      var parentNode = self.findDataById(parent.get('id'));\n      var siblings = parentNode && parentNode.children || [];\n      var model = node.getModel();\n      var index = TreeGraph.indexOfChild(siblings, model.id);\n      siblings.splice(index, 1);\n    }\n\n    self.changeData();\n  };\n  /**\n   * 根据id获取对应的源数据\n   * @param {string} id 元素id\n   * @param {TreeGraphData | undefined} parent 从哪个节点开始寻找，为空时从根节点开始查找\n   * @return {TreeGraphData} 对应源数据\n   */\n\n\n  TreeGraph.prototype.findDataById = function (id, parent) {\n    var self = this;\n\n    if (!parent) {\n      parent = self.get('data');\n    }\n\n    if (id === parent.id) {\n      return parent;\n    }\n\n    var result = null; // eslint-disable-next-line consistent-return\n\n    each(parent.children || [], function (child) {\n      if (child.id === id) {\n        result = child;\n        return false;\n      }\n\n      result = self.findDataById(id, child);\n\n      if (result) {\n        return false;\n      }\n    });\n    return result;\n  };\n  /**\n   * 布局动画接口，用于数据更新时做节点位置更新的动画\n   * @param {TreeGraphData} data 更新的数据\n   * @param {function} onFrame 定义节点位置更新时如何移动\n   */\n\n\n  TreeGraph.prototype.layoutAnimate = function (data, onFrame) {\n    var self = this;\n    var animateCfg = this.get('animateCfg');\n    self.emit('beforeanimate', {\n      data: data\n    }); // 如果边中没有指定锚点，但是本身有锚点控制，在动画过程中保持锚点不变\n\n    self.getEdges().forEach(function (edge) {\n      var model = edge.get('model');\n\n      if (!model.sourceAnchor) {\n        model.sourceAnchor = edge.get('sourceAnchorIndex');\n      }\n    });\n    this.get('canvas').animate(function (ratio) {\n      traverseTree(data, function (child) {\n        var node = self.findById(child.id); // 只有当存在node的时候才执行\n\n        if (node) {\n          var origin_2 = node.get('originAttrs');\n          var model = node.get('model');\n\n          if (!origin_2) {\n            origin_2 = {\n              x: model.x,\n              y: model.y\n            };\n            node.set('originAttrs', origin_2);\n          }\n\n          if (onFrame) {\n            var attrs = onFrame(node, ratio, origin_2, data);\n            node.set('model', Object.assign(model, attrs));\n          } else {\n            model.x = origin_2.x + (child.x - origin_2.x) * ratio;\n            model.y = origin_2.y + (child.y - origin_2.y) * ratio;\n          }\n        }\n\n        return true;\n      });\n      each(self.get('removeList'), function (node) {\n        var model = node.getModel();\n        var from = node.get('originAttrs');\n        var to = node.get('to');\n        model.x = from.x + (to.x - from.x) * ratio;\n        model.y = from.y + (to.y - from.y) * ratio;\n      });\n      self.refreshPositions();\n    }, {\n      duration: animateCfg.duration,\n      easing: animateCfg.ease,\n      callback: function callback() {\n        each(self.getNodes(), function (node) {\n          node.set('originAttrs', null);\n        });\n        each(self.get('removeList'), function (node) {\n          self.removeItem(node);\n        });\n        self.set('removeList', []);\n\n        if (animateCfg.callback) {\n          animateCfg.callback();\n        }\n\n        self.emit('afteranimate', {\n          data: data\n        });\n      },\n      delay: animateCfg.delay\n    });\n  };\n  /**\n   * 立即停止布局动画\n   */\n\n\n  TreeGraph.prototype.stopLayoutAnimate = function () {\n    this.get('canvas').stopAnimate();\n    this.emit('layoutanimateend', {\n      data: this.get('data')\n    });\n    this.layoutAnimating = false;\n  };\n  /**\n   * 是否在布局动画\n   * @return {boolean} 是否有布局动画\n   */\n\n\n  TreeGraph.prototype.isLayoutAnimating = function () {\n    return this.layoutAnimating;\n  };\n  /**\n   * 根据data接口的数据渲染视图\n   */\n\n\n  TreeGraph.prototype.render = function () {\n    var self = this;\n    var data = self.get('data');\n\n    if (!data) {\n      throw new Error('data must be defined first');\n    }\n\n    self.clear();\n    self.emit('beforerender');\n    self.layout(this.get('fitView'));\n    self.emit('afterrender');\n  };\n  /**\n   * 导出图数据\n   * @return {object} data\n   */\n\n\n  TreeGraph.prototype.save = function () {\n    return this.get('data');\n  };\n\n  return TreeGraph;\n}(Graph);\n\nexport default TreeGraph;"]},"metadata":{},"sourceType":"module"}