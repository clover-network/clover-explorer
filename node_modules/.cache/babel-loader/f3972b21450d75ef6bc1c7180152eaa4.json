{"ast":null,"code":"import Matrix from './matrix';\nexport function covariance(xMatrix, yMatrix = xMatrix, options = {}) {\n  xMatrix = new Matrix(xMatrix);\n  let yIsSame = false;\n\n  if (typeof yMatrix === 'object' && !Matrix.isMatrix(yMatrix) && !Array.isArray(yMatrix)) {\n    options = yMatrix;\n    yMatrix = xMatrix;\n    yIsSame = true;\n  } else {\n    yMatrix = new Matrix(yMatrix);\n  }\n\n  if (xMatrix.rows !== yMatrix.rows) {\n    throw new TypeError('Both matrices must have the same number of rows');\n  }\n\n  const {\n    center = true\n  } = options;\n\n  if (center) {\n    xMatrix = xMatrix.center('column');\n\n    if (!yIsSame) {\n      yMatrix = yMatrix.center('column');\n    }\n  }\n\n  const cov = xMatrix.transpose().mmul(yMatrix);\n\n  for (let i = 0; i < cov.rows; i++) {\n    for (let j = 0; j < cov.columns; j++) {\n      cov.set(i, j, cov.get(i, j) * (1 / (xMatrix.rows - 1)));\n    }\n  }\n\n  return cov;\n}","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/ml-matrix/src/covariance.js"],"names":["Matrix","covariance","xMatrix","yMatrix","options","yIsSame","isMatrix","Array","isArray","rows","TypeError","center","cov","transpose","mmul","i","j","columns","set","get"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,UAAnB;AAEA,OAAO,SAASC,UAAT,CAAoBC,OAApB,EAA6BC,OAAO,GAAGD,OAAvC,EAAgDE,OAAO,GAAG,EAA1D,EAA8D;AACnEF,EAAAA,OAAO,GAAG,IAAIF,MAAJ,CAAWE,OAAX,CAAV;AACA,MAAIG,OAAO,GAAG,KAAd;;AACA,MACE,OAAOF,OAAP,KAAmB,QAAnB,IACA,CAACH,MAAM,CAACM,QAAP,CAAgBH,OAAhB,CADD,IAEA,CAACI,KAAK,CAACC,OAAN,CAAcL,OAAd,CAHH,EAIE;AACAC,IAAAA,OAAO,GAAGD,OAAV;AACAA,IAAAA,OAAO,GAAGD,OAAV;AACAG,IAAAA,OAAO,GAAG,IAAV;AACD,GARD,MAQO;AACLF,IAAAA,OAAO,GAAG,IAAIH,MAAJ,CAAWG,OAAX,CAAV;AACD;;AACD,MAAID,OAAO,CAACO,IAAR,KAAiBN,OAAO,CAACM,IAA7B,EAAmC;AACjC,UAAM,IAAIC,SAAJ,CAAc,iDAAd,CAAN;AACD;;AACD,QAAM;AAAEC,IAAAA,MAAM,GAAG;AAAX,MAAoBP,OAA1B;;AACA,MAAIO,MAAJ,EAAY;AACVT,IAAAA,OAAO,GAAGA,OAAO,CAACS,MAAR,CAAe,QAAf,CAAV;;AACA,QAAI,CAACN,OAAL,EAAc;AACZF,MAAAA,OAAO,GAAGA,OAAO,CAACQ,MAAR,CAAe,QAAf,CAAV;AACD;AACF;;AACD,QAAMC,GAAG,GAAGV,OAAO,CAACW,SAAR,GAAoBC,IAApB,CAAyBX,OAAzB,CAAZ;;AACA,OAAK,IAAIY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,GAAG,CAACH,IAAxB,EAA8BM,CAAC,EAA/B,EAAmC;AACjC,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,GAAG,CAACK,OAAxB,EAAiCD,CAAC,EAAlC,EAAsC;AACpCJ,MAAAA,GAAG,CAACM,GAAJ,CAAQH,CAAR,EAAWC,CAAX,EAAcJ,GAAG,CAACO,GAAJ,CAAQJ,CAAR,EAAWC,CAAX,KAAiB,KAAKd,OAAO,CAACO,IAAR,GAAe,CAApB,CAAjB,CAAd;AACD;AACF;;AACD,SAAOG,GAAP;AACD","sourcesContent":["import Matrix from './matrix';\n\nexport function covariance(xMatrix, yMatrix = xMatrix, options = {}) {\n  xMatrix = new Matrix(xMatrix);\n  let yIsSame = false;\n  if (\n    typeof yMatrix === 'object' &&\n    !Matrix.isMatrix(yMatrix) &&\n    !Array.isArray(yMatrix)\n  ) {\n    options = yMatrix;\n    yMatrix = xMatrix;\n    yIsSame = true;\n  } else {\n    yMatrix = new Matrix(yMatrix);\n  }\n  if (xMatrix.rows !== yMatrix.rows) {\n    throw new TypeError('Both matrices must have the same number of rows');\n  }\n  const { center = true } = options;\n  if (center) {\n    xMatrix = xMatrix.center('column');\n    if (!yIsSame) {\n      yMatrix = yMatrix.center('column');\n    }\n  }\n  const cov = xMatrix.transpose().mmul(yMatrix);\n  for (let i = 0; i < cov.rows; i++) {\n    for (let j = 0; j < cov.columns; j++) {\n      cov.set(i, j, cov.get(i, j) * (1 / (xMatrix.rows - 1)));\n    }\n  }\n  return cov;\n}\n"]},"metadata":{},"sourceType":"module"}