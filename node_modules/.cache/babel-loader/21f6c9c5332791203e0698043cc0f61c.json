{"ast":null,"code":"import { isString, clamp } from '@antv/util';\nimport { flow, deepAssign } from '../../utils';\nimport { scale, animation, theme, annotation } from '../../adaptor/common';\nimport { interval } from '../../adaptor/geometries';\nimport { DEFAULT_COLOR } from './constant';\n/**\n * 字段\n * @param params\n */\n\nexport function geometry(params) {\n  var chart = params.chart,\n      options = params.options;\n  var percent = options.percent,\n      progressStyle = options.progressStyle,\n      color = options.color,\n      barWidthRatio = options.barWidthRatio;\n  var clampPercent = clamp(percent, 0, 1);\n  var data = [{\n    type: 'current',\n    percent: clampPercent\n  }, {\n    type: 'target',\n    percent: 1 - clampPercent\n  }];\n  chart.data(data);\n  var p = deepAssign({}, params, {\n    options: {\n      xField: '1',\n      yField: 'percent',\n      seriesField: 'type',\n      isStack: true,\n      widthRatio: barWidthRatio,\n      interval: {\n        style: progressStyle,\n        color: isString(color) ? [color, DEFAULT_COLOR[1]] : color\n      }\n    }\n  });\n  interval(p); // 关闭组件\n\n  chart.tooltip(false);\n  chart.axis(false);\n  chart.legend(false);\n  return params;\n}\n/**\n * other 配置\n * @param params\n */\n\nfunction coordinate(params) {\n  var chart = params.chart;\n  chart.coordinate('rect').transpose();\n  return params;\n}\n/**\n * 进度图适配器\n * @param chart\n * @param options\n */\n\n\nexport function adaptor(params) {\n  // @ts-ignore\n  return flow(geometry, scale({}), coordinate, animation, theme, annotation())(params);\n}","map":{"version":3,"sources":["../../../src/plots/progress/adaptor.ts"],"names":[],"mappings":"AAAA,SAAS,QAAT,EAAmB,KAAnB,QAAgC,YAAhC;AAEA,SAAS,IAAT,EAAe,UAAf,QAAiC,aAAjC;AACA,SAAS,KAAT,EAAgB,SAAhB,EAA2B,KAA3B,EAAkC,UAAlC,QAAoD,sBAApD;AACA,SAAS,QAAT,QAAyB,0BAAzB;AAEA,SAAS,aAAT,QAA8B,YAA9B;AAEA;;;AAGG;;AACH,OAAM,SAAU,QAAV,CAAmB,MAAnB,EAAkD;AAC9C,MAAA,KAAK,GAAc,MAAM,CAApB,KAAL;AAAA,MAAO,OAAO,GAAK,MAAM,CAAX,OAAd;AACA,MAAA,OAAO,GAA0C,OAAO,CAAjD,OAAP;AAAA,MAAS,aAAa,GAA2B,OAAO,CAAlC,aAAtB;AAAA,MAAwB,KAAK,GAAoB,OAAO,CAA3B,KAA7B;AAAA,MAA+B,aAAa,GAAK,OAAO,CAAZ,aAA5C;AAER,MAAM,YAAY,GAAG,KAAK,CAAC,OAAD,EAAU,CAAV,EAAa,CAAb,CAA1B;AACA,MAAM,IAAI,GAAG,CACX;AACE,IAAA,IAAI,EAAE,SADR;AAEE,IAAA,OAAO,EAAE;AAFX,GADW,EAKX;AACE,IAAA,IAAI,EAAE,QADR;AAEE,IAAA,OAAO,EAAE,IAAI;AAFf,GALW,CAAb;AAWA,EAAA,KAAK,CAAC,IAAN,CAAW,IAAX;AAEA,MAAM,CAAC,GAAG,UAAU,CAAC,EAAD,EAAK,MAAL,EAAa;AAC/B,IAAA,OAAO,EAAE;AACP,MAAA,MAAM,EAAE,GADD;AAEP,MAAA,MAAM,EAAE,SAFD;AAGP,MAAA,WAAW,EAAE,MAHN;AAIP,MAAA,OAAO,EAAE,IAJF;AAKP,MAAA,UAAU,EAAE,aALL;AAMP,MAAA,QAAQ,EAAE;AACR,QAAA,KAAK,EAAE,aADC;AAER,QAAA,KAAK,EAAE,QAAQ,CAAC,KAAD,CAAR,GAAkB,CAAC,KAAD,EAAQ,aAAa,CAAC,CAAD,CAArB,CAAlB,GAA8C;AAF7C;AANH;AADsB,GAAb,CAApB;AAcA,EAAA,QAAQ,CAAC,CAAD,CAAR,CAhCsD,CAkCtD;;AACA,EAAA,KAAK,CAAC,OAAN,CAAc,KAAd;AACA,EAAA,KAAK,CAAC,IAAN,CAAW,KAAX;AACA,EAAA,KAAK,CAAC,MAAN,CAAa,KAAb;AAEA,SAAO,MAAP;AACD;AAED;;;AAGG;;AACH,SAAS,UAAT,CAAoB,MAApB,EAAmD;AACzC,MAAA,KAAK,GAAK,MAAM,CAAX,KAAL;AAER,EAAA,KAAK,CAAC,UAAN,CAAiB,MAAjB,EAAyB,SAAzB;AAEA,SAAO,MAAP;AACD;AAED;;;;AAIG;;;AACH,OAAM,SAAU,OAAV,CAAkB,MAAlB,EAAiD;AACrD;AACA,SAAO,IAAI,CAAC,QAAD,EAAW,KAAK,CAAC,EAAD,CAAhB,EAAsB,UAAtB,EAAkC,SAAlC,EAA6C,KAA7C,EAAoD,UAAU,EAA9D,CAAJ,CAAsE,MAAtE,CAAP;AACD","sourcesContent":["import { isString, clamp } from '@antv/util';\nimport { Params } from '../../core/adaptor';\nimport { flow, deepAssign } from '../../utils';\nimport { scale, animation, theme, annotation } from '../../adaptor/common';\nimport { interval } from '../../adaptor/geometries';\nimport { ProgressOptions } from './types';\nimport { DEFAULT_COLOR } from './constant';\n\n/**\n * 字段\n * @param params\n */\nexport function geometry(params: Params<ProgressOptions>): Params<ProgressOptions> {\n  const { chart, options } = params;\n  const { percent, progressStyle, color, barWidthRatio } = options;\n\n  const clampPercent = clamp(percent, 0, 1);\n  const data = [\n    {\n      type: 'current',\n      percent: clampPercent,\n    },\n    {\n      type: 'target',\n      percent: 1 - clampPercent,\n    },\n  ];\n\n  chart.data(data);\n\n  const p = deepAssign({}, params, {\n    options: {\n      xField: '1',\n      yField: 'percent',\n      seriesField: 'type',\n      isStack: true,\n      widthRatio: barWidthRatio,\n      interval: {\n        style: progressStyle,\n        color: isString(color) ? [color, DEFAULT_COLOR[1]] : color,\n      },\n    },\n  });\n\n  interval(p);\n\n  // 关闭组件\n  chart.tooltip(false);\n  chart.axis(false);\n  chart.legend(false);\n\n  return params;\n}\n\n/**\n * other 配置\n * @param params\n */\nfunction coordinate(params: Params<ProgressOptions>): Params<ProgressOptions> {\n  const { chart } = params;\n\n  chart.coordinate('rect').transpose();\n\n  return params;\n}\n\n/**\n * 进度图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<ProgressOptions>) {\n  // @ts-ignore\n  return flow(geometry, scale({}), coordinate, animation, theme, annotation())(params);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}