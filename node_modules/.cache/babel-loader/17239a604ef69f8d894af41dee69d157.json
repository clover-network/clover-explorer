{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\nimport { __extends } from \"tslib\";\nimport * as zrUtil from 'zrender/esm/core/util';\nimport axisDefault from './axisDefault';\nimport ComponentModel from '../model/Component';\nimport { getLayoutParams, mergeLayoutParam, fetchLayoutMode } from '../util/layout';\nimport OrdinalMeta from '../data/OrdinalMeta';\nimport { AXIS_TYPES } from './axisCommonTypes';\nexport default function axisModelCreator(axisName, BaseAxisModelClass, extraDefaultOption) {\n  zrUtil.each(AXIS_TYPES, function (v, axisType) {\n    var defaultOption = zrUtil.merge(zrUtil.merge({}, axisDefault[axisType], true), extraDefaultOption, true);\n\n    var AxisModel = function (_super) {\n      __extends(AxisModel, _super);\n\n      function AxisModel() {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        var _this = _super.apply(this, args) || this;\n\n        _this.type = axisName + 'Axis.' + axisType;\n        return _this;\n      }\n\n      AxisModel.prototype.mergeDefaultAndTheme = function (option, ecModel) {\n        var layoutMode = fetchLayoutMode(this);\n        var inputPositionParams = layoutMode ? getLayoutParams(option) : {};\n        var themeModel = ecModel.getTheme();\n        zrUtil.merge(option, themeModel.get(axisType + 'Axis'));\n        zrUtil.merge(option, this.getDefaultOption());\n        option.type = getAxisType(option);\n\n        if (layoutMode) {\n          mergeLayoutParam(option, inputPositionParams, layoutMode);\n        }\n      };\n\n      AxisModel.prototype.optionUpdated = function () {\n        var thisOption = this.option;\n\n        if (thisOption.type === 'category') {\n          this.__ordinalMeta = OrdinalMeta.createByAxisModel(this);\n        }\n      };\n\n      AxisModel.prototype.getCategories = function (rawData) {\n        var option = this.option;\n\n        if (option.type === 'category') {\n          if (rawData) {\n            return option.data;\n          }\n\n          return this.__ordinalMeta.categories;\n        }\n      };\n\n      AxisModel.prototype.getOrdinalMeta = function () {\n        return this.__ordinalMeta;\n      };\n\n      AxisModel.type = axisName + 'Axis.' + axisType;\n      AxisModel.defaultOption = defaultOption;\n      return AxisModel;\n    }(BaseAxisModelClass);\n\n    ComponentModel.registerClass(AxisModel);\n  });\n  ComponentModel.registerSubTypeDefaulter(axisName + 'Axis', getAxisType);\n}\n\nfunction getAxisType(option) {\n  return option.type || (option.data ? 'category' : 'value');\n}","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/echarts/esm/coord/axisModelCreator.js"],"names":["__extends","zrUtil","axisDefault","ComponentModel","getLayoutParams","mergeLayoutParam","fetchLayoutMode","OrdinalMeta","AXIS_TYPES","axisModelCreator","axisName","BaseAxisModelClass","extraDefaultOption","each","v","axisType","defaultOption","merge","AxisModel","_super","args","_i","arguments","length","_this","apply","type","prototype","mergeDefaultAndTheme","option","ecModel","layoutMode","inputPositionParams","themeModel","getTheme","get","getDefaultOption","getAxisType","optionUpdated","thisOption","__ordinalMeta","createByAxisModel","getCategories","rawData","data","categories","getOrdinalMeta","registerClass","registerSubTypeDefaulter"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\nimport { __extends } from \"tslib\";\nimport * as zrUtil from 'zrender/esm/core/util';\nimport axisDefault from './axisDefault';\nimport ComponentModel from '../model/Component';\nimport { getLayoutParams, mergeLayoutParam, fetchLayoutMode } from '../util/layout';\nimport OrdinalMeta from '../data/OrdinalMeta';\nimport { AXIS_TYPES } from './axisCommonTypes';\nexport default function axisModelCreator(axisName, BaseAxisModelClass, extraDefaultOption) {\n  zrUtil.each(AXIS_TYPES, function (v, axisType) {\n    var defaultOption = zrUtil.merge(zrUtil.merge({}, axisDefault[axisType], true), extraDefaultOption, true);\n\n    var AxisModel = function (_super) {\n      __extends(AxisModel, _super);\n\n      function AxisModel() {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        var _this = _super.apply(this, args) || this;\n\n        _this.type = axisName + 'Axis.' + axisType;\n        return _this;\n      }\n\n      AxisModel.prototype.mergeDefaultAndTheme = function (option, ecModel) {\n        var layoutMode = fetchLayoutMode(this);\n        var inputPositionParams = layoutMode ? getLayoutParams(option) : {};\n        var themeModel = ecModel.getTheme();\n        zrUtil.merge(option, themeModel.get(axisType + 'Axis'));\n        zrUtil.merge(option, this.getDefaultOption());\n        option.type = getAxisType(option);\n\n        if (layoutMode) {\n          mergeLayoutParam(option, inputPositionParams, layoutMode);\n        }\n      };\n\n      AxisModel.prototype.optionUpdated = function () {\n        var thisOption = this.option;\n\n        if (thisOption.type === 'category') {\n          this.__ordinalMeta = OrdinalMeta.createByAxisModel(this);\n        }\n      };\n\n      AxisModel.prototype.getCategories = function (rawData) {\n        var option = this.option;\n\n        if (option.type === 'category') {\n          if (rawData) {\n            return option.data;\n          }\n\n          return this.__ordinalMeta.categories;\n        }\n      };\n\n      AxisModel.prototype.getOrdinalMeta = function () {\n        return this.__ordinalMeta;\n      };\n\n      AxisModel.type = axisName + 'Axis.' + axisType;\n      AxisModel.defaultOption = defaultOption;\n      return AxisModel;\n    }(BaseAxisModelClass);\n\n    ComponentModel.registerClass(AxisModel);\n  });\n  ComponentModel.registerSubTypeDefaulter(axisName + 'Axis', getAxisType);\n}\n\nfunction getAxisType(option) {\n  return option.type || (option.data ? 'category' : 'value');\n}"]},"metadata":{},"sourceType":"module"}