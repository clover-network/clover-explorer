{"ast":null,"code":"import { __assign } from \"tslib\";\n/*\n * @Author: moyee\n * @Date: 2019-06-27 18:12:06\n * @LastEditors: moyee\n * @LastEditTime: 2019-08-23 13:54:53\n * @Description: 有group的情况下，拖动节点的Behavior\n */\n\nimport deepMix from '@antv/util/lib/deep-mix';\nimport Global from '../global';\nvar body = document.body;\nexport default {\n  getDefaultCfg: function getDefaultCfg() {\n    return {\n      updateEdge: true,\n      delegate: true,\n      delegateStyle: {},\n      maxMultiple: 1.1,\n      minMultiple: 1\n    };\n  },\n  getEvents: function getEvents() {\n    return {\n      'node:dragstart': 'onDragStart',\n      'node:drag': 'onDrag',\n      'node:dragend': 'onDragEnd',\n      'canvas:mouseleave': 'onOutOfRange',\n      dragover: 'onDragOver',\n      // FIXME: does not response\n      dragleave: 'onDragLeave'\n    };\n  },\n  onDragOver: function onDragOver(evt) {\n    var graph = this.graph;\n    var target = evt.target;\n    var groupId = target.get('groupId');\n\n    if (groupId && this.origin) {\n      var customGroupControll = graph.get('customGroupControll');\n      var customGroup = customGroupControll.getDeletageGroupById(groupId);\n\n      if (customGroup) {\n        var currentGroup = customGroup.nodeGroup;\n        var keyShape = currentGroup.get('keyShape');\n        this.inGroupId = groupId;\n        customGroupControll.setGroupStyle(keyShape, 'hover');\n      }\n    }\n  },\n\n  /**\n   * 拖动节点移除Group时的事件\n   * @param {Event} evt 事件句柄\n   */\n  onDragLeave: function onDragLeave(evt) {\n    var graph = this.graph;\n    var target = evt.target;\n    var groupId = target.get('groupId');\n\n    if (groupId && this.origin) {\n      var customGroupControll = graph.get('customGroupControll');\n      var customGroup = customGroupControll.getDeletageGroupById(groupId);\n\n      if (customGroup) {\n        var currentGroup = customGroup.nodeGroup;\n        var keyShape = currentGroup.get('keyShape');\n        customGroupControll.setGroupStyle(keyShape, 'default');\n      }\n    }\n\n    if (!groupId) {\n      this.inGroupId = null;\n    }\n  },\n  onDragStart: function onDragStart(e) {\n    var graph = this.graph;\n\n    if (!this.shouldBegin.call(this, e)) {\n      return;\n    }\n\n    var item = e.item;\n    this.target = item; // 拖动节点时，如果在Group中，则Group高亮\n\n    var model = item.getModel();\n    var groupId = model.groupId;\n\n    if (groupId) {\n      var customGroupControll = graph.get('customGroupControll');\n      var customGroup = customGroupControll.getDeletageGroupById(groupId);\n\n      if (customGroup) {\n        var currentGroup = customGroup.nodeGroup;\n        var keyShape = currentGroup.get('keyShape');\n        customGroupControll.setGroupStyle(keyShape, 'hover'); // 初始拖动时候，如果是在当前群组中拖动，则赋值为当前groupId\n\n        this.inGroupId = groupId;\n      }\n    }\n\n    this.origin = {\n      x: e.x,\n      y: e.y\n    };\n    this.point = {};\n    this.originPoint = {};\n  },\n  onDrag: function onDrag(e) {\n    if (!this.origin) {\n      return;\n    }\n\n    if (!this.get('shouldUpdate').call(this, e)) {\n      return;\n    }\n\n    this.update(this.target, e, true);\n    var item = e.item;\n    var graph = this.graph;\n    var model = item.getModel();\n    var groupId = model.groupId;\n\n    if (groupId) {\n      var customGroupControll = graph.get('customGroupControll');\n      var customGroup = customGroupControll.getDeletageGroupById(groupId);\n\n      if (customGroup) {\n        var currentGroup = customGroup.nodeGroup;\n        var keyShape = currentGroup.get('keyShape'); // 当前\n\n        if (this.inGroupId !== groupId) {\n          customGroupControll.setGroupStyle(keyShape, 'default');\n        } else {\n          customGroupControll.setGroupStyle(keyShape, 'hover');\n        }\n      }\n    }\n  },\n  onDragEnd: function onDragEnd(e) {\n    if (!this.origin || !this.shouldEnd.call(this, e)) {\n      return;\n    }\n\n    if (this.shape) {\n      this.shape.remove();\n      this.shape = null;\n    }\n\n    if (this.target) {\n      var delegateShape = this.target.get('delegateShape');\n\n      if (delegateShape) {\n        delegateShape.remove();\n        this.target.set('delegateShape', null);\n      }\n    }\n\n    if (this.target) {\n      this.update(this.target, e);\n    }\n\n    this.point = {};\n    this.origin = null;\n    this.originPoint = {};\n    this.target = null;\n    this.setCurrentGroupStyle(e);\n  },\n  setCurrentGroupStyle: function setCurrentGroupStyle(evt) {\n    var graph = this.graph;\n    var item = evt.item;\n    var model = item.getModel(); // 节点所在的GroupId\n\n    var groupId = model.groupId,\n        id = model.id;\n    var customGroupControll = graph.get('customGroupControll');\n    var customGroup = customGroupControll.customGroup;\n    var groupNodes = graph.get('groupNodes');\n\n    if (this.inGroupId && groupId) {\n      var currentGroup = customGroup[groupId].nodeGroup;\n\n      if (!currentGroup) {\n        return;\n      }\n\n      var keyShape = currentGroup.get('keyShape');\n      var itemBBox = item.getBBox();\n      var currentGroupBBox = keyShape.getBBox();\n      var centerX = itemBBox.centerX,\n          centerY = itemBBox.centerY;\n      var minX = currentGroupBBox.minX,\n          minY = currentGroupBBox.minY,\n          maxX = currentGroupBBox.maxX,\n          maxY = currentGroupBBox.maxY; // 在自己的group中拖动，判断是否拖出了自己的group\n      // this.inGroupId !== groupId，则说明拖出了原来的group，拖到了其他group上面，\n      // 则删除item中的groupId字段，同时删除group中的nodeID\n\n      if (!(centerX < maxX * this.maxMultiple && centerX > minX * this.minMultiple && centerY < maxY * this.maxMultiple && centerY > minY * this.minMultiple) || this.inGroupId !== groupId) {\n        // 拖出了group，则删除item中的groupId字段，同时删除group中的nodeID\n        var currentGroupNodes = groupNodes[groupId];\n        groupNodes[groupId] = currentGroupNodes.filter(function (node) {\n          return node !== id;\n        });\n        customGroupControll.dynamicChangeGroupSize(evt, currentGroup, keyShape); // 同时删除groupID中的节点\n\n        delete model.groupId;\n      } // 拖动到其他的group上面\n\n\n      if (this.inGroupId !== groupId) {\n        // 拖动新的group后，更新groupNodes及model中的groupId\n        var nodeInGroup = customGroup[this.inGroupId].nodeGroup;\n\n        if (!nodeInGroup) {\n          return;\n        }\n\n        var targetKeyShape = nodeInGroup.get('keyShape'); // 将该节点添加到inGroupId中\n\n        if (groupNodes[this.inGroupId].indexOf(id) === -1) {\n          groupNodes[this.inGroupId].push(id);\n        } // 更新节点的groupId为拖动上去的group Id\n\n\n        model.groupId = this.inGroupId; // 拖入节点后，根据最新的节点数量，重新计算群组大小\n\n        customGroupControll.dynamicChangeGroupSize(evt, nodeInGroup, targetKeyShape);\n      }\n\n      customGroupControll.setGroupStyle(keyShape, 'default');\n    } else if (this.inGroupId && !groupId) {\n      // 将节点拖动到群组中\n      var nodeInGroup = customGroup[this.inGroupId].nodeGroup;\n\n      if (!nodeInGroup) {\n        return;\n      }\n\n      var keyShape = nodeInGroup.get('keyShape'); // 将该节点添加到inGroupId中\n\n      if (groupNodes[this.inGroupId].indexOf(id) === -1) {\n        groupNodes[this.inGroupId].push(id);\n      } // 更新节点的groupId为拖动上去的group Id\n\n\n      model.groupId = this.inGroupId; // 拖入节点后，根据最新的节点数量，重新计算群组大小\n\n      customGroupControll.dynamicChangeGroupSize(evt, nodeInGroup, keyShape);\n    } else if (!this.inGroupId && groupId) {\n      // 拖出到群组之外了，则删除数据中的groupId\n      Object.keys(groupNodes).forEach(function (gnode) {\n        var currentGroupNodes = groupNodes[gnode];\n        groupNodes[gnode] = currentGroupNodes.filter(function (node) {\n          return node !== id;\n        });\n      });\n      var currentGroup = customGroup[groupId].nodeGroup;\n\n      if (!currentGroup) {\n        return;\n      }\n\n      var keyShape = currentGroup.get('keyShape');\n      customGroupControll.dynamicChangeGroupSize(evt, currentGroup, keyShape);\n      delete model.groupId;\n    }\n\n    this.inGroupId = null;\n  },\n  // 若在拖拽时，鼠标移出画布区域，此时放开鼠标无法终止 drag 行为。在画布外监听 mouseup 事件，放开则终止\n  onOutOfRange: function onOutOfRange(e) {\n    var self = this;\n    var canvasElement = self.graph.get('canvas').get('el');\n\n    function listener(ev) {\n      if (ev.target !== canvasElement) {\n        e.item = self.target;\n        self.onDragEnd(e); // 终止时需要判断此时是否在监听画布外的 mouseup 事件，若有则解绑\n\n        document.body.removeEventListener('mouseup', listener, true);\n      }\n    }\n\n    if (self.origin) {\n      body.addEventListener('mouseup', listener, true);\n    }\n  },\n  update: function update(item, e, force) {\n    var origin = this.origin;\n    var model = item.get('model');\n    var nodeId = item.get('id');\n\n    if (!this.point[nodeId]) {\n      this.point[nodeId] = {\n        x: model.x,\n        y: model.y\n      };\n    }\n\n    var x = e.x - origin.x + this.point[nodeId].x;\n    var y = e.y - origin.y + this.point[nodeId].y; // 拖动单个未选中元素\n\n    if (force) {\n      this.updateDelegate(e, x, y);\n      return;\n    }\n\n    var pos = {\n      x: x,\n      y: y\n    };\n\n    if (this.get('updateEdge')) {\n      this.graph.updateItem(item, pos);\n    } else {\n      item.updatePosition(pos);\n      this.graph.paint();\n    }\n  },\n\n  /**\n   * 更新拖动元素时的delegate\n   * @param {Event} e 事件句柄\n   * @param {number} x 拖动单个元素时候的x坐标\n   * @param {number} y 拖动单个元素时候的y坐标\n   */\n  updateDelegate: function updateDelegate(e, x, y) {\n    var graph = this.graph;\n    var item = e.item;\n    var groupType = graph.get('groupType');\n    var bbox = item.get('keyShape').getBBox();\n\n    if (!this.shape) {\n      var parent_1 = graph.get('delegateGroup');\n      var attrs = deepMix({}, Global.delegateStyle, this.delegateStyle);\n\n      if (this.target) {\n        this.shape = parent_1.addShape('rect', {\n          attrs: __assign({\n            width: bbox.width,\n            height: bbox.height,\n            x: x - bbox.width / 2,\n            y: y - bbox.height / 2\n          }, attrs),\n          name: 'delegate-shape'\n        });\n        this.target.set('delegateShape', this.shape);\n      }\n\n      this.shape.set('capture', false);\n    }\n\n    if (this.target) {\n      if (groupType === 'circle') {\n        this.shape.attr({\n          x: x - bbox.width / 2,\n          y: y - bbox.height / 2\n        });\n      } else if (groupType === 'rect') {\n        this.shape.attr({\n          x: x,\n          y: y\n        });\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/@antv/g6/es/behavior/drag-node-with-group.js"],"names":["__assign","deepMix","Global","body","document","getDefaultCfg","updateEdge","delegate","delegateStyle","maxMultiple","minMultiple","getEvents","dragover","dragleave","onDragOver","evt","graph","target","groupId","get","origin","customGroupControll","customGroup","getDeletageGroupById","currentGroup","nodeGroup","keyShape","inGroupId","setGroupStyle","onDragLeave","onDragStart","e","shouldBegin","call","item","model","getModel","x","y","point","originPoint","onDrag","update","onDragEnd","shouldEnd","shape","remove","delegateShape","set","setCurrentGroupStyle","id","groupNodes","itemBBox","getBBox","currentGroupBBox","centerX","centerY","minX","minY","maxX","maxY","currentGroupNodes","filter","node","dynamicChangeGroupSize","nodeInGroup","targetKeyShape","indexOf","push","Object","keys","forEach","gnode","onOutOfRange","self","canvasElement","listener","ev","removeEventListener","addEventListener","force","nodeId","updateDelegate","pos","updateItem","updatePosition","paint","groupType","bbox","parent_1","attrs","addShape","width","height","name","attr"],"mappings":"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","sourcesContent":["import { __assign } from \"tslib\";\n/*\n * @Author: moyee\n * @Date: 2019-06-27 18:12:06\n * @LastEditors: moyee\n * @LastEditTime: 2019-08-23 13:54:53\n * @Description: 有group的情况下，拖动节点的Behavior\n */\n\nimport deepMix from '@antv/util/lib/deep-mix';\nimport Global from '../global';\nvar body = document.body;\nexport default {\n  getDefaultCfg: function getDefaultCfg() {\n    return {\n      updateEdge: true,\n      delegate: true,\n      delegateStyle: {},\n      maxMultiple: 1.1,\n      minMultiple: 1\n    };\n  },\n  getEvents: function getEvents() {\n    return {\n      'node:dragstart': 'onDragStart',\n      'node:drag': 'onDrag',\n      'node:dragend': 'onDragEnd',\n      'canvas:mouseleave': 'onOutOfRange',\n      dragover: 'onDragOver',\n      // FIXME: does not response\n      dragleave: 'onDragLeave'\n    };\n  },\n  onDragOver: function onDragOver(evt) {\n    var graph = this.graph;\n    var target = evt.target;\n    var groupId = target.get('groupId');\n\n    if (groupId && this.origin) {\n      var customGroupControll = graph.get('customGroupControll');\n      var customGroup = customGroupControll.getDeletageGroupById(groupId);\n\n      if (customGroup) {\n        var currentGroup = customGroup.nodeGroup;\n        var keyShape = currentGroup.get('keyShape');\n        this.inGroupId = groupId;\n        customGroupControll.setGroupStyle(keyShape, 'hover');\n      }\n    }\n  },\n\n  /**\n   * 拖动节点移除Group时的事件\n   * @param {Event} evt 事件句柄\n   */\n  onDragLeave: function onDragLeave(evt) {\n    var graph = this.graph;\n    var target = evt.target;\n    var groupId = target.get('groupId');\n\n    if (groupId && this.origin) {\n      var customGroupControll = graph.get('customGroupControll');\n      var customGroup = customGroupControll.getDeletageGroupById(groupId);\n\n      if (customGroup) {\n        var currentGroup = customGroup.nodeGroup;\n        var keyShape = currentGroup.get('keyShape');\n        customGroupControll.setGroupStyle(keyShape, 'default');\n      }\n    }\n\n    if (!groupId) {\n      this.inGroupId = null;\n    }\n  },\n  onDragStart: function onDragStart(e) {\n    var graph = this.graph;\n\n    if (!this.shouldBegin.call(this, e)) {\n      return;\n    }\n\n    var item = e.item;\n    this.target = item; // 拖动节点时，如果在Group中，则Group高亮\n\n    var model = item.getModel();\n    var groupId = model.groupId;\n\n    if (groupId) {\n      var customGroupControll = graph.get('customGroupControll');\n      var customGroup = customGroupControll.getDeletageGroupById(groupId);\n\n      if (customGroup) {\n        var currentGroup = customGroup.nodeGroup;\n        var keyShape = currentGroup.get('keyShape');\n        customGroupControll.setGroupStyle(keyShape, 'hover'); // 初始拖动时候，如果是在当前群组中拖动，则赋值为当前groupId\n\n        this.inGroupId = groupId;\n      }\n    }\n\n    this.origin = {\n      x: e.x,\n      y: e.y\n    };\n    this.point = {};\n    this.originPoint = {};\n  },\n  onDrag: function onDrag(e) {\n    if (!this.origin) {\n      return;\n    }\n\n    if (!this.get('shouldUpdate').call(this, e)) {\n      return;\n    }\n\n    this.update(this.target, e, true);\n    var item = e.item;\n    var graph = this.graph;\n    var model = item.getModel();\n    var groupId = model.groupId;\n\n    if (groupId) {\n      var customGroupControll = graph.get('customGroupControll');\n      var customGroup = customGroupControll.getDeletageGroupById(groupId);\n\n      if (customGroup) {\n        var currentGroup = customGroup.nodeGroup;\n        var keyShape = currentGroup.get('keyShape'); // 当前\n\n        if (this.inGroupId !== groupId) {\n          customGroupControll.setGroupStyle(keyShape, 'default');\n        } else {\n          customGroupControll.setGroupStyle(keyShape, 'hover');\n        }\n      }\n    }\n  },\n  onDragEnd: function onDragEnd(e) {\n    if (!this.origin || !this.shouldEnd.call(this, e)) {\n      return;\n    }\n\n    if (this.shape) {\n      this.shape.remove();\n      this.shape = null;\n    }\n\n    if (this.target) {\n      var delegateShape = this.target.get('delegateShape');\n\n      if (delegateShape) {\n        delegateShape.remove();\n        this.target.set('delegateShape', null);\n      }\n    }\n\n    if (this.target) {\n      this.update(this.target, e);\n    }\n\n    this.point = {};\n    this.origin = null;\n    this.originPoint = {};\n    this.target = null;\n    this.setCurrentGroupStyle(e);\n  },\n  setCurrentGroupStyle: function setCurrentGroupStyle(evt) {\n    var graph = this.graph;\n    var item = evt.item;\n    var model = item.getModel(); // 节点所在的GroupId\n\n    var groupId = model.groupId,\n        id = model.id;\n    var customGroupControll = graph.get('customGroupControll');\n    var customGroup = customGroupControll.customGroup;\n    var groupNodes = graph.get('groupNodes');\n\n    if (this.inGroupId && groupId) {\n      var currentGroup = customGroup[groupId].nodeGroup;\n\n      if (!currentGroup) {\n        return;\n      }\n\n      var keyShape = currentGroup.get('keyShape');\n      var itemBBox = item.getBBox();\n      var currentGroupBBox = keyShape.getBBox();\n      var centerX = itemBBox.centerX,\n          centerY = itemBBox.centerY;\n      var minX = currentGroupBBox.minX,\n          minY = currentGroupBBox.minY,\n          maxX = currentGroupBBox.maxX,\n          maxY = currentGroupBBox.maxY; // 在自己的group中拖动，判断是否拖出了自己的group\n      // this.inGroupId !== groupId，则说明拖出了原来的group，拖到了其他group上面，\n      // 则删除item中的groupId字段，同时删除group中的nodeID\n\n      if (!(centerX < maxX * this.maxMultiple && centerX > minX * this.minMultiple && centerY < maxY * this.maxMultiple && centerY > minY * this.minMultiple) || this.inGroupId !== groupId) {\n        // 拖出了group，则删除item中的groupId字段，同时删除group中的nodeID\n        var currentGroupNodes = groupNodes[groupId];\n        groupNodes[groupId] = currentGroupNodes.filter(function (node) {\n          return node !== id;\n        });\n        customGroupControll.dynamicChangeGroupSize(evt, currentGroup, keyShape); // 同时删除groupID中的节点\n\n        delete model.groupId;\n      } // 拖动到其他的group上面\n\n\n      if (this.inGroupId !== groupId) {\n        // 拖动新的group后，更新groupNodes及model中的groupId\n        var nodeInGroup = customGroup[this.inGroupId].nodeGroup;\n\n        if (!nodeInGroup) {\n          return;\n        }\n\n        var targetKeyShape = nodeInGroup.get('keyShape'); // 将该节点添加到inGroupId中\n\n        if (groupNodes[this.inGroupId].indexOf(id) === -1) {\n          groupNodes[this.inGroupId].push(id);\n        } // 更新节点的groupId为拖动上去的group Id\n\n\n        model.groupId = this.inGroupId; // 拖入节点后，根据最新的节点数量，重新计算群组大小\n\n        customGroupControll.dynamicChangeGroupSize(evt, nodeInGroup, targetKeyShape);\n      }\n\n      customGroupControll.setGroupStyle(keyShape, 'default');\n    } else if (this.inGroupId && !groupId) {\n      // 将节点拖动到群组中\n      var nodeInGroup = customGroup[this.inGroupId].nodeGroup;\n\n      if (!nodeInGroup) {\n        return;\n      }\n\n      var keyShape = nodeInGroup.get('keyShape'); // 将该节点添加到inGroupId中\n\n      if (groupNodes[this.inGroupId].indexOf(id) === -1) {\n        groupNodes[this.inGroupId].push(id);\n      } // 更新节点的groupId为拖动上去的group Id\n\n\n      model.groupId = this.inGroupId; // 拖入节点后，根据最新的节点数量，重新计算群组大小\n\n      customGroupControll.dynamicChangeGroupSize(evt, nodeInGroup, keyShape);\n    } else if (!this.inGroupId && groupId) {\n      // 拖出到群组之外了，则删除数据中的groupId\n      Object.keys(groupNodes).forEach(function (gnode) {\n        var currentGroupNodes = groupNodes[gnode];\n        groupNodes[gnode] = currentGroupNodes.filter(function (node) {\n          return node !== id;\n        });\n      });\n      var currentGroup = customGroup[groupId].nodeGroup;\n\n      if (!currentGroup) {\n        return;\n      }\n\n      var keyShape = currentGroup.get('keyShape');\n      customGroupControll.dynamicChangeGroupSize(evt, currentGroup, keyShape);\n      delete model.groupId;\n    }\n\n    this.inGroupId = null;\n  },\n  // 若在拖拽时，鼠标移出画布区域，此时放开鼠标无法终止 drag 行为。在画布外监听 mouseup 事件，放开则终止\n  onOutOfRange: function onOutOfRange(e) {\n    var self = this;\n    var canvasElement = self.graph.get('canvas').get('el');\n\n    function listener(ev) {\n      if (ev.target !== canvasElement) {\n        e.item = self.target;\n        self.onDragEnd(e); // 终止时需要判断此时是否在监听画布外的 mouseup 事件，若有则解绑\n\n        document.body.removeEventListener('mouseup', listener, true);\n      }\n    }\n\n    if (self.origin) {\n      body.addEventListener('mouseup', listener, true);\n    }\n  },\n  update: function update(item, e, force) {\n    var origin = this.origin;\n    var model = item.get('model');\n    var nodeId = item.get('id');\n\n    if (!this.point[nodeId]) {\n      this.point[nodeId] = {\n        x: model.x,\n        y: model.y\n      };\n    }\n\n    var x = e.x - origin.x + this.point[nodeId].x;\n    var y = e.y - origin.y + this.point[nodeId].y; // 拖动单个未选中元素\n\n    if (force) {\n      this.updateDelegate(e, x, y);\n      return;\n    }\n\n    var pos = {\n      x: x,\n      y: y\n    };\n\n    if (this.get('updateEdge')) {\n      this.graph.updateItem(item, pos);\n    } else {\n      item.updatePosition(pos);\n      this.graph.paint();\n    }\n  },\n\n  /**\n   * 更新拖动元素时的delegate\n   * @param {Event} e 事件句柄\n   * @param {number} x 拖动单个元素时候的x坐标\n   * @param {number} y 拖动单个元素时候的y坐标\n   */\n  updateDelegate: function updateDelegate(e, x, y) {\n    var graph = this.graph;\n    var item = e.item;\n    var groupType = graph.get('groupType');\n    var bbox = item.get('keyShape').getBBox();\n\n    if (!this.shape) {\n      var parent_1 = graph.get('delegateGroup');\n      var attrs = deepMix({}, Global.delegateStyle, this.delegateStyle);\n\n      if (this.target) {\n        this.shape = parent_1.addShape('rect', {\n          attrs: __assign({\n            width: bbox.width,\n            height: bbox.height,\n            x: x - bbox.width / 2,\n            y: y - bbox.height / 2\n          }, attrs),\n          name: 'delegate-shape'\n        });\n        this.target.set('delegateShape', this.shape);\n      }\n\n      this.shape.set('capture', false);\n    }\n\n    if (this.target) {\n      if (groupType === 'circle') {\n        this.shape.attr({\n          x: x - bbox.width / 2,\n          y: y - bbox.height / 2\n        });\n      } else if (groupType === 'rect') {\n        this.shape.attr({\n          x: x,\n          y: y\n        });\n      }\n    }\n  }\n};"]},"metadata":{},"sourceType":"module"}