{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createInteraction = exports.registerInteraction = exports.getInteraction = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar util_1 = require(\"@antv/util\");\n\nvar grammar_interaction_1 = tslib_1.__importDefault(require(\"./grammar-interaction\"));\n\nvar Interactions = {};\n/**\n * 根据交互行为名字获取对应的交互类\n * @param name 交互名字\n * @returns 交互类\n */\n\nfunction getInteraction(name) {\n  return Interactions[util_1.lowerCase(name)];\n}\n\nexports.getInteraction = getInteraction;\n/**\n * 注册交互行为\n * @param name 交互行为名字\n * @param interaction 交互类\n */\n\nfunction registerInteraction(name, interaction) {\n  Interactions[util_1.lowerCase(name)] = interaction;\n}\n\nexports.registerInteraction = registerInteraction;\n/**\n * 创建交互实例\n * @param name 交互名\n * @param view 交互应用的 View 实例\n * @param cfg 交互行为配置\n */\n\nfunction createInteraction(name, view, cfg) {\n  var interaciton = getInteraction(name);\n\n  if (!interaciton) {\n    return null;\n  }\n\n  if (util_1.isPlainObject(interaciton)) {\n    // 如果不 clone 则会多个 interaction 实例共享 step 的定义\n    var steps = util_1.mix(util_1.clone(interaciton), cfg);\n    return new grammar_interaction_1.default(view, steps);\n  } else {\n    var cls = interaciton;\n    return new cls(view, cfg);\n  }\n}\n\nexports.createInteraction = createInteraction;\n\nvar interaction_1 = require(\"./interaction\");\n\nObject.defineProperty(exports, \"Interaction\", {\n  enumerable: true,\n  get: function () {\n    return interaction_1.default;\n  }\n});\n\nvar action_1 = require(\"./action\");\n\nObject.defineProperty(exports, \"Action\", {\n  enumerable: true,\n  get: function () {\n    return action_1.Action;\n  }\n});\nObject.defineProperty(exports, \"registerAction\", {\n  enumerable: true,\n  get: function () {\n    return action_1.registerAction;\n  }\n});\nObject.defineProperty(exports, \"getActionClass\", {\n  enumerable: true,\n  get: function () {\n    return action_1.getActionClass;\n  }\n});","map":{"version":3,"sources":["../../src/interaction/index.ts"],"names":[],"mappings":";;;;;;;;;AAAA,IAAA,MAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AAGA,IAAA,qBAAA,GAAA,OAAA,CAAA,eAAA,CAAA,OAAA,CAAA,uBAAA,CAAA,CAAA;;AAGA,IAAM,YAAY,GAAgB,EAAlC;AAEA;;;;AAIG;;AACH,SAAgB,cAAhB,CAA+B,IAA/B,EAA2C;AACzC,SAAO,YAAY,CAAC,MAAA,CAAA,SAAA,CAAU,IAAV,CAAD,CAAnB;AACD;;AAFD,OAAA,CAAA,cAAA,GAAA,cAAA;AAIA;;;;AAIG;;AACH,SAAgB,mBAAhB,CAAoC,IAApC,EAAkD,WAAlD,EAAwG;AACtG,EAAA,YAAY,CAAC,MAAA,CAAA,SAAA,CAAU,IAAV,CAAD,CAAZ,GAAgC,WAAhC;AACD;;AAFD,OAAA,CAAA,mBAAA,GAAA,mBAAA;AAIA;;;;;AAKG;;AACH,SAAgB,iBAAhB,CAAkC,IAAlC,EAAgD,IAAhD,EAA4D,GAA5D,EAA6E;AAC3E,MAAM,WAAW,GAAG,cAAc,CAAC,IAAD,CAAlC;;AACA,MAAI,CAAC,WAAL,EAAkB;AAChB,WAAO,IAAP;AACD;;AACD,MAAI,MAAA,CAAA,aAAA,CAAc,WAAd,CAAJ,EAAgC;AAC9B;AACA,QAAM,KAAK,GAAG,MAAA,CAAA,GAAA,CAAI,MAAA,CAAA,KAAA,CAAM,WAAN,CAAJ,EAAwB,GAAxB,CAAd;AACA,WAAO,IAAI,qBAAA,CAAA,OAAJ,CAAuB,IAAvB,EAA6B,KAA7B,CAAP;AACD,GAJD,MAIO;AACL,QAAM,GAAG,GAAG,WAAZ;AACA,WAAO,IAAI,GAAJ,CAAQ,IAAR,EAAc,GAAd,CAAP;AACD;AACF;;AAbD,OAAA,CAAA,iBAAA,GAAA,iBAAA;;AAeA,IAAA,aAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AAAS,MAAA,CAAA,cAAA,CAAA,OAAA,EAAA,aAAA,EAAA;AAAA,EAAA,UAAA,EAAA,IAAA;AAAA,EAAA,GAAA,EAAA,YAAA;AAAA,WAAA,aAAA,CAAA,OAAA;AAAO;AAAP,CAAA;;AACT,IAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAAS,MAAA,CAAA,cAAA,CAAA,OAAA,EAAA,QAAA,EAAA;AAAA,EAAA,UAAA,EAAA,IAAA;AAAA,EAAA,GAAA,EAAA,YAAA;AAAA,WAAA,QAAA,CAAA,MAAA;AAAM;AAAN,CAAA;AAAQ,MAAA,CAAA,cAAA,CAAA,OAAA,EAAA,gBAAA,EAAA;AAAA,EAAA,UAAA,EAAA,IAAA;AAAA,EAAA,GAAA,EAAA,YAAA;AAAA,WAAA,QAAA,CAAA,cAAA;AAAc;AAAd,CAAA;AAAgB,MAAA,CAAA,cAAA,CAAA,OAAA,EAAA,gBAAA,EAAA;AAAA,EAAA,UAAA,EAAA,IAAA;AAAA,EAAA,GAAA,EAAA,YAAA;AAAA,WAAA,QAAA,CAAA,cAAA;AAAc;AAAd,CAAA","sourcesContent":["import { clone, isPlainObject, lowerCase, mix } from '@antv/util';\nimport { View } from '../chart';\nimport { LooseObject } from '../interface';\nimport GrammarInteraction, { InteractionSteps } from './grammar-interaction';\nimport { InteractionConstructor } from './interaction';\n\nconst Interactions: LooseObject = {};\n\n/**\n * 根据交互行为名字获取对应的交互类\n * @param name 交互名字\n * @returns 交互类\n */\nexport function getInteraction(name: string): InteractionSteps | InteractionConstructor {\n  return Interactions[lowerCase(name)];\n}\n\n/**\n * 注册交互行为\n * @param name 交互行为名字\n * @param interaction 交互类\n */\nexport function registerInteraction(name: string, interaction: InteractionSteps | InteractionConstructor) {\n  Interactions[lowerCase(name)] = interaction;\n}\n\n/**\n * 创建交互实例\n * @param name 交互名\n * @param view 交互应用的 View 实例\n * @param cfg 交互行为配置\n */\nexport function createInteraction(name: string, view: View, cfg?: LooseObject) {\n  const interaciton = getInteraction(name);\n  if (!interaciton) {\n    return null;\n  }\n  if (isPlainObject(interaciton)) {\n    // 如果不 clone 则会多个 interaction 实例共享 step 的定义\n    const steps = mix(clone(interaciton), cfg) as InteractionSteps;\n    return new GrammarInteraction(view, steps);\n  } else {\n    const cls = interaciton as InteractionConstructor;\n    return new cls(view, cfg);\n  }\n}\n\nexport { default as Interaction } from './interaction';\nexport { Action, registerAction, getActionClass } from './action';\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}