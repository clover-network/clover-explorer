{"ast":null,"code":"import { __assign } from \"tslib\";\nimport Global from '../../global';\nimport Shape from '../shape';\nimport { isNumber, clone, mix, isArray } from '@antv/util'; // 圆形 Combo\n\nShape.registerCombo('circle', {\n  // 自定义节点时的配置\n  options: {\n    size: [Global.defaultCombo.size[0], Global.defaultCombo.size[0]],\n    padding: Global.defaultCombo.padding[0],\n    animate: true,\n    style: {\n      stroke: Global.defaultCombo.style.stroke,\n      fill: Global.defaultCombo.style.fill,\n      lineWidth: Global.defaultCombo.style.lineWidth\n    },\n    labelCfg: {\n      style: {\n        fill: Global.comboLabel.style.fill,\n        fontSize: Global.comboLabel.style.fontSize\n      },\n      refX: 0,\n      refY: 0\n    },\n    stateStyles: __assign({}, Global.comboStateStyles)\n  },\n  shapeType: 'circle',\n  // 文本位置\n  labelPosition: 'top',\n  drawShape: function drawShape(cfg, group) {\n    var style = this.getShapeStyle(cfg);\n    delete style.height;\n    delete style.width;\n    var keyShape = group.addShape('circle', {\n      attrs: style,\n      className: 'circle-combo',\n      name: 'circle-combo',\n      draggable: true\n    });\n    return keyShape;\n  },\n\n  /**\n   * 获取 Combo 的样式，供基于该 Combo 自定义时使用\n   * @param {Object} cfg Combo 数据模型\n   * @return {Object} Combo 的样式\n   */\n  getShapeStyle: function getShapeStyle(cfg) {\n    var defaultStyle = this.options.style;\n    var padding = cfg.padding || this.options.padding;\n    if (isArray(padding)) padding = padding[0];\n    var strokeStyle = {\n      stroke: cfg.color\n    }; // 如果设置了color，则覆盖默认的stroke属性\n\n    var style = mix({}, defaultStyle, strokeStyle, cfg.style);\n    var size = this.getSize(cfg);\n    var r;\n    if (!isNumber(style.r) || isNaN(style.r)) r = size[0] / 2 || Global.defaultCombo.style.r;else r = Math.max(style.r, size[0] / 2) || size[0] / 2;\n    style.r = r + padding;\n\n    var styles = __assign({\n      x: 0,\n      y: 0\n    }, style);\n\n    if (cfg.style) cfg.style.r = r;else {\n      cfg.style = {\n        r: r\n      };\n    }\n    return styles;\n  },\n  update: function update(cfg, item) {\n    var size = this.getSize(cfg);\n    var padding = cfg.padding || this.options.padding;\n    if (isArray(padding)) padding = padding[0];\n    var cfgStyle = clone(cfg.style);\n    var r = Math.max(cfgStyle.r, size[0] / 2) || size[0] / 2;\n    cfgStyle.r = r + padding;\n    var itemCacheSize = item.get('sizeCache');\n\n    if (itemCacheSize) {\n      itemCacheSize.r = cfgStyle.r;\n    } // 下面这些属性需要覆盖默认样式与目前样式，但若在 cfg 中有指定则应该被 cfg 的相应配置覆盖。\n\n\n    var strokeStyle = {\n      stroke: cfg.color\n    }; // 与 getShapeStyle 不同在于，update 时需要获取到当前的 style 进行融合。即新传入的配置项中没有涉及的属性，保留当前的配置。\n\n    var keyShape = item.get('keyShape');\n    var style = mix({}, keyShape.attr(), strokeStyle, cfgStyle);\n    if (cfg.style) cfg.style.r = r;else {\n      cfg.style = {\n        r: r\n      };\n    }\n    this.updateShape(cfg, item, style, true);\n  }\n}, 'single-combo');","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/@antv/g6/es/shape/combos/circle.js"],"names":["__assign","Global","Shape","isNumber","clone","mix","isArray","registerCombo","options","size","defaultCombo","padding","animate","style","stroke","fill","lineWidth","labelCfg","comboLabel","fontSize","refX","refY","stateStyles","comboStateStyles","shapeType","labelPosition","drawShape","cfg","group","getShapeStyle","height","width","keyShape","addShape","attrs","className","name","draggable","defaultStyle","strokeStyle","color","getSize","r","isNaN","Math","max","styles","x","y","update","item","cfgStyle","itemCacheSize","get","attr","updateShape"],"mappings":"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","sourcesContent":["import { __assign } from \"tslib\";\nimport Global from '../../global';\nimport Shape from '../shape';\nimport { isNumber, clone, mix, isArray } from '@antv/util'; // 圆形 Combo\n\nShape.registerCombo('circle', {\n  // 自定义节点时的配置\n  options: {\n    size: [Global.defaultCombo.size[0], Global.defaultCombo.size[0]],\n    padding: Global.defaultCombo.padding[0],\n    animate: true,\n    style: {\n      stroke: Global.defaultCombo.style.stroke,\n      fill: Global.defaultCombo.style.fill,\n      lineWidth: Global.defaultCombo.style.lineWidth\n    },\n    labelCfg: {\n      style: {\n        fill: Global.comboLabel.style.fill,\n        fontSize: Global.comboLabel.style.fontSize\n      },\n      refX: 0,\n      refY: 0\n    },\n    stateStyles: __assign({}, Global.comboStateStyles)\n  },\n  shapeType: 'circle',\n  // 文本位置\n  labelPosition: 'top',\n  drawShape: function drawShape(cfg, group) {\n    var style = this.getShapeStyle(cfg);\n    delete style.height;\n    delete style.width;\n    var keyShape = group.addShape('circle', {\n      attrs: style,\n      className: 'circle-combo',\n      name: 'circle-combo',\n      draggable: true\n    });\n    return keyShape;\n  },\n\n  /**\n   * 获取 Combo 的样式，供基于该 Combo 自定义时使用\n   * @param {Object} cfg Combo 数据模型\n   * @return {Object} Combo 的样式\n   */\n  getShapeStyle: function getShapeStyle(cfg) {\n    var defaultStyle = this.options.style;\n    var padding = cfg.padding || this.options.padding;\n    if (isArray(padding)) padding = padding[0];\n    var strokeStyle = {\n      stroke: cfg.color\n    }; // 如果设置了color，则覆盖默认的stroke属性\n\n    var style = mix({}, defaultStyle, strokeStyle, cfg.style);\n    var size = this.getSize(cfg);\n    var r;\n    if (!isNumber(style.r) || isNaN(style.r)) r = size[0] / 2 || Global.defaultCombo.style.r;else r = Math.max(style.r, size[0] / 2) || size[0] / 2;\n    style.r = r + padding;\n\n    var styles = __assign({\n      x: 0,\n      y: 0\n    }, style);\n\n    if (cfg.style) cfg.style.r = r;else {\n      cfg.style = {\n        r: r\n      };\n    }\n    return styles;\n  },\n  update: function update(cfg, item) {\n    var size = this.getSize(cfg);\n    var padding = cfg.padding || this.options.padding;\n    if (isArray(padding)) padding = padding[0];\n    var cfgStyle = clone(cfg.style);\n    var r = Math.max(cfgStyle.r, size[0] / 2) || size[0] / 2;\n    cfgStyle.r = r + padding;\n    var itemCacheSize = item.get('sizeCache');\n\n    if (itemCacheSize) {\n      itemCacheSize.r = cfgStyle.r;\n    } // 下面这些属性需要覆盖默认样式与目前样式，但若在 cfg 中有指定则应该被 cfg 的相应配置覆盖。\n\n\n    var strokeStyle = {\n      stroke: cfg.color\n    }; // 与 getShapeStyle 不同在于，update 时需要获取到当前的 style 进行融合。即新传入的配置项中没有涉及的属性，保留当前的配置。\n\n    var keyShape = item.get('keyShape');\n    var style = mix({}, keyShape.attr(), strokeStyle, cfgStyle);\n    if (cfg.style) cfg.style.r = r;else {\n      cfg.style = {\n        r: r\n      };\n    }\n    this.updateShape(cfg, item, style, true);\n  }\n}, 'single-combo');"]},"metadata":{},"sourceType":"module"}