{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sub = exports.mul = undefined;\nexports.create = create;\nexports.fromMat4 = fromMat4;\nexports.clone = clone;\nexports.copy = copy;\nexports.fromValues = fromValues;\nexports.set = set;\nexports.identity = identity;\nexports.transpose = transpose;\nexports.invert = invert;\nexports.adjoint = adjoint;\nexports.determinant = determinant;\nexports.multiply = multiply;\nexports.translate = translate;\nexports.rotate = rotate;\nexports.scale = scale;\nexports.fromTranslation = fromTranslation;\nexports.fromRotation = fromRotation;\nexports.fromScaling = fromScaling;\nexports.fromMat2d = fromMat2d;\nexports.fromQuat = fromQuat;\nexports.normalFromMat4 = normalFromMat4;\nexports.projection = projection;\nexports.str = str;\nexports.frob = frob;\nexports.add = add;\nexports.subtract = subtract;\nexports.multiplyScalar = multiplyScalar;\nexports.multiplyScalarAndAdd = multiplyScalarAndAdd;\nexports.exactEquals = exactEquals;\nexports.equals = equals;\n\nvar _common = require('./common.js');\n\nvar glMatrix = _interopRequireWildcard(_common);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\n\n\nfunction create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\n\n\nfunction fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {mat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\n\n\nfunction clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\n\n\nfunction copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\n\n\nfunction fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\n\n\nfunction set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\n\n\nfunction identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\n\n\nfunction transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\n\n\nfunction invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\n\n\nfunction adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */\n\n\nfunction determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\n\n\nfunction multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */\n\n\nfunction translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\n\nfunction rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n\n;\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\n\nfunction scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat3} out\n */\n\n\nfunction fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\n\nfunction fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat3} out\n */\n\n\nfunction fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat2d} a the matrix to copy\n * @returns {mat3} out\n **/\n\n\nfunction fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\n* Calculates a 3x3 matrix from the given quaternion\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {quat} q Quaternion to create matrix from\n*\n* @returns {mat3} out\n*/\n\n\nfunction fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {mat4} a Mat4 to derive the normal matrix from\n*\n* @returns {mat3} out\n*/\n\n\nfunction normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\n\n\nfunction projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat3\n *\n * @param {mat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\n\nfunction str(a) {\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n}\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {mat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\n\nfunction frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2));\n}\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\n\n\nfunction add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\n\n\nfunction subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\n\n\nfunction multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\n\n\nfunction multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\n\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\n\nfunction equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\n\n\nvar mul = exports.mul = multiply;\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\n\nvar sub = exports.sub = subtract;","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/@antv/gl-matrix/lib/gl-matrix/mat3.js"],"names":["Object","defineProperty","exports","value","sub","mul","undefined","create","fromMat4","clone","copy","fromValues","set","identity","transpose","invert","adjoint","determinant","multiply","translate","rotate","scale","fromTranslation","fromRotation","fromScaling","fromMat2d","fromQuat","normalFromMat4","projection","str","frob","add","subtract","multiplyScalar","multiplyScalarAndAdd","exactEquals","equals","_common","require","glMatrix","_interopRequireWildcard","obj","__esModule","newObj","key","prototype","hasOwnProperty","call","default","out","ARRAY_TYPE","Float32Array","a","m00","m01","m02","m10","m11","m12","m20","m21","m22","a01","a02","a12","a00","a10","a11","a20","a21","a22","b01","b11","b21","det","b","b00","b02","b10","b12","b20","b22","v","x","y","rad","s","Math","sin","c","cos","q","z","w","x2","y2","z2","xx","yx","yy","zx","zy","zz","wx","wy","wz","a03","a13","a23","a30","a31","a32","a33","b03","b04","b05","b06","b07","b08","b09","width","height","sqrt","pow","a0","a1","a2","a3","a4","a5","a6","a7","a8","b0","b1","b2","b3","b4","b5","b6","b7","b8","abs","EPSILON","max"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sub = exports.mul = undefined;\nexports.create = create;\nexports.fromMat4 = fromMat4;\nexports.clone = clone;\nexports.copy = copy;\nexports.fromValues = fromValues;\nexports.set = set;\nexports.identity = identity;\nexports.transpose = transpose;\nexports.invert = invert;\nexports.adjoint = adjoint;\nexports.determinant = determinant;\nexports.multiply = multiply;\nexports.translate = translate;\nexports.rotate = rotate;\nexports.scale = scale;\nexports.fromTranslation = fromTranslation;\nexports.fromRotation = fromRotation;\nexports.fromScaling = fromScaling;\nexports.fromMat2d = fromMat2d;\nexports.fromQuat = fromQuat;\nexports.normalFromMat4 = normalFromMat4;\nexports.projection = projection;\nexports.str = str;\nexports.frob = frob;\nexports.add = add;\nexports.subtract = subtract;\nexports.multiplyScalar = multiplyScalar;\nexports.multiplyScalarAndAdd = multiplyScalarAndAdd;\nexports.exactEquals = exactEquals;\nexports.equals = equals;\n\nvar _common = require('./common.js');\n\nvar glMatrix = _interopRequireWildcard(_common);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\nfunction create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nfunction fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {mat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\nfunction clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nfunction copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\nfunction fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\nfunction set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nfunction identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nfunction transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nfunction invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20;\n\n  // Calculate the determinant\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nfunction adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */\nfunction determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nfunction multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */\nfunction translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nfunction rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n};\n\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nfunction scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat3} out\n */\nfunction fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nfunction fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat3} out\n */\nfunction fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat2d} a the matrix to copy\n * @returns {mat3} out\n **/\nfunction fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n\n/**\n* Calculates a 3x3 matrix from the given quaternion\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {quat} q Quaternion to create matrix from\n*\n* @returns {mat3} out\n*/\nfunction fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n\n  return out;\n}\n\n/**\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {mat4} a Mat4 to derive the normal matrix from\n*\n* @returns {mat3} out\n*/\nfunction normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\n  return out;\n}\n\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\nfunction projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Returns a string representation of a mat3\n *\n * @param {mat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nfunction str(a) {\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {mat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nfunction frob(a) {\n  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2));\n}\n\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nfunction add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nfunction subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\nfunction multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\nfunction multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nfunction equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\nvar mul = exports.mul = multiply;\n\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\nvar sub = exports.sub = subtract;"]},"metadata":{},"sourceType":"script"}