{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\n\nvar Displayable_1 = require(\"../graphic/Displayable\");\n\nvar PathProxy_1 = require(\"../core/PathProxy\");\n\nvar image_1 = require(\"../graphic/helper/image\");\n\nvar helper_1 = require(\"./helper\");\n\nvar Path_1 = require(\"../graphic/Path\");\n\nvar Image_1 = require(\"../graphic/Image\");\n\nvar TSpan_1 = require(\"../graphic/TSpan\");\n\nvar text_1 = require(\"../contain/text\");\n\nvar export_1 = require(\"../export\");\n\nvar util_1 = require(\"../core/util\");\n\nvar dashStyle_1 = require(\"../graphic/helper/dashStyle\");\n\nvar Element_1 = require(\"../Element\");\n\nvar pathProxyForDraw = new PathProxy_1[\"default\"](true);\n\nfunction styleHasStroke(style) {\n  var stroke = style.stroke;\n  return !(stroke == null || stroke === 'none' || !(style.lineWidth > 0));\n}\n\nfunction styleHasFill(style) {\n  var fill = style.fill;\n  return fill != null && fill !== 'none';\n}\n\nfunction doFillPath(ctx, style) {\n  if (style.fillOpacity != null && style.fillOpacity !== 1) {\n    var originalGlobalAlpha = ctx.globalAlpha;\n    ctx.globalAlpha = style.fillOpacity * style.opacity;\n    ctx.fill();\n    ctx.globalAlpha = originalGlobalAlpha;\n  } else {\n    ctx.fill();\n  }\n}\n\nfunction doStrokePath(ctx, style) {\n  if (style.strokeOpacity != null && style.strokeOpacity !== 1) {\n    var originalGlobalAlpha = ctx.globalAlpha;\n    ctx.globalAlpha = style.strokeOpacity * style.opacity;\n    ctx.stroke();\n    ctx.globalAlpha = originalGlobalAlpha;\n  } else {\n    ctx.stroke();\n  }\n}\n\nfunction createCanvasPattern(ctx, pattern, el) {\n  var image = image_1.createOrUpdateImage(pattern.image, pattern.__image, el);\n\n  if (image_1.isImageReady(image)) {\n    var canvasPattern = ctx.createPattern(image, pattern.repeat || 'repeat');\n\n    if (typeof DOMMatrix === 'function') {\n      var matrix = new DOMMatrix();\n      matrix.rotateSelf(0, 0, (pattern.rotation || 0) / Math.PI * 180);\n      matrix.scaleSelf(pattern.scaleX || 1, pattern.scaleY || 1);\n      matrix.translateSelf(pattern.x || 0, pattern.y || 0);\n      canvasPattern.setTransform(matrix);\n    }\n\n    return canvasPattern;\n  }\n}\n\nexports.createCanvasPattern = createCanvasPattern;\n\nfunction brushPath(ctx, el, style, inBatch) {\n  var hasStroke = styleHasStroke(style);\n  var hasFill = styleHasFill(style);\n  var strokePercent = style.strokePercent;\n  var strokePart = strokePercent < 1;\n  var firstDraw = !el.path;\n\n  if ((!el.silent || strokePart) && firstDraw) {\n    el.createPathProxy();\n  }\n\n  var path = el.path || pathProxyForDraw;\n\n  if (!inBatch) {\n    var fill = style.fill;\n    var stroke = style.stroke;\n    var hasFillGradient = hasFill && !!fill.colorStops;\n    var hasStrokeGradient = hasStroke && !!stroke.colorStops;\n    var hasFillPattern = hasFill && !!fill.image;\n    var hasStrokePattern = hasStroke && !!stroke.image;\n    var fillGradient = void 0;\n    var strokeGradient = void 0;\n    var fillPattern = void 0;\n    var strokePattern = void 0;\n    var rect = void 0;\n\n    if (hasFillGradient || hasStrokeGradient) {\n      rect = el.getBoundingRect();\n    }\n\n    if (hasFillGradient) {\n      fillGradient = el.__dirty ? helper_1.getCanvasGradient(ctx, fill, rect) : el.__canvasFillGradient;\n      el.__canvasFillGradient = fillGradient;\n    }\n\n    if (hasStrokeGradient) {\n      strokeGradient = el.__dirty ? helper_1.getCanvasGradient(ctx, stroke, rect) : el.__canvasStrokeGradient;\n      el.__canvasStrokeGradient = strokeGradient;\n    }\n\n    if (hasFillPattern) {\n      fillPattern = el.__dirty || !el.__canvasFillPattern ? createCanvasPattern(ctx, fill, el) : el.__canvasFillPattern;\n      el.__canvasFillPattern = fillPattern;\n    }\n\n    if (hasStrokePattern) {\n      strokePattern = el.__dirty || !el.__canvasStrokePattern ? createCanvasPattern(ctx, stroke, el) : el.__canvasStrokePattern;\n      el.__canvasStrokePattern = fillPattern;\n    }\n\n    if (hasFillGradient) {\n      ctx.fillStyle = fillGradient;\n    } else if (hasFillPattern) {\n      if (fillPattern) {\n        ctx.fillStyle = fillPattern;\n      } else {\n        hasFill = false;\n      }\n    }\n\n    if (hasStrokeGradient) {\n      ctx.strokeStyle = strokeGradient;\n    } else if (hasStrokePattern) {\n      if (strokePattern) {\n        ctx.strokeStyle = strokePattern;\n      } else {\n        hasStroke = false;\n      }\n    }\n  }\n\n  var lineDash = style.lineDash && style.lineWidth > 0 && dashStyle_1.normalizeLineDash(style.lineDash, style.lineWidth);\n  var lineDashOffset = style.lineDashOffset;\n  var ctxLineDash = !!ctx.setLineDash;\n  var scale = el.getGlobalScale();\n  path.setScale(scale[0], scale[1], el.segmentIgnoreThreshold);\n\n  if (lineDash) {\n    var lineScale_1 = style.strokeNoScale && el.getLineScale ? el.getLineScale() : 1;\n\n    if (lineScale_1 && lineScale_1 !== 1) {\n      lineDash = util_1.map(lineDash, function (rawVal) {\n        return rawVal / lineScale_1;\n      });\n      lineDashOffset /= lineScale_1;\n    }\n  }\n\n  var needsRebuild = true;\n\n  if (firstDraw || el.__dirty & Path_1[\"default\"].SHAPE_CHANGED_BIT || lineDash && !ctxLineDash && hasStroke) {\n    path.setDPR(ctx.dpr);\n\n    if (strokePart) {\n      path.setContext(null);\n    } else {\n      path.setContext(ctx);\n      needsRebuild = false;\n    }\n\n    path.reset();\n\n    if (lineDash && !ctxLineDash) {\n      path.setLineDash(lineDash);\n      path.setLineDashOffset(lineDashOffset);\n    }\n\n    el.buildPath(path, el.shape, inBatch);\n    path.toStatic();\n    el.pathUpdated();\n  }\n\n  if (needsRebuild) {\n    path.rebuildPath(ctx, strokePart ? strokePercent : 1);\n  }\n\n  if (lineDash && ctxLineDash) {\n    ctx.setLineDash(lineDash);\n    ctx.lineDashOffset = lineDashOffset;\n  }\n\n  if (!inBatch) {\n    if (style.strokeFirst) {\n      if (hasStroke) {\n        doStrokePath(ctx, style);\n      }\n\n      if (hasFill) {\n        doFillPath(ctx, style);\n      }\n    } else {\n      if (hasFill) {\n        doFillPath(ctx, style);\n      }\n\n      if (hasStroke) {\n        doStrokePath(ctx, style);\n      }\n    }\n  }\n\n  if (lineDash && ctxLineDash) {\n    ctx.setLineDash([]);\n  }\n}\n\nfunction brushImage(ctx, el, style) {\n  var image = el.__image = image_1.createOrUpdateImage(style.image, el.__image, el, el.onload);\n\n  if (!image || !image_1.isImageReady(image)) {\n    return;\n  }\n\n  var x = style.x || 0;\n  var y = style.y || 0;\n  var width = el.getWidth();\n  var height = el.getHeight();\n  var aspect = image.width / image.height;\n\n  if (width == null && height != null) {\n    width = height * aspect;\n  } else if (height == null && width != null) {\n    height = width / aspect;\n  } else if (width == null && height == null) {\n    width = image.width;\n    height = image.height;\n  }\n\n  if (style.sWidth && style.sHeight) {\n    var sx = style.sx || 0;\n    var sy = style.sy || 0;\n    ctx.drawImage(image, sx, sy, style.sWidth, style.sHeight, x, y, width, height);\n  } else if (style.sx && style.sy) {\n    var sx = style.sx;\n    var sy = style.sy;\n    var sWidth = width - sx;\n    var sHeight = height - sy;\n    ctx.drawImage(image, sx, sy, sWidth, sHeight, x, y, width, height);\n  } else {\n    ctx.drawImage(image, x, y, width, height);\n  }\n}\n\nfunction brushText(ctx, el, style) {\n  var text = style.text;\n  text != null && (text += '');\n\n  if (text) {\n    ctx.font = style.font || text_1.DEFAULT_FONT;\n    ctx.textAlign = style.textAlign;\n    ctx.textBaseline = style.textBaseline;\n    var hasLineDash = void 0;\n\n    if (ctx.setLineDash) {\n      var lineDash = style.lineDash && style.lineWidth > 0 && dashStyle_1.normalizeLineDash(style.lineDash, style.lineWidth);\n      var lineDashOffset = style.lineDashOffset;\n\n      if (lineDash) {\n        var lineScale_2 = style.strokeNoScale && el.getLineScale ? el.getLineScale() : 1;\n\n        if (lineScale_2 && lineScale_2 !== 1) {\n          lineDash = util_1.map(lineDash, function (rawVal) {\n            return rawVal / lineScale_2;\n          });\n          lineDashOffset /= lineScale_2;\n        }\n\n        ctx.setLineDash(lineDash);\n        ctx.lineDashOffset = lineDashOffset;\n        hasLineDash = true;\n      }\n    }\n\n    if (style.strokeFirst) {\n      if (styleHasStroke(style)) {\n        ctx.strokeText(text, style.x, style.y);\n      }\n\n      if (styleHasFill(style)) {\n        ctx.fillText(text, style.x, style.y);\n      }\n    } else {\n      if (styleHasFill(style)) {\n        ctx.fillText(text, style.x, style.y);\n      }\n\n      if (styleHasStroke(style)) {\n        ctx.strokeText(text, style.x, style.y);\n      }\n    }\n\n    if (hasLineDash) {\n      ctx.setLineDash([]);\n    }\n  }\n}\n\nvar SHADOW_NUMBER_PROPS = ['shadowBlur', 'shadowOffsetX', 'shadowOffsetY'];\nvar STROKE_PROPS = [['lineCap', 'butt'], ['lineJoin', 'miter'], ['miterLimit', 10]];\n\nfunction bindCommonProps(ctx, style, prevStyle, forceSetAll, scope) {\n  var styleChanged = false;\n\n  if (!forceSetAll) {\n    prevStyle = prevStyle || {};\n\n    if (style === prevStyle) {\n      return false;\n    }\n  }\n\n  if (forceSetAll || style.opacity !== prevStyle.opacity) {\n    if (!styleChanged) {\n      flushPathDrawn(ctx, scope);\n      styleChanged = true;\n    }\n\n    ctx.globalAlpha = style.opacity == null ? Displayable_1.DEFAULT_COMMON_STYLE.opacity : style.opacity;\n  }\n\n  if (forceSetAll || style.blend !== prevStyle.blend) {\n    if (!styleChanged) {\n      flushPathDrawn(ctx, scope);\n      styleChanged = true;\n    }\n\n    ctx.globalCompositeOperation = style.blend || Displayable_1.DEFAULT_COMMON_STYLE.blend;\n  }\n\n  for (var i = 0; i < SHADOW_NUMBER_PROPS.length; i++) {\n    var propName = SHADOW_NUMBER_PROPS[i];\n\n    if (forceSetAll || style[propName] !== prevStyle[propName]) {\n      if (!styleChanged) {\n        flushPathDrawn(ctx, scope);\n        styleChanged = true;\n      }\n\n      ctx[propName] = ctx.dpr * (style[propName] || 0);\n    }\n  }\n\n  if (forceSetAll || style.shadowColor !== prevStyle.shadowColor) {\n    if (!styleChanged) {\n      flushPathDrawn(ctx, scope);\n      styleChanged = true;\n    }\n\n    ctx.shadowColor = style.shadowColor || Displayable_1.DEFAULT_COMMON_STYLE.shadowColor;\n  }\n\n  return styleChanged;\n}\n\nfunction bindPathAndTextCommonStyle(ctx, el, prevEl, forceSetAll, scope) {\n  var style = getStyle(el, scope.inHover);\n  var prevStyle = forceSetAll ? null : prevEl && getStyle(prevEl, scope.inHover) || {};\n\n  if (style === prevStyle) {\n    return false;\n  }\n\n  var styleChanged = bindCommonProps(ctx, style, prevStyle, forceSetAll, scope);\n\n  if (forceSetAll || style.fill !== prevStyle.fill) {\n    if (!styleChanged) {\n      flushPathDrawn(ctx, scope);\n      styleChanged = true;\n    }\n\n    ctx.fillStyle = style.fill;\n  }\n\n  if (forceSetAll || style.stroke !== prevStyle.stroke) {\n    if (!styleChanged) {\n      flushPathDrawn(ctx, scope);\n      styleChanged = true;\n    }\n\n    ctx.strokeStyle = style.stroke;\n  }\n\n  if (forceSetAll || style.opacity !== prevStyle.opacity) {\n    if (!styleChanged) {\n      flushPathDrawn(ctx, scope);\n      styleChanged = true;\n    }\n\n    ctx.globalAlpha = style.opacity == null ? 1 : style.opacity;\n  }\n\n  if (el.hasStroke()) {\n    var lineWidth = style.lineWidth;\n    var newLineWidth = lineWidth / (style.strokeNoScale && el && el.getLineScale ? el.getLineScale() : 1);\n\n    if (ctx.lineWidth !== newLineWidth) {\n      if (!styleChanged) {\n        flushPathDrawn(ctx, scope);\n        styleChanged = true;\n      }\n\n      ctx.lineWidth = newLineWidth;\n    }\n  }\n\n  for (var i = 0; i < STROKE_PROPS.length; i++) {\n    var prop = STROKE_PROPS[i];\n    var propName = prop[0];\n\n    if (forceSetAll || style[propName] !== prevStyle[propName]) {\n      if (!styleChanged) {\n        flushPathDrawn(ctx, scope);\n        styleChanged = true;\n      }\n\n      ctx[propName] = style[propName] || prop[1];\n    }\n  }\n\n  return styleChanged;\n}\n\nfunction bindImageStyle(ctx, el, prevEl, forceSetAll, scope) {\n  return bindCommonProps(ctx, getStyle(el, scope.inHover), prevEl && getStyle(prevEl, scope.inHover), forceSetAll, scope);\n}\n\nfunction setContextTransform(ctx, el) {\n  var m = el.transform;\n  var dpr = ctx.dpr || 1;\n\n  if (m) {\n    ctx.setTransform(dpr * m[0], dpr * m[1], dpr * m[2], dpr * m[3], dpr * m[4], dpr * m[5]);\n  } else {\n    ctx.setTransform(dpr, 0, 0, dpr, 0, 0);\n  }\n}\n\nfunction updateClipStatus(clipPaths, ctx, scope) {\n  var allClipped = false;\n\n  for (var i = 0; i < clipPaths.length; i++) {\n    var clipPath = clipPaths[i];\n    allClipped = allClipped || clipPath.isZeroArea();\n    setContextTransform(ctx, clipPath);\n    ctx.beginPath();\n    clipPath.buildPath(ctx, clipPath.shape);\n    ctx.clip();\n  }\n\n  scope.allClipped = allClipped;\n}\n\nfunction isTransformChanged(m0, m1) {\n  if (m0 && m1) {\n    return m0[0] !== m1[0] || m0[1] !== m1[1] || m0[2] !== m1[2] || m0[3] !== m1[3] || m0[4] !== m1[4] || m0[5] !== m1[5];\n  } else if (!m0 && !m1) {\n    return false;\n  }\n\n  return true;\n}\n\nvar DRAW_TYPE_PATH = 1;\nvar DRAW_TYPE_IMAGE = 2;\nvar DRAW_TYPE_TEXT = 3;\nvar DRAW_TYPE_INCREMENTAL = 4;\n\nfunction canPathBatch(style) {\n  var hasFill = styleHasFill(style);\n  var hasStroke = styleHasStroke(style);\n  return !(style.lineDash || !(+hasFill ^ +hasStroke) || hasFill && typeof style.fill !== 'string' || hasStroke && typeof style.stroke !== 'string' || style.strokePercent < 1 || style.strokeOpacity < 1 || style.fillOpacity < 1);\n}\n\nfunction flushPathDrawn(ctx, scope) {\n  scope.batchFill && ctx.fill();\n  scope.batchStroke && ctx.stroke();\n  scope.batchFill = '';\n  scope.batchStroke = '';\n}\n\nfunction getStyle(el, inHover) {\n  return inHover ? el.__hoverStyle || el.style : el.style;\n}\n\nfunction brushSingle(ctx, el) {\n  brush(ctx, el, {\n    inHover: false,\n    viewWidth: 0,\n    viewHeight: 0\n  }, true);\n}\n\nexports.brushSingle = brushSingle;\n\nfunction brush(ctx, el, scope, isLast) {\n  var m = el.transform;\n\n  if (!el.shouldBePainted(scope.viewWidth, scope.viewHeight, false, false)) {\n    el.__dirty &= ~Element_1[\"default\"].REDARAW_BIT;\n    el.__isRendered = false;\n    return;\n  }\n\n  var clipPaths = el.__clipPaths;\n  var prevElClipPaths = scope.prevElClipPaths;\n  var forceSetTransform = false;\n  var forceSetStyle = false;\n\n  if (!prevElClipPaths || helper_1.isClipPathChanged(clipPaths, prevElClipPaths)) {\n    if (prevElClipPaths && prevElClipPaths.length) {\n      flushPathDrawn(ctx, scope);\n      ctx.restore();\n      forceSetStyle = forceSetTransform = true;\n      scope.prevElClipPaths = null;\n      scope.allClipped = false;\n      scope.prevEl = null;\n    }\n\n    if (clipPaths && clipPaths.length) {\n      flushPathDrawn(ctx, scope);\n      ctx.save();\n      updateClipStatus(clipPaths, ctx, scope);\n      forceSetTransform = true;\n    }\n\n    scope.prevElClipPaths = clipPaths;\n  }\n\n  if (scope.allClipped) {\n    el.__isRendered = false;\n    return;\n  }\n\n  el.beforeBrush && el.beforeBrush();\n  el.innerBeforeBrush();\n  var prevEl = scope.prevEl;\n\n  if (!prevEl) {\n    forceSetStyle = forceSetTransform = true;\n  }\n\n  var canBatchPath = el instanceof Path_1[\"default\"] && el.autoBatch && canPathBatch(el.style);\n\n  if (forceSetTransform || isTransformChanged(m, prevEl.transform)) {\n    flushPathDrawn(ctx, scope);\n    setContextTransform(ctx, el);\n  } else if (!canBatchPath) {\n    flushPathDrawn(ctx, scope);\n  }\n\n  var style = getStyle(el, scope.inHover);\n\n  if (el instanceof Path_1[\"default\"]) {\n    if (scope.lastDrawType !== DRAW_TYPE_PATH) {\n      forceSetStyle = true;\n      scope.lastDrawType = DRAW_TYPE_PATH;\n    }\n\n    bindPathAndTextCommonStyle(ctx, el, prevEl, forceSetStyle, scope);\n\n    if (!canBatchPath || !scope.batchFill && !scope.batchStroke) {\n      ctx.beginPath();\n    }\n\n    brushPath(ctx, el, style, canBatchPath);\n\n    if (canBatchPath) {\n      scope.batchFill = style.fill || '';\n      scope.batchStroke = style.stroke || '';\n    }\n  } else {\n    if (el instanceof TSpan_1[\"default\"]) {\n      if (scope.lastDrawType !== DRAW_TYPE_TEXT) {\n        forceSetStyle = true;\n        scope.lastDrawType = DRAW_TYPE_TEXT;\n      }\n\n      bindPathAndTextCommonStyle(ctx, el, prevEl, forceSetStyle, scope);\n      brushText(ctx, el, style);\n    } else if (el instanceof Image_1[\"default\"]) {\n      if (scope.lastDrawType !== DRAW_TYPE_IMAGE) {\n        forceSetStyle = true;\n        scope.lastDrawType = DRAW_TYPE_IMAGE;\n      }\n\n      bindImageStyle(ctx, el, prevEl, forceSetStyle, scope);\n      brushImage(ctx, el, style);\n    } else if (el instanceof export_1.IncrementalDisplayable) {\n      if (scope.lastDrawType !== DRAW_TYPE_INCREMENTAL) {\n        forceSetStyle = true;\n        scope.lastDrawType = DRAW_TYPE_INCREMENTAL;\n      }\n\n      brushIncremental(ctx, el, scope);\n    }\n  }\n\n  if (canBatchPath && isLast) {\n    flushPathDrawn(ctx, scope);\n  }\n\n  el.innerAfterBrush();\n  el.afterBrush && el.afterBrush();\n  scope.prevEl = el;\n  el.__dirty = 0;\n  el.__isRendered = true;\n}\n\nexports.brush = brush;\n\nfunction brushIncremental(ctx, el, scope) {\n  var displayables = el.getDisplayables();\n  var temporalDisplayables = el.getTemporalDisplayables();\n  ctx.save();\n  var innerScope = {\n    prevElClipPaths: null,\n    prevEl: null,\n    allClipped: false,\n    viewWidth: scope.viewWidth,\n    viewHeight: scope.viewHeight,\n    inHover: scope.inHover\n  };\n  var i;\n  var len;\n\n  for (i = el.getCursor(), len = displayables.length; i < len; i++) {\n    var displayable = displayables[i];\n    displayable.beforeBrush && displayable.beforeBrush();\n    displayable.innerBeforeBrush();\n    brush(ctx, displayable, innerScope, i === len - 1);\n    displayable.innerAfterBrush();\n    displayable.afterBrush && displayable.afterBrush();\n    innerScope.prevEl = displayable;\n  }\n\n  for (var i_1 = 0, len_1 = temporalDisplayables.length; i_1 < len_1; i_1++) {\n    var displayable = temporalDisplayables[i_1];\n    displayable.beforeBrush && displayable.beforeBrush();\n    displayable.innerBeforeBrush();\n    brush(ctx, displayable, innerScope, i_1 === len_1 - 1);\n    displayable.innerAfterBrush();\n    displayable.afterBrush && displayable.afterBrush();\n    innerScope.prevEl = displayable;\n  }\n\n  el.clearTemporalDisplayables();\n  el.notClear = true;\n  ctx.restore();\n}","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/zrender/lib/canvas/graphic.js"],"names":["exports","__esModule","Displayable_1","require","PathProxy_1","image_1","helper_1","Path_1","Image_1","TSpan_1","text_1","export_1","util_1","dashStyle_1","Element_1","pathProxyForDraw","styleHasStroke","style","stroke","lineWidth","styleHasFill","fill","doFillPath","ctx","fillOpacity","originalGlobalAlpha","globalAlpha","opacity","doStrokePath","strokeOpacity","createCanvasPattern","pattern","el","image","createOrUpdateImage","__image","isImageReady","canvasPattern","createPattern","repeat","DOMMatrix","matrix","rotateSelf","rotation","Math","PI","scaleSelf","scaleX","scaleY","translateSelf","x","y","setTransform","brushPath","inBatch","hasStroke","hasFill","strokePercent","strokePart","firstDraw","path","silent","createPathProxy","hasFillGradient","colorStops","hasStrokeGradient","hasFillPattern","hasStrokePattern","fillGradient","strokeGradient","fillPattern","strokePattern","rect","getBoundingRect","__dirty","getCanvasGradient","__canvasFillGradient","__canvasStrokeGradient","__canvasFillPattern","__canvasStrokePattern","fillStyle","strokeStyle","lineDash","normalizeLineDash","lineDashOffset","ctxLineDash","setLineDash","scale","getGlobalScale","setScale","segmentIgnoreThreshold","lineScale_1","strokeNoScale","getLineScale","map","rawVal","needsRebuild","SHAPE_CHANGED_BIT","setDPR","dpr","setContext","reset","setLineDashOffset","buildPath","shape","toStatic","pathUpdated","rebuildPath","strokeFirst","brushImage","onload","width","getWidth","height","getHeight","aspect","sWidth","sHeight","sx","sy","drawImage","brushText","text","font","DEFAULT_FONT","textAlign","textBaseline","hasLineDash","lineScale_2","strokeText","fillText","SHADOW_NUMBER_PROPS","STROKE_PROPS","bindCommonProps","prevStyle","forceSetAll","scope","styleChanged","flushPathDrawn","DEFAULT_COMMON_STYLE","blend","globalCompositeOperation","i","length","propName","shadowColor","bindPathAndTextCommonStyle","prevEl","getStyle","inHover","newLineWidth","prop","bindImageStyle","setContextTransform","m","transform","updateClipStatus","clipPaths","allClipped","clipPath","isZeroArea","beginPath","clip","isTransformChanged","m0","m1","DRAW_TYPE_PATH","DRAW_TYPE_IMAGE","DRAW_TYPE_TEXT","DRAW_TYPE_INCREMENTAL","canPathBatch","batchFill","batchStroke","__hoverStyle","brushSingle","brush","viewWidth","viewHeight","isLast","shouldBePainted","REDARAW_BIT","__isRendered","__clipPaths","prevElClipPaths","forceSetTransform","forceSetStyle","isClipPathChanged","restore","save","beforeBrush","innerBeforeBrush","canBatchPath","autoBatch","lastDrawType","IncrementalDisplayable","brushIncremental","innerAfterBrush","afterBrush","displayables","getDisplayables","temporalDisplayables","getTemporalDisplayables","innerScope","len","getCursor","displayable","i_1","len_1","clearTemporalDisplayables","notClear"],"mappings":"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","sourcesContent":["\"use strict\";\nexports.__esModule = true;\nvar Displayable_1 = require(\"../graphic/Displayable\");\nvar PathProxy_1 = require(\"../core/PathProxy\");\nvar image_1 = require(\"../graphic/helper/image\");\nvar helper_1 = require(\"./helper\");\nvar Path_1 = require(\"../graphic/Path\");\nvar Image_1 = require(\"../graphic/Image\");\nvar TSpan_1 = require(\"../graphic/TSpan\");\nvar text_1 = require(\"../contain/text\");\nvar export_1 = require(\"../export\");\nvar util_1 = require(\"../core/util\");\nvar dashStyle_1 = require(\"../graphic/helper/dashStyle\");\nvar Element_1 = require(\"../Element\");\nvar pathProxyForDraw = new PathProxy_1[\"default\"](true);\nfunction styleHasStroke(style) {\n    var stroke = style.stroke;\n    return !(stroke == null || stroke === 'none' || !(style.lineWidth > 0));\n}\nfunction styleHasFill(style) {\n    var fill = style.fill;\n    return fill != null && fill !== 'none';\n}\nfunction doFillPath(ctx, style) {\n    if (style.fillOpacity != null && style.fillOpacity !== 1) {\n        var originalGlobalAlpha = ctx.globalAlpha;\n        ctx.globalAlpha = style.fillOpacity * style.opacity;\n        ctx.fill();\n        ctx.globalAlpha = originalGlobalAlpha;\n    }\n    else {\n        ctx.fill();\n    }\n}\nfunction doStrokePath(ctx, style) {\n    if (style.strokeOpacity != null && style.strokeOpacity !== 1) {\n        var originalGlobalAlpha = ctx.globalAlpha;\n        ctx.globalAlpha = style.strokeOpacity * style.opacity;\n        ctx.stroke();\n        ctx.globalAlpha = originalGlobalAlpha;\n    }\n    else {\n        ctx.stroke();\n    }\n}\nfunction createCanvasPattern(ctx, pattern, el) {\n    var image = image_1.createOrUpdateImage(pattern.image, pattern.__image, el);\n    if (image_1.isImageReady(image)) {\n        var canvasPattern = ctx.createPattern(image, pattern.repeat || 'repeat');\n        if (typeof DOMMatrix === 'function') {\n            var matrix = new DOMMatrix();\n            matrix.rotateSelf(0, 0, (pattern.rotation || 0) / Math.PI * 180);\n            matrix.scaleSelf((pattern.scaleX || 1), (pattern.scaleY || 1));\n            matrix.translateSelf((pattern.x || 0), (pattern.y || 0));\n            canvasPattern.setTransform(matrix);\n        }\n        return canvasPattern;\n    }\n}\nexports.createCanvasPattern = createCanvasPattern;\nfunction brushPath(ctx, el, style, inBatch) {\n    var hasStroke = styleHasStroke(style);\n    var hasFill = styleHasFill(style);\n    var strokePercent = style.strokePercent;\n    var strokePart = strokePercent < 1;\n    var firstDraw = !el.path;\n    if ((!el.silent || strokePart) && firstDraw) {\n        el.createPathProxy();\n    }\n    var path = el.path || pathProxyForDraw;\n    if (!inBatch) {\n        var fill = style.fill;\n        var stroke = style.stroke;\n        var hasFillGradient = hasFill && !!fill.colorStops;\n        var hasStrokeGradient = hasStroke && !!stroke.colorStops;\n        var hasFillPattern = hasFill && !!fill.image;\n        var hasStrokePattern = hasStroke && !!stroke.image;\n        var fillGradient = void 0;\n        var strokeGradient = void 0;\n        var fillPattern = void 0;\n        var strokePattern = void 0;\n        var rect = void 0;\n        if (hasFillGradient || hasStrokeGradient) {\n            rect = el.getBoundingRect();\n        }\n        if (hasFillGradient) {\n            fillGradient = el.__dirty\n                ? helper_1.getCanvasGradient(ctx, fill, rect)\n                : el.__canvasFillGradient;\n            el.__canvasFillGradient = fillGradient;\n        }\n        if (hasStrokeGradient) {\n            strokeGradient = el.__dirty\n                ? helper_1.getCanvasGradient(ctx, stroke, rect)\n                : el.__canvasStrokeGradient;\n            el.__canvasStrokeGradient = strokeGradient;\n        }\n        if (hasFillPattern) {\n            fillPattern = (el.__dirty || !el.__canvasFillPattern)\n                ? createCanvasPattern(ctx, fill, el)\n                : el.__canvasFillPattern;\n            el.__canvasFillPattern = fillPattern;\n        }\n        if (hasStrokePattern) {\n            strokePattern = (el.__dirty || !el.__canvasStrokePattern)\n                ? createCanvasPattern(ctx, stroke, el)\n                : el.__canvasStrokePattern;\n            el.__canvasStrokePattern = fillPattern;\n        }\n        if (hasFillGradient) {\n            ctx.fillStyle = fillGradient;\n        }\n        else if (hasFillPattern) {\n            if (fillPattern) {\n                ctx.fillStyle = fillPattern;\n            }\n            else {\n                hasFill = false;\n            }\n        }\n        if (hasStrokeGradient) {\n            ctx.strokeStyle = strokeGradient;\n        }\n        else if (hasStrokePattern) {\n            if (strokePattern) {\n                ctx.strokeStyle = strokePattern;\n            }\n            else {\n                hasStroke = false;\n            }\n        }\n    }\n    var lineDash = style.lineDash && style.lineWidth > 0 && dashStyle_1.normalizeLineDash(style.lineDash, style.lineWidth);\n    var lineDashOffset = style.lineDashOffset;\n    var ctxLineDash = !!ctx.setLineDash;\n    var scale = el.getGlobalScale();\n    path.setScale(scale[0], scale[1], el.segmentIgnoreThreshold);\n    if (lineDash) {\n        var lineScale_1 = (style.strokeNoScale && el.getLineScale) ? el.getLineScale() : 1;\n        if (lineScale_1 && lineScale_1 !== 1) {\n            lineDash = util_1.map(lineDash, function (rawVal) {\n                return rawVal / lineScale_1;\n            });\n            lineDashOffset /= lineScale_1;\n        }\n    }\n    var needsRebuild = true;\n    if (firstDraw || (el.__dirty & Path_1[\"default\"].SHAPE_CHANGED_BIT)\n        || (lineDash && !ctxLineDash && hasStroke)) {\n        path.setDPR(ctx.dpr);\n        if (strokePart) {\n            path.setContext(null);\n        }\n        else {\n            path.setContext(ctx);\n            needsRebuild = false;\n        }\n        path.reset();\n        if (lineDash && !ctxLineDash) {\n            path.setLineDash(lineDash);\n            path.setLineDashOffset(lineDashOffset);\n        }\n        el.buildPath(path, el.shape, inBatch);\n        path.toStatic();\n        el.pathUpdated();\n    }\n    if (needsRebuild) {\n        path.rebuildPath(ctx, strokePart ? strokePercent : 1);\n    }\n    if (lineDash && ctxLineDash) {\n        ctx.setLineDash(lineDash);\n        ctx.lineDashOffset = lineDashOffset;\n    }\n    if (!inBatch) {\n        if (style.strokeFirst) {\n            if (hasStroke) {\n                doStrokePath(ctx, style);\n            }\n            if (hasFill) {\n                doFillPath(ctx, style);\n            }\n        }\n        else {\n            if (hasFill) {\n                doFillPath(ctx, style);\n            }\n            if (hasStroke) {\n                doStrokePath(ctx, style);\n            }\n        }\n    }\n    if (lineDash && ctxLineDash) {\n        ctx.setLineDash([]);\n    }\n}\nfunction brushImage(ctx, el, style) {\n    var image = el.__image = image_1.createOrUpdateImage(style.image, el.__image, el, el.onload);\n    if (!image || !image_1.isImageReady(image)) {\n        return;\n    }\n    var x = style.x || 0;\n    var y = style.y || 0;\n    var width = el.getWidth();\n    var height = el.getHeight();\n    var aspect = image.width / image.height;\n    if (width == null && height != null) {\n        width = height * aspect;\n    }\n    else if (height == null && width != null) {\n        height = width / aspect;\n    }\n    else if (width == null && height == null) {\n        width = image.width;\n        height = image.height;\n    }\n    if (style.sWidth && style.sHeight) {\n        var sx = style.sx || 0;\n        var sy = style.sy || 0;\n        ctx.drawImage(image, sx, sy, style.sWidth, style.sHeight, x, y, width, height);\n    }\n    else if (style.sx && style.sy) {\n        var sx = style.sx;\n        var sy = style.sy;\n        var sWidth = width - sx;\n        var sHeight = height - sy;\n        ctx.drawImage(image, sx, sy, sWidth, sHeight, x, y, width, height);\n    }\n    else {\n        ctx.drawImage(image, x, y, width, height);\n    }\n}\nfunction brushText(ctx, el, style) {\n    var text = style.text;\n    text != null && (text += '');\n    if (text) {\n        ctx.font = style.font || text_1.DEFAULT_FONT;\n        ctx.textAlign = style.textAlign;\n        ctx.textBaseline = style.textBaseline;\n        var hasLineDash = void 0;\n        if (ctx.setLineDash) {\n            var lineDash = style.lineDash && style.lineWidth > 0 && dashStyle_1.normalizeLineDash(style.lineDash, style.lineWidth);\n            var lineDashOffset = style.lineDashOffset;\n            if (lineDash) {\n                var lineScale_2 = (style.strokeNoScale && el.getLineScale) ? el.getLineScale() : 1;\n                if (lineScale_2 && lineScale_2 !== 1) {\n                    lineDash = util_1.map(lineDash, function (rawVal) {\n                        return rawVal / lineScale_2;\n                    });\n                    lineDashOffset /= lineScale_2;\n                }\n                ctx.setLineDash(lineDash);\n                ctx.lineDashOffset = lineDashOffset;\n                hasLineDash = true;\n            }\n        }\n        if (style.strokeFirst) {\n            if (styleHasStroke(style)) {\n                ctx.strokeText(text, style.x, style.y);\n            }\n            if (styleHasFill(style)) {\n                ctx.fillText(text, style.x, style.y);\n            }\n        }\n        else {\n            if (styleHasFill(style)) {\n                ctx.fillText(text, style.x, style.y);\n            }\n            if (styleHasStroke(style)) {\n                ctx.strokeText(text, style.x, style.y);\n            }\n        }\n        if (hasLineDash) {\n            ctx.setLineDash([]);\n        }\n    }\n}\nvar SHADOW_NUMBER_PROPS = ['shadowBlur', 'shadowOffsetX', 'shadowOffsetY'];\nvar STROKE_PROPS = [\n    ['lineCap', 'butt'], ['lineJoin', 'miter'], ['miterLimit', 10]\n];\nfunction bindCommonProps(ctx, style, prevStyle, forceSetAll, scope) {\n    var styleChanged = false;\n    if (!forceSetAll) {\n        prevStyle = prevStyle || {};\n        if (style === prevStyle) {\n            return false;\n        }\n    }\n    if (forceSetAll || style.opacity !== prevStyle.opacity) {\n        if (!styleChanged) {\n            flushPathDrawn(ctx, scope);\n            styleChanged = true;\n        }\n        ctx.globalAlpha = style.opacity == null ? Displayable_1.DEFAULT_COMMON_STYLE.opacity : style.opacity;\n    }\n    if (forceSetAll || style.blend !== prevStyle.blend) {\n        if (!styleChanged) {\n            flushPathDrawn(ctx, scope);\n            styleChanged = true;\n        }\n        ctx.globalCompositeOperation = style.blend || Displayable_1.DEFAULT_COMMON_STYLE.blend;\n    }\n    for (var i = 0; i < SHADOW_NUMBER_PROPS.length; i++) {\n        var propName = SHADOW_NUMBER_PROPS[i];\n        if (forceSetAll || style[propName] !== prevStyle[propName]) {\n            if (!styleChanged) {\n                flushPathDrawn(ctx, scope);\n                styleChanged = true;\n            }\n            ctx[propName] = ctx.dpr * (style[propName] || 0);\n        }\n    }\n    if (forceSetAll || style.shadowColor !== prevStyle.shadowColor) {\n        if (!styleChanged) {\n            flushPathDrawn(ctx, scope);\n            styleChanged = true;\n        }\n        ctx.shadowColor = style.shadowColor || Displayable_1.DEFAULT_COMMON_STYLE.shadowColor;\n    }\n    return styleChanged;\n}\nfunction bindPathAndTextCommonStyle(ctx, el, prevEl, forceSetAll, scope) {\n    var style = getStyle(el, scope.inHover);\n    var prevStyle = forceSetAll\n        ? null\n        : (prevEl && getStyle(prevEl, scope.inHover) || {});\n    if (style === prevStyle) {\n        return false;\n    }\n    var styleChanged = bindCommonProps(ctx, style, prevStyle, forceSetAll, scope);\n    if (forceSetAll || style.fill !== prevStyle.fill) {\n        if (!styleChanged) {\n            flushPathDrawn(ctx, scope);\n            styleChanged = true;\n        }\n        ctx.fillStyle = style.fill;\n    }\n    if (forceSetAll || style.stroke !== prevStyle.stroke) {\n        if (!styleChanged) {\n            flushPathDrawn(ctx, scope);\n            styleChanged = true;\n        }\n        ctx.strokeStyle = style.stroke;\n    }\n    if (forceSetAll || style.opacity !== prevStyle.opacity) {\n        if (!styleChanged) {\n            flushPathDrawn(ctx, scope);\n            styleChanged = true;\n        }\n        ctx.globalAlpha = style.opacity == null ? 1 : style.opacity;\n    }\n    if (el.hasStroke()) {\n        var lineWidth = style.lineWidth;\n        var newLineWidth = lineWidth / ((style.strokeNoScale && el && el.getLineScale) ? el.getLineScale() : 1);\n        if (ctx.lineWidth !== newLineWidth) {\n            if (!styleChanged) {\n                flushPathDrawn(ctx, scope);\n                styleChanged = true;\n            }\n            ctx.lineWidth = newLineWidth;\n        }\n    }\n    for (var i = 0; i < STROKE_PROPS.length; i++) {\n        var prop = STROKE_PROPS[i];\n        var propName = prop[0];\n        if (forceSetAll || style[propName] !== prevStyle[propName]) {\n            if (!styleChanged) {\n                flushPathDrawn(ctx, scope);\n                styleChanged = true;\n            }\n            ctx[propName] = style[propName] || prop[1];\n        }\n    }\n    return styleChanged;\n}\nfunction bindImageStyle(ctx, el, prevEl, forceSetAll, scope) {\n    return bindCommonProps(ctx, getStyle(el, scope.inHover), prevEl && getStyle(prevEl, scope.inHover), forceSetAll, scope);\n}\nfunction setContextTransform(ctx, el) {\n    var m = el.transform;\n    var dpr = ctx.dpr || 1;\n    if (m) {\n        ctx.setTransform(dpr * m[0], dpr * m[1], dpr * m[2], dpr * m[3], dpr * m[4], dpr * m[5]);\n    }\n    else {\n        ctx.setTransform(dpr, 0, 0, dpr, 0, 0);\n    }\n}\nfunction updateClipStatus(clipPaths, ctx, scope) {\n    var allClipped = false;\n    for (var i = 0; i < clipPaths.length; i++) {\n        var clipPath = clipPaths[i];\n        allClipped = allClipped || clipPath.isZeroArea();\n        setContextTransform(ctx, clipPath);\n        ctx.beginPath();\n        clipPath.buildPath(ctx, clipPath.shape);\n        ctx.clip();\n    }\n    scope.allClipped = allClipped;\n}\nfunction isTransformChanged(m0, m1) {\n    if (m0 && m1) {\n        return m0[0] !== m1[0]\n            || m0[1] !== m1[1]\n            || m0[2] !== m1[2]\n            || m0[3] !== m1[3]\n            || m0[4] !== m1[4]\n            || m0[5] !== m1[5];\n    }\n    else if (!m0 && !m1) {\n        return false;\n    }\n    return true;\n}\nvar DRAW_TYPE_PATH = 1;\nvar DRAW_TYPE_IMAGE = 2;\nvar DRAW_TYPE_TEXT = 3;\nvar DRAW_TYPE_INCREMENTAL = 4;\nfunction canPathBatch(style) {\n    var hasFill = styleHasFill(style);\n    var hasStroke = styleHasStroke(style);\n    return !(style.lineDash\n        || !(+hasFill ^ +hasStroke)\n        || (hasFill && typeof style.fill !== 'string')\n        || (hasStroke && typeof style.stroke !== 'string')\n        || style.strokePercent < 1\n        || style.strokeOpacity < 1\n        || style.fillOpacity < 1);\n}\nfunction flushPathDrawn(ctx, scope) {\n    scope.batchFill && ctx.fill();\n    scope.batchStroke && ctx.stroke();\n    scope.batchFill = '';\n    scope.batchStroke = '';\n}\nfunction getStyle(el, inHover) {\n    return inHover ? (el.__hoverStyle || el.style) : el.style;\n}\nfunction brushSingle(ctx, el) {\n    brush(ctx, el, { inHover: false, viewWidth: 0, viewHeight: 0 }, true);\n}\nexports.brushSingle = brushSingle;\nfunction brush(ctx, el, scope, isLast) {\n    var m = el.transform;\n    if (!el.shouldBePainted(scope.viewWidth, scope.viewHeight, false, false)) {\n        el.__dirty &= ~Element_1[\"default\"].REDARAW_BIT;\n        el.__isRendered = false;\n        return;\n    }\n    var clipPaths = el.__clipPaths;\n    var prevElClipPaths = scope.prevElClipPaths;\n    var forceSetTransform = false;\n    var forceSetStyle = false;\n    if (!prevElClipPaths || helper_1.isClipPathChanged(clipPaths, prevElClipPaths)) {\n        if (prevElClipPaths && prevElClipPaths.length) {\n            flushPathDrawn(ctx, scope);\n            ctx.restore();\n            forceSetStyle = forceSetTransform = true;\n            scope.prevElClipPaths = null;\n            scope.allClipped = false;\n            scope.prevEl = null;\n        }\n        if (clipPaths && clipPaths.length) {\n            flushPathDrawn(ctx, scope);\n            ctx.save();\n            updateClipStatus(clipPaths, ctx, scope);\n            forceSetTransform = true;\n        }\n        scope.prevElClipPaths = clipPaths;\n    }\n    if (scope.allClipped) {\n        el.__isRendered = false;\n        return;\n    }\n    el.beforeBrush && el.beforeBrush();\n    el.innerBeforeBrush();\n    var prevEl = scope.prevEl;\n    if (!prevEl) {\n        forceSetStyle = forceSetTransform = true;\n    }\n    var canBatchPath = el instanceof Path_1[\"default\"]\n        && el.autoBatch\n        && canPathBatch(el.style);\n    if (forceSetTransform || isTransformChanged(m, prevEl.transform)) {\n        flushPathDrawn(ctx, scope);\n        setContextTransform(ctx, el);\n    }\n    else if (!canBatchPath) {\n        flushPathDrawn(ctx, scope);\n    }\n    var style = getStyle(el, scope.inHover);\n    if (el instanceof Path_1[\"default\"]) {\n        if (scope.lastDrawType !== DRAW_TYPE_PATH) {\n            forceSetStyle = true;\n            scope.lastDrawType = DRAW_TYPE_PATH;\n        }\n        bindPathAndTextCommonStyle(ctx, el, prevEl, forceSetStyle, scope);\n        if (!canBatchPath || (!scope.batchFill && !scope.batchStroke)) {\n            ctx.beginPath();\n        }\n        brushPath(ctx, el, style, canBatchPath);\n        if (canBatchPath) {\n            scope.batchFill = style.fill || '';\n            scope.batchStroke = style.stroke || '';\n        }\n    }\n    else {\n        if (el instanceof TSpan_1[\"default\"]) {\n            if (scope.lastDrawType !== DRAW_TYPE_TEXT) {\n                forceSetStyle = true;\n                scope.lastDrawType = DRAW_TYPE_TEXT;\n            }\n            bindPathAndTextCommonStyle(ctx, el, prevEl, forceSetStyle, scope);\n            brushText(ctx, el, style);\n        }\n        else if (el instanceof Image_1[\"default\"]) {\n            if (scope.lastDrawType !== DRAW_TYPE_IMAGE) {\n                forceSetStyle = true;\n                scope.lastDrawType = DRAW_TYPE_IMAGE;\n            }\n            bindImageStyle(ctx, el, prevEl, forceSetStyle, scope);\n            brushImage(ctx, el, style);\n        }\n        else if (el instanceof export_1.IncrementalDisplayable) {\n            if (scope.lastDrawType !== DRAW_TYPE_INCREMENTAL) {\n                forceSetStyle = true;\n                scope.lastDrawType = DRAW_TYPE_INCREMENTAL;\n            }\n            brushIncremental(ctx, el, scope);\n        }\n    }\n    if (canBatchPath && isLast) {\n        flushPathDrawn(ctx, scope);\n    }\n    el.innerAfterBrush();\n    el.afterBrush && el.afterBrush();\n    scope.prevEl = el;\n    el.__dirty = 0;\n    el.__isRendered = true;\n}\nexports.brush = brush;\nfunction brushIncremental(ctx, el, scope) {\n    var displayables = el.getDisplayables();\n    var temporalDisplayables = el.getTemporalDisplayables();\n    ctx.save();\n    var innerScope = {\n        prevElClipPaths: null,\n        prevEl: null,\n        allClipped: false,\n        viewWidth: scope.viewWidth,\n        viewHeight: scope.viewHeight,\n        inHover: scope.inHover\n    };\n    var i;\n    var len;\n    for (i = el.getCursor(), len = displayables.length; i < len; i++) {\n        var displayable = displayables[i];\n        displayable.beforeBrush && displayable.beforeBrush();\n        displayable.innerBeforeBrush();\n        brush(ctx, displayable, innerScope, i === len - 1);\n        displayable.innerAfterBrush();\n        displayable.afterBrush && displayable.afterBrush();\n        innerScope.prevEl = displayable;\n    }\n    for (var i_1 = 0, len_1 = temporalDisplayables.length; i_1 < len_1; i_1++) {\n        var displayable = temporalDisplayables[i_1];\n        displayable.beforeBrush && displayable.beforeBrush();\n        displayable.innerBeforeBrush();\n        brush(ctx, displayable, innerScope, i_1 === len_1 - 1);\n        displayable.innerAfterBrush();\n        displayable.afterBrush && displayable.afterBrush();\n        innerScope.prevEl = displayable;\n    }\n    el.clearTemporalDisplayables();\n    el.notClear = true;\n    ctx.restore();\n}\n"]},"metadata":{},"sourceType":"script"}