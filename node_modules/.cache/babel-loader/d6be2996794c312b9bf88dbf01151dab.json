{"ast":null,"code":"/**\n * 下划线转驼峰命名\n */\nexport var camelCase = function (name) {\n  return name.charAt(0).toUpperCase() + name.slice(1).replace(/-(\\w)/g, function (_, n) {\n    return n.toUpperCase();\n  });\n};\n/**\n * 获取对象差异\n * @param {source} object 原始对象\n * @param {target} object 目标对象\n */\n\nexport var checkChanged = function (source, target) {\n  return JSON.stringify(source) === JSON.stringify(target);\n};\n/**\n * 判断两数组是否完全相同\n * @param {source} [] 原数组\n * @param {target} [] 目标数组\n */\n\nexport var sameArray = function (source, target) {\n  return new Set(source.concat(target)).size === source.length;\n};\nexport var isType = function (value, type) {\n  var toString = {}.toString;\n  return toString.call(value) === '[object ' + type + ']';\n};\nexport var clone = function (source) {\n  if (!source) {\n    return source;\n  }\n\n  var target = {};\n\n  for (var k in source) {\n    target[k] = source[k];\n  }\n\n  return target;\n};\n/**\n * 存在时返回路径值，不存在时返回 undefined\n */\n\nexport var hasPath = function (source, path) {\n  var current = source;\n\n  for (var i = 0; i < path.length; i++) {\n    if (current[path[i]]) {\n      current = current[path[i]];\n    } else {\n      current = undefined;\n      break;\n    }\n  }\n\n  return current;\n}; // 路径设置，不考虑复杂情况\n\nexport var setPath = function (source, path, value) {\n  var o = source;\n  path.forEach(function (key, idx) {\n    // 不是最后一个\n    if (idx < path.length - 1) {\n      o = o[key];\n    } else {\n      o[key] = value;\n    }\n  });\n  return source;\n};","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/@ant-design/charts/es/util/utils.js"],"names":["camelCase","name","charAt","toUpperCase","slice","replace","_","n","checkChanged","source","target","JSON","stringify","sameArray","Set","concat","size","length","isType","value","type","toString","call","clone","k","hasPath","path","current","i","undefined","setPath","o","forEach","key","idx"],"mappings":"AAAA;AACA;AACA;AACA,OAAO,IAAIA,SAAS,GAAG,UAAUC,IAAV,EAAgB;AACnC,SAAOA,IAAI,CAACC,MAAL,CAAY,CAAZ,EAAeC,WAAf,KAA+BF,IAAI,CAACG,KAAL,CAAW,CAAX,EAAcC,OAAd,CAAsB,QAAtB,EAAgC,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAAE,WAAOA,CAAC,CAACJ,WAAF,EAAP;AAAyB,GAA3E,CAAtC;AACH,CAFM;AAGP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIK,YAAY,GAAG,UAAUC,MAAV,EAAkBC,MAAlB,EAA0B;AAChD,SAAOC,IAAI,CAACC,SAAL,CAAeH,MAAf,MAA2BE,IAAI,CAACC,SAAL,CAAeF,MAAf,CAAlC;AACH,CAFM;AAGP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIG,SAAS,GAAG,UAAUJ,MAAV,EAAkBC,MAAlB,EAA0B;AAC7C,SAAO,IAAII,GAAJ,CAAQL,MAAM,CAACM,MAAP,CAAcL,MAAd,CAAR,EAA+BM,IAA/B,KAAwCP,MAAM,CAACQ,MAAtD;AACH,CAFM;AAGP,OAAO,IAAIC,MAAM,GAAG,UAAUC,KAAV,EAAiBC,IAAjB,EAAuB;AACvC,MAAIC,QAAQ,GAAG,GAAGA,QAAlB;AACA,SAAOA,QAAQ,CAACC,IAAT,CAAcH,KAAd,MAAyB,aAAaC,IAAb,GAAoB,GAApD;AACH,CAHM;AAIP,OAAO,IAAIG,KAAK,GAAG,UAAUd,MAAV,EAAkB;AACjC,MAAI,CAACA,MAAL,EAAa;AACT,WAAOA,MAAP;AACH;;AACD,MAAIC,MAAM,GAAG,EAAb;;AACA,OAAK,IAAIc,CAAT,IAAcf,MAAd,EAAsB;AAClBC,IAAAA,MAAM,CAACc,CAAD,CAAN,GAAYf,MAAM,CAACe,CAAD,CAAlB;AACH;;AACD,SAAOd,MAAP;AACH,CATM;AAUP;AACA;AACA;;AACA,OAAO,IAAIe,OAAO,GAAG,UAAUhB,MAAV,EAAkBiB,IAAlB,EAAwB;AACzC,MAAIC,OAAO,GAAGlB,MAAd;;AACA,OAAK,IAAImB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACT,MAAzB,EAAiCW,CAAC,EAAlC,EAAsC;AAClC,QAAID,OAAO,CAACD,IAAI,CAACE,CAAD,CAAL,CAAX,EAAsB;AAClBD,MAAAA,OAAO,GAAGA,OAAO,CAACD,IAAI,CAACE,CAAD,CAAL,CAAjB;AACH,KAFD,MAGK;AACDD,MAAAA,OAAO,GAAGE,SAAV;AACA;AACH;AACJ;;AACD,SAAOF,OAAP;AACH,CAZM,C,CAaP;;AACA,OAAO,IAAIG,OAAO,GAAG,UAAUrB,MAAV,EAAkBiB,IAAlB,EAAwBP,KAAxB,EAA+B;AAChD,MAAIY,CAAC,GAAGtB,MAAR;AACAiB,EAAAA,IAAI,CAACM,OAAL,CAAa,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AAC7B;AACA,QAAIA,GAAG,GAAGR,IAAI,CAACT,MAAL,GAAc,CAAxB,EAA2B;AACvBc,MAAAA,CAAC,GAAGA,CAAC,CAACE,GAAD,CAAL;AACH,KAFD,MAGK;AACDF,MAAAA,CAAC,CAACE,GAAD,CAAD,GAASd,KAAT;AACH;AACJ,GARD;AASA,SAAOV,MAAP;AACH,CAZM","sourcesContent":["/**\n * 下划线转驼峰命名\n */\nexport var camelCase = function (name) {\n    return name.charAt(0).toUpperCase() + name.slice(1).replace(/-(\\w)/g, function (_, n) { return n.toUpperCase(); });\n};\n/**\n * 获取对象差异\n * @param {source} object 原始对象\n * @param {target} object 目标对象\n */\nexport var checkChanged = function (source, target) {\n    return JSON.stringify(source) === JSON.stringify(target);\n};\n/**\n * 判断两数组是否完全相同\n * @param {source} [] 原数组\n * @param {target} [] 目标数组\n */\nexport var sameArray = function (source, target) {\n    return new Set(source.concat(target)).size === source.length;\n};\nexport var isType = function (value, type) {\n    var toString = {}.toString;\n    return toString.call(value) === '[object ' + type + ']';\n};\nexport var clone = function (source) {\n    if (!source) {\n        return source;\n    }\n    var target = {};\n    for (var k in source) {\n        target[k] = source[k];\n    }\n    return target;\n};\n/**\n * 存在时返回路径值，不存在时返回 undefined\n */\nexport var hasPath = function (source, path) {\n    var current = source;\n    for (var i = 0; i < path.length; i++) {\n        if (current[path[i]]) {\n            current = current[path[i]];\n        }\n        else {\n            current = undefined;\n            break;\n        }\n    }\n    return current;\n};\n// 路径设置，不考虑复杂情况\nexport var setPath = function (source, path, value) {\n    var o = source;\n    path.forEach(function (key, idx) {\n        // 不是最后一个\n        if (idx < path.length - 1) {\n            o = o[key];\n        }\n        else {\n            o[key] = value;\n        }\n    });\n    return source;\n};\n"]},"metadata":{},"sourceType":"module"}