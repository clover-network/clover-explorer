{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { mix } from '@antv/util';\nimport Global from '../../global';\nimport Shape from '../shape'; // 菱形shape\n\nShape.registerNode('diamond', {\n  // 自定义节点时的配置\n  options: {\n    size: [80, 80],\n    style: {\n      stroke: Global.defaultNode.style.stroke,\n      fill: Global.defaultNode.style.fill,\n      lineWidth: Global.defaultNode.style.lineWidth\n    },\n    // 文本样式配置\n    labelCfg: {\n      style: {\n        fill: Global.nodeLabel.style.fill,\n        fontSize: Global.nodeLabel.style.fontSize\n      }\n    },\n    // 节点上左右上下四个方向上的链接circle配置\n    linkPoints: {\n      top: false,\n      right: false,\n      bottom: false,\n      left: false,\n      // circle的大小\n      size: Global.defaultNode.linkPoints.size,\n      lineWidth: Global.defaultNode.linkPoints.lineWidth,\n      fill: Global.defaultNode.linkPoints.fill,\n      stroke: Global.defaultNode.linkPoints.stroke\n    },\n    // 节点中icon配置\n    icon: {\n      // 是否显示icon，值为 false 则不渲染icon\n      show: false,\n      // icon的地址，字符串类型\n      img: 'https://gw.alipayobjects.com/zos/bmw-prod/5d015065-8505-4e7a-baec-976f81e3c41d.svg',\n      width: 20,\n      height: 20\n    },\n    stateStyles: __assign({}, Global.nodeStateStyles)\n  },\n  shapeType: 'diamond',\n  // 文本位置\n  labelPosition: 'center',\n  drawShape: function drawShape(cfg, group) {\n    var _a = this.getOptions(cfg).icon,\n        icon = _a === void 0 ? {} : _a;\n    var style = this.getShapeStyle(cfg);\n    var keyShape = group.addShape('path', {\n      attrs: style,\n      className: this.type + \"-keyShape\",\n      name: this.type + \"-keyShape\",\n      draggable: true\n    });\n    var w = icon.width,\n        h = icon.height,\n        show = icon.show;\n\n    if (show) {\n      var image = group.addShape('image', {\n        attrs: __assign({\n          x: -w / 2,\n          y: -h / 2\n        }, icon),\n        className: this.type + \"-icon\",\n        name: this.type + \"-icon\",\n        draggable: true\n      });\n    }\n\n    this.drawLinkPoints(cfg, group);\n    return keyShape;\n  },\n\n  /**\n   * 绘制节点上的LinkPoints\n   * @param {Object} cfg data数据配置项\n   * @param {Group} group Group实例\n   */\n  drawLinkPoints: function drawLinkPoints(cfg, group) {\n    var _a = this.getOptions(cfg).linkPoints,\n        linkPoints = _a === void 0 ? {} : _a;\n\n    var top = linkPoints.top,\n        left = linkPoints.left,\n        right = linkPoints.right,\n        bottom = linkPoints.bottom,\n        markSize = linkPoints.size,\n        markR = linkPoints.r,\n        markStyle = __rest(linkPoints, [\"top\", \"left\", \"right\", \"bottom\", \"size\", \"r\"]);\n\n    var size = this.getSize(cfg);\n    var width = size[0];\n    var height = size[1];\n\n    if (left) {\n      // left circle\n      group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: -width / 2,\n          y: 0,\n          r: markSize / 2 || markR || 5\n        }),\n        className: 'link-point-left',\n        name: 'link-point-left',\n        isAnchorPoint: true\n      });\n    }\n\n    if (right) {\n      // right circle\n      group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: width / 2,\n          y: 0,\n          r: markSize / 2 || markR || 5\n        }),\n        className: 'link-point-right',\n        name: 'link-point-right',\n        isAnchorPoint: true\n      });\n    }\n\n    if (top) {\n      // top circle\n      group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: 0,\n          y: -height / 2,\n          r: markSize / 2 || markR || 5\n        }),\n        className: 'link-point-top',\n        name: 'link-point-top',\n        isAnchorPoint: true\n      });\n    }\n\n    if (bottom) {\n      // bottom circle\n      group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: 0,\n          y: height / 2,\n          r: markSize / 2 || markR || 5\n        }),\n        className: 'link-point-bottom',\n        name: 'link-point-bottom',\n        isAnchorPoint: true\n      });\n    }\n  },\n  getPath: function getPath(cfg) {\n    var size = this.getSize(cfg);\n    var width = size[0];\n    var height = size[1];\n    var path = [['M', 0, -height / 2], ['L', width / 2, 0], ['L', 0, height / 2], ['L', -width / 2, 0], ['Z']];\n    return path;\n  },\n\n  /**\n   * 获取节点的样式，供基于该节点自定义时使用\n   * @param {Object} cfg 节点数据模型\n   * @return {Object} 节点的样式\n   */\n  getShapeStyle: function getShapeStyle(cfg) {\n    var defaultStyle = this.getOptions(cfg).style;\n    var strokeStyle = {\n      stroke: cfg.color\n    }; // 如果设置了color，则覆盖默认的stroke属性\n\n    var style = mix({}, defaultStyle, strokeStyle);\n    var path = this.getPath(cfg);\n\n    var styles = __assign({\n      path: path\n    }, style);\n\n    return styles;\n  },\n  update: function update(cfg, item) {\n    var group = item.getContainer(); // 这里不传 cfg 参数是因为 cfg.style 需要最后覆盖样式\n\n    var defaultStyle = this.getOptions({}).style;\n    var path = this.getPath(cfg); // 下面这些属性需要覆盖默认样式与目前样式，但若在 cfg 中有指定则应该被 cfg 的相应配置覆盖。\n\n    var strokeStyle = {\n      stroke: cfg.color,\n      path: path\n    }; // 与 getShapeStyle 不同在于，update 时需要获取到当前的 style 进行融合。即新传入的配置项中没有涉及的属性，保留当前的配置。\n\n    var keyShape = item.get('keyShape');\n    var style = mix({}, defaultStyle, keyShape.attr(), strokeStyle);\n    style = mix(style, cfg.style);\n    this.updateShape(cfg, item, style, true);\n    this.updateLinkPoints(cfg, group);\n  }\n}, 'single-node');","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/@antv/g6/es/shape/nodes/diamond.js"],"names":["__assign","__rest","mix","Global","Shape","registerNode","options","size","style","stroke","defaultNode","fill","lineWidth","labelCfg","nodeLabel","fontSize","linkPoints","top","right","bottom","left","icon","show","img","width","height","stateStyles","nodeStateStyles","shapeType","labelPosition","drawShape","cfg","group","_a","getOptions","getShapeStyle","keyShape","addShape","attrs","className","type","name","draggable","w","h","image","x","y","drawLinkPoints","markSize","markR","r","markStyle","getSize","isAnchorPoint","getPath","path","defaultStyle","strokeStyle","color","styles","update","item","getContainer","get","attr","updateShape","updateLinkPoints"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,MAAnB,QAAiC,OAAjC;AACA,SAASC,GAAT,QAAoB,YAApB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,KAAP,MAAkB,UAAlB,C,CAA8B;;AAE9BA,KAAK,CAACC,YAAN,CAAmB,SAAnB,EAA8B;AAC5B;AACAC,EAAAA,OAAO,EAAE;AACPC,IAAAA,IAAI,EAAE,CAAC,EAAD,EAAK,EAAL,CADC;AAEPC,IAAAA,KAAK,EAAE;AACLC,MAAAA,MAAM,EAAEN,MAAM,CAACO,WAAP,CAAmBF,KAAnB,CAAyBC,MAD5B;AAELE,MAAAA,IAAI,EAAER,MAAM,CAACO,WAAP,CAAmBF,KAAnB,CAAyBG,IAF1B;AAGLC,MAAAA,SAAS,EAAET,MAAM,CAACO,WAAP,CAAmBF,KAAnB,CAAyBI;AAH/B,KAFA;AAOP;AACAC,IAAAA,QAAQ,EAAE;AACRL,MAAAA,KAAK,EAAE;AACLG,QAAAA,IAAI,EAAER,MAAM,CAACW,SAAP,CAAiBN,KAAjB,CAAuBG,IADxB;AAELI,QAAAA,QAAQ,EAAEZ,MAAM,CAACW,SAAP,CAAiBN,KAAjB,CAAuBO;AAF5B;AADC,KARH;AAcP;AACAC,IAAAA,UAAU,EAAE;AACVC,MAAAA,GAAG,EAAE,KADK;AAEVC,MAAAA,KAAK,EAAE,KAFG;AAGVC,MAAAA,MAAM,EAAE,KAHE;AAIVC,MAAAA,IAAI,EAAE,KAJI;AAKV;AACAb,MAAAA,IAAI,EAAEJ,MAAM,CAACO,WAAP,CAAmBM,UAAnB,CAA8BT,IAN1B;AAOVK,MAAAA,SAAS,EAAET,MAAM,CAACO,WAAP,CAAmBM,UAAnB,CAA8BJ,SAP/B;AAQVD,MAAAA,IAAI,EAAER,MAAM,CAACO,WAAP,CAAmBM,UAAnB,CAA8BL,IAR1B;AASVF,MAAAA,MAAM,EAAEN,MAAM,CAACO,WAAP,CAAmBM,UAAnB,CAA8BP;AAT5B,KAfL;AA0BP;AACAY,IAAAA,IAAI,EAAE;AACJ;AACAC,MAAAA,IAAI,EAAE,KAFF;AAGJ;AACAC,MAAAA,GAAG,EAAE,oFAJD;AAKJC,MAAAA,KAAK,EAAE,EALH;AAMJC,MAAAA,MAAM,EAAE;AANJ,KA3BC;AAmCPC,IAAAA,WAAW,EAAE1B,QAAQ,CAAC,EAAD,EAAKG,MAAM,CAACwB,eAAZ;AAnCd,GAFmB;AAuC5BC,EAAAA,SAAS,EAAE,SAvCiB;AAwC5B;AACAC,EAAAA,aAAa,EAAE,QAzCa;AA0C5BC,EAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBC,GAAnB,EAAwBC,KAAxB,EAA+B;AACxC,QAAIC,EAAE,GAAG,KAAKC,UAAL,CAAgBH,GAAhB,EAAqBV,IAA9B;AAAA,QACIA,IAAI,GAAGY,EAAE,KAAK,KAAK,CAAZ,GAAgB,EAAhB,GAAqBA,EADhC;AAEA,QAAIzB,KAAK,GAAG,KAAK2B,aAAL,CAAmBJ,GAAnB,CAAZ;AACA,QAAIK,QAAQ,GAAGJ,KAAK,CAACK,QAAN,CAAe,MAAf,EAAuB;AACpCC,MAAAA,KAAK,EAAE9B,KAD6B;AAEpC+B,MAAAA,SAAS,EAAE,KAAKC,IAAL,GAAY,WAFa;AAGpCC,MAAAA,IAAI,EAAE,KAAKD,IAAL,GAAY,WAHkB;AAIpCE,MAAAA,SAAS,EAAE;AAJyB,KAAvB,CAAf;AAMA,QAAIC,CAAC,GAAGtB,IAAI,CAACG,KAAb;AAAA,QACIoB,CAAC,GAAGvB,IAAI,CAACI,MADb;AAAA,QAEIH,IAAI,GAAGD,IAAI,CAACC,IAFhB;;AAIA,QAAIA,IAAJ,EAAU;AACR,UAAIuB,KAAK,GAAGb,KAAK,CAACK,QAAN,CAAe,OAAf,EAAwB;AAClCC,QAAAA,KAAK,EAAEtC,QAAQ,CAAC;AACd8C,UAAAA,CAAC,EAAE,CAACH,CAAD,GAAK,CADM;AAEdI,UAAAA,CAAC,EAAE,CAACH,CAAD,GAAK;AAFM,SAAD,EAGZvB,IAHY,CADmB;AAKlCkB,QAAAA,SAAS,EAAE,KAAKC,IAAL,GAAY,OALW;AAMlCC,QAAAA,IAAI,EAAE,KAAKD,IAAL,GAAY,OANgB;AAOlCE,QAAAA,SAAS,EAAE;AAPuB,OAAxB,CAAZ;AASD;;AAED,SAAKM,cAAL,CAAoBjB,GAApB,EAAyBC,KAAzB;AACA,WAAOI,QAAP;AACD,GAtE2B;;AAwE5B;AACF;AACA;AACA;AACA;AACEY,EAAAA,cAAc,EAAE,SAASA,cAAT,CAAwBjB,GAAxB,EAA6BC,KAA7B,EAAoC;AAClD,QAAIC,EAAE,GAAG,KAAKC,UAAL,CAAgBH,GAAhB,EAAqBf,UAA9B;AAAA,QACIA,UAAU,GAAGiB,EAAE,KAAK,KAAK,CAAZ,GAAgB,EAAhB,GAAqBA,EADtC;;AAGA,QAAIhB,GAAG,GAAGD,UAAU,CAACC,GAArB;AAAA,QACIG,IAAI,GAAGJ,UAAU,CAACI,IADtB;AAAA,QAEIF,KAAK,GAAGF,UAAU,CAACE,KAFvB;AAAA,QAGIC,MAAM,GAAGH,UAAU,CAACG,MAHxB;AAAA,QAII8B,QAAQ,GAAGjC,UAAU,CAACT,IAJ1B;AAAA,QAKI2C,KAAK,GAAGlC,UAAU,CAACmC,CALvB;AAAA,QAMIC,SAAS,GAAGnD,MAAM,CAACe,UAAD,EAAa,CAAC,KAAD,EAAQ,MAAR,EAAgB,OAAhB,EAAyB,QAAzB,EAAmC,MAAnC,EAA2C,GAA3C,CAAb,CANtB;;AAQA,QAAIT,IAAI,GAAG,KAAK8C,OAAL,CAAatB,GAAb,CAAX;AACA,QAAIP,KAAK,GAAGjB,IAAI,CAAC,CAAD,CAAhB;AACA,QAAIkB,MAAM,GAAGlB,IAAI,CAAC,CAAD,CAAjB;;AAEA,QAAIa,IAAJ,EAAU;AACR;AACAY,MAAAA,KAAK,CAACK,QAAN,CAAe,QAAf,EAAyB;AACvBC,QAAAA,KAAK,EAAEtC,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKoD,SAAL,CAAT,EAA0B;AACvCN,UAAAA,CAAC,EAAE,CAACtB,KAAD,GAAS,CAD2B;AAEvCuB,UAAAA,CAAC,EAAE,CAFoC;AAGvCI,UAAAA,CAAC,EAAEF,QAAQ,GAAG,CAAX,IAAgBC,KAAhB,IAAyB;AAHW,SAA1B,CADQ;AAMvBX,QAAAA,SAAS,EAAE,iBANY;AAOvBE,QAAAA,IAAI,EAAE,iBAPiB;AAQvBa,QAAAA,aAAa,EAAE;AARQ,OAAzB;AAUD;;AAED,QAAIpC,KAAJ,EAAW;AACT;AACAc,MAAAA,KAAK,CAACK,QAAN,CAAe,QAAf,EAAyB;AACvBC,QAAAA,KAAK,EAAEtC,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKoD,SAAL,CAAT,EAA0B;AACvCN,UAAAA,CAAC,EAAEtB,KAAK,GAAG,CAD4B;AAEvCuB,UAAAA,CAAC,EAAE,CAFoC;AAGvCI,UAAAA,CAAC,EAAEF,QAAQ,GAAG,CAAX,IAAgBC,KAAhB,IAAyB;AAHW,SAA1B,CADQ;AAMvBX,QAAAA,SAAS,EAAE,kBANY;AAOvBE,QAAAA,IAAI,EAAE,kBAPiB;AAQvBa,QAAAA,aAAa,EAAE;AARQ,OAAzB;AAUD;;AAED,QAAIrC,GAAJ,EAAS;AACP;AACAe,MAAAA,KAAK,CAACK,QAAN,CAAe,QAAf,EAAyB;AACvBC,QAAAA,KAAK,EAAEtC,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKoD,SAAL,CAAT,EAA0B;AACvCN,UAAAA,CAAC,EAAE,CADoC;AAEvCC,UAAAA,CAAC,EAAE,CAACtB,MAAD,GAAU,CAF0B;AAGvC0B,UAAAA,CAAC,EAAEF,QAAQ,GAAG,CAAX,IAAgBC,KAAhB,IAAyB;AAHW,SAA1B,CADQ;AAMvBX,QAAAA,SAAS,EAAE,gBANY;AAOvBE,QAAAA,IAAI,EAAE,gBAPiB;AAQvBa,QAAAA,aAAa,EAAE;AARQ,OAAzB;AAUD;;AAED,QAAInC,MAAJ,EAAY;AACV;AACAa,MAAAA,KAAK,CAACK,QAAN,CAAe,QAAf,EAAyB;AACvBC,QAAAA,KAAK,EAAEtC,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKoD,SAAL,CAAT,EAA0B;AACvCN,UAAAA,CAAC,EAAE,CADoC;AAEvCC,UAAAA,CAAC,EAAEtB,MAAM,GAAG,CAF2B;AAGvC0B,UAAAA,CAAC,EAAEF,QAAQ,GAAG,CAAX,IAAgBC,KAAhB,IAAyB;AAHW,SAA1B,CADQ;AAMvBX,QAAAA,SAAS,EAAE,mBANY;AAOvBE,QAAAA,IAAI,EAAE,mBAPiB;AAQvBa,QAAAA,aAAa,EAAE;AARQ,OAAzB;AAUD;AACF,GApJ2B;AAqJ5BC,EAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBxB,GAAjB,EAAsB;AAC7B,QAAIxB,IAAI,GAAG,KAAK8C,OAAL,CAAatB,GAAb,CAAX;AACA,QAAIP,KAAK,GAAGjB,IAAI,CAAC,CAAD,CAAhB;AACA,QAAIkB,MAAM,GAAGlB,IAAI,CAAC,CAAD,CAAjB;AACA,QAAIiD,IAAI,GAAG,CAAC,CAAC,GAAD,EAAM,CAAN,EAAS,CAAC/B,MAAD,GAAU,CAAnB,CAAD,EAAwB,CAAC,GAAD,EAAMD,KAAK,GAAG,CAAd,EAAiB,CAAjB,CAAxB,EAA6C,CAAC,GAAD,EAAM,CAAN,EAASC,MAAM,GAAG,CAAlB,CAA7C,EAAmE,CAAC,GAAD,EAAM,CAACD,KAAD,GAAS,CAAf,EAAkB,CAAlB,CAAnE,EAAyF,CAAC,GAAD,CAAzF,CAAX;AACA,WAAOgC,IAAP;AACD,GA3J2B;;AA6J5B;AACF;AACA;AACA;AACA;AACErB,EAAAA,aAAa,EAAE,SAASA,aAAT,CAAuBJ,GAAvB,EAA4B;AACzC,QAAI0B,YAAY,GAAG,KAAKvB,UAAL,CAAgBH,GAAhB,EAAqBvB,KAAxC;AACA,QAAIkD,WAAW,GAAG;AAChBjD,MAAAA,MAAM,EAAEsB,GAAG,CAAC4B;AADI,KAAlB,CAFyC,CAItC;;AAEH,QAAInD,KAAK,GAAGN,GAAG,CAAC,EAAD,EAAKuD,YAAL,EAAmBC,WAAnB,CAAf;AACA,QAAIF,IAAI,GAAG,KAAKD,OAAL,CAAaxB,GAAb,CAAX;;AAEA,QAAI6B,MAAM,GAAG5D,QAAQ,CAAC;AACpBwD,MAAAA,IAAI,EAAEA;AADc,KAAD,EAElBhD,KAFkB,CAArB;;AAIA,WAAOoD,MAAP;AACD,GAhL2B;AAiL5BC,EAAAA,MAAM,EAAE,SAASA,MAAT,CAAgB9B,GAAhB,EAAqB+B,IAArB,EAA2B;AACjC,QAAI9B,KAAK,GAAG8B,IAAI,CAACC,YAAL,EAAZ,CADiC,CACA;;AAEjC,QAAIN,YAAY,GAAG,KAAKvB,UAAL,CAAgB,EAAhB,EAAoB1B,KAAvC;AACA,QAAIgD,IAAI,GAAG,KAAKD,OAAL,CAAaxB,GAAb,CAAX,CAJiC,CAIH;;AAE9B,QAAI2B,WAAW,GAAG;AAChBjD,MAAAA,MAAM,EAAEsB,GAAG,CAAC4B,KADI;AAEhBH,MAAAA,IAAI,EAAEA;AAFU,KAAlB,CANiC,CAS9B;;AAEH,QAAIpB,QAAQ,GAAG0B,IAAI,CAACE,GAAL,CAAS,UAAT,CAAf;AACA,QAAIxD,KAAK,GAAGN,GAAG,CAAC,EAAD,EAAKuD,YAAL,EAAmBrB,QAAQ,CAAC6B,IAAT,EAAnB,EAAoCP,WAApC,CAAf;AACAlD,IAAAA,KAAK,GAAGN,GAAG,CAACM,KAAD,EAAQuB,GAAG,CAACvB,KAAZ,CAAX;AACA,SAAK0D,WAAL,CAAiBnC,GAAjB,EAAsB+B,IAAtB,EAA4BtD,KAA5B,EAAmC,IAAnC;AACA,SAAK2D,gBAAL,CAAsBpC,GAAtB,EAA2BC,KAA3B;AACD;AAjM2B,CAA9B,EAkMG,aAlMH","sourcesContent":["import { __assign, __rest } from \"tslib\";\nimport { mix } from '@antv/util';\nimport Global from '../../global';\nimport Shape from '../shape'; // 菱形shape\n\nShape.registerNode('diamond', {\n  // 自定义节点时的配置\n  options: {\n    size: [80, 80],\n    style: {\n      stroke: Global.defaultNode.style.stroke,\n      fill: Global.defaultNode.style.fill,\n      lineWidth: Global.defaultNode.style.lineWidth\n    },\n    // 文本样式配置\n    labelCfg: {\n      style: {\n        fill: Global.nodeLabel.style.fill,\n        fontSize: Global.nodeLabel.style.fontSize\n      }\n    },\n    // 节点上左右上下四个方向上的链接circle配置\n    linkPoints: {\n      top: false,\n      right: false,\n      bottom: false,\n      left: false,\n      // circle的大小\n      size: Global.defaultNode.linkPoints.size,\n      lineWidth: Global.defaultNode.linkPoints.lineWidth,\n      fill: Global.defaultNode.linkPoints.fill,\n      stroke: Global.defaultNode.linkPoints.stroke\n    },\n    // 节点中icon配置\n    icon: {\n      // 是否显示icon，值为 false 则不渲染icon\n      show: false,\n      // icon的地址，字符串类型\n      img: 'https://gw.alipayobjects.com/zos/bmw-prod/5d015065-8505-4e7a-baec-976f81e3c41d.svg',\n      width: 20,\n      height: 20\n    },\n    stateStyles: __assign({}, Global.nodeStateStyles)\n  },\n  shapeType: 'diamond',\n  // 文本位置\n  labelPosition: 'center',\n  drawShape: function drawShape(cfg, group) {\n    var _a = this.getOptions(cfg).icon,\n        icon = _a === void 0 ? {} : _a;\n    var style = this.getShapeStyle(cfg);\n    var keyShape = group.addShape('path', {\n      attrs: style,\n      className: this.type + \"-keyShape\",\n      name: this.type + \"-keyShape\",\n      draggable: true\n    });\n    var w = icon.width,\n        h = icon.height,\n        show = icon.show;\n\n    if (show) {\n      var image = group.addShape('image', {\n        attrs: __assign({\n          x: -w / 2,\n          y: -h / 2\n        }, icon),\n        className: this.type + \"-icon\",\n        name: this.type + \"-icon\",\n        draggable: true\n      });\n    }\n\n    this.drawLinkPoints(cfg, group);\n    return keyShape;\n  },\n\n  /**\n   * 绘制节点上的LinkPoints\n   * @param {Object} cfg data数据配置项\n   * @param {Group} group Group实例\n   */\n  drawLinkPoints: function drawLinkPoints(cfg, group) {\n    var _a = this.getOptions(cfg).linkPoints,\n        linkPoints = _a === void 0 ? {} : _a;\n\n    var top = linkPoints.top,\n        left = linkPoints.left,\n        right = linkPoints.right,\n        bottom = linkPoints.bottom,\n        markSize = linkPoints.size,\n        markR = linkPoints.r,\n        markStyle = __rest(linkPoints, [\"top\", \"left\", \"right\", \"bottom\", \"size\", \"r\"]);\n\n    var size = this.getSize(cfg);\n    var width = size[0];\n    var height = size[1];\n\n    if (left) {\n      // left circle\n      group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: -width / 2,\n          y: 0,\n          r: markSize / 2 || markR || 5\n        }),\n        className: 'link-point-left',\n        name: 'link-point-left',\n        isAnchorPoint: true\n      });\n    }\n\n    if (right) {\n      // right circle\n      group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: width / 2,\n          y: 0,\n          r: markSize / 2 || markR || 5\n        }),\n        className: 'link-point-right',\n        name: 'link-point-right',\n        isAnchorPoint: true\n      });\n    }\n\n    if (top) {\n      // top circle\n      group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: 0,\n          y: -height / 2,\n          r: markSize / 2 || markR || 5\n        }),\n        className: 'link-point-top',\n        name: 'link-point-top',\n        isAnchorPoint: true\n      });\n    }\n\n    if (bottom) {\n      // bottom circle\n      group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: 0,\n          y: height / 2,\n          r: markSize / 2 || markR || 5\n        }),\n        className: 'link-point-bottom',\n        name: 'link-point-bottom',\n        isAnchorPoint: true\n      });\n    }\n  },\n  getPath: function getPath(cfg) {\n    var size = this.getSize(cfg);\n    var width = size[0];\n    var height = size[1];\n    var path = [['M', 0, -height / 2], ['L', width / 2, 0], ['L', 0, height / 2], ['L', -width / 2, 0], ['Z']];\n    return path;\n  },\n\n  /**\n   * 获取节点的样式，供基于该节点自定义时使用\n   * @param {Object} cfg 节点数据模型\n   * @return {Object} 节点的样式\n   */\n  getShapeStyle: function getShapeStyle(cfg) {\n    var defaultStyle = this.getOptions(cfg).style;\n    var strokeStyle = {\n      stroke: cfg.color\n    }; // 如果设置了color，则覆盖默认的stroke属性\n\n    var style = mix({}, defaultStyle, strokeStyle);\n    var path = this.getPath(cfg);\n\n    var styles = __assign({\n      path: path\n    }, style);\n\n    return styles;\n  },\n  update: function update(cfg, item) {\n    var group = item.getContainer(); // 这里不传 cfg 参数是因为 cfg.style 需要最后覆盖样式\n\n    var defaultStyle = this.getOptions({}).style;\n    var path = this.getPath(cfg); // 下面这些属性需要覆盖默认样式与目前样式，但若在 cfg 中有指定则应该被 cfg 的相应配置覆盖。\n\n    var strokeStyle = {\n      stroke: cfg.color,\n      path: path\n    }; // 与 getShapeStyle 不同在于，update 时需要获取到当前的 style 进行融合。即新传入的配置项中没有涉及的属性，保留当前的配置。\n\n    var keyShape = item.get('keyShape');\n    var style = mix({}, defaultStyle, keyShape.attr(), strokeStyle);\n    style = mix(style, cfg.style);\n    this.updateShape(cfg, item, style, true);\n    this.updateLinkPoints(cfg, group);\n  }\n}, 'single-node');"]},"metadata":{},"sourceType":"module"}