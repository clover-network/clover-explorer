{"ast":null,"code":"var util = require('../util');\n\nfunction secondWalk(node, options) {\n  var totalHeight = 0;\n\n  if (!node.children.length) {\n    totalHeight = node.height;\n  } else {\n    node.children.forEach(function (c) {\n      totalHeight += secondWalk(c, options);\n    });\n  }\n\n  node._subTreeSep = options.getSubTreeSep(node.data);\n  node.totalHeight = Math.max(node.height, totalHeight) + 2 * node._subTreeSep;\n  return node.totalHeight;\n}\n\nfunction thirdWalk(node) {\n  var children = node.children;\n  var len = children.length;\n\n  if (len) {\n    children.forEach(function (c) {\n      thirdWalk(c);\n    });\n    var first = children[0];\n    var last = children[len - 1];\n    var childrenHeight = last.y - first.y + last.height;\n    var childrenTotalHeight = 0;\n    children.forEach(function (child) {\n      childrenTotalHeight += child.totalHeight;\n    });\n\n    if (childrenHeight > node.height) {\n      // 当子节点总高度大于父节点高度\n      node.y = first.y + childrenHeight / 2 - node.height / 2;\n    } else if (children.length !== 1 || node.height > childrenTotalHeight) {\n      // 多于一个子节点或者父节点大于所有子节点的总高度\n      var offset = node.y + (node.height - childrenHeight) / 2 - first.y;\n      children.forEach(function (c) {\n        c.translate(0, offset);\n      });\n    } else {\n      // 只有一个子节点\n      node.y = (first.y + first.height / 2 + last.y + last.height / 2) / 2 - node.height / 2;\n    }\n  }\n}\n\nvar DEFAULT_OPTIONS = {\n  getSubTreeSep: function getSubTreeSep() {\n    return 0;\n  }\n};\n\nmodule.exports = function (root, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  options = util.assign({}, DEFAULT_OPTIONS, options);\n  root.parent = {\n    x: 0,\n    width: 0,\n    height: 0,\n    y: 0\n  }; // first walk\n\n  root.BFTraverse(function (node) {\n    node.x = node.parent.x + node.parent.width; // simply get x\n  });\n  root.parent = null; // second walk\n\n  secondWalk(root, options); // assign sub tree totalHeight\n  // adjusting\n  // separating nodes\n\n  root.startY = 0;\n  root.y = root.totalHeight / 2 - root.height / 2;\n  root.eachNode(function (node) {\n    var children = node.children;\n    var len = children.length;\n\n    if (len) {\n      var first = children[0];\n      first.startY = node.startY + node._subTreeSep;\n\n      if (len === 1) {\n        first.y = node.y + node.height / 2 - first.height / 2;\n      } else {\n        first.y = first.startY + first.totalHeight / 2 - first.height / 2;\n\n        for (var i = 1; i < len; i++) {\n          var c = children[i];\n          c.startY = children[i - 1].startY + children[i - 1].totalHeight;\n          c.y = c.startY + c.totalHeight / 2 - c.height / 2;\n        }\n      }\n    }\n  }); // third walk\n\n  thirdWalk(root);\n};","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/@antv/hierarchy/lib/layout/mindmap.js"],"names":["util","require","secondWalk","node","options","totalHeight","children","length","height","forEach","c","_subTreeSep","getSubTreeSep","data","Math","max","thirdWalk","len","first","last","childrenHeight","y","childrenTotalHeight","child","offset","translate","DEFAULT_OPTIONS","module","exports","root","assign","parent","x","width","BFTraverse","startY","eachNode","i"],"mappings":"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","sourcesContent":["var util = require('../util');\n\nfunction secondWalk(node, options) {\n  var totalHeight = 0;\n\n  if (!node.children.length) {\n    totalHeight = node.height;\n  } else {\n    node.children.forEach(function (c) {\n      totalHeight += secondWalk(c, options);\n    });\n  }\n\n  node._subTreeSep = options.getSubTreeSep(node.data);\n  node.totalHeight = Math.max(node.height, totalHeight) + 2 * node._subTreeSep;\n  return node.totalHeight;\n}\n\nfunction thirdWalk(node) {\n  var children = node.children;\n  var len = children.length;\n\n  if (len) {\n    children.forEach(function (c) {\n      thirdWalk(c);\n    });\n    var first = children[0];\n    var last = children[len - 1];\n    var childrenHeight = last.y - first.y + last.height;\n    var childrenTotalHeight = 0;\n    children.forEach(function (child) {\n      childrenTotalHeight += child.totalHeight;\n    });\n\n    if (childrenHeight > node.height) {\n      // 当子节点总高度大于父节点高度\n      node.y = first.y + childrenHeight / 2 - node.height / 2;\n    } else if (children.length !== 1 || node.height > childrenTotalHeight) {\n      // 多于一个子节点或者父节点大于所有子节点的总高度\n      var offset = node.y + (node.height - childrenHeight) / 2 - first.y;\n      children.forEach(function (c) {\n        c.translate(0, offset);\n      });\n    } else {\n      // 只有一个子节点\n      node.y = (first.y + first.height / 2 + last.y + last.height / 2) / 2 - node.height / 2;\n    }\n  }\n}\n\nvar DEFAULT_OPTIONS = {\n  getSubTreeSep: function getSubTreeSep() {\n    return 0;\n  }\n};\n\nmodule.exports = function (root, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  options = util.assign({}, DEFAULT_OPTIONS, options);\n  root.parent = {\n    x: 0,\n    width: 0,\n    height: 0,\n    y: 0\n  }; // first walk\n\n  root.BFTraverse(function (node) {\n    node.x = node.parent.x + node.parent.width; // simply get x\n  });\n  root.parent = null; // second walk\n\n  secondWalk(root, options); // assign sub tree totalHeight\n  // adjusting\n  // separating nodes\n\n  root.startY = 0;\n  root.y = root.totalHeight / 2 - root.height / 2;\n  root.eachNode(function (node) {\n    var children = node.children;\n    var len = children.length;\n\n    if (len) {\n      var first = children[0];\n      first.startY = node.startY + node._subTreeSep;\n\n      if (len === 1) {\n        first.y = node.y + node.height / 2 - first.height / 2;\n      } else {\n        first.y = first.startY + first.totalHeight / 2 - first.height / 2;\n\n        for (var i = 1; i < len; i++) {\n          var c = children[i];\n          c.startY = children[i - 1].startY + children[i - 1].totalHeight;\n          c.y = c.startY + c.totalHeight / 2 - c.height / 2;\n        }\n      }\n    }\n  }); // third walk\n\n  thirdWalk(root);\n};"]},"metadata":{},"sourceType":"script"}