{"ast":null,"code":"import { __assign, __extends, __spreadArrays } from \"tslib\";\nimport EventEmitter from '@antv/event-emitter';\nimport GCanvas from '@antv/g-canvas/lib/canvas';\nimport GSVGCanvas from '@antv/g-svg/lib/canvas';\nimport { mat3 } from '@antv/matrix-util/lib';\nimport { clone, deepMix, each, isPlainObject, isString, isNumber, groupBy } from '@antv/util';\nimport { getAllNodeInGroups } from '../util/group';\nimport { move } from '../util/math';\nimport Global from '../global';\nimport { CustomGroup, EventController, ItemController, LayoutController, ModeController, StateController, ViewController } from './controller';\nimport createDom from '@antv/dom-util/lib/create-dom';\nimport { plainCombosToTrees, traverseTree, reconstructTree, traverseTreeUp } from '../util/graphic';\nimport degree from '../algorithm/degree';\nimport Stack from '../algorithm/structs/stack';\nimport adjMatrix from '../algorithm/adjacent-matrix';\nimport floydWarshall from '../algorithm/floydWarshall';\nimport Hull from '../item/hull';\nvar NODE = 'node';\nvar SVG = 'svg';\n\nvar Graph =\n/** @class */\nfunction (_super) {\n  __extends(Graph, _super);\n\n  function Graph(cfg) {\n    var _this = _super.call(this) || this;\n\n    _this.cfg = deepMix(_this.getDefaultCfg(), cfg);\n\n    _this.init();\n\n    _this.animating = false;\n    _this.destroyed = false; // 启用 stack 后，实例化 undoStack 和 redoStack\n\n    if (_this.cfg.enabledStack) {\n      // 实例化 undo 和 redo 栈\n      _this.undoStack = new Stack(_this.cfg.maxStep);\n      _this.redoStack = new Stack(_this.cfg.maxStep);\n    }\n\n    return _this;\n  }\n\n  Graph.prototype.init = function () {\n    this.initCanvas(); // instance controller\n\n    var eventController = new EventController(this);\n    var viewController = new ViewController(this);\n    var modeController = new ModeController(this);\n    var itemController = new ItemController(this);\n    var layoutController = new LayoutController(this);\n    var stateController = new StateController(this);\n    var customGroupControll = new CustomGroup(this);\n    this.set({\n      eventController: eventController,\n      viewController: viewController,\n      modeController: modeController,\n      itemController: itemController,\n      layoutController: layoutController,\n      stateController: stateController,\n      customGroupControll: customGroupControll\n    });\n    this.initPlugin();\n  };\n\n  Graph.prototype.initCanvas = function () {\n    var container = this.get('container');\n\n    if (isString(container)) {\n      container = document.getElementById(container);\n      this.set('container', container);\n    }\n\n    if (!container) {\n      throw new Error('invalid container');\n    }\n\n    var width = this.get('width');\n    var height = this.get('height');\n    var renderer = this.get('renderer');\n    var canvas;\n\n    if (renderer === SVG) {\n      canvas = new GSVGCanvas({\n        container: container,\n        width: width,\n        height: height\n      });\n    } else {\n      var canvasCfg = {\n        container: container,\n        width: width,\n        height: height\n      };\n      var pixelRatio = this.get('pixelRatio');\n\n      if (pixelRatio) {\n        canvasCfg.pixelRatio = pixelRatio;\n      }\n\n      canvas = new GCanvas(canvasCfg);\n    }\n\n    this.set('canvas', canvas);\n    this.initGroups();\n  };\n\n  Graph.prototype.initPlugin = function () {\n    var self = this;\n    each(self.get('plugins'), function (plugin) {\n      if (!plugin.destroyed && plugin.initPlugin) {\n        plugin.initPlugin(self);\n      }\n    });\n  }; // 初始化所有 Group\n\n\n  Graph.prototype.initGroups = function () {\n    var canvas = this.get('canvas');\n    var el = this.get('canvas').get('el');\n    var id = el.id;\n    var group = canvas.addGroup({\n      id: id + \"-root\",\n      className: Global.rootContainerClassName\n    });\n\n    if (this.get('groupByTypes')) {\n      var edgeGroup = group.addGroup({\n        id: id + \"-edge\",\n        className: Global.edgeContainerClassName\n      });\n      var nodeGroup = group.addGroup({\n        id: id + \"-node\",\n        className: Global.nodeContainerClassName\n      });\n      var comboGroup = group.addGroup({\n        id: id + \"-combo\",\n        className: Global.comboContainerClassName\n      }); // 用于存储自定义的群组\n\n      var customGroup = group.addGroup({\n        id: id + \"-group\",\n        className: Global.customGroupContainerClassName\n      });\n      customGroup.toBack();\n      comboGroup.toBack();\n      this.set({\n        nodeGroup: nodeGroup,\n        edgeGroup: edgeGroup,\n        customGroup: customGroup,\n        comboGroup: comboGroup\n      });\n    }\n\n    var delegateGroup = group.addGroup({\n      id: id + \"-delegate\",\n      className: Global.delegateContainerClassName\n    });\n    this.set({\n      delegateGroup: delegateGroup\n    });\n    this.set('group', group);\n  }; // eslint-disable-next-line class-methods-use-this\n\n\n  Graph.prototype.getDefaultCfg = function () {\n    return {\n      /**\n       * Container could be dom object or dom id\n       */\n      container: undefined,\n\n      /**\n       * Canvas width\n       * unit pixel if undefined force fit width\n       */\n      width: undefined,\n\n      /**\n       * Canvas height\n       * unit pixel if undefined force fit height\n       */\n      height: undefined,\n\n      /**\n       * renderer canvas or svg\n       * @type {string}\n       */\n      renderer: 'canvas',\n\n      /**\n       * control graph behaviors\n       */\n      modes: {},\n\n      /**\n       * 注册插件\n       */\n      plugins: [],\n\n      /**\n       * source data\n       */\n      data: {},\n\n      /**\n       * Fit view padding (client scale)\n       */\n      fitViewPadding: 10,\n\n      /**\n       * Minimum scale size\n       */\n      minZoom: 0.2,\n\n      /**\n       * Maxmum scale size\n       */\n      maxZoom: 10,\n\n      /**\n       *  capture events\n       */\n      event: true,\n\n      /**\n       * group node & edges into different graphic groups\n       */\n      groupByTypes: true,\n\n      /**\n       * determine if it's a directed graph\n       */\n      directed: false,\n\n      /**\n       * when data or shape changed, should canvas draw automatically\n       */\n      autoPaint: true,\n\n      /**\n       * store all the node instances\n       */\n      nodes: [],\n\n      /**\n       * store all the edge instances\n       */\n      edges: [],\n\n      /**\n       * store all the combo instances\n       */\n      combos: [],\n\n      /**\n       * store all the edge instances which are virtual edges related to collapsed combo\n       */\n      vedges: [],\n\n      /**\n       * all the instances indexed by id\n       */\n      itemMap: {},\n\n      /**\n       * 边直接连接到节点的中心，不再考虑锚点\n       */\n      linkCenter: false,\n\n      /**\n       * 默认的节点配置，data 上定义的配置会覆盖这些配置。例如：\n       * defaultNode: {\n       *  type: 'rect',\n       *  size: [60, 40],\n       *  style: {\n       *    //... 样式配置项\n       *  }\n       * }\n       * 若数据项为 { id: 'node', x: 100, y: 100 }\n       * 实际创建的节点模型是 { id: 'node', x: 100, y: 100， type: 'rect', size: [60, 40] }\n       * 若数据项为 { id: 'node', x: 100, y: 100, type: 'circle' }\n       * 实际创建的节点模型是 { id: 'node', x: 100, y: 100， type: 'circle', size: [60, 40] }\n       */\n      defaultNode: {},\n\n      /**\n       * 默认边配置，data 上定义的配置会覆盖这些配置。用法同 defaultNode\n       */\n      defaultEdge: {},\n\n      /**\n       * 节点默认样式，也可以添加状态样式\n       * 例如：\n       * const graph = new G6.Graph({\n       *  nodeStateStyles: {\n       *    selected: { fill: '#ccc', stroke: '#666' },\n       *    active: { lineWidth: 2 }\n       *  },\n       *  ...\n       * });\n       *\n       */\n      nodeStateStyles: {},\n\n      /**\n       * 边默认样式，用法同nodeStateStyle\n       */\n      edgeStateStyles: {},\n\n      /**\n       * graph 状态\n       */\n      states: {},\n\n      /**\n       * 是否启用全局动画\n       */\n      animate: false,\n\n      /**\n       * 动画设置,仅在 animate 为 true 时有效\n       */\n      animateCfg: {\n        /**\n         * 帧回调函数，用于自定义节点运动路径，为空时线性运动\n         */\n        onFrame: undefined,\n\n        /**\n         * 动画时长(ms)\n         */\n        duration: 500,\n\n        /**\n         * 指定动画动效\n         */\n        easing: 'easeLinear'\n      },\n      callback: undefined,\n\n      /**\n       * group类型\n       */\n      groupType: 'circle',\n\n      /**\n       * group bbox 对象\n       * @private\n       */\n      groupBBoxs: {},\n\n      /**\n       * 以groupid分组的节点数据\n       * @private\n       */\n      groupNodes: {},\n\n      /**\n       * group 数据\n       */\n      groups: [],\n\n      /**\n       * group样式\n       */\n      groupStyle: {},\n      // 默认不启用 undo & redo 功能\n      enabledStack: false,\n      // 只有当 enabledStack 为 true 时才起作用\n      maxStep: 10,\n      // 存储图上的 tooltip dom，方便销毁\n      tooltips: []\n    };\n  };\n  /**\n   * 将值设置到 this.cfg 变量上面\n   * @param key 键 或 对象值\n   * @param val 值\n   */\n\n\n  Graph.prototype.set = function (key, val) {\n    if (isPlainObject(key)) {\n      this.cfg = __assign(__assign({}, this.cfg), key);\n    } else {\n      this.cfg[key] = val;\n    }\n\n    return this;\n  };\n  /**\n   * 获取 this.cfg 中的值\n   * @param key 键\n   */\n\n\n  Graph.prototype.get = function (key) {\n    return this.cfg[key];\n  };\n  /**\n   * 获取 graph 的根图形分组\n   * @return 根 group\n   */\n\n\n  Graph.prototype.getGroup = function () {\n    return this.get('group');\n  };\n  /**\n   * 获取 graph 的 DOM 容器\n   * @return DOM 容器\n   */\n\n\n  Graph.prototype.getContainer = function () {\n    return this.get('container');\n  };\n  /**\n   * 获取 graph 的最小缩放比例\n   * @return minZoom\n   */\n\n\n  Graph.prototype.getMinZoom = function () {\n    return this.get('minZoom');\n  };\n  /**\n   * 设置 graph 的最小缩放比例\n   * @return minZoom\n   */\n\n\n  Graph.prototype.setMinZoom = function (ratio) {\n    return this.set('minZoom', ratio);\n  };\n  /**\n   * 获取 graph 的最大缩放比例\n   * @param maxZoom\n   */\n\n\n  Graph.prototype.getMaxZoom = function () {\n    return this.get('maxZoom');\n  };\n  /**\n   * 设置 graph 的最大缩放比例\n   * @param maxZoom\n   */\n\n\n  Graph.prototype.setMaxZoom = function (ratio) {\n    return this.set('maxZoom', ratio);\n  };\n  /**\n   * 获取 graph 的宽度\n   * @return width\n   */\n\n\n  Graph.prototype.getWidth = function () {\n    return this.get('width');\n  };\n  /**\n   * 获取 graph 的高度\n   * @return width\n   */\n\n\n  Graph.prototype.getHeight = function () {\n    return this.get('height');\n  };\n  /**\n   * 清理元素多个状态\n   * @param {string|Item} item 元素id或元素实例\n   * @param {string[]} states 状态\n   */\n\n\n  Graph.prototype.clearItemStates = function (item, states) {\n    if (isString(item)) {\n      item = this.findById(item);\n    }\n\n    var itemController = this.get('itemController');\n\n    if (!states) {\n      states = item.get('states');\n    }\n\n    itemController.clearItemStates(item, states);\n    var stateController = this.get('stateController');\n    stateController.updateStates(item, states, false);\n  };\n  /**\n   * 设置各个节点样式，以及在各种状态下节点 keyShape 的样式。\n   * 若是自定义节点切在各种状态下\n   * graph.node(node => {\n   *  return {\n   *    type: 'rect',\n   *    label: node.id,\n   *    style: { fill: '#666' },\n   *    stateStyles: {\n   *       selected: { fill: 'blue' },\n   *       custom: { fill: 'green' }\n   *     }\n   *   }\n   * });\n   * @param {function} nodeFn 指定每个节点样式\n   */\n\n\n  Graph.prototype.node = function (nodeFn) {\n    if (typeof nodeFn === 'function') {\n      this.set('nodeMapper', nodeFn);\n    }\n  };\n  /**\n   * 设置各个边样式\n   * @param {function} edgeFn 指定每个边的样式,用法同 node\n   */\n\n\n  Graph.prototype.edge = function (edgeFn) {\n    if (typeof edgeFn === 'function') {\n      this.set('edgeMapper', edgeFn);\n    }\n  };\n  /**\n   * 设置各个 combo 的配置\n   * @param comboFn\n   */\n\n\n  Graph.prototype.combo = function (comboFn) {\n    if (typeof comboFn === 'function') {\n      this.set('comboMapper', comboFn);\n    }\n  };\n  /**\n   * 根据 ID 查询图元素实例\n   * @param id 图元素 ID\n   */\n\n\n  Graph.prototype.findById = function (id) {\n    return this.get('itemMap')[id];\n  };\n  /**\n   * 根据对应规则查找单个元素\n   * @param {ITEM_TYPE} type 元素类型(node | edge | group)\n   * @param {(item: T, index: number) => T} fn 指定规则\n   * @return {T} 元素实例\n   */\n\n\n  Graph.prototype.find = function (type, fn) {\n    var result;\n    var items = this.get(type + \"s\"); // eslint-disable-next-line consistent-return\n\n    each(items, function (item, i) {\n      if (fn(item, i)) {\n        result = item;\n        return result;\n      }\n    });\n    return result;\n  };\n  /**\n   * 查找所有满足规则的元素\n   * @param {string} type 元素类型(node|edge)\n   * @param {string} fn 指定规则\n   * @return {array} 元素实例\n   */\n\n\n  Graph.prototype.findAll = function (type, fn) {\n    var result = [];\n    each(this.get(type + \"s\"), function (item, i) {\n      if (fn(item, i)) {\n        result.push(item);\n      }\n    });\n    return result;\n  };\n  /**\n   * 查找所有处于指定状态的元素\n   * @param {string} type 元素类型(node|edge)\n   * @param {string} state 状态\n   * @return {object} 元素实例\n   */\n\n\n  Graph.prototype.findAllByState = function (type, state) {\n    return this.findAll(type, function (item) {\n      return item.hasState(state);\n    });\n  };\n  /**\n   * 平移画布\n   * @param dx 水平方向位移\n   * @param dy 垂直方向位移\n   */\n\n\n  Graph.prototype.translate = function (dx, dy) {\n    var group = this.get('group');\n    var matrix = clone(group.getMatrix());\n\n    if (!matrix) {\n      matrix = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n    }\n\n    mat3.translate(matrix, matrix, [dx, dy]);\n    group.setMatrix(matrix);\n    this.emit('viewportchange', {\n      action: 'translate',\n      matrix: group.getMatrix()\n    });\n    this.autoPaint();\n  };\n  /**\n   * 平移画布到某点\n   * @param {number} x 水平坐标\n   * @param {number} y 垂直坐标\n   */\n\n\n  Graph.prototype.moveTo = function (x, y) {\n    var group = this.get('group');\n    move(group, {\n      x: x,\n      y: y\n    });\n    this.emit('viewportchange', {\n      action: 'move',\n      matrix: group.getMatrix()\n    });\n  };\n  /**\n   * 调整视口适应视图\n   * @param {object} padding 四周围边距\n   */\n\n\n  Graph.prototype.fitView = function (padding) {\n    if (padding) {\n      this.set('fitViewPadding', padding);\n    }\n\n    var viewController = this.get('viewController');\n    viewController.fitView();\n    this.autoPaint();\n  };\n  /**\n   * 调整视口适应视图，不缩放，仅将图 bbox 中心对齐到画布中心\n   */\n\n\n  Graph.prototype.fitCenter = function () {\n    var viewController = this.get('viewController');\n    viewController.fitCenter();\n    this.autoPaint();\n  };\n  /**\n   * 新增行为\n   * @param {string | ModeOption | ModeType[]} behaviors 添加的行为\n   * @param {string | string[]} modes 添加到对应的模式\n   * @return {Graph} Graph\n   */\n\n\n  Graph.prototype.addBehaviors = function (behaviors, modes) {\n    var modeController = this.get('modeController');\n    modeController.manipulateBehaviors(behaviors, modes, true);\n    return this;\n  };\n  /**\n   * 移除行为\n   * @param {string | ModeOption | ModeType[]} behaviors 移除的行为\n   * @param {string | string[]} modes 从指定的模式中移除\n   * @return {Graph} Graph\n   */\n\n\n  Graph.prototype.removeBehaviors = function (behaviors, modes) {\n    var modeController = this.get('modeController');\n    modeController.manipulateBehaviors(behaviors, modes, false);\n    return this;\n  };\n  /**\n   * 伸缩窗口\n   * @param ratio 伸缩比例\n   * @param center 以center的x, y坐标为中心缩放\n   */\n\n\n  Graph.prototype.zoom = function (ratio, center) {\n    var group = this.get('group');\n    var matrix = clone(group.getMatrix());\n    var minZoom = this.get('minZoom');\n    var maxZoom = this.get('maxZoom');\n\n    if (!matrix) {\n      matrix = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n    }\n\n    if (center) {\n      mat3.translate(matrix, matrix, [-center.x, -center.y]);\n      mat3.scale(matrix, matrix, [ratio, ratio]);\n      mat3.translate(matrix, matrix, [center.x, center.y]);\n    } else {\n      mat3.scale(matrix, matrix, [ratio, ratio]);\n    }\n\n    if (minZoom && matrix[0] < minZoom || maxZoom && matrix[0] > maxZoom) {\n      return;\n    }\n\n    group.setMatrix(matrix);\n    this.emit('viewportchange', {\n      action: 'zoom',\n      matrix: matrix\n    });\n    this.autoPaint();\n  };\n  /**\n   * 伸缩视口到一固定比例\n   * @param {number} toRatio 伸缩比例\n   * @param {Point} center 以center的x, y坐标为中心缩放\n   */\n\n\n  Graph.prototype.zoomTo = function (toRatio, center) {\n    var ratio = toRatio / this.getZoom();\n    this.zoom(ratio, center);\n  };\n  /**\n   * 将元素移动到视口中心\n   * @param {Item} item 指定元素\n   * @param {boolean} animate 是否带有动画地移动\n   * @param {GraphAnimateConfig} animateCfg 若带有动画，动画的配置项\n   */\n\n\n  Graph.prototype.focusItem = function (item, animate, animateCfg) {\n    var viewController = this.get('viewController');\n    var isAnimate = false;\n    if (animate) isAnimate = true;else if (animate === undefined) isAnimate = this.get('animate');\n    var curAniamteCfg = {};\n    if (animateCfg) curAniamteCfg = animateCfg;else if (animateCfg === undefined) curAniamteCfg = this.get('animateCfg');\n    viewController.focus(item, isAnimate, curAniamteCfg);\n    this.autoPaint();\n  };\n  /**\n   * 自动重绘\n   * @internal 仅供内部更新机制调用，外部根据需求调用 render 或 paint 接口\n   */\n\n\n  Graph.prototype.autoPaint = function () {\n    if (this.get('autoPaint')) {\n      this.paint();\n    }\n  };\n  /**\n   * 仅画布重新绘制\n   */\n\n\n  Graph.prototype.paint = function () {\n    this.emit('beforepaint');\n    this.get('canvas').draw();\n    this.emit('afterpaint');\n  };\n  /**\n   * 将屏幕坐标转换为视口坐标\n   * @param {number} clientX 屏幕x坐标\n   * @param {number} clientY 屏幕y坐标\n   * @return {Point} 视口坐标\n   */\n\n\n  Graph.prototype.getPointByClient = function (clientX, clientY) {\n    var viewController = this.get('viewController');\n    return viewController.getPointByClient(clientX, clientY);\n  };\n  /**\n   * 将视口坐标转换为屏幕坐标\n   * @param {number} x 视口x坐标\n   * @param {number} y 视口y坐标\n   * @return {Point} 视口坐标\n   */\n\n\n  Graph.prototype.getClientByPoint = function (x, y) {\n    var viewController = this.get('viewController');\n    return viewController.getClientByPoint(x, y);\n  };\n  /**\n   * 将画布坐标转换为视口坐标\n   * @param {number} canvasX 画布 x 坐标\n   * @param {number} canvasY 画布 y 坐标\n   * @return {object} 视口坐标\n   */\n\n\n  Graph.prototype.getPointByCanvas = function (canvasX, canvasY) {\n    var viewController = this.get('viewController');\n    return viewController.getPointByCanvas(canvasX, canvasY);\n  };\n  /**\n   * 将视口坐标转换为画布坐标\n   * @param {number} x 视口 x 坐标\n   * @param {number} y 视口 y 坐标\n   * @return {object} 画布坐标\n   */\n\n\n  Graph.prototype.getCanvasByPoint = function (x, y) {\n    var viewController = this.get('viewController');\n    return viewController.getCanvasByPoint(x, y);\n  };\n  /**\n   * 显示元素\n   * @param {Item} item 指定元素\n   * @param {boolean} stack 本次操作是否入栈，默认为 true\n   */\n\n\n  Graph.prototype.showItem = function (item, stack) {\n    if (stack === void 0) {\n      stack = true;\n    }\n\n    var itemController = this.get('itemController');\n    var object = itemController.changeItemVisibility(item, true);\n\n    if (stack && this.get('enabledStack')) {\n      var id = object.getID();\n      var type = object.getType();\n      var before = {};\n      var after = {};\n\n      switch (type) {\n        case 'node':\n          before.nodes = [{\n            id: id,\n            visible: false\n          }];\n          after.nodes = [{\n            id: id,\n            visible: true\n          }];\n          break;\n\n        case 'edge':\n          before.nodes = [{\n            id: id,\n            visible: false\n          }];\n          after.edges = [{\n            id: id,\n            visible: true\n          }];\n          break;\n\n        case 'combo':\n          before.nodes = [{\n            id: id,\n            visible: false\n          }];\n          after.combos = [{\n            id: id,\n            visible: true\n          }];\n          break;\n\n        default:\n          break;\n      }\n\n      this.pushStack('visible', {\n        before: before,\n        after: after\n      });\n    }\n  };\n  /**\n   * 隐藏元素\n   * @param {Item} item 指定元素\n   * @param {boolean} stack 本次操作是否入栈，默认为 true\n   */\n\n\n  Graph.prototype.hideItem = function (item, stack) {\n    if (stack === void 0) {\n      stack = true;\n    }\n\n    var itemController = this.get('itemController');\n    var object = itemController.changeItemVisibility(item, false);\n\n    if (stack && this.get('enabledStack')) {\n      var id = object.getID();\n      var type = object.getType();\n      var before = {};\n      var after = {};\n\n      switch (type) {\n        case 'node':\n          before.nodes = [{\n            id: id,\n            visible: true\n          }];\n          after.nodes = [{\n            id: id,\n            visible: false\n          }];\n          break;\n\n        case 'edge':\n          before.nodes = [{\n            id: id,\n            visible: true\n          }];\n          after.edges = [{\n            id: id,\n            visible: false\n          }];\n          break;\n\n        case 'combo':\n          before.nodes = [{\n            id: id,\n            visible: true\n          }];\n          after.combos = [{\n            id: id,\n            visible: false\n          }];\n          break;\n\n        default:\n          break;\n      }\n\n      this.pushStack('visible', {\n        before: before,\n        after: after\n      });\n    }\n  };\n  /**\n   * 刷新元素\n   * @param {string|object} item 元素id或元素实例\n   */\n\n\n  Graph.prototype.refreshItem = function (item) {\n    var itemController = this.get('itemController');\n    itemController.refreshItem(item);\n  };\n  /**\n   * 设置是否在更新/刷新后自动重绘\n   * @param {boolean} auto 自动重绘\n   */\n\n\n  Graph.prototype.setAutoPaint = function (auto) {\n    var self = this;\n    self.set('autoPaint', auto);\n    var canvas = self.get('canvas');\n    canvas.set('autoDraw', auto);\n  };\n  /**\n   * 删除元素\n   * @param {Item} item 元素id或元素实例\n   * @param {boolean} stack 本次操作是否入栈，默认为 true\n   */\n\n\n  Graph.prototype.remove = function (item, stack) {\n    if (stack === void 0) {\n      stack = true;\n    }\n\n    this.removeItem(item, stack);\n  };\n  /**\n   * 删除元素\n   * @param {Item} item 元素id或元素实例\n   * @param {boolean} stack 本次操作是否入栈，默认为 true\n   */\n\n\n  Graph.prototype.removeItem = function (item, stack) {\n    if (stack === void 0) {\n      stack = true;\n    } // 如果item是字符串，且查询的节点实例不存在，则认为是删除group\n\n\n    var nodeItem = item;\n    if (isString(item)) nodeItem = this.findById(item);\n\n    if (!nodeItem && isString(item)) {\n      console.warn('The item to be removed does not exist!');\n      var customGroupControll = this.get('customGroupControll');\n      customGroupControll.remove(item);\n    } else if (nodeItem) {\n      var type = '';\n      if (nodeItem.getType) type = nodeItem.getType(); // 将删除的元素入栈\n\n      if (stack && this.get('enabledStack')) {\n        var deletedModel = __assign(__assign({}, nodeItem.getModel()), {\n          itemType: type\n        });\n\n        var before = {};\n\n        switch (type) {\n          case 'node':\n            {\n              before.nodes = [deletedModel];\n              before.edges = [];\n              var edges = nodeItem.getEdges();\n\n              for (var i = edges.length - 1; i >= 0; i--) {\n                before.edges.push(__assign(__assign({}, edges[i].getModel()), {\n                  itemType: 'edge'\n                }));\n              }\n\n              break;\n            }\n\n          case 'edge':\n            before.edges = [deletedModel];\n            break;\n\n          case 'combo':\n            before.combos = [deletedModel];\n            break;\n\n          default:\n            break;\n        }\n\n        this.pushStack('delete', {\n          before: before,\n          after: {}\n        });\n      }\n\n      var itemController = this.get('itemController');\n      itemController.removeItem(item);\n\n      if (type === 'combo') {\n        var newComboTrees = reconstructTree(this.get('comboTrees'));\n        this.set('comboTrees', newComboTrees);\n      }\n    }\n  };\n  /**\n   * 新增元素 或 节点分组\n   * @param {ITEM_TYPE} type 元素类型(node | edge | group)\n   * @param {ModelConfig} model 元素数据模型\n   * @param {boolean} stack 本次操作是否入栈，默认为 true\n   * @param {boolean} sortCombo 本次操作是否需要更新 combo 层级顺序，内部参数，用户在外部使用 addItem 时始终时需要更新\n   * @return {Item} 元素实例\n   */\n\n\n  Graph.prototype.addItem = function (type, model, stack, sortCombo) {\n    if (stack === void 0) {\n      stack = true;\n    }\n\n    if (sortCombo === void 0) {\n      sortCombo = true;\n    }\n\n    var currentComboSorted = this.get('comboSorted');\n    this.set('comboSorted', currentComboSorted && !sortCombo);\n    var itemController = this.get('itemController');\n\n    if (type === 'group') {\n      var groupId = model.groupId,\n          nodes = model.nodes,\n          groupType = model.type,\n          zIndex = model.zIndex,\n          title = model.title;\n      var groupTitle = title;\n\n      if (isString(title)) {\n        groupTitle = {\n          text: title\n        };\n      }\n\n      return this.get('customGroupControll').create(groupId, nodes, groupType, zIndex, true, groupTitle);\n    }\n\n    if (model.id && this.findById(model.id)) {\n      console.warn(\"This item exists already. Be sure the id %c\" + model.id + \"%c is unique.\", 'font-size: 20px; color: red;', '');\n      return;\n    }\n\n    var item;\n    var comboTrees = this.get('comboTrees');\n    if (!comboTrees) comboTrees = [];\n\n    if (type === 'combo') {\n      var itemMap_1 = this.get('itemMap');\n      var foundParent_1 = false;\n      comboTrees.forEach(function (ctree) {\n        if (foundParent_1) return; // terminate the forEach after the tree containing the item is done\n\n        traverseTreeUp(ctree, function (child) {\n          // find the parent\n          if (model.parentId === child.id) {\n            foundParent_1 = true;\n\n            var newCombo = __assign({\n              id: model.id,\n              depth: child.depth + 2\n            }, model);\n\n            if (child.children) child.children.push(newCombo);else child.children = [newCombo];\n            model.depth = newCombo.depth;\n            item = itemController.addItem(type, model);\n          }\n\n          var childItem = itemMap_1[child.id]; // after the parent is found, update all the ancestors\n\n          if (foundParent_1 && childItem && childItem.getType && childItem.getType() === 'combo') {\n            itemController.updateCombo(childItem, child.children);\n          }\n\n          return true;\n        });\n      }); // if the parent is not found, add it to the root\n\n      if (!foundParent_1) {\n        var newCombo = __assign({\n          id: model.id,\n          depth: 0\n        }, model);\n\n        model.depth = newCombo.depth;\n        comboTrees.push(newCombo);\n        item = itemController.addItem(type, model);\n      }\n\n      this.set('comboTrees', comboTrees);\n    } else if (type === 'node' && isString(model.comboId) && comboTrees) {\n      var parentCombo = this.findById(model.comboId);\n\n      if (parentCombo && parentCombo.getType && parentCombo.getType() !== 'combo') {\n        console.warn(\"'\" + model.comboId + \"' is a not id of a combo in the graph, the node will be added without combo.\");\n        return;\n      }\n\n      item = itemController.addItem(type, model);\n      var itemMap_2 = this.get('itemMap');\n      var foundParent_2 = false,\n          foundNode_1 = false;\n      (comboTrees || []).forEach(function (ctree) {\n        if (foundNode_1 || foundParent_2) return; // terminate the forEach\n\n        traverseTreeUp(ctree, function (child) {\n          if (child.id === model.id) {\n            // if the item exists in the tree already, terminate\n            foundNode_1 = true;\n            return false;\n          }\n\n          if (model.comboId === child.id && !foundNode_1) {\n            // found the parent, add the item to the children of its parent in the tree\n            foundParent_2 = true;\n            var cloneNode = clone(model);\n            cloneNode.itemType = 'node';\n            if (child.children) child.children.push(cloneNode);else child.children = [cloneNode];\n            model.depth = child.depth + 1;\n          } // update the size of all the ancestors\n\n\n          if (foundParent_2 && itemMap_2[child.id].getType && itemMap_2[child.id].getType() === 'combo') {\n            itemController.updateCombo(itemMap_2[child.id], child.children);\n          }\n\n          return true;\n        });\n      });\n    } else {\n      item = itemController.addItem(type, model);\n    }\n\n    if (type === 'node' && model.comboId || type === 'combo' && model.parentId) {\n      // add the combo to the parent's children array\n      var parentCombo = this.findById(model.comboId || model.parentId);\n      if (parentCombo) parentCombo.addChild(item);\n    }\n\n    var combos = this.get('combos');\n\n    if (combos && combos.length > 0) {\n      this.sortCombos();\n    }\n\n    this.autoPaint();\n\n    if (stack && this.get('enabledStack')) {\n      var addedModel = __assign(__assign({}, item.getModel()), {\n        itemType: type\n      });\n\n      var after = {};\n\n      switch (type) {\n        case 'node':\n          after.nodes = [addedModel];\n          break;\n\n        case 'edge':\n          after.edges = [addedModel];\n          break;\n\n        case 'combo':\n          after.combos = [addedModel];\n          break;\n\n        default:\n          break;\n      }\n\n      this.pushStack('add', {\n        before: {},\n        after: after\n      });\n    }\n\n    return item;\n  };\n  /**\n   * 新增元素 或 节点分组\n   * @param {ITEM_TYPE} type 元素类型(node | edge | group)\n   * @param {ModelConfig} model 元素数据模型\n   * @param {boolean} stack 本次操作是否入栈，默认为 true\n   * @return {Item} 元素实例\n   */\n\n\n  Graph.prototype.add = function (type, model, stack, sortCombo) {\n    if (stack === void 0) {\n      stack = true;\n    }\n\n    if (sortCombo === void 0) {\n      sortCombo = true;\n    }\n\n    return this.addItem(type, model, stack, sortCombo);\n  };\n  /**\n   * 更新元素\n   * @param {Item} item 元素id或元素实例\n   * @param {Partial<NodeConfig> | EdgeConfig} cfg 需要更新的数据\n   */\n\n\n  Graph.prototype.updateItem = function (item, cfg, stack) {\n    var _this = this;\n\n    if (stack === void 0) {\n      stack = true;\n    }\n\n    var itemController = this.get('itemController');\n    var currentItem;\n\n    if (isString(item)) {\n      currentItem = this.findById(item);\n    } else {\n      currentItem = item;\n    }\n\n    var UnupdateModel = clone(currentItem.getModel());\n    var type = '';\n    if (currentItem.getType) type = currentItem.getType();\n\n    var states = __spreadArrays(currentItem.getStates());\n\n    if (type === 'combo') {\n      each(states, function (state) {\n        return _this.setItemState(currentItem, state, false);\n      });\n    }\n\n    itemController.updateItem(currentItem, cfg);\n\n    if (type === 'combo') {\n      each(states, function (state) {\n        return _this.setItemState(currentItem, state, true);\n      });\n    }\n\n    if (stack && this.get('enabledStack')) {\n      var before = {\n        nodes: [],\n        edges: [],\n        combos: []\n      };\n      var after = {\n        nodes: [],\n        edges: [],\n        combos: []\n      };\n\n      var afterModel = __assign({\n        id: UnupdateModel.id\n      }, cfg);\n\n      switch (type) {\n        case 'node':\n          before.nodes.push(UnupdateModel);\n          after.nodes.push(afterModel);\n          break;\n\n        case 'edge':\n          before.edges.push(UnupdateModel);\n          after.edges.push(afterModel);\n          break;\n\n        case 'combo':\n          before.combos.push(UnupdateModel);\n          after.combos.push(afterModel);\n          break;\n\n        default:\n          break;\n      }\n\n      if (type === 'node') {\n        before.nodes.push(UnupdateModel);\n      }\n\n      this.pushStack('update', {\n        before: before,\n        after: after\n      });\n    }\n  };\n  /**\n   * 更新元素\n   * @param {Item} item 元素id或元素实例\n   * @param {Partial<NodeConfig> | EdgeConfig} cfg 需要更新的数据\n   * @param {boolean} stack 本次操作是否入栈，默认为 true\n   */\n\n\n  Graph.prototype.update = function (item, cfg, stack) {\n    if (stack === void 0) {\n      stack = true;\n    }\n\n    this.updateItem(item, cfg, stack);\n  };\n  /**\n   * 设置元素状态\n   * @param {Item} item 元素id或元素实例\n   * @param {string} state 状态名称\n   * @param {string | boolean} value 是否启用状态 或 状态值\n   */\n\n\n  Graph.prototype.setItemState = function (item, state, value) {\n    if (isString(item)) {\n      item = this.findById(item);\n    }\n\n    var itemController = this.get('itemController');\n    itemController.setItemState(item, state, value);\n    var stateController = this.get('stateController');\n\n    if (isString(value)) {\n      stateController.updateState(item, state + \":\" + value, true);\n    } else {\n      stateController.updateState(item, state, value);\n    }\n  };\n  /**\n   * 将指定状态的优先级提升为最高优先级\n   * @param {Item} item 元素id或元素实例\n   * @param state 状态名称\n   */\n\n\n  Graph.prototype.priorityState = function (item, state) {\n    var itemController = this.get('itemController');\n    itemController.priorityState(item, state);\n  };\n  /**\n   * 设置视图初始化数据\n   * @param {GraphData} data 初始化数据\n   */\n\n\n  Graph.prototype.data = function (data) {\n    this.set('data', data);\n  };\n  /**\n   * 根据data接口的数据渲染视图\n   */\n\n\n  Graph.prototype.render = function () {\n    var self = this;\n    this.set('comboSorted', false);\n    var data = this.get('data');\n\n    if (this.get('enabledStack')) {\n      // render 之前清空 redo 和 undo 栈\n      this.clearStack();\n    }\n\n    if (!data) {\n      throw new Error('data must be defined first');\n    }\n\n    var _a = data.nodes,\n        nodes = _a === void 0 ? [] : _a,\n        _b = data.edges,\n        edges = _b === void 0 ? [] : _b,\n        _c = data.combos,\n        combos = _c === void 0 ? [] : _c;\n    this.clear();\n    this.emit('beforerender');\n    each(nodes, function (node) {\n      self.add('node', node, false, false);\n    }); // process the data to tree structure\n\n    if (combos && combos.length !== 0) {\n      var comboTrees = plainCombosToTrees(combos, nodes);\n      this.set('comboTrees', comboTrees); // add combos\n\n      self.addCombos(combos);\n    }\n\n    each(edges, function (edge) {\n      self.add('edge', edge, false, false);\n    });\n    var animate = self.get('animate');\n\n    if (self.get('fitView') || self.get('fitCenter')) {\n      self.set('animate', false);\n    } // layout\n\n\n    var layoutController = self.get('layoutController');\n\n    if (!layoutController.layout(success)) {\n      success();\n    }\n\n    function success() {\n      if (self.get('fitView')) {\n        self.fitView();\n      } else if (self.get('fitCenter')) {\n        self.fitCenter();\n      }\n\n      self.autoPaint();\n      self.emit('afterrender');\n\n      if (self.get('fitView') || self.get('fitCenter')) {\n        self.set('animate', animate);\n      }\n    }\n\n    if (!this.get('groupByTypes')) {\n      if (combos && combos.length !== 0) {\n        this.sortCombos();\n      } else {\n        // 为提升性能，选择数量少的进行操作\n        if (data.nodes && data.edges && data.nodes.length < data.edges.length) {\n          var nodesArr = this.getNodes(); // 遍历节点实例，将所有节点提前。\n\n          nodesArr.forEach(function (node) {\n            node.toFront();\n          });\n        } else {\n          var edgesArr = this.getEdges(); // 遍历节点实例，将所有节点提前。\n\n          edgesArr.forEach(function (edge) {\n            edge.toBack();\n          });\n        }\n      }\n    } // 防止传入的数据不存在nodes\n\n\n    if (data.nodes) {\n      // 获取所有有groupID的node\n      var nodeInGroup = data.nodes.filter(function (node) {\n        return node.groupId;\n      }); // 所有node中存在groupID，则说明需要群组\n\n      if (nodeInGroup.length > 0) {\n        // 渲染群组\n        var groupType = self.get('groupType');\n        this.renderCustomGroup(data, groupType);\n      }\n    }\n\n    if (this.get('enabledStack')) {\n      this.pushStack('render');\n    }\n  };\n  /**\n   * 接收数据进行渲染\n   * @Param {Object} data 初始化数据\n   */\n\n\n  Graph.prototype.read = function (data) {\n    this.data(data);\n    this.render();\n  }; // 比较item\n\n\n  Graph.prototype.diffItems = function (type, items, models) {\n    var self = this;\n    var item;\n    var itemMap = this.get('itemMap');\n    each(models, function (model) {\n      item = itemMap[model.id];\n\n      if (item) {\n        if (self.get('animate') && type === NODE) {\n          var containerMatrix = item.getContainer().getMatrix();\n          if (!containerMatrix) containerMatrix = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n          item.set('originAttrs', {\n            x: containerMatrix[6],\n            y: containerMatrix[7]\n          });\n        }\n\n        self.updateItem(item, model, false);\n      } else {\n        item = self.addItem(type, model, false);\n      }\n\n      items[type + \"s\"].push(item);\n    });\n  };\n  /**\n   * 更改源数据，根据新数据重新渲染视图\n   * @param {GraphData | TreeGraphData} data 源数据\n   * @param {boolean} 是否入栈，默认为true\n   * @return {object} this\n   */\n\n\n  Graph.prototype.changeData = function (data, stack) {\n    if (stack === void 0) {\n      stack = true;\n    }\n\n    var self = this;\n\n    if (!data) {\n      return this;\n    }\n\n    if (stack && this.get('enabledStack')) {\n      this.pushStack('changedata', {\n        before: self.save(),\n        after: data\n      });\n    }\n\n    this.set('comboSorted', false); // 更改数据源后，取消所有状态\n\n    this.getNodes().map(function (node) {\n      return self.clearItemStates(node);\n    });\n    this.getEdges().map(function (edge) {\n      return self.clearItemStates(edge);\n    });\n    var canvas = this.get('canvas');\n    var localRefresh = canvas.get('localRefresh');\n    canvas.set('localRefresh', false);\n\n    if (!self.get('data')) {\n      self.data(data);\n      self.render();\n    }\n\n    var itemMap = this.get('itemMap');\n    var items = {\n      nodes: [],\n      edges: []\n    };\n    var combosData = data.combos;\n\n    if (combosData) {\n      var comboTrees = plainCombosToTrees(combosData, data.nodes);\n      this.set('comboTrees', comboTrees);\n    }\n\n    this.diffItems('node', items, data.nodes);\n    each(itemMap, function (item, id) {\n      itemMap[id].getModel().depth = 0;\n      if (item.getType && item.getType() === 'edge') return;\n\n      if (item.getType && item.getType() === 'combo') {\n        delete itemMap[id];\n        item.destroy();\n      } else if (items.nodes.indexOf(item) < 0) {\n        delete itemMap[id];\n        self.remove(item, false);\n      }\n    }); // clear the destroyed combos here to avoid removing sub nodes before removing the parent combo\n\n    var comboItems = this.getCombos();\n    var combosLength = comboItems.length;\n\n    for (var i = combosLength - 1; i >= 0; i--) {\n      if (comboItems[i].destroyed) {\n        comboItems.splice(i, 1);\n      }\n    } // process the data to tree structure\n\n\n    if (combosData) {\n      // add combos\n      self.addCombos(combosData);\n\n      if (!this.get('groupByTypes')) {\n        this.sortCombos();\n      }\n    }\n\n    this.diffItems('edge', items, data.edges);\n    each(itemMap, function (item, id) {\n      if (item.getType && (item.getType() === 'node' || item.getType() === 'combo')) return;\n\n      if (items.edges.indexOf(item) < 0) {\n        delete itemMap[id];\n        self.remove(item, false);\n      }\n    });\n    this.set({\n      nodes: items.nodes,\n      edges: items.edges\n    });\n    var layoutController = this.get('layoutController');\n    layoutController.changeData();\n\n    if (self.get('animate') && !layoutController.getLayoutType()) {\n      // 如果没有指定布局\n      self.positionsAnimate();\n    } else {\n      self.autoPaint();\n    }\n\n    setTimeout(function () {\n      canvas.set('localRefresh', localRefresh);\n    }, 16);\n    return this;\n  };\n  /**\n   * 私有方法，在 render 和 changeData 的时候批量添加数据中所有平铺的 combos\n   * @param {ComboConfig[]} combos 平铺的 combos 数据\n   */\n\n\n  Graph.prototype.addCombos = function (combos) {\n    var self = this;\n    var comboTrees = self.get('comboTrees');\n    var itemController = this.get('itemController');\n    itemController.addCombos(comboTrees, combos);\n  };\n  /**\n   * 根据已经存在的节点或 combo 创建新的 combo\n   * @param combo combo ID 或 Combo 配置\n   * @param children 添加到 Combo 中的元素，包括节点和 combo\n   */\n\n\n  Graph.prototype.createCombo = function (combo, children) {\n    var _this = this;\n\n    this.set('comboSorted', false); // step 1: 创建新的 Combo\n\n    var comboId = '';\n    var comboConfig;\n    if (!combo) return;\n\n    if (isString(combo)) {\n      comboId = combo;\n      comboConfig = {\n        id: combo\n      };\n    } else {\n      comboId = combo.id;\n\n      if (!comboId) {\n        console.warn('Create combo failed. Please assign a unique string id for the adding combo.');\n        return;\n      }\n\n      comboConfig = combo;\n    }\n\n    var trees = children.map(function (elementId) {\n      var item = _this.findById(elementId);\n\n      var type = '';\n      if (item.getType) type = item.getType();\n      var cItem = {\n        id: item.getID(),\n        itemType: type\n      };\n\n      if (type === 'combo') {\n        cItem.parentId = comboId;\n      } else if (type === 'node') {\n        cItem.comboId = comboId;\n      }\n\n      return cItem;\n    });\n    comboConfig.children = trees; // step 2: 添加 Combo，addItem 时会将子将元素添加到 Combo 中\n\n    this.addItem('combo', comboConfig, false);\n    this.set('comboSorted', false); // step3: 更新 comboTrees 结构\n\n    var comboTrees = this.get('comboTrees');\n    (comboTrees || []).forEach(function (ctree) {\n      traverseTreeUp(ctree, function (child) {\n        if (child.id === comboId) {\n          child.itemType = 'combo';\n          child.children = trees;\n          return false;\n        }\n\n        return true;\n      });\n    });\n\n    if (comboTrees) {\n      this.sortCombos();\n    }\n  };\n  /**\n   * 解散 combo\n   * @param {String | INode | ICombo} combo 需要被解散的 Combo item 或 id\n   */\n\n\n  Graph.prototype.uncombo = function (combo) {\n    var _this = this;\n\n    var _a;\n\n    var self = this;\n    var comboItem = combo;\n\n    if (isString(combo)) {\n      comboItem = this.findById(combo);\n    }\n\n    if (!comboItem || comboItem.getType && comboItem.getType() !== 'combo') {\n      console.warn('The item is not a combo!');\n      return;\n    }\n\n    var parentId = comboItem.getModel().parentId;\n    var comboTrees = self.get('comboTrees');\n    if (!comboTrees) comboTrees = [];\n    var itemMap = this.get('itemMap');\n    var comboId = comboItem.get('id');\n    var treeToBeUncombo;\n    var brothers = [];\n    var comboItems = this.get('combos');\n    var parentItem = this.findById(parentId);\n    comboTrees.forEach(function (ctree) {\n      if (treeToBeUncombo) return; // terminate the forEach\n\n      traverseTreeUp(ctree, function (subtree) {\n        var _a; // find the combo to be uncomboed, delete the combo from map and cache\n\n\n        if (subtree.id === comboId) {\n          treeToBeUncombo = subtree; // delete the related edges\n\n          var edges = comboItem.getEdges();\n          edges.forEach(function (edge) {\n            _this.removeItem(edge, false);\n          });\n          var index = comboItems.indexOf(combo);\n          comboItems.splice(index, 1);\n          delete itemMap[comboId];\n          comboItem.destroy();\n        } // find the parent to remove the combo from the combo's brothers array and add the combo's children to the combo's brothers array in the tree\n\n\n        if (parentId && treeToBeUncombo && subtree.id === parentId) {\n          parentItem.removeCombo(comboItem);\n          brothers = subtree.children; // the combo's brothers\n          // remove the combo from its brothers array\n\n          var index = brothers.indexOf(treeToBeUncombo);\n\n          if (index !== -1) {\n            brothers.splice(index, 1);\n          } // append the combo's children to the combo's brothers array\n\n\n          (_a = treeToBeUncombo.children) === null || _a === void 0 ? void 0 : _a.forEach(function (child) {\n            var item = _this.findById(child.id);\n\n            var childModel = item.getModel();\n\n            if (item.getType && item.getType() === 'combo') {\n              child.parentId = parentId;\n              delete child.comboId;\n              childModel.parentId = parentId; // update the parentId of the model\n\n              delete childModel.comboId;\n            } else if (item.getType && item.getType() === 'node') {\n              child.comboId = parentId;\n              childModel.comboId = parentId; // update the parentId of the model\n            }\n\n            parentItem.addChild(item);\n            brothers.push(child);\n          });\n          return false;\n        }\n\n        return true;\n      });\n    }); // if the parentId is not found, remove the combo from the roots\n\n    if (!parentId && treeToBeUncombo) {\n      var index = comboTrees.indexOf(treeToBeUncombo);\n      comboTrees.splice(index, 1); // modify the parentId of the children\n\n      (_a = treeToBeUncombo.children) === null || _a === void 0 ? void 0 : _a.forEach(function (child) {\n        child.parentId = undefined;\n\n        var childModel = _this.findById(child.id).getModel();\n\n        childModel.parentId = undefined; // update the parentId of the model\n\n        if (child.itemType !== 'node') comboTrees.push(child);\n      });\n    }\n  };\n  /**\n   * 根据节点的 bbox 更新所有 combos 的绘制，包括 combos 的位置和范围\n   */\n\n\n  Graph.prototype.updateCombos = function () {\n    var _this = this;\n\n    var self = this;\n    var comboTrees = this.get('comboTrees');\n    var itemController = self.get('itemController');\n    var itemMap = self.get('itemMap');\n    (comboTrees || []).forEach(function (ctree) {\n      traverseTreeUp(ctree, function (child) {\n        if (!child) {\n          return true;\n        }\n\n        var childItem = itemMap[child.id];\n\n        if (childItem && childItem.getType && childItem.getType() === 'combo') {\n          // 更新具体的 Combo 之前先清除所有的已有状态，以免将 state 中的样式更新为 Combo 的样式\n          var states = __spreadArrays(childItem.getStates());\n\n          each(states, function (state) {\n            return _this.setItemState(childItem, state, false);\n          }); // 更新具体的 Combo\n\n          itemController.updateCombo(childItem, child.children); // 更新 Combo 后，还原已有的状态\n\n          each(states, function (state) {\n            return _this.setItemState(childItem, state, true);\n          });\n        }\n\n        return true;\n      });\n    });\n    self.sortCombos();\n  };\n  /**\n   * 根据节点的 bbox 更新 combo 及其祖先 combos 的绘制，包括 combos 的位置和范围\n   * @param {String | ICombo} combo 需要被更新的 Combo 或 id，若指定，则该 Combo 及所有祖先 Combod 都会被更新\n   */\n\n\n  Graph.prototype.updateCombo = function (combo) {\n    var _this = this;\n\n    var self = this;\n    var comboItem = combo;\n    var comboId;\n\n    if (isString(combo)) {\n      comboItem = this.findById(combo);\n    }\n\n    if (!comboItem || comboItem.getType && comboItem.getType() !== 'combo') {\n      console.warn('The item to be updated is not a combo!');\n      return;\n    }\n\n    comboId = comboItem.get('id');\n    var comboTrees = this.get('comboTrees');\n    var itemController = self.get('itemController');\n    var itemMap = self.get('itemMap');\n    (comboTrees || []).forEach(function (ctree) {\n      traverseTreeUp(ctree, function (child) {\n        if (!child) {\n          return true;\n        }\n\n        var childItem = itemMap[child.id];\n\n        if (comboId === child.id && childItem && childItem.getType && childItem.getType() === 'combo') {\n          // 更新具体的 Combo 之前先清除所有的已有状态，以免将 state 中的样式更新为 Combo 的样式\n          var states = __spreadArrays(childItem.getStates()); // || !item.getStateStyle(stateName)\n\n\n          each(states, function (state) {\n            if (childItem.getStateStyle(state)) {\n              _this.setItemState(childItem, state, false);\n            }\n          }); // 更新具体的 Combo\n\n          itemController.updateCombo(childItem, child.children); // 更新 Combo 后，还原已有的状态\n\n          each(states, function (state) {\n            if (childItem.getStateStyle(state)) {\n              _this.setItemState(childItem, state, true);\n            }\n          });\n          if (comboId) comboId = child.parentId;\n        }\n\n        return true;\n      });\n    });\n  };\n  /**\n   * 更新树结构，例如移动子树等\n   * @param {String | INode | ICombo} item 需要被更新的 Combo 或 节点 id\n   * @param {string | undefined} parentId 新的父 combo id，undefined 代表没有父 combo\n   */\n\n\n  Graph.prototype.updateComboTree = function (item, parentId) {\n    var self = this;\n    this.set('comboSorted', false);\n    var uItem;\n\n    if (isString(item)) {\n      uItem = self.findById(item);\n    } else {\n      uItem = item;\n    }\n\n    var model = uItem.getModel();\n    var oldParentId = model.comboId || model.parentId; // 若 item 是 Combo，且 parentId 是其子孙 combo 的 id，则警告并终止\n\n    if (parentId && uItem.getType && uItem.getType() === 'combo') {\n      var comboTrees = this.get('comboTrees');\n      var valid_1 = true;\n      var itemSubTree_1;\n      (comboTrees || []).forEach(function (ctree) {\n        if (itemSubTree_1) return;\n        traverseTree(ctree, function (subTree) {\n          if (itemSubTree_1) return; // 找到从 item 开始的子树\n\n          if (subTree.id === uItem.getID()) {\n            itemSubTree_1 = subTree;\n          }\n\n          return true;\n        });\n      }); // 在以 item 为根的子树中寻找与 parentId 相同的后继元素\n\n      traverseTree(itemSubTree_1, function (subTree) {\n        if (subTree.id === parentId) {\n          valid_1 = false;\n          return false;\n        }\n\n        return true;\n      }); // parentId 是 item 的一个后继元素，不能进行更新\n\n      if (!valid_1) {\n        console.warn('Failed to update the combo tree! The parentId points to a descendant of the combo!');\n        return;\n      }\n    } // 当 combo 存在parentId 或 comboId 时，才将其移除\n\n\n    if (model.parentId || model.comboId) {\n      var combo = this.findById(model.parentId || model.comboId);\n\n      if (combo) {\n        combo.removeChild(uItem);\n      }\n    }\n\n    var type = '';\n    if (uItem.getType) type = uItem.getType();\n\n    if (type === 'combo') {\n      model.parentId = parentId;\n    } else if (type === 'node') {\n      model.comboId = parentId;\n    } // 只有当移入到指定 combo 时才添加\n\n\n    if (parentId) {\n      var parentCombo = this.findById(parentId);\n\n      if (parentCombo) {\n        // 将元素添加到 parentCombo 中\n        parentCombo.addChild(uItem);\n      }\n    } // 如果原先有父亲 combo，则从原父 combo 的子元素数组中删除\n\n\n    if (oldParentId) {\n      var parentCombo = this.findById(oldParentId);\n\n      if (parentCombo) {\n        // 将元素从 parentCombo 中移除\n        parentCombo.removeChild(uItem);\n      }\n    }\n\n    var newComboTrees = reconstructTree(this.get('comboTrees'), model.id, parentId);\n    this.set('comboTrees', newComboTrees);\n    this.updateCombos();\n  };\n  /**\n   * 根据数据渲染群组\n   * @param {GraphData} data 渲染图的数据\n   * @param {string} groupType group类型\n   */\n\n\n  Graph.prototype.renderCustomGroup = function (data, groupType) {\n    var _this = this;\n\n    var groups = data.groups,\n        _a = data.nodes,\n        nodes = _a === void 0 ? [] : _a; // 第一种情况，，不存在groups，则不存在嵌套群组\n\n    var groupIndex = 10;\n\n    if (!groups) {\n      // 存在单个群组\n      // 获取所有有groupID的node\n      var nodeInGroup = nodes.filter(function (node) {\n        return node.groupId;\n      });\n      var groupsArr_1 = []; // 根据groupID分组\n\n      var groupIds_1 = groupBy(nodeInGroup, 'groupId'); // tslint:disable-next-line:forin\n\n      Object.keys(groupIds_1).forEach(function (groupId) {\n        var nodeIds = groupIds_1[groupId].map(function (node) {\n          return node.id;\n        });\n\n        _this.get('customGroupControll').create(groupId, nodeIds, groupType, groupIndex);\n\n        groupIndex--; // 获取所有不重复的 groupId\n\n        if (!groupsArr_1.find(function (d) {\n          return d.id === groupId;\n        })) {\n          groupsArr_1.push({\n            id: groupId\n          });\n        }\n      });\n      this.set({\n        groups: groupsArr_1\n      });\n    } else {\n      // 将groups的数据存到groups中\n      this.set({\n        groups: groups\n      }); // 第二种情况，存在嵌套的群组，数据中有groups字段\n\n      var groupNodes_1 = getAllNodeInGroups(data); // tslint:disable-next-line:forin\n\n      Object.keys(groupNodes_1).forEach(function (groupId) {\n        var tmpNodes = groupNodes_1[groupId];\n\n        _this.get('customGroupControll').create(groupId, tmpNodes, groupType, groupIndex);\n\n        groupIndex--;\n      }); // 对所有Group排序\n\n      var customGroup = this.get('customGroup');\n      customGroup.sort();\n    }\n  };\n  /**\n   * 导出图数据\n   * @return {object} data\n   */\n\n\n  Graph.prototype.save = function () {\n    var nodes = [];\n    var edges = [];\n    var combos = [];\n    each(this.get('nodes'), function (node) {\n      nodes.push(node.getModel());\n    });\n    each(this.get('edges'), function (edge) {\n      edges.push(edge.getModel());\n    });\n    each(this.get('combos'), function (combo) {\n      combos.push(combo.getModel());\n    });\n    return {\n      nodes: nodes,\n      edges: edges,\n      combos: combos,\n      groups: this.get('groups')\n    };\n  };\n  /**\n   * 改变画布大小\n   * @param  {number} width  画布宽度\n   * @param  {number} height 画布高度\n   * @return {object} this\n   */\n\n\n  Graph.prototype.changeSize = function (width, height) {\n    var viewController = this.get('viewController');\n    viewController.changeSize(width, height);\n    return this;\n  };\n  /**\n   * 当源数据在外部发生变更时，根据新数据刷新视图。但是不刷新节点位置\n   */\n\n\n  Graph.prototype.refresh = function () {\n    var self = this;\n    self.emit('beforegraphrefresh');\n\n    if (self.get('animate')) {\n      self.positionsAnimate();\n    } else {\n      var nodes = self.get('nodes');\n      var edges = self.get('edges');\n      var vedges = self.get('edges');\n      each(nodes, function (node) {\n        node.refresh();\n      });\n      each(edges, function (edge) {\n        edge.refresh();\n      });\n      each(vedges, function (vedge) {\n        vedge.refresh();\n      });\n    }\n\n    self.emit('aftergraphrefresh');\n    self.autoPaint();\n  };\n  /**\n   * 获取当前图中所有节点的item实例\n   * @return {INode} item数组\n   */\n\n\n  Graph.prototype.getNodes = function () {\n    return this.get('nodes');\n  };\n  /**\n   * 获取当前图中所有边的item实例\n   * @return {IEdge} item数组\n   */\n\n\n  Graph.prototype.getEdges = function () {\n    return this.get('edges');\n  };\n  /**\n   * 获取图中所有的 combo 实例\n   */\n\n\n  Graph.prototype.getCombos = function () {\n    return this.get('combos');\n  };\n  /**\n   * 获取指定 Combo 中所有的节点\n   * @param comboId combo ID\n   */\n\n\n  Graph.prototype.getComboChildren = function (combo) {\n    if (isString(combo)) {\n      combo = this.findById(combo);\n    }\n\n    if (!combo || combo.getType && combo.getType() !== 'combo') {\n      console.warn('The combo does not exist!');\n      return;\n    }\n\n    return combo.getChildren();\n  };\n  /**\n   * 根据 graph 上的 animateCfg 进行视图中节点位置动画接口\n   */\n\n\n  Graph.prototype.positionsAnimate = function () {\n    var self = this;\n    self.emit('beforeanimate');\n    var animateCfg = self.get('animateCfg');\n    var onFrame = animateCfg.onFrame;\n    var nodes = self.getNodes();\n    var toNodes = nodes.map(function (node) {\n      var model = node.getModel();\n      return {\n        id: model.id,\n        x: model.x,\n        y: model.y\n      };\n    });\n\n    if (self.isAnimating()) {\n      self.stopAnimate();\n    }\n\n    var canvas = self.get('canvas');\n    canvas.animate(function (ratio) {\n      each(toNodes, function (data) {\n        var node = self.findById(data.id);\n\n        if (!node || node.destroyed) {\n          return;\n        }\n\n        var originAttrs = node.get('originAttrs');\n        var model = node.get('model');\n\n        if (!originAttrs) {\n          var containerMatrix = node.getContainer().getMatrix();\n          if (!containerMatrix) containerMatrix = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n          originAttrs = {\n            x: containerMatrix[6],\n            y: containerMatrix[7]\n          };\n          node.set('originAttrs', originAttrs);\n        }\n\n        if (onFrame) {\n          var attrs = onFrame(node, ratio, data, originAttrs);\n          node.set('model', Object.assign(model, attrs));\n        } else {\n          model.x = originAttrs.x + (data.x - originAttrs.x) * ratio;\n          model.y = originAttrs.y + (data.y - originAttrs.y) * ratio;\n        }\n      });\n      self.refreshPositions();\n    }, {\n      duration: animateCfg.duration,\n      easing: animateCfg.easing,\n      callback: function callback() {\n        each(nodes, function (node) {\n          node.set('originAttrs', null);\n        });\n\n        if (animateCfg.callback) {\n          animateCfg.callback();\n        }\n\n        self.emit('afteranimate');\n        self.animating = false;\n      }\n    });\n  };\n  /**\n   * 当节点位置在外部发生改变时，刷新所有节点位置，重计算边\n   */\n\n\n  Graph.prototype.refreshPositions = function () {\n    var self = this;\n    self.emit('beforegraphrefreshposition');\n    var nodes = self.get('nodes');\n    var edges = self.get('edges');\n    var vedges = self.get('vedges');\n    var combos = self.get('combos');\n    var model;\n    var updatedNodes = {};\n    each(nodes, function (node) {\n      model = node.getModel();\n      var originAttrs = node.get('originAttrs');\n\n      if (originAttrs && model.x === originAttrs.x && model.y === originAttrs.y) {\n        return;\n      }\n\n      node.updatePosition({\n        x: model.x,\n        y: model.y\n      });\n      updatedNodes[model.id] = true;\n      if (model.comboId) updatedNodes[model.comboId] = true;\n    });\n\n    if (combos && combos.length !== 0) {\n      self.updateCombos();\n    }\n\n    each(edges, function (edge) {\n      var sourceModel = edge.getSource().getModel();\n      var targetModel = edge.getTarget().getModel();\n\n      if (updatedNodes[sourceModel.id] || updatedNodes[targetModel.id] || edge.getModel().isComboEdge) {\n        edge.refresh();\n      }\n    });\n    each(vedges, function (vedge) {\n      vedge.refresh();\n    });\n    self.emit('aftergraphrefreshposition');\n    self.autoPaint();\n  };\n\n  Graph.prototype.stopAnimate = function () {\n    this.get('canvas').stopAnimate();\n  };\n\n  Graph.prototype.isAnimating = function () {\n    return this.animating;\n  };\n  /**\n   * 获取当前视口伸缩比例\n   * @return {number} 比例\n   */\n\n\n  Graph.prototype.getZoom = function () {\n    var matrix = this.get('group').getMatrix();\n    return matrix ? matrix[0] : 1;\n  };\n  /**\n   * 获取当前的行为模式\n   * @return {string} 当前行为模式\n   */\n\n\n  Graph.prototype.getCurrentMode = function () {\n    var modeController = this.get('modeController');\n    return modeController.getMode();\n  };\n  /**\n   * 切换行为模式\n   * @param {string} mode 指定模式\n   * @return {object} this\n   */\n\n\n  Graph.prototype.setMode = function (mode) {\n    var modeController = this.get('modeController');\n    modeController.setMode(mode);\n    return this;\n  };\n  /**\n   * 清除画布元素\n   * @return {object} this\n   */\n\n\n  Graph.prototype.clear = function () {\n    var canvas = this.get('canvas');\n    canvas.clear();\n    this.initGroups(); // 清空画布时同时清除数据\n\n    this.set({\n      itemMap: {},\n      nodes: [],\n      edges: [],\n      groups: [],\n      combos: [],\n      comboTrees: []\n    });\n    this.emit('afterrender');\n    return this;\n  };\n  /**\n   * 返回可见区域的图的 dataUrl，用于生成图片\n   * @param {String} type 图片类型，可选值：\"image/png\" | \"image/jpeg\" | \"image/webp\" | \"image/bmp\"\n   * @param {string} backgroundColor 图片背景色\n   * @return {string} 图片 dataURL\n   */\n\n\n  Graph.prototype.toDataURL = function (type, backgroundColor) {\n    var canvas = this.get('canvas');\n    var renderer = canvas.getRenderer();\n    var canvasDom = canvas.get('el');\n    if (!type) type = 'image/png';\n    var dataURL = '';\n\n    if (renderer === 'svg') {\n      var cloneNode = canvasDom.cloneNode(true);\n      var svgDocType = document.implementation.createDocumentType('svg', '-//W3C//DTD SVG 1.1//EN', 'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd');\n      var svgDoc = document.implementation.createDocument('http://www.w3.org/2000/svg', 'svg', svgDocType);\n      svgDoc.replaceChild(cloneNode, svgDoc.documentElement);\n      var svgData = new XMLSerializer().serializeToString(svgDoc);\n      dataURL = \"data:image/svg+xml;charset=utf8,\" + encodeURIComponent(svgData);\n    } else {\n      var imageData = void 0;\n      var context = canvasDom.getContext('2d');\n      var width = this.get('width');\n      var height = this.get('height');\n      var compositeOperation = void 0;\n\n      if (backgroundColor) {\n        var pixelRatio = window.devicePixelRatio;\n        imageData = context.getImageData(0, 0, width * pixelRatio, height * pixelRatio);\n        compositeOperation = context.globalCompositeOperation;\n        context.globalCompositeOperation = 'destination-over';\n        context.fillStyle = backgroundColor;\n        context.fillRect(0, 0, width, height);\n      }\n\n      dataURL = canvasDom.toDataURL(type);\n\n      if (backgroundColor) {\n        context.clearRect(0, 0, width, height);\n        context.putImageData(imageData, 0, 0);\n        context.globalCompositeOperation = compositeOperation;\n      }\n    }\n\n    return dataURL;\n  };\n  /**\n   * 返回整个图（包括超出可见区域的部分）的 dataUrl，用于生成图片\n   * @param {Function} callback 异步生成 dataUrl 完成后的回调函数，在这里处理生成的 dataUrl 字符串\n   * @param {String} type 图片类型，可选值：\"image/png\" | \"image/jpeg\" | \"image/webp\" | \"image/bmp\"\n   * @param {Object} imageConfig 图片配置项，包括背景色和上下左右的 padding\n   */\n\n\n  Graph.prototype.toFullDataURL = function (callback, type, imageConfig) {\n    var bbox = this.get('group').getCanvasBBox();\n    var height = bbox.height;\n    var width = bbox.width;\n    var renderer = this.get('renderer');\n    var vContainerDOM = createDom('<id=\"virtual-image\"></div>');\n    var backgroundColor = imageConfig ? imageConfig.backgroundColor : undefined;\n    var padding = imageConfig ? imageConfig.padding : undefined;\n    if (!padding) padding = [0, 0, 0, 0];else if (isNumber(padding)) padding = [padding, padding, padding, padding];\n    var vHeight = height + padding[0] + padding[2];\n    var vWidth = width + padding[1] + padding[3];\n    var canvasOptions = {\n      container: vContainerDOM,\n      height: vHeight,\n      width: vWidth,\n      quickHit: true\n    };\n    var vCanvas = renderer === 'svg' ? new GSVGCanvas(canvasOptions) : new GCanvas(canvasOptions);\n    var group = this.get('group');\n    var vGroup = group.clone();\n    var matrix = clone(vGroup.getMatrix());\n    if (!matrix) matrix = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n    var centerX = (bbox.maxX + bbox.minX) / 2;\n    var centerY = (bbox.maxY + bbox.minY) / 2;\n    mat3.translate(matrix, matrix, [-centerX, -centerY]);\n    mat3.translate(matrix, matrix, [width / 2 + padding[3], height / 2 + padding[0]]);\n    vGroup.resetMatrix();\n    vGroup.setMatrix(matrix);\n    vCanvas.add(vGroup);\n    var vCanvasEl = vCanvas.get('el');\n    var dataURL = '';\n    if (!type) type = 'image/png';\n    setTimeout(function () {\n      if (renderer === 'svg') {\n        var cloneNode = vCanvasEl.cloneNode(true);\n        var svgDocType = document.implementation.createDocumentType('svg', '-//W3C//DTD SVG 1.1//EN', 'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd');\n        var svgDoc = document.implementation.createDocument('http://www.w3.org/2000/svg', 'svg', svgDocType);\n        svgDoc.replaceChild(cloneNode, svgDoc.documentElement);\n        var svgData = new XMLSerializer().serializeToString(svgDoc);\n        dataURL = \"data:image/svg+xml;charset=utf8,\" + encodeURIComponent(svgData);\n      } else {\n        var imageData = void 0;\n        var context = vCanvasEl.getContext('2d');\n        var compositeOperation = void 0;\n\n        if (backgroundColor) {\n          var pixelRatio = window.devicePixelRatio;\n          imageData = context.getImageData(0, 0, vWidth * pixelRatio, vHeight * pixelRatio);\n          compositeOperation = context.globalCompositeOperation;\n          context.globalCompositeOperation = 'destination-over';\n          context.fillStyle = backgroundColor;\n          context.fillRect(0, 0, vWidth, vHeight);\n        }\n\n        dataURL = vCanvasEl.toDataURL(type);\n\n        if (backgroundColor) {\n          context.clearRect(0, 0, vWidth, vHeight);\n          context.putImageData(imageData, 0, 0);\n          context.globalCompositeOperation = compositeOperation;\n        }\n      }\n\n      callback === null || callback === void 0 ? void 0 : callback(dataURL);\n    }, 16);\n  };\n  /**\n   * 导出包含全图的图片\n   * @param {String} name 图片的名称\n   * @param {String} type 图片类型，可选值：\"image/png\" | \"image/jpeg\" | \"image/webp\" | \"image/bmp\"\n   * @param {Object} imageConfig 图片配置项，包括背景色和上下左右的 padding\n   */\n\n\n  Graph.prototype.downloadFullImage = function (name, type, imageConfig) {\n    var _this = this;\n\n    var bbox = this.get('group').getCanvasBBox();\n    var height = bbox.height;\n    var width = bbox.width;\n    var renderer = this.get('renderer');\n    var vContainerDOM = createDom('<id=\"virtual-image\"></div>');\n    var backgroundColor = imageConfig ? imageConfig.backgroundColor : undefined;\n    var padding = imageConfig ? imageConfig.padding : undefined;\n    if (!padding) padding = [0, 0, 0, 0];else if (isNumber(padding)) padding = [padding, padding, padding, padding];\n    var vHeight = height + padding[0] + padding[2];\n    var vWidth = width + padding[1] + padding[3];\n    var canvasOptions = {\n      container: vContainerDOM,\n      height: vHeight,\n      width: vWidth\n    };\n    var vCanvas = renderer === 'svg' ? new GSVGCanvas(canvasOptions) : new GCanvas(canvasOptions);\n    var group = this.get('group');\n    var vGroup = group.clone();\n    var matrix = clone(vGroup.getMatrix());\n    if (!matrix) matrix = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n    var centerX = (bbox.maxX + bbox.minX) / 2;\n    var centerY = (bbox.maxY + bbox.minY) / 2;\n    mat3.translate(matrix, matrix, [-centerX, -centerY]);\n    mat3.translate(matrix, matrix, [width / 2 + padding[3], height / 2 + padding[0]]);\n    vGroup.resetMatrix();\n    vGroup.setMatrix(matrix);\n    vCanvas.add(vGroup);\n    var vCanvasEl = vCanvas.get('el');\n    if (!type) type = 'image/png';\n    setTimeout(function () {\n      var dataURL = '';\n\n      if (renderer === 'svg') {\n        var cloneNode = vCanvasEl.cloneNode(true);\n        var svgDocType = document.implementation.createDocumentType('svg', '-//W3C//DTD SVG 1.1//EN', 'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd');\n        var svgDoc = document.implementation.createDocument('http://www.w3.org/2000/svg', 'svg', svgDocType);\n        svgDoc.replaceChild(cloneNode, svgDoc.documentElement);\n        var svgData = new XMLSerializer().serializeToString(svgDoc);\n        dataURL = \"data:image/svg+xml;charset=utf8,\" + encodeURIComponent(svgData);\n      } else {\n        var imageData = void 0;\n        var context = vCanvasEl.getContext('2d');\n        var compositeOperation = void 0;\n\n        if (backgroundColor) {\n          var pixelRatio = window.devicePixelRatio;\n          imageData = context.getImageData(0, 0, vWidth * pixelRatio, vHeight * pixelRatio);\n          compositeOperation = context.globalCompositeOperation;\n          context.globalCompositeOperation = 'destination-over';\n          context.fillStyle = backgroundColor;\n          context.fillRect(0, 0, vWidth, vHeight);\n        }\n\n        dataURL = vCanvasEl.toDataURL(type);\n\n        if (backgroundColor) {\n          context.clearRect(0, 0, vWidth, vHeight);\n          context.putImageData(imageData, 0, 0);\n          context.globalCompositeOperation = compositeOperation;\n        }\n      }\n\n      var link = document.createElement('a');\n      var fileName = (name || 'graph') + (renderer === 'svg' ? '.svg' : \".\" + type.split('/')[1]);\n\n      _this.dataURLToImage(dataURL, renderer, link, fileName);\n\n      var e = document.createEvent('MouseEvents');\n      e.initEvent('click', false, false);\n      link.dispatchEvent(e);\n    }, 16);\n  };\n  /**\n   * 画布导出图片，图片仅包含画布可见区域部分内容\n   * @param {String} name 图片的名称\n   * @param {String} type 图片类型，可选值：\"image/png\" | \"image/jpeg\" | \"image/webp\" | \"image/bmp\"\n   * @param {string} backgroundColor 图片背景色\n   */\n\n\n  Graph.prototype.downloadImage = function (name, type, backgroundColor) {\n    var _this = this;\n\n    var self = this;\n\n    if (self.isAnimating()) {\n      self.stopAnimate();\n    }\n\n    var canvas = self.get('canvas');\n    var renderer = canvas.getRenderer();\n    if (!type) type = 'image/png';\n    var fileName = (name || 'graph') + (renderer === 'svg' ? '.svg' : type.split('/')[1]);\n    var link = document.createElement('a');\n    setTimeout(function () {\n      var dataURL = self.toDataURL(type, backgroundColor);\n\n      _this.dataURLToImage(dataURL, renderer, link, fileName);\n\n      var e = document.createEvent('MouseEvents');\n      e.initEvent('click', false, false);\n      link.dispatchEvent(e);\n    }, 16);\n  };\n\n  Graph.prototype.dataURLToImage = function (dataURL, renderer, link, fileName) {\n    if (typeof window !== 'undefined') {\n      if (window.Blob && window.URL && renderer !== 'svg') {\n        var arr = dataURL.split(',');\n        var mime = '';\n\n        if (arr && arr.length > 0) {\n          var match = arr[0].match(/:(.*?);/); // eslint-disable-next-line prefer-destructuring\n\n          if (match && match.length >= 2) mime = match[1];\n        }\n\n        var bstr = atob(arr[1]);\n        var n = bstr.length;\n        var u8arr = new Uint8Array(n);\n\n        while (n--) {\n          u8arr[n] = bstr.charCodeAt(n);\n        }\n\n        var blobObj_1 = new Blob([u8arr], {\n          type: mime\n        });\n\n        if (window.navigator.msSaveBlob) {\n          window.navigator.msSaveBlob(blobObj_1, fileName);\n        } else {\n          link.addEventListener('click', function () {\n            link.download = fileName;\n            link.href = window.URL.createObjectURL(blobObj_1);\n          });\n        }\n      } else {\n        link.addEventListener('click', function () {\n          link.download = fileName;\n          link.href = dataURL;\n        });\n      }\n    }\n  };\n  /**\n   * 更换布局配置项\n   * @param {object} cfg 新布局配置项\n   * 若 cfg 含有 type 字段或为 String 类型，且与现有布局方法不同，则更换布局\n   * 若 cfg 不包括 type ，则保持原有布局方法，仅更新布局配置项\n   */\n\n\n  Graph.prototype.updateLayout = function (cfg) {\n    var layoutController = this.get('layoutController');\n    var newLayoutType;\n\n    if (isString(cfg)) {\n      newLayoutType = cfg;\n      cfg = {\n        type: newLayoutType\n      };\n    } else {\n      newLayoutType = cfg.type;\n    }\n\n    var oriLayoutCfg = this.get('layout');\n    var oriLayoutType = oriLayoutCfg ? oriLayoutCfg.type : undefined;\n\n    if (!newLayoutType || oriLayoutType === newLayoutType) {\n      // no type or same type, update layout\n      var layoutCfg = {};\n      Object.assign(layoutCfg, oriLayoutCfg, cfg);\n      layoutCfg.type = oriLayoutType || 'random';\n      this.set('layout', layoutCfg);\n      layoutController.updateLayoutCfg(layoutCfg);\n    } else {\n      // has different type, change layout\n      this.set('layout', cfg);\n      layoutController.changeLayout(newLayoutType);\n    }\n  };\n  /**\n   * 销毁布局，changeData 时不会再使用原来的布局方法对新数据进行布局\n   */\n\n\n  Graph.prototype.destroyLayout = function () {\n    var layoutController = this.get('layoutController');\n    layoutController.destroyLayout();\n  };\n  /**\n   * 重新以当前示例中配置的属性进行一次布局\n   */\n\n\n  Graph.prototype.layout = function () {\n    var layoutController = this.get('layoutController');\n    var layoutCfg = this.get('layout');\n    if (!layoutCfg) return;\n\n    if (layoutCfg.workerEnabled) {\n      // 如果使用web worker布局\n      layoutController.layout();\n      return;\n    }\n\n    if (layoutController.layoutMethod) {\n      layoutController.relayout(true);\n    } else {\n      layoutController.layout();\n    }\n  };\n  /**\n   * 收起指定的 combo\n   * @param {string | ICombo} combo combo ID 或 combo item\n   */\n\n\n  Graph.prototype.collapseCombo = function (combo) {\n    var _this = this;\n\n    if (isString(combo)) {\n      combo = this.findById(combo);\n    }\n\n    if (!combo) {\n      console.warn('The combo to be collapsed does not exist!');\n      return;\n    }\n\n    var comboModel = combo.getModel();\n    var itemController = this.get('itemController');\n    itemController.collapseCombo(combo);\n    comboModel.collapsed = true; // add virtual edges\n\n    var edges = this.getEdges().concat(this.get('vedges')); // find all the descendant nodes and combos\n\n    var cnodes = [];\n    var ccombos = [];\n    var comboTrees = this.get('comboTrees');\n    var found = false;\n    var brothers = {};\n    (comboTrees || []).forEach(function (ctree) {\n      brothers[ctree.id] = ctree;\n    });\n    (comboTrees || []).forEach(function (ctree) {\n      if (found) return; // if the combo is found, terminate the forEach\n\n      traverseTree(ctree, function (subTree) {\n        // if the combo is found and the it is traversing the other brothers, terminate\n        if (found && brothers[subTree.id]) return false;\n\n        if (comboModel.parentId === subTree.id) {\n          // if the parent is found, store the brothers\n          brothers = {};\n          subTree.children.forEach(function (child) {\n            brothers[child.id] = child;\n          });\n        } else if (comboModel.id === subTree.id) {\n          // if the combo is found\n          found = true;\n        }\n\n        if (found) {\n          // if the combo is found, concat the descendant nodes and combos\n          var item = _this.findById(subTree.id);\n\n          if (item && item.getType && item.getType() === 'combo') {\n            cnodes = cnodes.concat(item.getNodes());\n            ccombos = ccombos.concat(item.getCombos());\n          }\n        }\n\n        return true;\n      });\n    });\n    var edgeWeightMap = {};\n    var addedVEdges = [];\n    edges.forEach(function (edge) {\n      if (edge.isVisible() && !edge.getModel().isVEdge) return;\n      var source = edge.getSource();\n      var target = edge.getTarget();\n\n      if ((cnodes.includes(source) || ccombos.includes(source)) && !cnodes.includes(target) && !ccombos.includes(target) || source.getModel().id === comboModel.id) {\n        var edgeModel = edge.getModel();\n\n        if (edgeModel.isVEdge) {\n          _this.removeItem(edge, false);\n\n          return;\n        }\n\n        var targetModel = target.getModel();\n\n        while (!target.isVisible()) {\n          target = _this.findById(targetModel.parentId || targetModel.comboId);\n          if (!target || !targetModel.parentId && !targetModel.comboId) return; // all the ancestors are hidden, then ignore the edge\n\n          targetModel = target.getModel();\n        }\n\n        var targetId = targetModel.id;\n\n        if (edgeWeightMap[comboModel.id + \"-\" + targetId]) {\n          edgeWeightMap[comboModel.id + \"-\" + targetId] += edgeModel.size || 1;\n          return;\n        } // the source is in the combo, the target is not\n\n\n        var vedge = _this.addItem('vedge', {\n          source: comboModel.id,\n          target: targetId,\n          isVEdge: true\n        }, false);\n\n        edgeWeightMap[comboModel.id + \"-\" + targetId] = edgeModel.size || 1;\n        addedVEdges.push(vedge);\n      } else if (!cnodes.includes(source) && !ccombos.includes(source) && (cnodes.includes(target) || ccombos.includes(target)) || target.getModel().id === comboModel.id) {\n        var edgeModel = edge.getModel();\n\n        if (edgeModel.isVEdge) {\n          _this.removeItem(edge, false);\n\n          return;\n        }\n\n        var sourceModel = source.getModel();\n\n        while (!source.isVisible()) {\n          source = _this.findById(sourceModel.parentId || sourceModel.comboId);\n          if (!source || !sourceModel.parentId && !sourceModel.comboId) return; // all the ancestors are hidden, then ignore the edge\n\n          sourceModel = source.getModel();\n        }\n\n        var sourceId = sourceModel.id;\n\n        if (edgeWeightMap[sourceId + \"-\" + comboModel.id]) {\n          edgeWeightMap[sourceId + \"-\" + comboModel.id] += edgeModel.size || 1;\n          return;\n        } // the target is in the combo, the source is not\n\n\n        var vedge = _this.addItem('vedge', {\n          target: comboModel.id,\n          source: sourceId,\n          isVEdge: true\n        }, false);\n\n        edgeWeightMap[sourceId + \"-\" + comboModel.id] = edgeModel.size || 1;\n        addedVEdges.push(vedge);\n      }\n    }); // update the width of the virtual edges, which is the sum of merged actual edges\n    // be attention that the actual edges with same endpoints but different directions will be represented by two different virtual edges\n\n    addedVEdges.forEach(function (vedge) {\n      var vedgeModel = vedge.getModel();\n\n      _this.updateItem(vedge, {\n        size: edgeWeightMap[vedgeModel.source + \"-\" + vedgeModel.target]\n      }, false);\n    });\n  };\n  /**\n   * 展开指定的 combo\n   * @param {string | ICombo} combo combo ID 或 combo item\n   */\n\n\n  Graph.prototype.expandCombo = function (combo) {\n    var _this = this;\n\n    if (isString(combo)) {\n      combo = this.findById(combo);\n    }\n\n    if (!combo || combo.getType && combo.getType() !== 'combo') {\n      console.warn('The combo to be collapsed does not exist!');\n      return;\n    }\n\n    var comboModel = combo.getModel();\n    var itemController = this.get('itemController');\n    itemController.expandCombo(combo);\n    comboModel.collapsed = false; // add virtual edges\n\n    var edges = this.getEdges().concat(this.get('vedges')); // find all the descendant nodes and combos\n\n    var cnodes = [];\n    var ccombos = [];\n    var comboTrees = this.get('comboTrees');\n    var found = false;\n    var brothers = {};\n    (comboTrees || []).forEach(function (ctree) {\n      brothers[ctree.id] = ctree;\n    });\n    (comboTrees || []).forEach(function (ctree) {\n      if (found) return; // if the combo is found, terminate\n\n      traverseTree(ctree, function (subTree) {\n        if (found && brothers[subTree.id]) {\n          return false;\n        }\n\n        if (comboModel.parentId === subTree.id) {\n          brothers = {};\n          subTree.children.forEach(function (child) {\n            brothers[child.id] = child;\n          });\n        } else if (comboModel.id === subTree.id) {\n          found = true;\n        }\n\n        if (found) {\n          var item = _this.findById(subTree.id);\n\n          if (item && item.getType && item.getType() === 'combo') {\n            cnodes = cnodes.concat(item.getNodes());\n            ccombos = ccombos.concat(item.getCombos());\n          }\n        }\n\n        return true;\n      });\n    });\n    var edgeWeightMap = {};\n    var addedVEdges = {};\n    edges.forEach(function (edge) {\n      if (edge.isVisible() && !edge.getModel().isVEdge) return;\n      var source = edge.getSource();\n      var target = edge.getTarget();\n      var sourceId = source.get('id');\n      var targetId = target.get('id');\n\n      if ((cnodes.includes(source) || ccombos.includes(source)) && !cnodes.includes(target) && !ccombos.includes(target) || sourceId === comboModel.id) {\n        // the source is in the combo, the target is not\n        // ignore the virtual edges\n        if (edge.getModel().isVEdge) {\n          _this.removeItem(edge, false);\n\n          return;\n        }\n\n        var targetModel = target.getModel(); // find the nearest visible ancestor\n\n        while (!target.isVisible()) {\n          target = _this.findById(targetModel.comboId || targetModel.parentId);\n\n          if (!target || !targetModel.parentId && !targetModel.comboId) {\n            return; // if all the ancestors of the oppsite are all hidden, ignore the edge\n          }\n\n          targetModel = target.getModel();\n        }\n\n        targetId = targetModel.id;\n        var sourceModel = source.getModel(); // find the nearest visible ancestor\n\n        while (!source.isVisible()) {\n          source = _this.findById(sourceModel.comboId || sourceModel.parentId);\n\n          if (!source || !sourceModel.parentId && !sourceModel.comboId) {\n            return; // if all the ancestors of the oppsite are all hidden, ignore the edge\n          }\n\n          if (sourceModel.comboId === comboModel.id || sourceModel.parentId === comboModel.id) {\n            break; // if the next ancestor is the combo, break the while\n          }\n\n          sourceModel = source.getModel();\n        }\n\n        sourceId = sourceModel.id;\n\n        if (targetId) {\n          var vedgeId = sourceId + \"-\" + targetId; // update the width of the virtual edges, which is the sum of merged actual edges\n          // be attention that the actual edges with same endpoints but different directions will be represented by two different virtual edges\n\n          if (edgeWeightMap[vedgeId]) {\n            edgeWeightMap[vedgeId] += edge.getModel().size || 1;\n\n            _this.updateItem(addedVEdges[vedgeId], {\n              size: edgeWeightMap[vedgeId]\n            }, false);\n\n            return;\n          }\n\n          var vedge = _this.addItem('vedge', {\n            source: sourceId,\n            target: targetId,\n            isVEdge: true\n          }, false);\n\n          edgeWeightMap[vedgeId] = edge.getModel().size || 1;\n          addedVEdges[vedgeId] = vedge;\n        }\n      } else if (!cnodes.includes(source) && !ccombos.includes(source) && (cnodes.includes(target) || ccombos.includes(target)) || targetId === comboModel.id) {\n        // the target is in the combo, the source is not\n        // ignore the virtual edges\n        if (edge.getModel().isVEdge) {\n          _this.removeItem(edge, false);\n\n          return;\n        }\n\n        var sourceModel = source.getModel(); // find the nearest visible ancestor\n\n        while (!source.isVisible()) {\n          source = _this.findById(sourceModel.comboId || sourceModel.parentId);\n\n          if (!source || !sourceModel.parentId && !sourceModel.comboId) {\n            return; // if all the ancestors of the oppsite are all hidden, ignore the edge\n          }\n\n          sourceModel = source.getModel();\n        }\n\n        sourceId = sourceModel.id;\n        var targetModel = target.getModel(); // find the nearest visible ancestor\n\n        while (!target.isVisible()) {\n          target = _this.findById(targetModel.comboId || targetModel.parentId);\n\n          if (!target || !targetModel.parentId && !targetModel.comboId) {\n            return; // if all the ancestors of the oppsite are all hidden, ignore the edge\n          }\n\n          if (targetModel.comboId === comboModel.id || targetModel.parentId === comboModel.id) {\n            break; // if the next ancestor is the combo, break the while\n          }\n\n          targetModel = target.getModel();\n        }\n\n        targetId = targetModel.id;\n\n        if (sourceId) {\n          var vedgeId = sourceId + \"-\" + targetId; // update the width of the virtual edges, which is the sum of merged actual edges\n          // be attention that the actual edges with same endpoints but different directions will be represented by two different virtual edges\n\n          if (edgeWeightMap[vedgeId]) {\n            edgeWeightMap[vedgeId] += edge.getModel().size || 1;\n\n            _this.updateItem(addedVEdges[vedgeId], {\n              size: edgeWeightMap[vedgeId]\n            }, false);\n\n            return;\n          }\n\n          var vedge = _this.addItem('vedge', {\n            target: targetId,\n            source: sourceId,\n            isVEdge: true\n          }, false);\n\n          edgeWeightMap[vedgeId] = edge.getModel().size || 1;\n          addedVEdges[vedgeId] = vedge;\n        }\n      } else if ((cnodes.includes(source) || ccombos.includes(source)) && (cnodes.includes(target) || ccombos.includes(target))) {\n        // both source and target are in the combo, if the target and source are both visible, show the edge\n        if (source.isVisible() && target.isVisible()) {\n          edge.show();\n        }\n      }\n    });\n  };\n\n  Graph.prototype.collapseExpandCombo = function (combo) {\n    if (isString(combo)) {\n      combo = this.findById(combo);\n    }\n\n    if (combo.getType && combo.getType() !== 'combo') return;\n    var comboModel = combo.getModel(); // if one ancestor combo of the combo is collapsed, it should not be collapsed or expanded\n\n    var parentItem = this.findById(comboModel.parentId);\n\n    while (parentItem) {\n      var parentModel = parentItem.getModel();\n\n      if (parentModel.collapsed) {\n        console.warn(\"Fail to expand the combo since it's ancestor combo is collapsed.\");\n        parentItem = undefined;\n        return;\n      }\n\n      parentItem = this.findById(parentModel.parentId);\n    }\n\n    var collapsed = comboModel.collapsed; // 该群组已经处于收起状态，需要展开\n\n    if (collapsed) {\n      this.expandCombo(combo);\n    } else {\n      this.collapseCombo(combo);\n    }\n\n    this.updateCombo(combo);\n  };\n  /**\n   * 收起分组\n   * @param {string} groupId 分组ID\n   */\n\n\n  Graph.prototype.collapseGroup = function (groupId) {\n    var customGroupControll = this.get('customGroupControll');\n    customGroupControll.collapseGroup(groupId);\n  };\n  /**\n   * 展开分组\n   * @param {string} groupId 分组ID\n   */\n\n\n  Graph.prototype.expandGroup = function (groupId) {\n    var customGroupControll = this.get('customGroupControll');\n    customGroupControll.expandGroup(groupId);\n  };\n  /**\n   * 添加插件\n   * @param {object} plugin 插件实例\n   */\n\n\n  Graph.prototype.addPlugin = function (plugin) {\n    var self = this;\n\n    if (plugin.destroyed) {\n      return;\n    }\n\n    self.get('plugins').push(plugin);\n    plugin.initPlugin(self);\n  };\n  /**\n   * 添加插件\n   * @param {object} plugin 插件实例\n   */\n\n\n  Graph.prototype.removePlugin = function (plugin) {\n    var plugins = this.get('plugins');\n    var index = plugins.indexOf(plugin);\n\n    if (index >= 0) {\n      plugin.destroyPlugin();\n      plugins.splice(index, 1);\n    }\n  };\n  /**\n   * 根据 comboTree 结构整理 Combo 相关的图形绘制层级，包括 Combo 本身、节点、边\n   * @param {GraphData} data 数据\n   */\n\n\n  Graph.prototype.sortCombos = function () {\n    var _this = this;\n\n    var comboSorted = this.get('comboSorted');\n    if (comboSorted) return;\n    this.set('comboSorted', true);\n    var depthMap = [];\n    var dataDepthMap = {};\n    var comboTrees = this.get('comboTrees');\n    (comboTrees || []).forEach(function (cTree) {\n      traverseTree(cTree, function (child) {\n        if (depthMap[child.depth]) depthMap[child.depth].push(child.id);else depthMap[child.depth] = [child.id];\n        dataDepthMap[child.id] = child.depth;\n        return true;\n      });\n    });\n    var edges = this.getEdges().concat(this.get('vedges'));\n    (edges || []).forEach(function (edgeItem) {\n      var edge = edgeItem.getModel();\n      var sourceDepth = dataDepthMap[edge.source] || 0;\n      var targetDepth = dataDepthMap[edge.target] || 0;\n      var depth = Math.max(sourceDepth, targetDepth);\n      if (depthMap[depth]) depthMap[depth].push(edge.id);else depthMap[depth] = [edge.id];\n    });\n    depthMap.forEach(function (array) {\n      if (!array || !array.length) return;\n\n      for (var i = array.length - 1; i >= 0; i--) {\n        var item = _this.findById(array[i]);\n\n        item === null || item === void 0 ? void 0 : item.toFront();\n      }\n    });\n  };\n  /**\n   * 获取节点所有的邻居节点\n   *\n   * @param {(string | INode)} node 节点 ID 或实例\n   * @returns {INode[]}\n   * @memberof IGraph\n   */\n\n\n  Graph.prototype.getNeighbors = function (node, type) {\n    var item = node;\n\n    if (isString(node)) {\n      item = this.findById(node);\n    }\n\n    return item.getNeighbors(type);\n  };\n  /**\n   * 获取 node 的度数\n   *\n   * @param {(string | INode)} node 节点 ID 或实例\n   * @param {('in' | 'out' | 'total' | 'all' | undefined)} 度数类型，in 入度，out 出度，total 总度数，all 返回三种类型度数的对象\n   * @returns {Number | Object} 该节点的度数\n   * @memberof IGraph\n   */\n\n\n  Graph.prototype.getNodeDegree = function (node, type) {\n    if (type === void 0) {\n      type = undefined;\n    }\n\n    var item = node;\n\n    if (isString(node)) {\n      item = this.findById(node);\n    }\n\n    var degrees = this.get('degrees');\n\n    if (!degrees) {\n      degrees = degree(this);\n    }\n\n    this.set('degees', degrees);\n    var nodeDegrees = degrees[item.getID()];\n    var res;\n\n    switch (type) {\n      case 'in':\n        res = nodeDegrees.inDegree;\n        break;\n\n      case 'out':\n        res = nodeDegrees.outDegree;\n        break;\n\n      case 'all':\n        res = nodeDegrees;\n        break;\n\n      default:\n        res = nodeDegrees.degree;\n        break;\n    }\n\n    return res;\n  };\n\n  Graph.prototype.getUndoStack = function () {\n    return this.undoStack;\n  };\n\n  Graph.prototype.getRedoStack = function () {\n    return this.redoStack;\n  };\n  /**\n   * 获取 undo 和 redo 栈的数据\n   */\n\n\n  Graph.prototype.getStackData = function () {\n    if (!this.get('enabledStack')) {\n      return null;\n    }\n\n    return {\n      undoStack: this.undoStack.toArray(),\n      redoStack: this.redoStack.toArray()\n    };\n  };\n  /**\n   * 清空 undo stack & redo stack\n   */\n\n\n  Graph.prototype.clearStack = function () {\n    if (this.get('enabledStack')) {\n      this.undoStack.clear();\n      this.redoStack.clear();\n    }\n  };\n  /**\n   * 将操作类型和操作数据入栈\n   * @param action 操作类型\n   * @param data 入栈的数据\n   * @param stackType 栈的类型\n   */\n\n\n  Graph.prototype.pushStack = function (action, data, stackType) {\n    if (action === void 0) {\n      action = 'update';\n    }\n\n    if (stackType === void 0) {\n      stackType = 'undo';\n    }\n\n    if (!this.get('enabledStack')) {\n      console.warn('请先启用 undo & redo 功能，在实例化 Graph 时候配置 enabledStack: true !');\n      return;\n    }\n\n    var stackData = data ? clone(data) : {\n      before: {},\n      after: clone(this.save())\n    };\n\n    if (stackType === 'redo') {\n      this.redoStack.push({\n        action: action,\n        data: stackData\n      });\n    } else {\n      this.undoStack.push({\n        action: action,\n        data: stackData\n      });\n    }\n\n    this.emit('stackchange', {\n      undoStack: this.undoStack,\n      redoStack: this.redoStack\n    });\n  };\n  /**\n   * 获取邻接矩阵\n   *\n   * @param {boolean} cache 是否使用缓存的\n   * @param {boolean} directed 是否是有向图，默认取 graph.directed\n   * @returns {Matrix} 邻接矩阵\n   * @memberof IGraph\n   */\n\n\n  Graph.prototype.getAdjMatrix = function (cache, directed) {\n    if (cache === void 0) {\n      cache = true;\n    }\n\n    if (directed === undefined) directed = this.get('directed');\n    var currentAdjMatrix = this.get('adjMatrix');\n\n    if (!currentAdjMatrix || !cache) {\n      currentAdjMatrix = adjMatrix(this, directed);\n      this.set('adjMatrix', currentAdjMatrix);\n    }\n\n    return currentAdjMatrix;\n  };\n  /**\n   * 获取最短路径矩阵\n   *\n   * @param {boolean} cache 是否使用缓存的\n   * @param {boolean} directed 是否是有向图，默认取 graph.directed\n   * @returns {Matrix} 最短路径矩阵\n   * @memberof IGraph\n   */\n\n\n  Graph.prototype.getShortestPathMatrix = function (cache, directed) {\n    if (cache === void 0) {\n      cache = true;\n    }\n\n    if (directed === undefined) directed = this.get('directed');\n    var currentAdjMatrix = this.get('adjMatrix');\n    var currentShourtestPathMatrix = this.get('shortestPathMatrix');\n\n    if (!currentAdjMatrix || !cache) {\n      currentAdjMatrix = adjMatrix(this, directed);\n      this.set('adjMatrix', currentAdjMatrix);\n    }\n\n    if (!currentShourtestPathMatrix || !cache) {\n      currentShourtestPathMatrix = floydWarshall(this, directed);\n      this.set('shortestPathMatrix', currentShourtestPathMatrix);\n    }\n\n    return currentShourtestPathMatrix;\n  };\n  /**\n   * 销毁画布\n   */\n\n\n  Graph.prototype.destroy = function () {\n    this.clear(); // 清空栈数据\n\n    this.clearStack();\n    each(this.get('plugins'), function (plugin) {\n      plugin.destroyPlugin();\n    }); // destroy tooltip doms, removed when upgrade G6 4.0\n\n    var tooltipDOMs = this.get('tooltips');\n\n    if (tooltipDOMs) {\n      for (var i = 0; i < tooltipDOMs.length; i++) {\n        var container = tooltipDOMs[i];\n        if (!container) continue;\n        var parent_1 = container.parentElement;\n        if (!parent_1) continue;\n        parent_1.removeChild(container);\n      }\n    }\n\n    this.get('eventController').destroy();\n    this.get('itemController').destroy();\n    this.get('modeController').destroy();\n    this.get('viewController').destroy();\n    this.get('stateController').destroy();\n    this.get('layoutController').destroy();\n    this.get('customGroupControll').destroy();\n    this.get('canvas').destroy();\n\n    if (this.get('graphWaterMarker')) {\n      this.get('graphWaterMarker').destroy();\n    }\n\n    if (document.querySelector('.g6-graph-watermarker')) {\n      document.querySelector('.g6-graph-watermarker').remove();\n    }\n\n    this.cfg = null;\n    this.destroyed = true;\n    this.redoStack = null;\n    this.undoStack = null;\n  };\n  /**\n   * 创建凸包或凹包轮廓\n   * @param cfg HullCfg 轮廓配置项\n   */\n\n\n  Graph.prototype.createHull = function (cfg) {\n    var parent = this.get('hullGroup');\n    var hullMap = this.get('hullMap');\n\n    if (!hullMap) {\n      hullMap = {};\n      this.set('hullMap', hullMap);\n    }\n\n    if (!parent) {\n      parent = this.get('group').addGroup({\n        id: 'hullGroup'\n      });\n      parent.toBack();\n      this.set('hullGroup', parent);\n    }\n\n    if (hullMap[cfg.id]) {\n      console.warn('Existed hull id.');\n      return hullMap[cfg.id];\n    }\n\n    var group = parent.addGroup({\n      id: cfg.id + \"-container\"\n    });\n    var hull = new Hull(this, __assign(__assign({}, cfg), {\n      group: group\n    }));\n    var hullId = hull.id;\n    hullMap[hullId] = hull;\n    return hull;\n  };\n  /**\n   * 获取当前 graph 中存在的包裹轮廓\n   * @return {[key: string]: Hull} hullId 对应的 hull 实例\n   */\n\n\n  Graph.prototype.getHulls = function () {\n    return this.get('hullMap');\n  };\n  /**\n   * 根据 hullId 获取对应的 hull\n   * @return Hull\n   */\n\n\n  Graph.prototype.getHullById = function (hullId) {\n    return this.get('hullMap')[hullId];\n  };\n\n  Graph.prototype.removeHull = function (hull) {\n    var hullInstance;\n\n    if (isString(hull)) {\n      hullInstance = this.getHullById(hull);\n    } else {\n      hullInstance = hull;\n    }\n\n    var hullMap = this.get('hullMap');\n    delete hullMap[hullInstance.id];\n    hullInstance.destroy();\n  };\n  /**\n   * 设置图片水印\n   * @param {string} imgURL 图片水印的url地址\n   * @param {WaterMarkerConfig} config 文本水印的配置项\n   */\n\n\n  Graph.prototype.setImageWaterMarker = function (imgURL, config) {\n    if (imgURL === void 0) {\n      imgURL = Global.waterMarkerImage;\n    }\n\n    var container = this.get('container');\n\n    if (isString(container)) {\n      container = document.getElementById(container);\n    }\n\n    if (!container.style.position) {\n      container.style.position = 'relative';\n    }\n\n    var canvas = this.get('graphWaterMarker');\n    var waterMarkerConfig = deepMix({}, Global.imageWaterMarkerConfig, config);\n    var width = waterMarkerConfig.width,\n        height = waterMarkerConfig.height,\n        compatible = waterMarkerConfig.compatible,\n        image = waterMarkerConfig.image;\n\n    if (!canvas) {\n      var canvasCfg = {\n        container: container,\n        width: width,\n        height: height,\n        capture: false\n      };\n      var pixelRatio = this.get('pixelRatio');\n\n      if (pixelRatio) {\n        canvasCfg.pixelRatio = pixelRatio;\n      }\n\n      canvas = new GCanvas(canvasCfg);\n      this.set('graphWaterMarker', canvas);\n    }\n\n    canvas.get('el').style.display = 'none';\n    var ctx = canvas.get('context');\n    var rotate = image.rotate,\n        x = image.x,\n        y = image.y; // 旋转20度\n\n    ctx.rotate(-rotate * Math.PI / 180);\n    var img = new Image();\n    img.crossOrigin = 'anonymous';\n    img.src = imgURL;\n\n    img.onload = function () {\n      ctx.drawImage(img, x, y, image.width, image.height); // 恢复旋转角度\n\n      ctx.rotate(rotate * Math.PI / 180); // 默认按照现代浏览器处理        \n\n      if (!compatible) {\n        var box = document.querySelector('.g6-graph-watermarker');\n\n        if (!box) {\n          box = document.createElement('div');\n          box.className = 'g6-graph-watermarker';\n        }\n\n        box.className = 'g6-graph-watermarker';\n\n        if (!canvas.destroyed) {\n          box.style.cssText = \"background-image: url(\" + canvas.get('el').toDataURL('image/png') + \");background-repeat:repeat;position:absolute;top:0;bottom:0;left:0;right:0;pointer-events:none;z-index:-1;\";\n          container.appendChild(box);\n        }\n      } else {\n        // 当需要兼容不支持 pointer-events属性的浏览器时，将 compatible 设置为 true\n        container.style.cssText = \"background-image: url(\" + canvas.get('el').toDataURL('image/png') + \");background-repeat:repeat;\";\n      }\n    };\n  };\n  /**\n   * 设置文本水印\n   * @param {string[]} texts 水印的文本内容\n   * @param {WaterMarkerConfig} config 文本水印的配置项\n   */\n\n\n  Graph.prototype.setTextWaterMarker = function (texts, config) {\n    var container = this.get('container');\n\n    if (isString(container)) {\n      container = document.getElementById(container);\n    }\n\n    if (!container.style.position) {\n      container.style.position = 'relative';\n    }\n\n    var canvas = this.get('graphWaterMarker');\n    var waterMarkerConfig = deepMix({}, Global.textWaterMarkerConfig, config);\n    var width = waterMarkerConfig.width,\n        height = waterMarkerConfig.height,\n        compatible = waterMarkerConfig.compatible,\n        text = waterMarkerConfig.text;\n\n    if (!canvas) {\n      var canvasCfg = {\n        container: container,\n        width: width,\n        height: height,\n        capture: false\n      };\n      var pixelRatio = this.get('pixelRatio');\n\n      if (pixelRatio) {\n        canvasCfg.pixelRatio = pixelRatio;\n      }\n\n      canvas = new GCanvas(canvasCfg);\n      this.set('graphWaterMarker', canvas);\n    }\n\n    canvas.get('el').style.display = 'none';\n    var ctx = canvas.get('context');\n    var rotate = text.rotate,\n        fill = text.fill,\n        fontFamily = text.fontFamily,\n        fontSize = text.fontSize,\n        baseline = text.baseline,\n        x = text.x,\n        y = text.y,\n        lineHeight = text.lineHeight; // 旋转20度\n\n    ctx.rotate(-rotate * Math.PI / 180); // 设置文字样式   \n\n    ctx.font = fontSize + \"px \" + fontFamily; // 设置文字颜色  \n\n    ctx.fillStyle = fill;\n    ctx.textBaseline = baseline;\n\n    for (var i = texts.length - 1; i >= 0; i--) {\n      // 将文字绘制到画布        \n      ctx.fillText(texts[i], x, y + i * lineHeight);\n    } // 恢复旋转角度\n\n\n    ctx.rotate(rotate * Math.PI / 180); // 默认按照现代浏览器处理        \n\n    if (!compatible) {\n      var box = document.querySelector('.g6-graph-watermarker');\n\n      if (!box) {\n        box = document.createElement('div');\n        box.className = 'g6-graph-watermarker';\n      }\n\n      box.style.cssText = \"background-image: url(\" + canvas.get('el').toDataURL('image/png') + \");background-repeat:repeat;position:absolute;top:0;bottom:0;left:0;right:0;pointer-events:none;z-index:99;\";\n      container.appendChild(box);\n    } else {\n      // 当需要兼容不支持 pointer-events属性的浏览器时，将 compatible 设置为 true\n      container.style.cssText = \"background-image: url(\" + canvas.get('el').toDataURL('image/png') + \");background-repeat:repeat;\";\n    }\n  };\n\n  return Graph;\n}(EventEmitter);\n\nexport default Graph;","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/@antv/g6/es/graph/graph.js"],"names":["__assign","__extends","__spreadArrays","EventEmitter","GCanvas","GSVGCanvas","mat3","clone","deepMix","each","isPlainObject","isString","isNumber","groupBy","getAllNodeInGroups","move","Global","CustomGroup","EventController","ItemController","LayoutController","ModeController","StateController","ViewController","createDom","plainCombosToTrees","traverseTree","reconstructTree","traverseTreeUp","degree","Stack","adjMatrix","floydWarshall","Hull","NODE","SVG","Graph","_super","cfg","_this","call","getDefaultCfg","init","animating","destroyed","enabledStack","undoStack","maxStep","redoStack","prototype","initCanvas","eventController","viewController","modeController","itemController","layoutController","stateController","customGroupControll","set","initPlugin","container","get","document","getElementById","Error","width","height","renderer","canvas","canvasCfg","pixelRatio","initGroups","self","plugin","el","id","group","addGroup","className","rootContainerClassName","edgeGroup","edgeContainerClassName","nodeGroup","nodeContainerClassName","comboGroup","comboContainerClassName","customGroup","customGroupContainerClassName","toBack","delegateGroup","delegateContainerClassName","undefined","modes","plugins","data","fitViewPadding","minZoom","maxZoom","event","groupByTypes","directed","autoPaint","nodes","edges","combos","vedges","itemMap","linkCenter","defaultNode","defaultEdge","nodeStateStyles","edgeStateStyles","states","animate","animateCfg","onFrame","duration","easing","callback","groupType","groupBBoxs","groupNodes","groups","groupStyle","tooltips","key","val","getGroup","getContainer","getMinZoom","setMinZoom","ratio","getMaxZoom","setMaxZoom","getWidth","getHeight","clearItemStates","item","findById","updateStates","node","nodeFn","edge","edgeFn","combo","comboFn","find","type","fn","result","items","i","findAll","push","findAllByState","state","hasState","translate","dx","dy","matrix","getMatrix","setMatrix","emit","action","moveTo","x","y","fitView","padding","fitCenter","addBehaviors","behaviors","manipulateBehaviors","removeBehaviors","zoom","center","scale","zoomTo","toRatio","getZoom","focusItem","isAnimate","curAniamteCfg","focus","paint","draw","getPointByClient","clientX","clientY","getClientByPoint","getPointByCanvas","canvasX","canvasY","getCanvasByPoint","showItem","stack","object","changeItemVisibility","getID","getType","before","after","visible","pushStack","hideItem","refreshItem","setAutoPaint","auto","remove","removeItem","nodeItem","console","warn","deletedModel","getModel","itemType","getEdges","length","newComboTrees","addItem","model","sortCombo","currentComboSorted","groupId","zIndex","title","groupTitle","text","create","comboTrees","itemMap_1","foundParent_1","forEach","ctree","child","parentId","newCombo","depth","children","childItem","updateCombo","comboId","parentCombo","itemMap_2","foundParent_2","foundNode_1","cloneNode","addChild","sortCombos","addedModel","add","updateItem","currentItem","UnupdateModel","getStates","setItemState","afterModel","update","value","updateState","priorityState","render","clearStack","_a","_b","_c","clear","addCombos","layout","success","nodesArr","getNodes","toFront","edgesArr","nodeInGroup","filter","renderCustomGroup","read","diffItems","models","containerMatrix","changeData","save","map","localRefresh","combosData","destroy","indexOf","comboItems","getCombos","combosLength","splice","getLayoutType","positionsAnimate","setTimeout","createCombo","comboConfig","trees","elementId","cItem","uncombo","comboItem","treeToBeUncombo","brothers","parentItem","subtree","index","removeCombo","childModel","updateCombos","getStateStyle","updateComboTree","uItem","oldParentId","valid_1","itemSubTree_1","subTree","removeChild","groupIndex","groupsArr_1","groupIds_1","Object","keys","nodeIds","d","groupNodes_1","tmpNodes","sort","changeSize","refresh","vedge","getComboChildren","getChildren","toNodes","isAnimating","stopAnimate","originAttrs","attrs","assign","refreshPositions","updatedNodes","updatePosition","sourceModel","getSource","targetModel","getTarget","isComboEdge","getCurrentMode","getMode","setMode","mode","toDataURL","backgroundColor","getRenderer","canvasDom","dataURL","svgDocType","implementation","createDocumentType","svgDoc","createDocument","replaceChild","documentElement","svgData","XMLSerializer","serializeToString","encodeURIComponent","imageData","context","getContext","compositeOperation","window","devicePixelRatio","getImageData","globalCompositeOperation","fillStyle","fillRect","clearRect","putImageData","toFullDataURL","imageConfig","bbox","getCanvasBBox","vContainerDOM","vHeight","vWidth","canvasOptions","quickHit","vCanvas","vGroup","centerX","maxX","minX","centerY","maxY","minY","resetMatrix","vCanvasEl","downloadFullImage","name","link","createElement","fileName","split","dataURLToImage","e","createEvent","initEvent","dispatchEvent","downloadImage","Blob","URL","arr","mime","match","bstr","atob","n","u8arr","Uint8Array","charCodeAt","blobObj_1","navigator","msSaveBlob","addEventListener","download","href","createObjectURL","updateLayout","newLayoutType","oriLayoutCfg","oriLayoutType","layoutCfg","updateLayoutCfg","changeLayout","destroyLayout","workerEnabled","layoutMethod","relayout","collapseCombo","comboModel","collapsed","concat","cnodes","ccombos","found","edgeWeightMap","addedVEdges","isVisible","isVEdge","source","target","includes","edgeModel","targetId","size","sourceId","vedgeModel","expandCombo","vedgeId","show","collapseExpandCombo","parentModel","collapseGroup","expandGroup","addPlugin","removePlugin","destroyPlugin","comboSorted","depthMap","dataDepthMap","cTree","edgeItem","sourceDepth","targetDepth","Math","max","array","getNeighbors","getNodeDegree","degrees","nodeDegrees","res","inDegree","outDegree","getUndoStack","getRedoStack","getStackData","toArray","stackType","stackData","getAdjMatrix","cache","currentAdjMatrix","getShortestPathMatrix","currentShourtestPathMatrix","tooltipDOMs","parent_1","parentElement","querySelector","createHull","parent","hullMap","hull","hullId","getHulls","getHullById","removeHull","hullInstance","setImageWaterMarker","imgURL","config","waterMarkerImage","style","position","waterMarkerConfig","imageWaterMarkerConfig","compatible","image","capture","display","ctx","rotate","PI","img","Image","crossOrigin","src","onload","drawImage","box","cssText","appendChild","setTextWaterMarker","texts","textWaterMarkerConfig","fill","fontFamily","fontSize","baseline","lineHeight","font","textBaseline","fillText"],"mappings":"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","sourcesContent":["import { __assign, __extends, __spreadArrays } from \"tslib\";\nimport EventEmitter from '@antv/event-emitter';\nimport GCanvas from '@antv/g-canvas/lib/canvas';\nimport GSVGCanvas from '@antv/g-svg/lib/canvas';\nimport { mat3 } from '@antv/matrix-util/lib';\nimport { clone, deepMix, each, isPlainObject, isString, isNumber, groupBy } from '@antv/util';\nimport { getAllNodeInGroups } from '../util/group';\nimport { move } from '../util/math';\nimport Global from '../global';\nimport { CustomGroup, EventController, ItemController, LayoutController, ModeController, StateController, ViewController } from './controller';\nimport createDom from '@antv/dom-util/lib/create-dom';\nimport { plainCombosToTrees, traverseTree, reconstructTree, traverseTreeUp } from '../util/graphic';\nimport degree from '../algorithm/degree';\nimport Stack from '../algorithm/structs/stack';\nimport adjMatrix from '../algorithm/adjacent-matrix';\nimport floydWarshall from '../algorithm/floydWarshall';\nimport Hull from '../item/hull';\nvar NODE = 'node';\nvar SVG = 'svg';\n\nvar Graph =\n/** @class */\nfunction (_super) {\n  __extends(Graph, _super);\n\n  function Graph(cfg) {\n    var _this = _super.call(this) || this;\n\n    _this.cfg = deepMix(_this.getDefaultCfg(), cfg);\n\n    _this.init();\n\n    _this.animating = false;\n    _this.destroyed = false; // 启用 stack 后，实例化 undoStack 和 redoStack\n\n    if (_this.cfg.enabledStack) {\n      // 实例化 undo 和 redo 栈\n      _this.undoStack = new Stack(_this.cfg.maxStep);\n      _this.redoStack = new Stack(_this.cfg.maxStep);\n    }\n\n    return _this;\n  }\n\n  Graph.prototype.init = function () {\n    this.initCanvas(); // instance controller\n\n    var eventController = new EventController(this);\n    var viewController = new ViewController(this);\n    var modeController = new ModeController(this);\n    var itemController = new ItemController(this);\n    var layoutController = new LayoutController(this);\n    var stateController = new StateController(this);\n    var customGroupControll = new CustomGroup(this);\n    this.set({\n      eventController: eventController,\n      viewController: viewController,\n      modeController: modeController,\n      itemController: itemController,\n      layoutController: layoutController,\n      stateController: stateController,\n      customGroupControll: customGroupControll\n    });\n    this.initPlugin();\n  };\n\n  Graph.prototype.initCanvas = function () {\n    var container = this.get('container');\n\n    if (isString(container)) {\n      container = document.getElementById(container);\n      this.set('container', container);\n    }\n\n    if (!container) {\n      throw new Error('invalid container');\n    }\n\n    var width = this.get('width');\n    var height = this.get('height');\n    var renderer = this.get('renderer');\n    var canvas;\n\n    if (renderer === SVG) {\n      canvas = new GSVGCanvas({\n        container: container,\n        width: width,\n        height: height\n      });\n    } else {\n      var canvasCfg = {\n        container: container,\n        width: width,\n        height: height\n      };\n      var pixelRatio = this.get('pixelRatio');\n\n      if (pixelRatio) {\n        canvasCfg.pixelRatio = pixelRatio;\n      }\n\n      canvas = new GCanvas(canvasCfg);\n    }\n\n    this.set('canvas', canvas);\n    this.initGroups();\n  };\n\n  Graph.prototype.initPlugin = function () {\n    var self = this;\n    each(self.get('plugins'), function (plugin) {\n      if (!plugin.destroyed && plugin.initPlugin) {\n        plugin.initPlugin(self);\n      }\n    });\n  }; // 初始化所有 Group\n\n\n  Graph.prototype.initGroups = function () {\n    var canvas = this.get('canvas');\n    var el = this.get('canvas').get('el');\n    var id = el.id;\n    var group = canvas.addGroup({\n      id: id + \"-root\",\n      className: Global.rootContainerClassName\n    });\n\n    if (this.get('groupByTypes')) {\n      var edgeGroup = group.addGroup({\n        id: id + \"-edge\",\n        className: Global.edgeContainerClassName\n      });\n      var nodeGroup = group.addGroup({\n        id: id + \"-node\",\n        className: Global.nodeContainerClassName\n      });\n      var comboGroup = group.addGroup({\n        id: id + \"-combo\",\n        className: Global.comboContainerClassName\n      }); // 用于存储自定义的群组\n\n      var customGroup = group.addGroup({\n        id: id + \"-group\",\n        className: Global.customGroupContainerClassName\n      });\n      customGroup.toBack();\n      comboGroup.toBack();\n      this.set({\n        nodeGroup: nodeGroup,\n        edgeGroup: edgeGroup,\n        customGroup: customGroup,\n        comboGroup: comboGroup\n      });\n    }\n\n    var delegateGroup = group.addGroup({\n      id: id + \"-delegate\",\n      className: Global.delegateContainerClassName\n    });\n    this.set({\n      delegateGroup: delegateGroup\n    });\n    this.set('group', group);\n  }; // eslint-disable-next-line class-methods-use-this\n\n\n  Graph.prototype.getDefaultCfg = function () {\n    return {\n      /**\n       * Container could be dom object or dom id\n       */\n      container: undefined,\n\n      /**\n       * Canvas width\n       * unit pixel if undefined force fit width\n       */\n      width: undefined,\n\n      /**\n       * Canvas height\n       * unit pixel if undefined force fit height\n       */\n      height: undefined,\n\n      /**\n       * renderer canvas or svg\n       * @type {string}\n       */\n      renderer: 'canvas',\n\n      /**\n       * control graph behaviors\n       */\n      modes: {},\n\n      /**\n       * 注册插件\n       */\n      plugins: [],\n\n      /**\n       * source data\n       */\n      data: {},\n\n      /**\n       * Fit view padding (client scale)\n       */\n      fitViewPadding: 10,\n\n      /**\n       * Minimum scale size\n       */\n      minZoom: 0.2,\n\n      /**\n       * Maxmum scale size\n       */\n      maxZoom: 10,\n\n      /**\n       *  capture events\n       */\n      event: true,\n\n      /**\n       * group node & edges into different graphic groups\n       */\n      groupByTypes: true,\n\n      /**\n       * determine if it's a directed graph\n       */\n      directed: false,\n\n      /**\n       * when data or shape changed, should canvas draw automatically\n       */\n      autoPaint: true,\n\n      /**\n       * store all the node instances\n       */\n      nodes: [],\n\n      /**\n       * store all the edge instances\n       */\n      edges: [],\n\n      /**\n       * store all the combo instances\n       */\n      combos: [],\n\n      /**\n       * store all the edge instances which are virtual edges related to collapsed combo\n       */\n      vedges: [],\n\n      /**\n       * all the instances indexed by id\n       */\n      itemMap: {},\n\n      /**\n       * 边直接连接到节点的中心，不再考虑锚点\n       */\n      linkCenter: false,\n\n      /**\n       * 默认的节点配置，data 上定义的配置会覆盖这些配置。例如：\n       * defaultNode: {\n       *  type: 'rect',\n       *  size: [60, 40],\n       *  style: {\n       *    //... 样式配置项\n       *  }\n       * }\n       * 若数据项为 { id: 'node', x: 100, y: 100 }\n       * 实际创建的节点模型是 { id: 'node', x: 100, y: 100， type: 'rect', size: [60, 40] }\n       * 若数据项为 { id: 'node', x: 100, y: 100, type: 'circle' }\n       * 实际创建的节点模型是 { id: 'node', x: 100, y: 100， type: 'circle', size: [60, 40] }\n       */\n      defaultNode: {},\n\n      /**\n       * 默认边配置，data 上定义的配置会覆盖这些配置。用法同 defaultNode\n       */\n      defaultEdge: {},\n\n      /**\n       * 节点默认样式，也可以添加状态样式\n       * 例如：\n       * const graph = new G6.Graph({\n       *  nodeStateStyles: {\n       *    selected: { fill: '#ccc', stroke: '#666' },\n       *    active: { lineWidth: 2 }\n       *  },\n       *  ...\n       * });\n       *\n       */\n      nodeStateStyles: {},\n\n      /**\n       * 边默认样式，用法同nodeStateStyle\n       */\n      edgeStateStyles: {},\n\n      /**\n       * graph 状态\n       */\n      states: {},\n\n      /**\n       * 是否启用全局动画\n       */\n      animate: false,\n\n      /**\n       * 动画设置,仅在 animate 为 true 时有效\n       */\n      animateCfg: {\n        /**\n         * 帧回调函数，用于自定义节点运动路径，为空时线性运动\n         */\n        onFrame: undefined,\n\n        /**\n         * 动画时长(ms)\n         */\n        duration: 500,\n\n        /**\n         * 指定动画动效\n         */\n        easing: 'easeLinear'\n      },\n      callback: undefined,\n\n      /**\n       * group类型\n       */\n      groupType: 'circle',\n\n      /**\n       * group bbox 对象\n       * @private\n       */\n      groupBBoxs: {},\n\n      /**\n       * 以groupid分组的节点数据\n       * @private\n       */\n      groupNodes: {},\n\n      /**\n       * group 数据\n       */\n      groups: [],\n\n      /**\n       * group样式\n       */\n      groupStyle: {},\n      // 默认不启用 undo & redo 功能\n      enabledStack: false,\n      // 只有当 enabledStack 为 true 时才起作用\n      maxStep: 10,\n      // 存储图上的 tooltip dom，方便销毁\n      tooltips: []\n    };\n  };\n  /**\n   * 将值设置到 this.cfg 变量上面\n   * @param key 键 或 对象值\n   * @param val 值\n   */\n\n\n  Graph.prototype.set = function (key, val) {\n    if (isPlainObject(key)) {\n      this.cfg = __assign(__assign({}, this.cfg), key);\n    } else {\n      this.cfg[key] = val;\n    }\n\n    return this;\n  };\n  /**\n   * 获取 this.cfg 中的值\n   * @param key 键\n   */\n\n\n  Graph.prototype.get = function (key) {\n    return this.cfg[key];\n  };\n  /**\n   * 获取 graph 的根图形分组\n   * @return 根 group\n   */\n\n\n  Graph.prototype.getGroup = function () {\n    return this.get('group');\n  };\n  /**\n   * 获取 graph 的 DOM 容器\n   * @return DOM 容器\n   */\n\n\n  Graph.prototype.getContainer = function () {\n    return this.get('container');\n  };\n  /**\n   * 获取 graph 的最小缩放比例\n   * @return minZoom\n   */\n\n\n  Graph.prototype.getMinZoom = function () {\n    return this.get('minZoom');\n  };\n  /**\n   * 设置 graph 的最小缩放比例\n   * @return minZoom\n   */\n\n\n  Graph.prototype.setMinZoom = function (ratio) {\n    return this.set('minZoom', ratio);\n  };\n  /**\n   * 获取 graph 的最大缩放比例\n   * @param maxZoom\n   */\n\n\n  Graph.prototype.getMaxZoom = function () {\n    return this.get('maxZoom');\n  };\n  /**\n   * 设置 graph 的最大缩放比例\n   * @param maxZoom\n   */\n\n\n  Graph.prototype.setMaxZoom = function (ratio) {\n    return this.set('maxZoom', ratio);\n  };\n  /**\n   * 获取 graph 的宽度\n   * @return width\n   */\n\n\n  Graph.prototype.getWidth = function () {\n    return this.get('width');\n  };\n  /**\n   * 获取 graph 的高度\n   * @return width\n   */\n\n\n  Graph.prototype.getHeight = function () {\n    return this.get('height');\n  };\n  /**\n   * 清理元素多个状态\n   * @param {string|Item} item 元素id或元素实例\n   * @param {string[]} states 状态\n   */\n\n\n  Graph.prototype.clearItemStates = function (item, states) {\n    if (isString(item)) {\n      item = this.findById(item);\n    }\n\n    var itemController = this.get('itemController');\n\n    if (!states) {\n      states = item.get('states');\n    }\n\n    itemController.clearItemStates(item, states);\n    var stateController = this.get('stateController');\n    stateController.updateStates(item, states, false);\n  };\n  /**\n   * 设置各个节点样式，以及在各种状态下节点 keyShape 的样式。\n   * 若是自定义节点切在各种状态下\n   * graph.node(node => {\n   *  return {\n   *    type: 'rect',\n   *    label: node.id,\n   *    style: { fill: '#666' },\n   *    stateStyles: {\n   *       selected: { fill: 'blue' },\n   *       custom: { fill: 'green' }\n   *     }\n   *   }\n   * });\n   * @param {function} nodeFn 指定每个节点样式\n   */\n\n\n  Graph.prototype.node = function (nodeFn) {\n    if (typeof nodeFn === 'function') {\n      this.set('nodeMapper', nodeFn);\n    }\n  };\n  /**\n   * 设置各个边样式\n   * @param {function} edgeFn 指定每个边的样式,用法同 node\n   */\n\n\n  Graph.prototype.edge = function (edgeFn) {\n    if (typeof edgeFn === 'function') {\n      this.set('edgeMapper', edgeFn);\n    }\n  };\n  /**\n   * 设置各个 combo 的配置\n   * @param comboFn\n   */\n\n\n  Graph.prototype.combo = function (comboFn) {\n    if (typeof comboFn === 'function') {\n      this.set('comboMapper', comboFn);\n    }\n  };\n  /**\n   * 根据 ID 查询图元素实例\n   * @param id 图元素 ID\n   */\n\n\n  Graph.prototype.findById = function (id) {\n    return this.get('itemMap')[id];\n  };\n  /**\n   * 根据对应规则查找单个元素\n   * @param {ITEM_TYPE} type 元素类型(node | edge | group)\n   * @param {(item: T, index: number) => T} fn 指定规则\n   * @return {T} 元素实例\n   */\n\n\n  Graph.prototype.find = function (type, fn) {\n    var result;\n    var items = this.get(type + \"s\"); // eslint-disable-next-line consistent-return\n\n    each(items, function (item, i) {\n      if (fn(item, i)) {\n        result = item;\n        return result;\n      }\n    });\n    return result;\n  };\n  /**\n   * 查找所有满足规则的元素\n   * @param {string} type 元素类型(node|edge)\n   * @param {string} fn 指定规则\n   * @return {array} 元素实例\n   */\n\n\n  Graph.prototype.findAll = function (type, fn) {\n    var result = [];\n    each(this.get(type + \"s\"), function (item, i) {\n      if (fn(item, i)) {\n        result.push(item);\n      }\n    });\n    return result;\n  };\n  /**\n   * 查找所有处于指定状态的元素\n   * @param {string} type 元素类型(node|edge)\n   * @param {string} state 状态\n   * @return {object} 元素实例\n   */\n\n\n  Graph.prototype.findAllByState = function (type, state) {\n    return this.findAll(type, function (item) {\n      return item.hasState(state);\n    });\n  };\n  /**\n   * 平移画布\n   * @param dx 水平方向位移\n   * @param dy 垂直方向位移\n   */\n\n\n  Graph.prototype.translate = function (dx, dy) {\n    var group = this.get('group');\n    var matrix = clone(group.getMatrix());\n\n    if (!matrix) {\n      matrix = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n    }\n\n    mat3.translate(matrix, matrix, [dx, dy]);\n    group.setMatrix(matrix);\n    this.emit('viewportchange', {\n      action: 'translate',\n      matrix: group.getMatrix()\n    });\n    this.autoPaint();\n  };\n  /**\n   * 平移画布到某点\n   * @param {number} x 水平坐标\n   * @param {number} y 垂直坐标\n   */\n\n\n  Graph.prototype.moveTo = function (x, y) {\n    var group = this.get('group');\n    move(group, {\n      x: x,\n      y: y\n    });\n    this.emit('viewportchange', {\n      action: 'move',\n      matrix: group.getMatrix()\n    });\n  };\n  /**\n   * 调整视口适应视图\n   * @param {object} padding 四周围边距\n   */\n\n\n  Graph.prototype.fitView = function (padding) {\n    if (padding) {\n      this.set('fitViewPadding', padding);\n    }\n\n    var viewController = this.get('viewController');\n    viewController.fitView();\n    this.autoPaint();\n  };\n  /**\n   * 调整视口适应视图，不缩放，仅将图 bbox 中心对齐到画布中心\n   */\n\n\n  Graph.prototype.fitCenter = function () {\n    var viewController = this.get('viewController');\n    viewController.fitCenter();\n    this.autoPaint();\n  };\n  /**\n   * 新增行为\n   * @param {string | ModeOption | ModeType[]} behaviors 添加的行为\n   * @param {string | string[]} modes 添加到对应的模式\n   * @return {Graph} Graph\n   */\n\n\n  Graph.prototype.addBehaviors = function (behaviors, modes) {\n    var modeController = this.get('modeController');\n    modeController.manipulateBehaviors(behaviors, modes, true);\n    return this;\n  };\n  /**\n   * 移除行为\n   * @param {string | ModeOption | ModeType[]} behaviors 移除的行为\n   * @param {string | string[]} modes 从指定的模式中移除\n   * @return {Graph} Graph\n   */\n\n\n  Graph.prototype.removeBehaviors = function (behaviors, modes) {\n    var modeController = this.get('modeController');\n    modeController.manipulateBehaviors(behaviors, modes, false);\n    return this;\n  };\n  /**\n   * 伸缩窗口\n   * @param ratio 伸缩比例\n   * @param center 以center的x, y坐标为中心缩放\n   */\n\n\n  Graph.prototype.zoom = function (ratio, center) {\n    var group = this.get('group');\n    var matrix = clone(group.getMatrix());\n    var minZoom = this.get('minZoom');\n    var maxZoom = this.get('maxZoom');\n\n    if (!matrix) {\n      matrix = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n    }\n\n    if (center) {\n      mat3.translate(matrix, matrix, [-center.x, -center.y]);\n      mat3.scale(matrix, matrix, [ratio, ratio]);\n      mat3.translate(matrix, matrix, [center.x, center.y]);\n    } else {\n      mat3.scale(matrix, matrix, [ratio, ratio]);\n    }\n\n    if (minZoom && matrix[0] < minZoom || maxZoom && matrix[0] > maxZoom) {\n      return;\n    }\n\n    group.setMatrix(matrix);\n    this.emit('viewportchange', {\n      action: 'zoom',\n      matrix: matrix\n    });\n    this.autoPaint();\n  };\n  /**\n   * 伸缩视口到一固定比例\n   * @param {number} toRatio 伸缩比例\n   * @param {Point} center 以center的x, y坐标为中心缩放\n   */\n\n\n  Graph.prototype.zoomTo = function (toRatio, center) {\n    var ratio = toRatio / this.getZoom();\n    this.zoom(ratio, center);\n  };\n  /**\n   * 将元素移动到视口中心\n   * @param {Item} item 指定元素\n   * @param {boolean} animate 是否带有动画地移动\n   * @param {GraphAnimateConfig} animateCfg 若带有动画，动画的配置项\n   */\n\n\n  Graph.prototype.focusItem = function (item, animate, animateCfg) {\n    var viewController = this.get('viewController');\n    var isAnimate = false;\n    if (animate) isAnimate = true;else if (animate === undefined) isAnimate = this.get('animate');\n    var curAniamteCfg = {};\n    if (animateCfg) curAniamteCfg = animateCfg;else if (animateCfg === undefined) curAniamteCfg = this.get('animateCfg');\n    viewController.focus(item, isAnimate, curAniamteCfg);\n    this.autoPaint();\n  };\n  /**\n   * 自动重绘\n   * @internal 仅供内部更新机制调用，外部根据需求调用 render 或 paint 接口\n   */\n\n\n  Graph.prototype.autoPaint = function () {\n    if (this.get('autoPaint')) {\n      this.paint();\n    }\n  };\n  /**\n   * 仅画布重新绘制\n   */\n\n\n  Graph.prototype.paint = function () {\n    this.emit('beforepaint');\n    this.get('canvas').draw();\n    this.emit('afterpaint');\n  };\n  /**\n   * 将屏幕坐标转换为视口坐标\n   * @param {number} clientX 屏幕x坐标\n   * @param {number} clientY 屏幕y坐标\n   * @return {Point} 视口坐标\n   */\n\n\n  Graph.prototype.getPointByClient = function (clientX, clientY) {\n    var viewController = this.get('viewController');\n    return viewController.getPointByClient(clientX, clientY);\n  };\n  /**\n   * 将视口坐标转换为屏幕坐标\n   * @param {number} x 视口x坐标\n   * @param {number} y 视口y坐标\n   * @return {Point} 视口坐标\n   */\n\n\n  Graph.prototype.getClientByPoint = function (x, y) {\n    var viewController = this.get('viewController');\n    return viewController.getClientByPoint(x, y);\n  };\n  /**\n   * 将画布坐标转换为视口坐标\n   * @param {number} canvasX 画布 x 坐标\n   * @param {number} canvasY 画布 y 坐标\n   * @return {object} 视口坐标\n   */\n\n\n  Graph.prototype.getPointByCanvas = function (canvasX, canvasY) {\n    var viewController = this.get('viewController');\n    return viewController.getPointByCanvas(canvasX, canvasY);\n  };\n  /**\n   * 将视口坐标转换为画布坐标\n   * @param {number} x 视口 x 坐标\n   * @param {number} y 视口 y 坐标\n   * @return {object} 画布坐标\n   */\n\n\n  Graph.prototype.getCanvasByPoint = function (x, y) {\n    var viewController = this.get('viewController');\n    return viewController.getCanvasByPoint(x, y);\n  };\n  /**\n   * 显示元素\n   * @param {Item} item 指定元素\n   * @param {boolean} stack 本次操作是否入栈，默认为 true\n   */\n\n\n  Graph.prototype.showItem = function (item, stack) {\n    if (stack === void 0) {\n      stack = true;\n    }\n\n    var itemController = this.get('itemController');\n    var object = itemController.changeItemVisibility(item, true);\n\n    if (stack && this.get('enabledStack')) {\n      var id = object.getID();\n      var type = object.getType();\n      var before = {};\n      var after = {};\n\n      switch (type) {\n        case 'node':\n          before.nodes = [{\n            id: id,\n            visible: false\n          }];\n          after.nodes = [{\n            id: id,\n            visible: true\n          }];\n          break;\n\n        case 'edge':\n          before.nodes = [{\n            id: id,\n            visible: false\n          }];\n          after.edges = [{\n            id: id,\n            visible: true\n          }];\n          break;\n\n        case 'combo':\n          before.nodes = [{\n            id: id,\n            visible: false\n          }];\n          after.combos = [{\n            id: id,\n            visible: true\n          }];\n          break;\n\n        default:\n          break;\n      }\n\n      this.pushStack('visible', {\n        before: before,\n        after: after\n      });\n    }\n  };\n  /**\n   * 隐藏元素\n   * @param {Item} item 指定元素\n   * @param {boolean} stack 本次操作是否入栈，默认为 true\n   */\n\n\n  Graph.prototype.hideItem = function (item, stack) {\n    if (stack === void 0) {\n      stack = true;\n    }\n\n    var itemController = this.get('itemController');\n    var object = itemController.changeItemVisibility(item, false);\n\n    if (stack && this.get('enabledStack')) {\n      var id = object.getID();\n      var type = object.getType();\n      var before = {};\n      var after = {};\n\n      switch (type) {\n        case 'node':\n          before.nodes = [{\n            id: id,\n            visible: true\n          }];\n          after.nodes = [{\n            id: id,\n            visible: false\n          }];\n          break;\n\n        case 'edge':\n          before.nodes = [{\n            id: id,\n            visible: true\n          }];\n          after.edges = [{\n            id: id,\n            visible: false\n          }];\n          break;\n\n        case 'combo':\n          before.nodes = [{\n            id: id,\n            visible: true\n          }];\n          after.combos = [{\n            id: id,\n            visible: false\n          }];\n          break;\n\n        default:\n          break;\n      }\n\n      this.pushStack('visible', {\n        before: before,\n        after: after\n      });\n    }\n  };\n  /**\n   * 刷新元素\n   * @param {string|object} item 元素id或元素实例\n   */\n\n\n  Graph.prototype.refreshItem = function (item) {\n    var itemController = this.get('itemController');\n    itemController.refreshItem(item);\n  };\n  /**\n   * 设置是否在更新/刷新后自动重绘\n   * @param {boolean} auto 自动重绘\n   */\n\n\n  Graph.prototype.setAutoPaint = function (auto) {\n    var self = this;\n    self.set('autoPaint', auto);\n    var canvas = self.get('canvas');\n    canvas.set('autoDraw', auto);\n  };\n  /**\n   * 删除元素\n   * @param {Item} item 元素id或元素实例\n   * @param {boolean} stack 本次操作是否入栈，默认为 true\n   */\n\n\n  Graph.prototype.remove = function (item, stack) {\n    if (stack === void 0) {\n      stack = true;\n    }\n\n    this.removeItem(item, stack);\n  };\n  /**\n   * 删除元素\n   * @param {Item} item 元素id或元素实例\n   * @param {boolean} stack 本次操作是否入栈，默认为 true\n   */\n\n\n  Graph.prototype.removeItem = function (item, stack) {\n    if (stack === void 0) {\n      stack = true;\n    } // 如果item是字符串，且查询的节点实例不存在，则认为是删除group\n\n\n    var nodeItem = item;\n    if (isString(item)) nodeItem = this.findById(item);\n\n    if (!nodeItem && isString(item)) {\n      console.warn('The item to be removed does not exist!');\n      var customGroupControll = this.get('customGroupControll');\n      customGroupControll.remove(item);\n    } else if (nodeItem) {\n      var type = '';\n      if (nodeItem.getType) type = nodeItem.getType(); // 将删除的元素入栈\n\n      if (stack && this.get('enabledStack')) {\n        var deletedModel = __assign(__assign({}, nodeItem.getModel()), {\n          itemType: type\n        });\n\n        var before = {};\n\n        switch (type) {\n          case 'node':\n            {\n              before.nodes = [deletedModel];\n              before.edges = [];\n              var edges = nodeItem.getEdges();\n\n              for (var i = edges.length - 1; i >= 0; i--) {\n                before.edges.push(__assign(__assign({}, edges[i].getModel()), {\n                  itemType: 'edge'\n                }));\n              }\n\n              break;\n            }\n\n          case 'edge':\n            before.edges = [deletedModel];\n            break;\n\n          case 'combo':\n            before.combos = [deletedModel];\n            break;\n\n          default:\n            break;\n        }\n\n        this.pushStack('delete', {\n          before: before,\n          after: {}\n        });\n      }\n\n      var itemController = this.get('itemController');\n      itemController.removeItem(item);\n\n      if (type === 'combo') {\n        var newComboTrees = reconstructTree(this.get('comboTrees'));\n        this.set('comboTrees', newComboTrees);\n      }\n    }\n  };\n  /**\n   * 新增元素 或 节点分组\n   * @param {ITEM_TYPE} type 元素类型(node | edge | group)\n   * @param {ModelConfig} model 元素数据模型\n   * @param {boolean} stack 本次操作是否入栈，默认为 true\n   * @param {boolean} sortCombo 本次操作是否需要更新 combo 层级顺序，内部参数，用户在外部使用 addItem 时始终时需要更新\n   * @return {Item} 元素实例\n   */\n\n\n  Graph.prototype.addItem = function (type, model, stack, sortCombo) {\n    if (stack === void 0) {\n      stack = true;\n    }\n\n    if (sortCombo === void 0) {\n      sortCombo = true;\n    }\n\n    var currentComboSorted = this.get('comboSorted');\n    this.set('comboSorted', currentComboSorted && !sortCombo);\n    var itemController = this.get('itemController');\n\n    if (type === 'group') {\n      var groupId = model.groupId,\n          nodes = model.nodes,\n          groupType = model.type,\n          zIndex = model.zIndex,\n          title = model.title;\n      var groupTitle = title;\n\n      if (isString(title)) {\n        groupTitle = {\n          text: title\n        };\n      }\n\n      return this.get('customGroupControll').create(groupId, nodes, groupType, zIndex, true, groupTitle);\n    }\n\n    if (model.id && this.findById(model.id)) {\n      console.warn(\"This item exists already. Be sure the id %c\" + model.id + \"%c is unique.\", 'font-size: 20px; color: red;', '');\n      return;\n    }\n\n    var item;\n    var comboTrees = this.get('comboTrees');\n    if (!comboTrees) comboTrees = [];\n\n    if (type === 'combo') {\n      var itemMap_1 = this.get('itemMap');\n      var foundParent_1 = false;\n      comboTrees.forEach(function (ctree) {\n        if (foundParent_1) return; // terminate the forEach after the tree containing the item is done\n\n        traverseTreeUp(ctree, function (child) {\n          // find the parent\n          if (model.parentId === child.id) {\n            foundParent_1 = true;\n\n            var newCombo = __assign({\n              id: model.id,\n              depth: child.depth + 2\n            }, model);\n\n            if (child.children) child.children.push(newCombo);else child.children = [newCombo];\n            model.depth = newCombo.depth;\n            item = itemController.addItem(type, model);\n          }\n\n          var childItem = itemMap_1[child.id]; // after the parent is found, update all the ancestors\n\n          if (foundParent_1 && childItem && childItem.getType && childItem.getType() === 'combo') {\n            itemController.updateCombo(childItem, child.children);\n          }\n\n          return true;\n        });\n      }); // if the parent is not found, add it to the root\n\n      if (!foundParent_1) {\n        var newCombo = __assign({\n          id: model.id,\n          depth: 0\n        }, model);\n\n        model.depth = newCombo.depth;\n        comboTrees.push(newCombo);\n        item = itemController.addItem(type, model);\n      }\n\n      this.set('comboTrees', comboTrees);\n    } else if (type === 'node' && isString(model.comboId) && comboTrees) {\n      var parentCombo = this.findById(model.comboId);\n\n      if (parentCombo && parentCombo.getType && parentCombo.getType() !== 'combo') {\n        console.warn(\"'\" + model.comboId + \"' is a not id of a combo in the graph, the node will be added without combo.\");\n        return;\n      }\n\n      item = itemController.addItem(type, model);\n      var itemMap_2 = this.get('itemMap');\n      var foundParent_2 = false,\n          foundNode_1 = false;\n      (comboTrees || []).forEach(function (ctree) {\n        if (foundNode_1 || foundParent_2) return; // terminate the forEach\n\n        traverseTreeUp(ctree, function (child) {\n          if (child.id === model.id) {\n            // if the item exists in the tree already, terminate\n            foundNode_1 = true;\n            return false;\n          }\n\n          if (model.comboId === child.id && !foundNode_1) {\n            // found the parent, add the item to the children of its parent in the tree\n            foundParent_2 = true;\n            var cloneNode = clone(model);\n            cloneNode.itemType = 'node';\n            if (child.children) child.children.push(cloneNode);else child.children = [cloneNode];\n            model.depth = child.depth + 1;\n          } // update the size of all the ancestors\n\n\n          if (foundParent_2 && itemMap_2[child.id].getType && itemMap_2[child.id].getType() === 'combo') {\n            itemController.updateCombo(itemMap_2[child.id], child.children);\n          }\n\n          return true;\n        });\n      });\n    } else {\n      item = itemController.addItem(type, model);\n    }\n\n    if (type === 'node' && model.comboId || type === 'combo' && model.parentId) {\n      // add the combo to the parent's children array\n      var parentCombo = this.findById(model.comboId || model.parentId);\n      if (parentCombo) parentCombo.addChild(item);\n    }\n\n    var combos = this.get('combos');\n\n    if (combos && combos.length > 0) {\n      this.sortCombos();\n    }\n\n    this.autoPaint();\n\n    if (stack && this.get('enabledStack')) {\n      var addedModel = __assign(__assign({}, item.getModel()), {\n        itemType: type\n      });\n\n      var after = {};\n\n      switch (type) {\n        case 'node':\n          after.nodes = [addedModel];\n          break;\n\n        case 'edge':\n          after.edges = [addedModel];\n          break;\n\n        case 'combo':\n          after.combos = [addedModel];\n          break;\n\n        default:\n          break;\n      }\n\n      this.pushStack('add', {\n        before: {},\n        after: after\n      });\n    }\n\n    return item;\n  };\n  /**\n   * 新增元素 或 节点分组\n   * @param {ITEM_TYPE} type 元素类型(node | edge | group)\n   * @param {ModelConfig} model 元素数据模型\n   * @param {boolean} stack 本次操作是否入栈，默认为 true\n   * @return {Item} 元素实例\n   */\n\n\n  Graph.prototype.add = function (type, model, stack, sortCombo) {\n    if (stack === void 0) {\n      stack = true;\n    }\n\n    if (sortCombo === void 0) {\n      sortCombo = true;\n    }\n\n    return this.addItem(type, model, stack, sortCombo);\n  };\n  /**\n   * 更新元素\n   * @param {Item} item 元素id或元素实例\n   * @param {Partial<NodeConfig> | EdgeConfig} cfg 需要更新的数据\n   */\n\n\n  Graph.prototype.updateItem = function (item, cfg, stack) {\n    var _this = this;\n\n    if (stack === void 0) {\n      stack = true;\n    }\n\n    var itemController = this.get('itemController');\n    var currentItem;\n\n    if (isString(item)) {\n      currentItem = this.findById(item);\n    } else {\n      currentItem = item;\n    }\n\n    var UnupdateModel = clone(currentItem.getModel());\n    var type = '';\n    if (currentItem.getType) type = currentItem.getType();\n\n    var states = __spreadArrays(currentItem.getStates());\n\n    if (type === 'combo') {\n      each(states, function (state) {\n        return _this.setItemState(currentItem, state, false);\n      });\n    }\n\n    itemController.updateItem(currentItem, cfg);\n\n    if (type === 'combo') {\n      each(states, function (state) {\n        return _this.setItemState(currentItem, state, true);\n      });\n    }\n\n    if (stack && this.get('enabledStack')) {\n      var before = {\n        nodes: [],\n        edges: [],\n        combos: []\n      };\n      var after = {\n        nodes: [],\n        edges: [],\n        combos: []\n      };\n\n      var afterModel = __assign({\n        id: UnupdateModel.id\n      }, cfg);\n\n      switch (type) {\n        case 'node':\n          before.nodes.push(UnupdateModel);\n          after.nodes.push(afterModel);\n          break;\n\n        case 'edge':\n          before.edges.push(UnupdateModel);\n          after.edges.push(afterModel);\n          break;\n\n        case 'combo':\n          before.combos.push(UnupdateModel);\n          after.combos.push(afterModel);\n          break;\n\n        default:\n          break;\n      }\n\n      if (type === 'node') {\n        before.nodes.push(UnupdateModel);\n      }\n\n      this.pushStack('update', {\n        before: before,\n        after: after\n      });\n    }\n  };\n  /**\n   * 更新元素\n   * @param {Item} item 元素id或元素实例\n   * @param {Partial<NodeConfig> | EdgeConfig} cfg 需要更新的数据\n   * @param {boolean} stack 本次操作是否入栈，默认为 true\n   */\n\n\n  Graph.prototype.update = function (item, cfg, stack) {\n    if (stack === void 0) {\n      stack = true;\n    }\n\n    this.updateItem(item, cfg, stack);\n  };\n  /**\n   * 设置元素状态\n   * @param {Item} item 元素id或元素实例\n   * @param {string} state 状态名称\n   * @param {string | boolean} value 是否启用状态 或 状态值\n   */\n\n\n  Graph.prototype.setItemState = function (item, state, value) {\n    if (isString(item)) {\n      item = this.findById(item);\n    }\n\n    var itemController = this.get('itemController');\n    itemController.setItemState(item, state, value);\n    var stateController = this.get('stateController');\n\n    if (isString(value)) {\n      stateController.updateState(item, state + \":\" + value, true);\n    } else {\n      stateController.updateState(item, state, value);\n    }\n  };\n  /**\n   * 将指定状态的优先级提升为最高优先级\n   * @param {Item} item 元素id或元素实例\n   * @param state 状态名称\n   */\n\n\n  Graph.prototype.priorityState = function (item, state) {\n    var itemController = this.get('itemController');\n    itemController.priorityState(item, state);\n  };\n  /**\n   * 设置视图初始化数据\n   * @param {GraphData} data 初始化数据\n   */\n\n\n  Graph.prototype.data = function (data) {\n    this.set('data', data);\n  };\n  /**\n   * 根据data接口的数据渲染视图\n   */\n\n\n  Graph.prototype.render = function () {\n    var self = this;\n    this.set('comboSorted', false);\n    var data = this.get('data');\n\n    if (this.get('enabledStack')) {\n      // render 之前清空 redo 和 undo 栈\n      this.clearStack();\n    }\n\n    if (!data) {\n      throw new Error('data must be defined first');\n    }\n\n    var _a = data.nodes,\n        nodes = _a === void 0 ? [] : _a,\n        _b = data.edges,\n        edges = _b === void 0 ? [] : _b,\n        _c = data.combos,\n        combos = _c === void 0 ? [] : _c;\n    this.clear();\n    this.emit('beforerender');\n    each(nodes, function (node) {\n      self.add('node', node, false, false);\n    }); // process the data to tree structure\n\n    if (combos && combos.length !== 0) {\n      var comboTrees = plainCombosToTrees(combos, nodes);\n      this.set('comboTrees', comboTrees); // add combos\n\n      self.addCombos(combos);\n    }\n\n    each(edges, function (edge) {\n      self.add('edge', edge, false, false);\n    });\n    var animate = self.get('animate');\n\n    if (self.get('fitView') || self.get('fitCenter')) {\n      self.set('animate', false);\n    } // layout\n\n\n    var layoutController = self.get('layoutController');\n\n    if (!layoutController.layout(success)) {\n      success();\n    }\n\n    function success() {\n      if (self.get('fitView')) {\n        self.fitView();\n      } else if (self.get('fitCenter')) {\n        self.fitCenter();\n      }\n\n      self.autoPaint();\n      self.emit('afterrender');\n\n      if (self.get('fitView') || self.get('fitCenter')) {\n        self.set('animate', animate);\n      }\n    }\n\n    if (!this.get('groupByTypes')) {\n      if (combos && combos.length !== 0) {\n        this.sortCombos();\n      } else {\n        // 为提升性能，选择数量少的进行操作\n        if (data.nodes && data.edges && data.nodes.length < data.edges.length) {\n          var nodesArr = this.getNodes(); // 遍历节点实例，将所有节点提前。\n\n          nodesArr.forEach(function (node) {\n            node.toFront();\n          });\n        } else {\n          var edgesArr = this.getEdges(); // 遍历节点实例，将所有节点提前。\n\n          edgesArr.forEach(function (edge) {\n            edge.toBack();\n          });\n        }\n      }\n    } // 防止传入的数据不存在nodes\n\n\n    if (data.nodes) {\n      // 获取所有有groupID的node\n      var nodeInGroup = data.nodes.filter(function (node) {\n        return node.groupId;\n      }); // 所有node中存在groupID，则说明需要群组\n\n      if (nodeInGroup.length > 0) {\n        // 渲染群组\n        var groupType = self.get('groupType');\n        this.renderCustomGroup(data, groupType);\n      }\n    }\n\n    if (this.get('enabledStack')) {\n      this.pushStack('render');\n    }\n  };\n  /**\n   * 接收数据进行渲染\n   * @Param {Object} data 初始化数据\n   */\n\n\n  Graph.prototype.read = function (data) {\n    this.data(data);\n    this.render();\n  }; // 比较item\n\n\n  Graph.prototype.diffItems = function (type, items, models) {\n    var self = this;\n    var item;\n    var itemMap = this.get('itemMap');\n    each(models, function (model) {\n      item = itemMap[model.id];\n\n      if (item) {\n        if (self.get('animate') && type === NODE) {\n          var containerMatrix = item.getContainer().getMatrix();\n          if (!containerMatrix) containerMatrix = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n          item.set('originAttrs', {\n            x: containerMatrix[6],\n            y: containerMatrix[7]\n          });\n        }\n\n        self.updateItem(item, model, false);\n      } else {\n        item = self.addItem(type, model, false);\n      }\n\n      items[type + \"s\"].push(item);\n    });\n  };\n  /**\n   * 更改源数据，根据新数据重新渲染视图\n   * @param {GraphData | TreeGraphData} data 源数据\n   * @param {boolean} 是否入栈，默认为true\n   * @return {object} this\n   */\n\n\n  Graph.prototype.changeData = function (data, stack) {\n    if (stack === void 0) {\n      stack = true;\n    }\n\n    var self = this;\n\n    if (!data) {\n      return this;\n    }\n\n    if (stack && this.get('enabledStack')) {\n      this.pushStack('changedata', {\n        before: self.save(),\n        after: data\n      });\n    }\n\n    this.set('comboSorted', false); // 更改数据源后，取消所有状态\n\n    this.getNodes().map(function (node) {\n      return self.clearItemStates(node);\n    });\n    this.getEdges().map(function (edge) {\n      return self.clearItemStates(edge);\n    });\n    var canvas = this.get('canvas');\n    var localRefresh = canvas.get('localRefresh');\n    canvas.set('localRefresh', false);\n\n    if (!self.get('data')) {\n      self.data(data);\n      self.render();\n    }\n\n    var itemMap = this.get('itemMap');\n    var items = {\n      nodes: [],\n      edges: []\n    };\n    var combosData = data.combos;\n\n    if (combosData) {\n      var comboTrees = plainCombosToTrees(combosData, data.nodes);\n      this.set('comboTrees', comboTrees);\n    }\n\n    this.diffItems('node', items, data.nodes);\n    each(itemMap, function (item, id) {\n      itemMap[id].getModel().depth = 0;\n      if (item.getType && item.getType() === 'edge') return;\n\n      if (item.getType && item.getType() === 'combo') {\n        delete itemMap[id];\n        item.destroy();\n      } else if (items.nodes.indexOf(item) < 0) {\n        delete itemMap[id];\n        self.remove(item, false);\n      }\n    }); // clear the destroyed combos here to avoid removing sub nodes before removing the parent combo\n\n    var comboItems = this.getCombos();\n    var combosLength = comboItems.length;\n\n    for (var i = combosLength - 1; i >= 0; i--) {\n      if (comboItems[i].destroyed) {\n        comboItems.splice(i, 1);\n      }\n    } // process the data to tree structure\n\n\n    if (combosData) {\n      // add combos\n      self.addCombos(combosData);\n\n      if (!this.get('groupByTypes')) {\n        this.sortCombos();\n      }\n    }\n\n    this.diffItems('edge', items, data.edges);\n    each(itemMap, function (item, id) {\n      if (item.getType && (item.getType() === 'node' || item.getType() === 'combo')) return;\n\n      if (items.edges.indexOf(item) < 0) {\n        delete itemMap[id];\n        self.remove(item, false);\n      }\n    });\n    this.set({\n      nodes: items.nodes,\n      edges: items.edges\n    });\n    var layoutController = this.get('layoutController');\n    layoutController.changeData();\n\n    if (self.get('animate') && !layoutController.getLayoutType()) {\n      // 如果没有指定布局\n      self.positionsAnimate();\n    } else {\n      self.autoPaint();\n    }\n\n    setTimeout(function () {\n      canvas.set('localRefresh', localRefresh);\n    }, 16);\n    return this;\n  };\n  /**\n   * 私有方法，在 render 和 changeData 的时候批量添加数据中所有平铺的 combos\n   * @param {ComboConfig[]} combos 平铺的 combos 数据\n   */\n\n\n  Graph.prototype.addCombos = function (combos) {\n    var self = this;\n    var comboTrees = self.get('comboTrees');\n    var itemController = this.get('itemController');\n    itemController.addCombos(comboTrees, combos);\n  };\n  /**\n   * 根据已经存在的节点或 combo 创建新的 combo\n   * @param combo combo ID 或 Combo 配置\n   * @param children 添加到 Combo 中的元素，包括节点和 combo\n   */\n\n\n  Graph.prototype.createCombo = function (combo, children) {\n    var _this = this;\n\n    this.set('comboSorted', false); // step 1: 创建新的 Combo\n\n    var comboId = '';\n    var comboConfig;\n    if (!combo) return;\n\n    if (isString(combo)) {\n      comboId = combo;\n      comboConfig = {\n        id: combo\n      };\n    } else {\n      comboId = combo.id;\n\n      if (!comboId) {\n        console.warn('Create combo failed. Please assign a unique string id for the adding combo.');\n        return;\n      }\n\n      comboConfig = combo;\n    }\n\n    var trees = children.map(function (elementId) {\n      var item = _this.findById(elementId);\n\n      var type = '';\n      if (item.getType) type = item.getType();\n      var cItem = {\n        id: item.getID(),\n        itemType: type\n      };\n\n      if (type === 'combo') {\n        cItem.parentId = comboId;\n      } else if (type === 'node') {\n        cItem.comboId = comboId;\n      }\n\n      return cItem;\n    });\n    comboConfig.children = trees; // step 2: 添加 Combo，addItem 时会将子将元素添加到 Combo 中\n\n    this.addItem('combo', comboConfig, false);\n    this.set('comboSorted', false); // step3: 更新 comboTrees 结构\n\n    var comboTrees = this.get('comboTrees');\n    (comboTrees || []).forEach(function (ctree) {\n      traverseTreeUp(ctree, function (child) {\n        if (child.id === comboId) {\n          child.itemType = 'combo';\n          child.children = trees;\n          return false;\n        }\n\n        return true;\n      });\n    });\n\n    if (comboTrees) {\n      this.sortCombos();\n    }\n  };\n  /**\n   * 解散 combo\n   * @param {String | INode | ICombo} combo 需要被解散的 Combo item 或 id\n   */\n\n\n  Graph.prototype.uncombo = function (combo) {\n    var _this = this;\n\n    var _a;\n\n    var self = this;\n    var comboItem = combo;\n\n    if (isString(combo)) {\n      comboItem = this.findById(combo);\n    }\n\n    if (!comboItem || comboItem.getType && comboItem.getType() !== 'combo') {\n      console.warn('The item is not a combo!');\n      return;\n    }\n\n    var parentId = comboItem.getModel().parentId;\n    var comboTrees = self.get('comboTrees');\n    if (!comboTrees) comboTrees = [];\n    var itemMap = this.get('itemMap');\n    var comboId = comboItem.get('id');\n    var treeToBeUncombo;\n    var brothers = [];\n    var comboItems = this.get('combos');\n    var parentItem = this.findById(parentId);\n    comboTrees.forEach(function (ctree) {\n      if (treeToBeUncombo) return; // terminate the forEach\n\n      traverseTreeUp(ctree, function (subtree) {\n        var _a; // find the combo to be uncomboed, delete the combo from map and cache\n\n\n        if (subtree.id === comboId) {\n          treeToBeUncombo = subtree; // delete the related edges\n\n          var edges = comboItem.getEdges();\n          edges.forEach(function (edge) {\n            _this.removeItem(edge, false);\n          });\n          var index = comboItems.indexOf(combo);\n          comboItems.splice(index, 1);\n          delete itemMap[comboId];\n          comboItem.destroy();\n        } // find the parent to remove the combo from the combo's brothers array and add the combo's children to the combo's brothers array in the tree\n\n\n        if (parentId && treeToBeUncombo && subtree.id === parentId) {\n          parentItem.removeCombo(comboItem);\n          brothers = subtree.children; // the combo's brothers\n          // remove the combo from its brothers array\n\n          var index = brothers.indexOf(treeToBeUncombo);\n\n          if (index !== -1) {\n            brothers.splice(index, 1);\n          } // append the combo's children to the combo's brothers array\n\n\n          (_a = treeToBeUncombo.children) === null || _a === void 0 ? void 0 : _a.forEach(function (child) {\n            var item = _this.findById(child.id);\n\n            var childModel = item.getModel();\n\n            if (item.getType && item.getType() === 'combo') {\n              child.parentId = parentId;\n              delete child.comboId;\n              childModel.parentId = parentId; // update the parentId of the model\n\n              delete childModel.comboId;\n            } else if (item.getType && item.getType() === 'node') {\n              child.comboId = parentId;\n              childModel.comboId = parentId; // update the parentId of the model\n            }\n\n            parentItem.addChild(item);\n            brothers.push(child);\n          });\n          return false;\n        }\n\n        return true;\n      });\n    }); // if the parentId is not found, remove the combo from the roots\n\n    if (!parentId && treeToBeUncombo) {\n      var index = comboTrees.indexOf(treeToBeUncombo);\n      comboTrees.splice(index, 1); // modify the parentId of the children\n\n      (_a = treeToBeUncombo.children) === null || _a === void 0 ? void 0 : _a.forEach(function (child) {\n        child.parentId = undefined;\n\n        var childModel = _this.findById(child.id).getModel();\n\n        childModel.parentId = undefined; // update the parentId of the model\n\n        if (child.itemType !== 'node') comboTrees.push(child);\n      });\n    }\n  };\n  /**\n   * 根据节点的 bbox 更新所有 combos 的绘制，包括 combos 的位置和范围\n   */\n\n\n  Graph.prototype.updateCombos = function () {\n    var _this = this;\n\n    var self = this;\n    var comboTrees = this.get('comboTrees');\n    var itemController = self.get('itemController');\n    var itemMap = self.get('itemMap');\n    (comboTrees || []).forEach(function (ctree) {\n      traverseTreeUp(ctree, function (child) {\n        if (!child) {\n          return true;\n        }\n\n        var childItem = itemMap[child.id];\n\n        if (childItem && childItem.getType && childItem.getType() === 'combo') {\n          // 更新具体的 Combo 之前先清除所有的已有状态，以免将 state 中的样式更新为 Combo 的样式\n          var states = __spreadArrays(childItem.getStates());\n\n          each(states, function (state) {\n            return _this.setItemState(childItem, state, false);\n          }); // 更新具体的 Combo\n\n          itemController.updateCombo(childItem, child.children); // 更新 Combo 后，还原已有的状态\n\n          each(states, function (state) {\n            return _this.setItemState(childItem, state, true);\n          });\n        }\n\n        return true;\n      });\n    });\n    self.sortCombos();\n  };\n  /**\n   * 根据节点的 bbox 更新 combo 及其祖先 combos 的绘制，包括 combos 的位置和范围\n   * @param {String | ICombo} combo 需要被更新的 Combo 或 id，若指定，则该 Combo 及所有祖先 Combod 都会被更新\n   */\n\n\n  Graph.prototype.updateCombo = function (combo) {\n    var _this = this;\n\n    var self = this;\n    var comboItem = combo;\n    var comboId;\n\n    if (isString(combo)) {\n      comboItem = this.findById(combo);\n    }\n\n    if (!comboItem || comboItem.getType && comboItem.getType() !== 'combo') {\n      console.warn('The item to be updated is not a combo!');\n      return;\n    }\n\n    comboId = comboItem.get('id');\n    var comboTrees = this.get('comboTrees');\n    var itemController = self.get('itemController');\n    var itemMap = self.get('itemMap');\n    (comboTrees || []).forEach(function (ctree) {\n      traverseTreeUp(ctree, function (child) {\n        if (!child) {\n          return true;\n        }\n\n        var childItem = itemMap[child.id];\n\n        if (comboId === child.id && childItem && childItem.getType && childItem.getType() === 'combo') {\n          // 更新具体的 Combo 之前先清除所有的已有状态，以免将 state 中的样式更新为 Combo 的样式\n          var states = __spreadArrays(childItem.getStates()); // || !item.getStateStyle(stateName)\n\n\n          each(states, function (state) {\n            if (childItem.getStateStyle(state)) {\n              _this.setItemState(childItem, state, false);\n            }\n          }); // 更新具体的 Combo\n\n          itemController.updateCombo(childItem, child.children); // 更新 Combo 后，还原已有的状态\n\n          each(states, function (state) {\n            if (childItem.getStateStyle(state)) {\n              _this.setItemState(childItem, state, true);\n            }\n          });\n          if (comboId) comboId = child.parentId;\n        }\n\n        return true;\n      });\n    });\n  };\n  /**\n   * 更新树结构，例如移动子树等\n   * @param {String | INode | ICombo} item 需要被更新的 Combo 或 节点 id\n   * @param {string | undefined} parentId 新的父 combo id，undefined 代表没有父 combo\n   */\n\n\n  Graph.prototype.updateComboTree = function (item, parentId) {\n    var self = this;\n    this.set('comboSorted', false);\n    var uItem;\n\n    if (isString(item)) {\n      uItem = self.findById(item);\n    } else {\n      uItem = item;\n    }\n\n    var model = uItem.getModel();\n    var oldParentId = model.comboId || model.parentId; // 若 item 是 Combo，且 parentId 是其子孙 combo 的 id，则警告并终止\n\n    if (parentId && uItem.getType && uItem.getType() === 'combo') {\n      var comboTrees = this.get('comboTrees');\n      var valid_1 = true;\n      var itemSubTree_1;\n      (comboTrees || []).forEach(function (ctree) {\n        if (itemSubTree_1) return;\n        traverseTree(ctree, function (subTree) {\n          if (itemSubTree_1) return; // 找到从 item 开始的子树\n\n          if (subTree.id === uItem.getID()) {\n            itemSubTree_1 = subTree;\n          }\n\n          return true;\n        });\n      }); // 在以 item 为根的子树中寻找与 parentId 相同的后继元素\n\n      traverseTree(itemSubTree_1, function (subTree) {\n        if (subTree.id === parentId) {\n          valid_1 = false;\n          return false;\n        }\n\n        return true;\n      }); // parentId 是 item 的一个后继元素，不能进行更新\n\n      if (!valid_1) {\n        console.warn('Failed to update the combo tree! The parentId points to a descendant of the combo!');\n        return;\n      }\n    } // 当 combo 存在parentId 或 comboId 时，才将其移除\n\n\n    if (model.parentId || model.comboId) {\n      var combo = this.findById(model.parentId || model.comboId);\n\n      if (combo) {\n        combo.removeChild(uItem);\n      }\n    }\n\n    var type = '';\n    if (uItem.getType) type = uItem.getType();\n\n    if (type === 'combo') {\n      model.parentId = parentId;\n    } else if (type === 'node') {\n      model.comboId = parentId;\n    } // 只有当移入到指定 combo 时才添加\n\n\n    if (parentId) {\n      var parentCombo = this.findById(parentId);\n\n      if (parentCombo) {\n        // 将元素添加到 parentCombo 中\n        parentCombo.addChild(uItem);\n      }\n    } // 如果原先有父亲 combo，则从原父 combo 的子元素数组中删除\n\n\n    if (oldParentId) {\n      var parentCombo = this.findById(oldParentId);\n\n      if (parentCombo) {\n        // 将元素从 parentCombo 中移除\n        parentCombo.removeChild(uItem);\n      }\n    }\n\n    var newComboTrees = reconstructTree(this.get('comboTrees'), model.id, parentId);\n    this.set('comboTrees', newComboTrees);\n    this.updateCombos();\n  };\n  /**\n   * 根据数据渲染群组\n   * @param {GraphData} data 渲染图的数据\n   * @param {string} groupType group类型\n   */\n\n\n  Graph.prototype.renderCustomGroup = function (data, groupType) {\n    var _this = this;\n\n    var groups = data.groups,\n        _a = data.nodes,\n        nodes = _a === void 0 ? [] : _a; // 第一种情况，，不存在groups，则不存在嵌套群组\n\n    var groupIndex = 10;\n\n    if (!groups) {\n      // 存在单个群组\n      // 获取所有有groupID的node\n      var nodeInGroup = nodes.filter(function (node) {\n        return node.groupId;\n      });\n      var groupsArr_1 = []; // 根据groupID分组\n\n      var groupIds_1 = groupBy(nodeInGroup, 'groupId'); // tslint:disable-next-line:forin\n\n      Object.keys(groupIds_1).forEach(function (groupId) {\n        var nodeIds = groupIds_1[groupId].map(function (node) {\n          return node.id;\n        });\n\n        _this.get('customGroupControll').create(groupId, nodeIds, groupType, groupIndex);\n\n        groupIndex--; // 获取所有不重复的 groupId\n\n        if (!groupsArr_1.find(function (d) {\n          return d.id === groupId;\n        })) {\n          groupsArr_1.push({\n            id: groupId\n          });\n        }\n      });\n      this.set({\n        groups: groupsArr_1\n      });\n    } else {\n      // 将groups的数据存到groups中\n      this.set({\n        groups: groups\n      }); // 第二种情况，存在嵌套的群组，数据中有groups字段\n\n      var groupNodes_1 = getAllNodeInGroups(data); // tslint:disable-next-line:forin\n\n      Object.keys(groupNodes_1).forEach(function (groupId) {\n        var tmpNodes = groupNodes_1[groupId];\n\n        _this.get('customGroupControll').create(groupId, tmpNodes, groupType, groupIndex);\n\n        groupIndex--;\n      }); // 对所有Group排序\n\n      var customGroup = this.get('customGroup');\n      customGroup.sort();\n    }\n  };\n  /**\n   * 导出图数据\n   * @return {object} data\n   */\n\n\n  Graph.prototype.save = function () {\n    var nodes = [];\n    var edges = [];\n    var combos = [];\n    each(this.get('nodes'), function (node) {\n      nodes.push(node.getModel());\n    });\n    each(this.get('edges'), function (edge) {\n      edges.push(edge.getModel());\n    });\n    each(this.get('combos'), function (combo) {\n      combos.push(combo.getModel());\n    });\n    return {\n      nodes: nodes,\n      edges: edges,\n      combos: combos,\n      groups: this.get('groups')\n    };\n  };\n  /**\n   * 改变画布大小\n   * @param  {number} width  画布宽度\n   * @param  {number} height 画布高度\n   * @return {object} this\n   */\n\n\n  Graph.prototype.changeSize = function (width, height) {\n    var viewController = this.get('viewController');\n    viewController.changeSize(width, height);\n    return this;\n  };\n  /**\n   * 当源数据在外部发生变更时，根据新数据刷新视图。但是不刷新节点位置\n   */\n\n\n  Graph.prototype.refresh = function () {\n    var self = this;\n    self.emit('beforegraphrefresh');\n\n    if (self.get('animate')) {\n      self.positionsAnimate();\n    } else {\n      var nodes = self.get('nodes');\n      var edges = self.get('edges');\n      var vedges = self.get('edges');\n      each(nodes, function (node) {\n        node.refresh();\n      });\n      each(edges, function (edge) {\n        edge.refresh();\n      });\n      each(vedges, function (vedge) {\n        vedge.refresh();\n      });\n    }\n\n    self.emit('aftergraphrefresh');\n    self.autoPaint();\n  };\n  /**\n   * 获取当前图中所有节点的item实例\n   * @return {INode} item数组\n   */\n\n\n  Graph.prototype.getNodes = function () {\n    return this.get('nodes');\n  };\n  /**\n   * 获取当前图中所有边的item实例\n   * @return {IEdge} item数组\n   */\n\n\n  Graph.prototype.getEdges = function () {\n    return this.get('edges');\n  };\n  /**\n   * 获取图中所有的 combo 实例\n   */\n\n\n  Graph.prototype.getCombos = function () {\n    return this.get('combos');\n  };\n  /**\n   * 获取指定 Combo 中所有的节点\n   * @param comboId combo ID\n   */\n\n\n  Graph.prototype.getComboChildren = function (combo) {\n    if (isString(combo)) {\n      combo = this.findById(combo);\n    }\n\n    if (!combo || combo.getType && combo.getType() !== 'combo') {\n      console.warn('The combo does not exist!');\n      return;\n    }\n\n    return combo.getChildren();\n  };\n  /**\n   * 根据 graph 上的 animateCfg 进行视图中节点位置动画接口\n   */\n\n\n  Graph.prototype.positionsAnimate = function () {\n    var self = this;\n    self.emit('beforeanimate');\n    var animateCfg = self.get('animateCfg');\n    var onFrame = animateCfg.onFrame;\n    var nodes = self.getNodes();\n    var toNodes = nodes.map(function (node) {\n      var model = node.getModel();\n      return {\n        id: model.id,\n        x: model.x,\n        y: model.y\n      };\n    });\n\n    if (self.isAnimating()) {\n      self.stopAnimate();\n    }\n\n    var canvas = self.get('canvas');\n    canvas.animate(function (ratio) {\n      each(toNodes, function (data) {\n        var node = self.findById(data.id);\n\n        if (!node || node.destroyed) {\n          return;\n        }\n\n        var originAttrs = node.get('originAttrs');\n        var model = node.get('model');\n\n        if (!originAttrs) {\n          var containerMatrix = node.getContainer().getMatrix();\n          if (!containerMatrix) containerMatrix = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n          originAttrs = {\n            x: containerMatrix[6],\n            y: containerMatrix[7]\n          };\n          node.set('originAttrs', originAttrs);\n        }\n\n        if (onFrame) {\n          var attrs = onFrame(node, ratio, data, originAttrs);\n          node.set('model', Object.assign(model, attrs));\n        } else {\n          model.x = originAttrs.x + (data.x - originAttrs.x) * ratio;\n          model.y = originAttrs.y + (data.y - originAttrs.y) * ratio;\n        }\n      });\n      self.refreshPositions();\n    }, {\n      duration: animateCfg.duration,\n      easing: animateCfg.easing,\n      callback: function callback() {\n        each(nodes, function (node) {\n          node.set('originAttrs', null);\n        });\n\n        if (animateCfg.callback) {\n          animateCfg.callback();\n        }\n\n        self.emit('afteranimate');\n        self.animating = false;\n      }\n    });\n  };\n  /**\n   * 当节点位置在外部发生改变时，刷新所有节点位置，重计算边\n   */\n\n\n  Graph.prototype.refreshPositions = function () {\n    var self = this;\n    self.emit('beforegraphrefreshposition');\n    var nodes = self.get('nodes');\n    var edges = self.get('edges');\n    var vedges = self.get('vedges');\n    var combos = self.get('combos');\n    var model;\n    var updatedNodes = {};\n    each(nodes, function (node) {\n      model = node.getModel();\n      var originAttrs = node.get('originAttrs');\n\n      if (originAttrs && model.x === originAttrs.x && model.y === originAttrs.y) {\n        return;\n      }\n\n      node.updatePosition({\n        x: model.x,\n        y: model.y\n      });\n      updatedNodes[model.id] = true;\n      if (model.comboId) updatedNodes[model.comboId] = true;\n    });\n\n    if (combos && combos.length !== 0) {\n      self.updateCombos();\n    }\n\n    each(edges, function (edge) {\n      var sourceModel = edge.getSource().getModel();\n      var targetModel = edge.getTarget().getModel();\n\n      if (updatedNodes[sourceModel.id] || updatedNodes[targetModel.id] || edge.getModel().isComboEdge) {\n        edge.refresh();\n      }\n    });\n    each(vedges, function (vedge) {\n      vedge.refresh();\n    });\n    self.emit('aftergraphrefreshposition');\n    self.autoPaint();\n  };\n\n  Graph.prototype.stopAnimate = function () {\n    this.get('canvas').stopAnimate();\n  };\n\n  Graph.prototype.isAnimating = function () {\n    return this.animating;\n  };\n  /**\n   * 获取当前视口伸缩比例\n   * @return {number} 比例\n   */\n\n\n  Graph.prototype.getZoom = function () {\n    var matrix = this.get('group').getMatrix();\n    return matrix ? matrix[0] : 1;\n  };\n  /**\n   * 获取当前的行为模式\n   * @return {string} 当前行为模式\n   */\n\n\n  Graph.prototype.getCurrentMode = function () {\n    var modeController = this.get('modeController');\n    return modeController.getMode();\n  };\n  /**\n   * 切换行为模式\n   * @param {string} mode 指定模式\n   * @return {object} this\n   */\n\n\n  Graph.prototype.setMode = function (mode) {\n    var modeController = this.get('modeController');\n    modeController.setMode(mode);\n    return this;\n  };\n  /**\n   * 清除画布元素\n   * @return {object} this\n   */\n\n\n  Graph.prototype.clear = function () {\n    var canvas = this.get('canvas');\n    canvas.clear();\n    this.initGroups(); // 清空画布时同时清除数据\n\n    this.set({\n      itemMap: {},\n      nodes: [],\n      edges: [],\n      groups: [],\n      combos: [],\n      comboTrees: []\n    });\n    this.emit('afterrender');\n    return this;\n  };\n  /**\n   * 返回可见区域的图的 dataUrl，用于生成图片\n   * @param {String} type 图片类型，可选值：\"image/png\" | \"image/jpeg\" | \"image/webp\" | \"image/bmp\"\n   * @param {string} backgroundColor 图片背景色\n   * @return {string} 图片 dataURL\n   */\n\n\n  Graph.prototype.toDataURL = function (type, backgroundColor) {\n    var canvas = this.get('canvas');\n    var renderer = canvas.getRenderer();\n    var canvasDom = canvas.get('el');\n    if (!type) type = 'image/png';\n    var dataURL = '';\n\n    if (renderer === 'svg') {\n      var cloneNode = canvasDom.cloneNode(true);\n      var svgDocType = document.implementation.createDocumentType('svg', '-//W3C//DTD SVG 1.1//EN', 'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd');\n      var svgDoc = document.implementation.createDocument('http://www.w3.org/2000/svg', 'svg', svgDocType);\n      svgDoc.replaceChild(cloneNode, svgDoc.documentElement);\n      var svgData = new XMLSerializer().serializeToString(svgDoc);\n      dataURL = \"data:image/svg+xml;charset=utf8,\" + encodeURIComponent(svgData);\n    } else {\n      var imageData = void 0;\n      var context = canvasDom.getContext('2d');\n      var width = this.get('width');\n      var height = this.get('height');\n      var compositeOperation = void 0;\n\n      if (backgroundColor) {\n        var pixelRatio = window.devicePixelRatio;\n        imageData = context.getImageData(0, 0, width * pixelRatio, height * pixelRatio);\n        compositeOperation = context.globalCompositeOperation;\n        context.globalCompositeOperation = 'destination-over';\n        context.fillStyle = backgroundColor;\n        context.fillRect(0, 0, width, height);\n      }\n\n      dataURL = canvasDom.toDataURL(type);\n\n      if (backgroundColor) {\n        context.clearRect(0, 0, width, height);\n        context.putImageData(imageData, 0, 0);\n        context.globalCompositeOperation = compositeOperation;\n      }\n    }\n\n    return dataURL;\n  };\n  /**\n   * 返回整个图（包括超出可见区域的部分）的 dataUrl，用于生成图片\n   * @param {Function} callback 异步生成 dataUrl 完成后的回调函数，在这里处理生成的 dataUrl 字符串\n   * @param {String} type 图片类型，可选值：\"image/png\" | \"image/jpeg\" | \"image/webp\" | \"image/bmp\"\n   * @param {Object} imageConfig 图片配置项，包括背景色和上下左右的 padding\n   */\n\n\n  Graph.prototype.toFullDataURL = function (callback, type, imageConfig) {\n    var bbox = this.get('group').getCanvasBBox();\n    var height = bbox.height;\n    var width = bbox.width;\n    var renderer = this.get('renderer');\n    var vContainerDOM = createDom('<id=\"virtual-image\"></div>');\n    var backgroundColor = imageConfig ? imageConfig.backgroundColor : undefined;\n    var padding = imageConfig ? imageConfig.padding : undefined;\n    if (!padding) padding = [0, 0, 0, 0];else if (isNumber(padding)) padding = [padding, padding, padding, padding];\n    var vHeight = height + padding[0] + padding[2];\n    var vWidth = width + padding[1] + padding[3];\n    var canvasOptions = {\n      container: vContainerDOM,\n      height: vHeight,\n      width: vWidth,\n      quickHit: true\n    };\n    var vCanvas = renderer === 'svg' ? new GSVGCanvas(canvasOptions) : new GCanvas(canvasOptions);\n    var group = this.get('group');\n    var vGroup = group.clone();\n    var matrix = clone(vGroup.getMatrix());\n    if (!matrix) matrix = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n    var centerX = (bbox.maxX + bbox.minX) / 2;\n    var centerY = (bbox.maxY + bbox.minY) / 2;\n    mat3.translate(matrix, matrix, [-centerX, -centerY]);\n    mat3.translate(matrix, matrix, [width / 2 + padding[3], height / 2 + padding[0]]);\n    vGroup.resetMatrix();\n    vGroup.setMatrix(matrix);\n    vCanvas.add(vGroup);\n    var vCanvasEl = vCanvas.get('el');\n    var dataURL = '';\n    if (!type) type = 'image/png';\n    setTimeout(function () {\n      if (renderer === 'svg') {\n        var cloneNode = vCanvasEl.cloneNode(true);\n        var svgDocType = document.implementation.createDocumentType('svg', '-//W3C//DTD SVG 1.1//EN', 'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd');\n        var svgDoc = document.implementation.createDocument('http://www.w3.org/2000/svg', 'svg', svgDocType);\n        svgDoc.replaceChild(cloneNode, svgDoc.documentElement);\n        var svgData = new XMLSerializer().serializeToString(svgDoc);\n        dataURL = \"data:image/svg+xml;charset=utf8,\" + encodeURIComponent(svgData);\n      } else {\n        var imageData = void 0;\n        var context = vCanvasEl.getContext('2d');\n        var compositeOperation = void 0;\n\n        if (backgroundColor) {\n          var pixelRatio = window.devicePixelRatio;\n          imageData = context.getImageData(0, 0, vWidth * pixelRatio, vHeight * pixelRatio);\n          compositeOperation = context.globalCompositeOperation;\n          context.globalCompositeOperation = 'destination-over';\n          context.fillStyle = backgroundColor;\n          context.fillRect(0, 0, vWidth, vHeight);\n        }\n\n        dataURL = vCanvasEl.toDataURL(type);\n\n        if (backgroundColor) {\n          context.clearRect(0, 0, vWidth, vHeight);\n          context.putImageData(imageData, 0, 0);\n          context.globalCompositeOperation = compositeOperation;\n        }\n      }\n\n      callback === null || callback === void 0 ? void 0 : callback(dataURL);\n    }, 16);\n  };\n  /**\n   * 导出包含全图的图片\n   * @param {String} name 图片的名称\n   * @param {String} type 图片类型，可选值：\"image/png\" | \"image/jpeg\" | \"image/webp\" | \"image/bmp\"\n   * @param {Object} imageConfig 图片配置项，包括背景色和上下左右的 padding\n   */\n\n\n  Graph.prototype.downloadFullImage = function (name, type, imageConfig) {\n    var _this = this;\n\n    var bbox = this.get('group').getCanvasBBox();\n    var height = bbox.height;\n    var width = bbox.width;\n    var renderer = this.get('renderer');\n    var vContainerDOM = createDom('<id=\"virtual-image\"></div>');\n    var backgroundColor = imageConfig ? imageConfig.backgroundColor : undefined;\n    var padding = imageConfig ? imageConfig.padding : undefined;\n    if (!padding) padding = [0, 0, 0, 0];else if (isNumber(padding)) padding = [padding, padding, padding, padding];\n    var vHeight = height + padding[0] + padding[2];\n    var vWidth = width + padding[1] + padding[3];\n    var canvasOptions = {\n      container: vContainerDOM,\n      height: vHeight,\n      width: vWidth\n    };\n    var vCanvas = renderer === 'svg' ? new GSVGCanvas(canvasOptions) : new GCanvas(canvasOptions);\n    var group = this.get('group');\n    var vGroup = group.clone();\n    var matrix = clone(vGroup.getMatrix());\n    if (!matrix) matrix = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n    var centerX = (bbox.maxX + bbox.minX) / 2;\n    var centerY = (bbox.maxY + bbox.minY) / 2;\n    mat3.translate(matrix, matrix, [-centerX, -centerY]);\n    mat3.translate(matrix, matrix, [width / 2 + padding[3], height / 2 + padding[0]]);\n    vGroup.resetMatrix();\n    vGroup.setMatrix(matrix);\n    vCanvas.add(vGroup);\n    var vCanvasEl = vCanvas.get('el');\n    if (!type) type = 'image/png';\n    setTimeout(function () {\n      var dataURL = '';\n\n      if (renderer === 'svg') {\n        var cloneNode = vCanvasEl.cloneNode(true);\n        var svgDocType = document.implementation.createDocumentType('svg', '-//W3C//DTD SVG 1.1//EN', 'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd');\n        var svgDoc = document.implementation.createDocument('http://www.w3.org/2000/svg', 'svg', svgDocType);\n        svgDoc.replaceChild(cloneNode, svgDoc.documentElement);\n        var svgData = new XMLSerializer().serializeToString(svgDoc);\n        dataURL = \"data:image/svg+xml;charset=utf8,\" + encodeURIComponent(svgData);\n      } else {\n        var imageData = void 0;\n        var context = vCanvasEl.getContext('2d');\n        var compositeOperation = void 0;\n\n        if (backgroundColor) {\n          var pixelRatio = window.devicePixelRatio;\n          imageData = context.getImageData(0, 0, vWidth * pixelRatio, vHeight * pixelRatio);\n          compositeOperation = context.globalCompositeOperation;\n          context.globalCompositeOperation = 'destination-over';\n          context.fillStyle = backgroundColor;\n          context.fillRect(0, 0, vWidth, vHeight);\n        }\n\n        dataURL = vCanvasEl.toDataURL(type);\n\n        if (backgroundColor) {\n          context.clearRect(0, 0, vWidth, vHeight);\n          context.putImageData(imageData, 0, 0);\n          context.globalCompositeOperation = compositeOperation;\n        }\n      }\n\n      var link = document.createElement('a');\n      var fileName = (name || 'graph') + (renderer === 'svg' ? '.svg' : \".\" + type.split('/')[1]);\n\n      _this.dataURLToImage(dataURL, renderer, link, fileName);\n\n      var e = document.createEvent('MouseEvents');\n      e.initEvent('click', false, false);\n      link.dispatchEvent(e);\n    }, 16);\n  };\n  /**\n   * 画布导出图片，图片仅包含画布可见区域部分内容\n   * @param {String} name 图片的名称\n   * @param {String} type 图片类型，可选值：\"image/png\" | \"image/jpeg\" | \"image/webp\" | \"image/bmp\"\n   * @param {string} backgroundColor 图片背景色\n   */\n\n\n  Graph.prototype.downloadImage = function (name, type, backgroundColor) {\n    var _this = this;\n\n    var self = this;\n\n    if (self.isAnimating()) {\n      self.stopAnimate();\n    }\n\n    var canvas = self.get('canvas');\n    var renderer = canvas.getRenderer();\n    if (!type) type = 'image/png';\n    var fileName = (name || 'graph') + (renderer === 'svg' ? '.svg' : type.split('/')[1]);\n    var link = document.createElement('a');\n    setTimeout(function () {\n      var dataURL = self.toDataURL(type, backgroundColor);\n\n      _this.dataURLToImage(dataURL, renderer, link, fileName);\n\n      var e = document.createEvent('MouseEvents');\n      e.initEvent('click', false, false);\n      link.dispatchEvent(e);\n    }, 16);\n  };\n\n  Graph.prototype.dataURLToImage = function (dataURL, renderer, link, fileName) {\n    if (typeof window !== 'undefined') {\n      if (window.Blob && window.URL && renderer !== 'svg') {\n        var arr = dataURL.split(',');\n        var mime = '';\n\n        if (arr && arr.length > 0) {\n          var match = arr[0].match(/:(.*?);/); // eslint-disable-next-line prefer-destructuring\n\n          if (match && match.length >= 2) mime = match[1];\n        }\n\n        var bstr = atob(arr[1]);\n        var n = bstr.length;\n        var u8arr = new Uint8Array(n);\n\n        while (n--) {\n          u8arr[n] = bstr.charCodeAt(n);\n        }\n\n        var blobObj_1 = new Blob([u8arr], {\n          type: mime\n        });\n\n        if (window.navigator.msSaveBlob) {\n          window.navigator.msSaveBlob(blobObj_1, fileName);\n        } else {\n          link.addEventListener('click', function () {\n            link.download = fileName;\n            link.href = window.URL.createObjectURL(blobObj_1);\n          });\n        }\n      } else {\n        link.addEventListener('click', function () {\n          link.download = fileName;\n          link.href = dataURL;\n        });\n      }\n    }\n  };\n  /**\n   * 更换布局配置项\n   * @param {object} cfg 新布局配置项\n   * 若 cfg 含有 type 字段或为 String 类型，且与现有布局方法不同，则更换布局\n   * 若 cfg 不包括 type ，则保持原有布局方法，仅更新布局配置项\n   */\n\n\n  Graph.prototype.updateLayout = function (cfg) {\n    var layoutController = this.get('layoutController');\n    var newLayoutType;\n\n    if (isString(cfg)) {\n      newLayoutType = cfg;\n      cfg = {\n        type: newLayoutType\n      };\n    } else {\n      newLayoutType = cfg.type;\n    }\n\n    var oriLayoutCfg = this.get('layout');\n    var oriLayoutType = oriLayoutCfg ? oriLayoutCfg.type : undefined;\n\n    if (!newLayoutType || oriLayoutType === newLayoutType) {\n      // no type or same type, update layout\n      var layoutCfg = {};\n      Object.assign(layoutCfg, oriLayoutCfg, cfg);\n      layoutCfg.type = oriLayoutType || 'random';\n      this.set('layout', layoutCfg);\n      layoutController.updateLayoutCfg(layoutCfg);\n    } else {\n      // has different type, change layout\n      this.set('layout', cfg);\n      layoutController.changeLayout(newLayoutType);\n    }\n  };\n  /**\n   * 销毁布局，changeData 时不会再使用原来的布局方法对新数据进行布局\n   */\n\n\n  Graph.prototype.destroyLayout = function () {\n    var layoutController = this.get('layoutController');\n    layoutController.destroyLayout();\n  };\n  /**\n   * 重新以当前示例中配置的属性进行一次布局\n   */\n\n\n  Graph.prototype.layout = function () {\n    var layoutController = this.get('layoutController');\n    var layoutCfg = this.get('layout');\n    if (!layoutCfg) return;\n\n    if (layoutCfg.workerEnabled) {\n      // 如果使用web worker布局\n      layoutController.layout();\n      return;\n    }\n\n    if (layoutController.layoutMethod) {\n      layoutController.relayout(true);\n    } else {\n      layoutController.layout();\n    }\n  };\n  /**\n   * 收起指定的 combo\n   * @param {string | ICombo} combo combo ID 或 combo item\n   */\n\n\n  Graph.prototype.collapseCombo = function (combo) {\n    var _this = this;\n\n    if (isString(combo)) {\n      combo = this.findById(combo);\n    }\n\n    if (!combo) {\n      console.warn('The combo to be collapsed does not exist!');\n      return;\n    }\n\n    var comboModel = combo.getModel();\n    var itemController = this.get('itemController');\n    itemController.collapseCombo(combo);\n    comboModel.collapsed = true; // add virtual edges\n\n    var edges = this.getEdges().concat(this.get('vedges')); // find all the descendant nodes and combos\n\n    var cnodes = [];\n    var ccombos = [];\n    var comboTrees = this.get('comboTrees');\n    var found = false;\n    var brothers = {};\n    (comboTrees || []).forEach(function (ctree) {\n      brothers[ctree.id] = ctree;\n    });\n    (comboTrees || []).forEach(function (ctree) {\n      if (found) return; // if the combo is found, terminate the forEach\n\n      traverseTree(ctree, function (subTree) {\n        // if the combo is found and the it is traversing the other brothers, terminate\n        if (found && brothers[subTree.id]) return false;\n\n        if (comboModel.parentId === subTree.id) {\n          // if the parent is found, store the brothers\n          brothers = {};\n          subTree.children.forEach(function (child) {\n            brothers[child.id] = child;\n          });\n        } else if (comboModel.id === subTree.id) {\n          // if the combo is found\n          found = true;\n        }\n\n        if (found) {\n          // if the combo is found, concat the descendant nodes and combos\n          var item = _this.findById(subTree.id);\n\n          if (item && item.getType && item.getType() === 'combo') {\n            cnodes = cnodes.concat(item.getNodes());\n            ccombos = ccombos.concat(item.getCombos());\n          }\n        }\n\n        return true;\n      });\n    });\n    var edgeWeightMap = {};\n    var addedVEdges = [];\n    edges.forEach(function (edge) {\n      if (edge.isVisible() && !edge.getModel().isVEdge) return;\n      var source = edge.getSource();\n      var target = edge.getTarget();\n\n      if ((cnodes.includes(source) || ccombos.includes(source)) && !cnodes.includes(target) && !ccombos.includes(target) || source.getModel().id === comboModel.id) {\n        var edgeModel = edge.getModel();\n\n        if (edgeModel.isVEdge) {\n          _this.removeItem(edge, false);\n\n          return;\n        }\n\n        var targetModel = target.getModel();\n\n        while (!target.isVisible()) {\n          target = _this.findById(targetModel.parentId || targetModel.comboId);\n          if (!target || !targetModel.parentId && !targetModel.comboId) return; // all the ancestors are hidden, then ignore the edge\n\n          targetModel = target.getModel();\n        }\n\n        var targetId = targetModel.id;\n\n        if (edgeWeightMap[comboModel.id + \"-\" + targetId]) {\n          edgeWeightMap[comboModel.id + \"-\" + targetId] += edgeModel.size || 1;\n          return;\n        } // the source is in the combo, the target is not\n\n\n        var vedge = _this.addItem('vedge', {\n          source: comboModel.id,\n          target: targetId,\n          isVEdge: true\n        }, false);\n\n        edgeWeightMap[comboModel.id + \"-\" + targetId] = edgeModel.size || 1;\n        addedVEdges.push(vedge);\n      } else if (!cnodes.includes(source) && !ccombos.includes(source) && (cnodes.includes(target) || ccombos.includes(target)) || target.getModel().id === comboModel.id) {\n        var edgeModel = edge.getModel();\n\n        if (edgeModel.isVEdge) {\n          _this.removeItem(edge, false);\n\n          return;\n        }\n\n        var sourceModel = source.getModel();\n\n        while (!source.isVisible()) {\n          source = _this.findById(sourceModel.parentId || sourceModel.comboId);\n          if (!source || !sourceModel.parentId && !sourceModel.comboId) return; // all the ancestors are hidden, then ignore the edge\n\n          sourceModel = source.getModel();\n        }\n\n        var sourceId = sourceModel.id;\n\n        if (edgeWeightMap[sourceId + \"-\" + comboModel.id]) {\n          edgeWeightMap[sourceId + \"-\" + comboModel.id] += edgeModel.size || 1;\n          return;\n        } // the target is in the combo, the source is not\n\n\n        var vedge = _this.addItem('vedge', {\n          target: comboModel.id,\n          source: sourceId,\n          isVEdge: true\n        }, false);\n\n        edgeWeightMap[sourceId + \"-\" + comboModel.id] = edgeModel.size || 1;\n        addedVEdges.push(vedge);\n      }\n    }); // update the width of the virtual edges, which is the sum of merged actual edges\n    // be attention that the actual edges with same endpoints but different directions will be represented by two different virtual edges\n\n    addedVEdges.forEach(function (vedge) {\n      var vedgeModel = vedge.getModel();\n\n      _this.updateItem(vedge, {\n        size: edgeWeightMap[vedgeModel.source + \"-\" + vedgeModel.target]\n      }, false);\n    });\n  };\n  /**\n   * 展开指定的 combo\n   * @param {string | ICombo} combo combo ID 或 combo item\n   */\n\n\n  Graph.prototype.expandCombo = function (combo) {\n    var _this = this;\n\n    if (isString(combo)) {\n      combo = this.findById(combo);\n    }\n\n    if (!combo || combo.getType && combo.getType() !== 'combo') {\n      console.warn('The combo to be collapsed does not exist!');\n      return;\n    }\n\n    var comboModel = combo.getModel();\n    var itemController = this.get('itemController');\n    itemController.expandCombo(combo);\n    comboModel.collapsed = false; // add virtual edges\n\n    var edges = this.getEdges().concat(this.get('vedges')); // find all the descendant nodes and combos\n\n    var cnodes = [];\n    var ccombos = [];\n    var comboTrees = this.get('comboTrees');\n    var found = false;\n    var brothers = {};\n    (comboTrees || []).forEach(function (ctree) {\n      brothers[ctree.id] = ctree;\n    });\n    (comboTrees || []).forEach(function (ctree) {\n      if (found) return; // if the combo is found, terminate\n\n      traverseTree(ctree, function (subTree) {\n        if (found && brothers[subTree.id]) {\n          return false;\n        }\n\n        if (comboModel.parentId === subTree.id) {\n          brothers = {};\n          subTree.children.forEach(function (child) {\n            brothers[child.id] = child;\n          });\n        } else if (comboModel.id === subTree.id) {\n          found = true;\n        }\n\n        if (found) {\n          var item = _this.findById(subTree.id);\n\n          if (item && item.getType && item.getType() === 'combo') {\n            cnodes = cnodes.concat(item.getNodes());\n            ccombos = ccombos.concat(item.getCombos());\n          }\n        }\n\n        return true;\n      });\n    });\n    var edgeWeightMap = {};\n    var addedVEdges = {};\n    edges.forEach(function (edge) {\n      if (edge.isVisible() && !edge.getModel().isVEdge) return;\n      var source = edge.getSource();\n      var target = edge.getTarget();\n      var sourceId = source.get('id');\n      var targetId = target.get('id');\n\n      if ((cnodes.includes(source) || ccombos.includes(source)) && !cnodes.includes(target) && !ccombos.includes(target) || sourceId === comboModel.id) {\n        // the source is in the combo, the target is not\n        // ignore the virtual edges\n        if (edge.getModel().isVEdge) {\n          _this.removeItem(edge, false);\n\n          return;\n        }\n\n        var targetModel = target.getModel(); // find the nearest visible ancestor\n\n        while (!target.isVisible()) {\n          target = _this.findById(targetModel.comboId || targetModel.parentId);\n\n          if (!target || !targetModel.parentId && !targetModel.comboId) {\n            return; // if all the ancestors of the oppsite are all hidden, ignore the edge\n          }\n\n          targetModel = target.getModel();\n        }\n\n        targetId = targetModel.id;\n        var sourceModel = source.getModel(); // find the nearest visible ancestor\n\n        while (!source.isVisible()) {\n          source = _this.findById(sourceModel.comboId || sourceModel.parentId);\n\n          if (!source || !sourceModel.parentId && !sourceModel.comboId) {\n            return; // if all the ancestors of the oppsite are all hidden, ignore the edge\n          }\n\n          if (sourceModel.comboId === comboModel.id || sourceModel.parentId === comboModel.id) {\n            break; // if the next ancestor is the combo, break the while\n          }\n\n          sourceModel = source.getModel();\n        }\n\n        sourceId = sourceModel.id;\n\n        if (targetId) {\n          var vedgeId = sourceId + \"-\" + targetId; // update the width of the virtual edges, which is the sum of merged actual edges\n          // be attention that the actual edges with same endpoints but different directions will be represented by two different virtual edges\n\n          if (edgeWeightMap[vedgeId]) {\n            edgeWeightMap[vedgeId] += edge.getModel().size || 1;\n\n            _this.updateItem(addedVEdges[vedgeId], {\n              size: edgeWeightMap[vedgeId]\n            }, false);\n\n            return;\n          }\n\n          var vedge = _this.addItem('vedge', {\n            source: sourceId,\n            target: targetId,\n            isVEdge: true\n          }, false);\n\n          edgeWeightMap[vedgeId] = edge.getModel().size || 1;\n          addedVEdges[vedgeId] = vedge;\n        }\n      } else if (!cnodes.includes(source) && !ccombos.includes(source) && (cnodes.includes(target) || ccombos.includes(target)) || targetId === comboModel.id) {\n        // the target is in the combo, the source is not\n        // ignore the virtual edges\n        if (edge.getModel().isVEdge) {\n          _this.removeItem(edge, false);\n\n          return;\n        }\n\n        var sourceModel = source.getModel(); // find the nearest visible ancestor\n\n        while (!source.isVisible()) {\n          source = _this.findById(sourceModel.comboId || sourceModel.parentId);\n\n          if (!source || !sourceModel.parentId && !sourceModel.comboId) {\n            return; // if all the ancestors of the oppsite are all hidden, ignore the edge\n          }\n\n          sourceModel = source.getModel();\n        }\n\n        sourceId = sourceModel.id;\n        var targetModel = target.getModel(); // find the nearest visible ancestor\n\n        while (!target.isVisible()) {\n          target = _this.findById(targetModel.comboId || targetModel.parentId);\n\n          if (!target || !targetModel.parentId && !targetModel.comboId) {\n            return; // if all the ancestors of the oppsite are all hidden, ignore the edge\n          }\n\n          if (targetModel.comboId === comboModel.id || targetModel.parentId === comboModel.id) {\n            break; // if the next ancestor is the combo, break the while\n          }\n\n          targetModel = target.getModel();\n        }\n\n        targetId = targetModel.id;\n\n        if (sourceId) {\n          var vedgeId = sourceId + \"-\" + targetId; // update the width of the virtual edges, which is the sum of merged actual edges\n          // be attention that the actual edges with same endpoints but different directions will be represented by two different virtual edges\n\n          if (edgeWeightMap[vedgeId]) {\n            edgeWeightMap[vedgeId] += edge.getModel().size || 1;\n\n            _this.updateItem(addedVEdges[vedgeId], {\n              size: edgeWeightMap[vedgeId]\n            }, false);\n\n            return;\n          }\n\n          var vedge = _this.addItem('vedge', {\n            target: targetId,\n            source: sourceId,\n            isVEdge: true\n          }, false);\n\n          edgeWeightMap[vedgeId] = edge.getModel().size || 1;\n          addedVEdges[vedgeId] = vedge;\n        }\n      } else if ((cnodes.includes(source) || ccombos.includes(source)) && (cnodes.includes(target) || ccombos.includes(target))) {\n        // both source and target are in the combo, if the target and source are both visible, show the edge\n        if (source.isVisible() && target.isVisible()) {\n          edge.show();\n        }\n      }\n    });\n  };\n\n  Graph.prototype.collapseExpandCombo = function (combo) {\n    if (isString(combo)) {\n      combo = this.findById(combo);\n    }\n\n    if (combo.getType && combo.getType() !== 'combo') return;\n    var comboModel = combo.getModel(); // if one ancestor combo of the combo is collapsed, it should not be collapsed or expanded\n\n    var parentItem = this.findById(comboModel.parentId);\n\n    while (parentItem) {\n      var parentModel = parentItem.getModel();\n\n      if (parentModel.collapsed) {\n        console.warn(\"Fail to expand the combo since it's ancestor combo is collapsed.\");\n        parentItem = undefined;\n        return;\n      }\n\n      parentItem = this.findById(parentModel.parentId);\n    }\n\n    var collapsed = comboModel.collapsed; // 该群组已经处于收起状态，需要展开\n\n    if (collapsed) {\n      this.expandCombo(combo);\n    } else {\n      this.collapseCombo(combo);\n    }\n\n    this.updateCombo(combo);\n  };\n  /**\n   * 收起分组\n   * @param {string} groupId 分组ID\n   */\n\n\n  Graph.prototype.collapseGroup = function (groupId) {\n    var customGroupControll = this.get('customGroupControll');\n    customGroupControll.collapseGroup(groupId);\n  };\n  /**\n   * 展开分组\n   * @param {string} groupId 分组ID\n   */\n\n\n  Graph.prototype.expandGroup = function (groupId) {\n    var customGroupControll = this.get('customGroupControll');\n    customGroupControll.expandGroup(groupId);\n  };\n  /**\n   * 添加插件\n   * @param {object} plugin 插件实例\n   */\n\n\n  Graph.prototype.addPlugin = function (plugin) {\n    var self = this;\n\n    if (plugin.destroyed) {\n      return;\n    }\n\n    self.get('plugins').push(plugin);\n    plugin.initPlugin(self);\n  };\n  /**\n   * 添加插件\n   * @param {object} plugin 插件实例\n   */\n\n\n  Graph.prototype.removePlugin = function (plugin) {\n    var plugins = this.get('plugins');\n    var index = plugins.indexOf(plugin);\n\n    if (index >= 0) {\n      plugin.destroyPlugin();\n      plugins.splice(index, 1);\n    }\n  };\n  /**\n   * 根据 comboTree 结构整理 Combo 相关的图形绘制层级，包括 Combo 本身、节点、边\n   * @param {GraphData} data 数据\n   */\n\n\n  Graph.prototype.sortCombos = function () {\n    var _this = this;\n\n    var comboSorted = this.get('comboSorted');\n    if (comboSorted) return;\n    this.set('comboSorted', true);\n    var depthMap = [];\n    var dataDepthMap = {};\n    var comboTrees = this.get('comboTrees');\n    (comboTrees || []).forEach(function (cTree) {\n      traverseTree(cTree, function (child) {\n        if (depthMap[child.depth]) depthMap[child.depth].push(child.id);else depthMap[child.depth] = [child.id];\n        dataDepthMap[child.id] = child.depth;\n        return true;\n      });\n    });\n    var edges = this.getEdges().concat(this.get('vedges'));\n    (edges || []).forEach(function (edgeItem) {\n      var edge = edgeItem.getModel();\n      var sourceDepth = dataDepthMap[edge.source] || 0;\n      var targetDepth = dataDepthMap[edge.target] || 0;\n      var depth = Math.max(sourceDepth, targetDepth);\n      if (depthMap[depth]) depthMap[depth].push(edge.id);else depthMap[depth] = [edge.id];\n    });\n    depthMap.forEach(function (array) {\n      if (!array || !array.length) return;\n\n      for (var i = array.length - 1; i >= 0; i--) {\n        var item = _this.findById(array[i]);\n\n        item === null || item === void 0 ? void 0 : item.toFront();\n      }\n    });\n  };\n  /**\n   * 获取节点所有的邻居节点\n   *\n   * @param {(string | INode)} node 节点 ID 或实例\n   * @returns {INode[]}\n   * @memberof IGraph\n   */\n\n\n  Graph.prototype.getNeighbors = function (node, type) {\n    var item = node;\n\n    if (isString(node)) {\n      item = this.findById(node);\n    }\n\n    return item.getNeighbors(type);\n  };\n  /**\n   * 获取 node 的度数\n   *\n   * @param {(string | INode)} node 节点 ID 或实例\n   * @param {('in' | 'out' | 'total' | 'all' | undefined)} 度数类型，in 入度，out 出度，total 总度数，all 返回三种类型度数的对象\n   * @returns {Number | Object} 该节点的度数\n   * @memberof IGraph\n   */\n\n\n  Graph.prototype.getNodeDegree = function (node, type) {\n    if (type === void 0) {\n      type = undefined;\n    }\n\n    var item = node;\n\n    if (isString(node)) {\n      item = this.findById(node);\n    }\n\n    var degrees = this.get('degrees');\n\n    if (!degrees) {\n      degrees = degree(this);\n    }\n\n    this.set('degees', degrees);\n    var nodeDegrees = degrees[item.getID()];\n    var res;\n\n    switch (type) {\n      case 'in':\n        res = nodeDegrees.inDegree;\n        break;\n\n      case 'out':\n        res = nodeDegrees.outDegree;\n        break;\n\n      case 'all':\n        res = nodeDegrees;\n        break;\n\n      default:\n        res = nodeDegrees.degree;\n        break;\n    }\n\n    return res;\n  };\n\n  Graph.prototype.getUndoStack = function () {\n    return this.undoStack;\n  };\n\n  Graph.prototype.getRedoStack = function () {\n    return this.redoStack;\n  };\n  /**\n   * 获取 undo 和 redo 栈的数据\n   */\n\n\n  Graph.prototype.getStackData = function () {\n    if (!this.get('enabledStack')) {\n      return null;\n    }\n\n    return {\n      undoStack: this.undoStack.toArray(),\n      redoStack: this.redoStack.toArray()\n    };\n  };\n  /**\n   * 清空 undo stack & redo stack\n   */\n\n\n  Graph.prototype.clearStack = function () {\n    if (this.get('enabledStack')) {\n      this.undoStack.clear();\n      this.redoStack.clear();\n    }\n  };\n  /**\n   * 将操作类型和操作数据入栈\n   * @param action 操作类型\n   * @param data 入栈的数据\n   * @param stackType 栈的类型\n   */\n\n\n  Graph.prototype.pushStack = function (action, data, stackType) {\n    if (action === void 0) {\n      action = 'update';\n    }\n\n    if (stackType === void 0) {\n      stackType = 'undo';\n    }\n\n    if (!this.get('enabledStack')) {\n      console.warn('请先启用 undo & redo 功能，在实例化 Graph 时候配置 enabledStack: true !');\n      return;\n    }\n\n    var stackData = data ? clone(data) : {\n      before: {},\n      after: clone(this.save())\n    };\n\n    if (stackType === 'redo') {\n      this.redoStack.push({\n        action: action,\n        data: stackData\n      });\n    } else {\n      this.undoStack.push({\n        action: action,\n        data: stackData\n      });\n    }\n\n    this.emit('stackchange', {\n      undoStack: this.undoStack,\n      redoStack: this.redoStack\n    });\n  };\n  /**\n   * 获取邻接矩阵\n   *\n   * @param {boolean} cache 是否使用缓存的\n   * @param {boolean} directed 是否是有向图，默认取 graph.directed\n   * @returns {Matrix} 邻接矩阵\n   * @memberof IGraph\n   */\n\n\n  Graph.prototype.getAdjMatrix = function (cache, directed) {\n    if (cache === void 0) {\n      cache = true;\n    }\n\n    if (directed === undefined) directed = this.get('directed');\n    var currentAdjMatrix = this.get('adjMatrix');\n\n    if (!currentAdjMatrix || !cache) {\n      currentAdjMatrix = adjMatrix(this, directed);\n      this.set('adjMatrix', currentAdjMatrix);\n    }\n\n    return currentAdjMatrix;\n  };\n  /**\n   * 获取最短路径矩阵\n   *\n   * @param {boolean} cache 是否使用缓存的\n   * @param {boolean} directed 是否是有向图，默认取 graph.directed\n   * @returns {Matrix} 最短路径矩阵\n   * @memberof IGraph\n   */\n\n\n  Graph.prototype.getShortestPathMatrix = function (cache, directed) {\n    if (cache === void 0) {\n      cache = true;\n    }\n\n    if (directed === undefined) directed = this.get('directed');\n    var currentAdjMatrix = this.get('adjMatrix');\n    var currentShourtestPathMatrix = this.get('shortestPathMatrix');\n\n    if (!currentAdjMatrix || !cache) {\n      currentAdjMatrix = adjMatrix(this, directed);\n      this.set('adjMatrix', currentAdjMatrix);\n    }\n\n    if (!currentShourtestPathMatrix || !cache) {\n      currentShourtestPathMatrix = floydWarshall(this, directed);\n      this.set('shortestPathMatrix', currentShourtestPathMatrix);\n    }\n\n    return currentShourtestPathMatrix;\n  };\n  /**\n   * 销毁画布\n   */\n\n\n  Graph.prototype.destroy = function () {\n    this.clear(); // 清空栈数据\n\n    this.clearStack();\n    each(this.get('plugins'), function (plugin) {\n      plugin.destroyPlugin();\n    }); // destroy tooltip doms, removed when upgrade G6 4.0\n\n    var tooltipDOMs = this.get('tooltips');\n\n    if (tooltipDOMs) {\n      for (var i = 0; i < tooltipDOMs.length; i++) {\n        var container = tooltipDOMs[i];\n        if (!container) continue;\n        var parent_1 = container.parentElement;\n        if (!parent_1) continue;\n        parent_1.removeChild(container);\n      }\n    }\n\n    this.get('eventController').destroy();\n    this.get('itemController').destroy();\n    this.get('modeController').destroy();\n    this.get('viewController').destroy();\n    this.get('stateController').destroy();\n    this.get('layoutController').destroy();\n    this.get('customGroupControll').destroy();\n    this.get('canvas').destroy();\n\n    if (this.get('graphWaterMarker')) {\n      this.get('graphWaterMarker').destroy();\n    }\n\n    if (document.querySelector('.g6-graph-watermarker')) {\n      document.querySelector('.g6-graph-watermarker').remove();\n    }\n\n    this.cfg = null;\n    this.destroyed = true;\n    this.redoStack = null;\n    this.undoStack = null;\n  };\n  /**\n   * 创建凸包或凹包轮廓\n   * @param cfg HullCfg 轮廓配置项\n   */\n\n\n  Graph.prototype.createHull = function (cfg) {\n    var parent = this.get('hullGroup');\n    var hullMap = this.get('hullMap');\n\n    if (!hullMap) {\n      hullMap = {};\n      this.set('hullMap', hullMap);\n    }\n\n    if (!parent) {\n      parent = this.get('group').addGroup({\n        id: 'hullGroup'\n      });\n      parent.toBack();\n      this.set('hullGroup', parent);\n    }\n\n    if (hullMap[cfg.id]) {\n      console.warn('Existed hull id.');\n      return hullMap[cfg.id];\n    }\n\n    var group = parent.addGroup({\n      id: cfg.id + \"-container\"\n    });\n    var hull = new Hull(this, __assign(__assign({}, cfg), {\n      group: group\n    }));\n    var hullId = hull.id;\n    hullMap[hullId] = hull;\n    return hull;\n  };\n  /**\n   * 获取当前 graph 中存在的包裹轮廓\n   * @return {[key: string]: Hull} hullId 对应的 hull 实例\n   */\n\n\n  Graph.prototype.getHulls = function () {\n    return this.get('hullMap');\n  };\n  /**\n   * 根据 hullId 获取对应的 hull\n   * @return Hull\n   */\n\n\n  Graph.prototype.getHullById = function (hullId) {\n    return this.get('hullMap')[hullId];\n  };\n\n  Graph.prototype.removeHull = function (hull) {\n    var hullInstance;\n\n    if (isString(hull)) {\n      hullInstance = this.getHullById(hull);\n    } else {\n      hullInstance = hull;\n    }\n\n    var hullMap = this.get('hullMap');\n    delete hullMap[hullInstance.id];\n    hullInstance.destroy();\n  };\n  /**\n   * 设置图片水印\n   * @param {string} imgURL 图片水印的url地址\n   * @param {WaterMarkerConfig} config 文本水印的配置项\n   */\n\n\n  Graph.prototype.setImageWaterMarker = function (imgURL, config) {\n    if (imgURL === void 0) {\n      imgURL = Global.waterMarkerImage;\n    }\n\n    var container = this.get('container');\n\n    if (isString(container)) {\n      container = document.getElementById(container);\n    }\n\n    if (!container.style.position) {\n      container.style.position = 'relative';\n    }\n\n    var canvas = this.get('graphWaterMarker');\n    var waterMarkerConfig = deepMix({}, Global.imageWaterMarkerConfig, config);\n    var width = waterMarkerConfig.width,\n        height = waterMarkerConfig.height,\n        compatible = waterMarkerConfig.compatible,\n        image = waterMarkerConfig.image;\n\n    if (!canvas) {\n      var canvasCfg = {\n        container: container,\n        width: width,\n        height: height,\n        capture: false\n      };\n      var pixelRatio = this.get('pixelRatio');\n\n      if (pixelRatio) {\n        canvasCfg.pixelRatio = pixelRatio;\n      }\n\n      canvas = new GCanvas(canvasCfg);\n      this.set('graphWaterMarker', canvas);\n    }\n\n    canvas.get('el').style.display = 'none';\n    var ctx = canvas.get('context');\n    var rotate = image.rotate,\n        x = image.x,\n        y = image.y; // 旋转20度\n\n    ctx.rotate(-rotate * Math.PI / 180);\n    var img = new Image();\n    img.crossOrigin = 'anonymous';\n    img.src = imgURL;\n\n    img.onload = function () {\n      ctx.drawImage(img, x, y, image.width, image.height); // 恢复旋转角度\n\n      ctx.rotate(rotate * Math.PI / 180); // 默认按照现代浏览器处理        \n\n      if (!compatible) {\n        var box = document.querySelector('.g6-graph-watermarker');\n\n        if (!box) {\n          box = document.createElement('div');\n          box.className = 'g6-graph-watermarker';\n        }\n\n        box.className = 'g6-graph-watermarker';\n\n        if (!canvas.destroyed) {\n          box.style.cssText = \"background-image: url(\" + canvas.get('el').toDataURL('image/png') + \");background-repeat:repeat;position:absolute;top:0;bottom:0;left:0;right:0;pointer-events:none;z-index:-1;\";\n          container.appendChild(box);\n        }\n      } else {\n        // 当需要兼容不支持 pointer-events属性的浏览器时，将 compatible 设置为 true\n        container.style.cssText = \"background-image: url(\" + canvas.get('el').toDataURL('image/png') + \");background-repeat:repeat;\";\n      }\n    };\n  };\n  /**\n   * 设置文本水印\n   * @param {string[]} texts 水印的文本内容\n   * @param {WaterMarkerConfig} config 文本水印的配置项\n   */\n\n\n  Graph.prototype.setTextWaterMarker = function (texts, config) {\n    var container = this.get('container');\n\n    if (isString(container)) {\n      container = document.getElementById(container);\n    }\n\n    if (!container.style.position) {\n      container.style.position = 'relative';\n    }\n\n    var canvas = this.get('graphWaterMarker');\n    var waterMarkerConfig = deepMix({}, Global.textWaterMarkerConfig, config);\n    var width = waterMarkerConfig.width,\n        height = waterMarkerConfig.height,\n        compatible = waterMarkerConfig.compatible,\n        text = waterMarkerConfig.text;\n\n    if (!canvas) {\n      var canvasCfg = {\n        container: container,\n        width: width,\n        height: height,\n        capture: false\n      };\n      var pixelRatio = this.get('pixelRatio');\n\n      if (pixelRatio) {\n        canvasCfg.pixelRatio = pixelRatio;\n      }\n\n      canvas = new GCanvas(canvasCfg);\n      this.set('graphWaterMarker', canvas);\n    }\n\n    canvas.get('el').style.display = 'none';\n    var ctx = canvas.get('context');\n    var rotate = text.rotate,\n        fill = text.fill,\n        fontFamily = text.fontFamily,\n        fontSize = text.fontSize,\n        baseline = text.baseline,\n        x = text.x,\n        y = text.y,\n        lineHeight = text.lineHeight; // 旋转20度\n\n    ctx.rotate(-rotate * Math.PI / 180); // 设置文字样式   \n\n    ctx.font = fontSize + \"px \" + fontFamily; // 设置文字颜色  \n\n    ctx.fillStyle = fill;\n    ctx.textBaseline = baseline;\n\n    for (var i = texts.length - 1; i >= 0; i--) {\n      // 将文字绘制到画布        \n      ctx.fillText(texts[i], x, y + i * lineHeight);\n    } // 恢复旋转角度\n\n\n    ctx.rotate(rotate * Math.PI / 180); // 默认按照现代浏览器处理        \n\n    if (!compatible) {\n      var box = document.querySelector('.g6-graph-watermarker');\n\n      if (!box) {\n        box = document.createElement('div');\n        box.className = 'g6-graph-watermarker';\n      }\n\n      box.style.cssText = \"background-image: url(\" + canvas.get('el').toDataURL('image/png') + \");background-repeat:repeat;position:absolute;top:0;bottom:0;left:0;right:0;pointer-events:none;z-index:99;\";\n      container.appendChild(box);\n    } else {\n      // 当需要兼容不支持 pointer-events属性的浏览器时，将 compatible 设置为 true\n      container.style.cssText = \"background-image: url(\" + canvas.get('el').toDataURL('image/png') + \");background-repeat:repeat;\";\n    }\n  };\n\n  return Graph;\n}(EventEmitter);\n\nexport default Graph;"]},"metadata":{},"sourceType":"module"}