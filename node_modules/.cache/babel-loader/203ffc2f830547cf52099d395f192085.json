{"ast":null,"code":"export function installMathOperations(AbstractMatrix, Matrix) {\n  AbstractMatrix.prototype.add = function add(value) {\n    if (typeof value === 'number') return this.addS(value);\n    return this.addM(value);\n  };\n\n  AbstractMatrix.prototype.addS = function addS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + value);\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.prototype.addM = function addM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n\n    if (this.rows !== matrix.rows || this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + matrix.get(i, j));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.add = function add(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.add(value);\n  };\n\n  AbstractMatrix.prototype.sub = function sub(value) {\n    if (typeof value === 'number') return this.subS(value);\n    return this.subM(value);\n  };\n\n  AbstractMatrix.prototype.subS = function subS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - value);\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.prototype.subM = function subM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n\n    if (this.rows !== matrix.rows || this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - matrix.get(i, j));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.sub = function sub(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sub(value);\n  };\n\n  AbstractMatrix.prototype.subtract = AbstractMatrix.prototype.sub;\n  AbstractMatrix.prototype.subtractS = AbstractMatrix.prototype.subS;\n  AbstractMatrix.prototype.subtractM = AbstractMatrix.prototype.subM;\n  AbstractMatrix.subtract = AbstractMatrix.sub;\n\n  AbstractMatrix.prototype.mul = function mul(value) {\n    if (typeof value === 'number') return this.mulS(value);\n    return this.mulM(value);\n  };\n\n  AbstractMatrix.prototype.mulS = function mulS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * value);\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.prototype.mulM = function mulM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n\n    if (this.rows !== matrix.rows || this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * matrix.get(i, j));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.mul = function mul(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.mul(value);\n  };\n\n  AbstractMatrix.prototype.multiply = AbstractMatrix.prototype.mul;\n  AbstractMatrix.prototype.multiplyS = AbstractMatrix.prototype.mulS;\n  AbstractMatrix.prototype.multiplyM = AbstractMatrix.prototype.mulM;\n  AbstractMatrix.multiply = AbstractMatrix.mul;\n\n  AbstractMatrix.prototype.div = function div(value) {\n    if (typeof value === 'number') return this.divS(value);\n    return this.divM(value);\n  };\n\n  AbstractMatrix.prototype.divS = function divS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / value);\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.prototype.divM = function divM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n\n    if (this.rows !== matrix.rows || this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / matrix.get(i, j));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.div = function div(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.div(value);\n  };\n\n  AbstractMatrix.prototype.divide = AbstractMatrix.prototype.div;\n  AbstractMatrix.prototype.divideS = AbstractMatrix.prototype.divS;\n  AbstractMatrix.prototype.divideM = AbstractMatrix.prototype.divM;\n  AbstractMatrix.divide = AbstractMatrix.div;\n\n  AbstractMatrix.prototype.mod = function mod(value) {\n    if (typeof value === 'number') return this.modS(value);\n    return this.modM(value);\n  };\n\n  AbstractMatrix.prototype.modS = function modS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) % value);\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.prototype.modM = function modM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n\n    if (this.rows !== matrix.rows || this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) % matrix.get(i, j));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.mod = function mod(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.mod(value);\n  };\n\n  AbstractMatrix.prototype.modulus = AbstractMatrix.prototype.mod;\n  AbstractMatrix.prototype.modulusS = AbstractMatrix.prototype.modS;\n  AbstractMatrix.prototype.modulusM = AbstractMatrix.prototype.modM;\n  AbstractMatrix.modulus = AbstractMatrix.mod;\n\n  AbstractMatrix.prototype.and = function and(value) {\n    if (typeof value === 'number') return this.andS(value);\n    return this.andM(value);\n  };\n\n  AbstractMatrix.prototype.andS = function andS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) & value);\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.prototype.andM = function andM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n\n    if (this.rows !== matrix.rows || this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) & matrix.get(i, j));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.and = function and(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.and(value);\n  };\n\n  AbstractMatrix.prototype.or = function or(value) {\n    if (typeof value === 'number') return this.orS(value);\n    return this.orM(value);\n  };\n\n  AbstractMatrix.prototype.orS = function orS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) | value);\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.prototype.orM = function orM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n\n    if (this.rows !== matrix.rows || this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) | matrix.get(i, j));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.or = function or(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.or(value);\n  };\n\n  AbstractMatrix.prototype.xor = function xor(value) {\n    if (typeof value === 'number') return this.xorS(value);\n    return this.xorM(value);\n  };\n\n  AbstractMatrix.prototype.xorS = function xorS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ^ value);\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.prototype.xorM = function xorM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n\n    if (this.rows !== matrix.rows || this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ^ matrix.get(i, j));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.xor = function xor(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.xor(value);\n  };\n\n  AbstractMatrix.prototype.leftShift = function leftShift(value) {\n    if (typeof value === 'number') return this.leftShiftS(value);\n    return this.leftShiftM(value);\n  };\n\n  AbstractMatrix.prototype.leftShiftS = function leftShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) << value);\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.prototype.leftShiftM = function leftShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n\n    if (this.rows !== matrix.rows || this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) << matrix.get(i, j));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.leftShift = function leftShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.leftShift(value);\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShift = function signPropagatingRightShift(value) {\n    if (typeof value === 'number') return this.signPropagatingRightShiftS(value);\n    return this.signPropagatingRightShiftM(value);\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShiftS = function signPropagatingRightShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >> value);\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShiftM = function signPropagatingRightShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n\n    if (this.rows !== matrix.rows || this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >> matrix.get(i, j));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.signPropagatingRightShift = function signPropagatingRightShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.signPropagatingRightShift(value);\n  };\n\n  AbstractMatrix.prototype.rightShift = function rightShift(value) {\n    if (typeof value === 'number') return this.rightShiftS(value);\n    return this.rightShiftM(value);\n  };\n\n  AbstractMatrix.prototype.rightShiftS = function rightShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >>> value);\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.prototype.rightShiftM = function rightShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n\n    if (this.rows !== matrix.rows || this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >>> matrix.get(i, j));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.rightShift = function rightShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.rightShift(value);\n  };\n\n  AbstractMatrix.prototype.zeroFillRightShift = AbstractMatrix.prototype.rightShift;\n  AbstractMatrix.prototype.zeroFillRightShiftS = AbstractMatrix.prototype.rightShiftS;\n  AbstractMatrix.prototype.zeroFillRightShiftM = AbstractMatrix.prototype.rightShiftM;\n  AbstractMatrix.zeroFillRightShift = AbstractMatrix.rightShift;\n\n  AbstractMatrix.prototype.not = function not() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, ~this.get(i, j));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.not = function not(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.not();\n  };\n\n  AbstractMatrix.prototype.abs = function abs() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.abs(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.abs = function abs(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.abs();\n  };\n\n  AbstractMatrix.prototype.acos = function acos() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.acos(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.acos = function acos(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.acos();\n  };\n\n  AbstractMatrix.prototype.acosh = function acosh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.acosh(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.acosh = function acosh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.acosh();\n  };\n\n  AbstractMatrix.prototype.asin = function asin() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.asin(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.asin = function asin(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.asin();\n  };\n\n  AbstractMatrix.prototype.asinh = function asinh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.asinh(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.asinh = function asinh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.asinh();\n  };\n\n  AbstractMatrix.prototype.atan = function atan() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.atan(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.atan = function atan(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.atan();\n  };\n\n  AbstractMatrix.prototype.atanh = function atanh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.atanh(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.atanh = function atanh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.atanh();\n  };\n\n  AbstractMatrix.prototype.cbrt = function cbrt() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cbrt(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.cbrt = function cbrt(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cbrt();\n  };\n\n  AbstractMatrix.prototype.ceil = function ceil() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.ceil(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.ceil = function ceil(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.ceil();\n  };\n\n  AbstractMatrix.prototype.clz32 = function clz32() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.clz32(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.clz32 = function clz32(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.clz32();\n  };\n\n  AbstractMatrix.prototype.cos = function cos() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cos(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.cos = function cos(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cos();\n  };\n\n  AbstractMatrix.prototype.cosh = function cosh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cosh(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.cosh = function cosh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cosh();\n  };\n\n  AbstractMatrix.prototype.exp = function exp() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.exp(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.exp = function exp(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.exp();\n  };\n\n  AbstractMatrix.prototype.expm1 = function expm1() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.expm1(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.expm1 = function expm1(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.expm1();\n  };\n\n  AbstractMatrix.prototype.floor = function floor() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.floor(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.floor = function floor(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.floor();\n  };\n\n  AbstractMatrix.prototype.fround = function fround() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.fround(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.fround = function fround(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.fround();\n  };\n\n  AbstractMatrix.prototype.log = function log() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.log = function log(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log();\n  };\n\n  AbstractMatrix.prototype.log1p = function log1p() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log1p(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.log1p = function log1p(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log1p();\n  };\n\n  AbstractMatrix.prototype.log10 = function log10() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log10(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.log10 = function log10(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log10();\n  };\n\n  AbstractMatrix.prototype.log2 = function log2() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log2(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.log2 = function log2(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log2();\n  };\n\n  AbstractMatrix.prototype.round = function round() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.round(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.round = function round(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.round();\n  };\n\n  AbstractMatrix.prototype.sign = function sign() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sign(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.sign = function sign(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sign();\n  };\n\n  AbstractMatrix.prototype.sin = function sin() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sin(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.sin = function sin(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sin();\n  };\n\n  AbstractMatrix.prototype.sinh = function sinh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sinh(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.sinh = function sinh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sinh();\n  };\n\n  AbstractMatrix.prototype.sqrt = function sqrt() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sqrt(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.sqrt = function sqrt(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sqrt();\n  };\n\n  AbstractMatrix.prototype.tan = function tan() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.tan(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.tan = function tan(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.tan();\n  };\n\n  AbstractMatrix.prototype.tanh = function tanh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.tanh(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.tanh = function tanh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.tanh();\n  };\n\n  AbstractMatrix.prototype.trunc = function trunc() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.trunc(this.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.trunc = function trunc(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.trunc();\n  };\n\n  AbstractMatrix.pow = function pow(matrix, arg0) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.pow(arg0);\n  };\n\n  AbstractMatrix.prototype.pow = function pow(value) {\n    if (typeof value === 'number') return this.powS(value);\n    return this.powM(value);\n  };\n\n  AbstractMatrix.prototype.powS = function powS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.pow(this.get(i, j), value));\n      }\n    }\n\n    return this;\n  };\n\n  AbstractMatrix.prototype.powM = function powM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n\n    if (this.rows !== matrix.rows || this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.pow(this.get(i, j), matrix.get(i, j)));\n      }\n    }\n\n    return this;\n  };\n}","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/ml-matrix/src/mathOperations.js"],"names":["installMathOperations","AbstractMatrix","Matrix","prototype","add","value","addS","addM","i","rows","j","columns","set","get","matrix","checkMatrix","RangeError","newMatrix","sub","subS","subM","subtract","subtractS","subtractM","mul","mulS","mulM","multiply","multiplyS","multiplyM","div","divS","divM","divide","divideS","divideM","mod","modS","modM","modulus","modulusS","modulusM","and","andS","andM","or","orS","orM","xor","xorS","xorM","leftShift","leftShiftS","leftShiftM","signPropagatingRightShift","signPropagatingRightShiftS","signPropagatingRightShiftM","rightShift","rightShiftS","rightShiftM","zeroFillRightShift","zeroFillRightShiftS","zeroFillRightShiftM","not","abs","Math","acos","acosh","asin","asinh","atan","atanh","cbrt","ceil","clz32","cos","cosh","exp","expm1","floor","fround","log","log1p","log10","log2","round","sign","sin","sinh","sqrt","tan","tanh","trunc","pow","arg0","powS","powM"],"mappings":"AAAA,OAAO,SAASA,qBAAT,CAA+BC,cAA/B,EAA+CC,MAA/C,EAAuD;AAC5DD,EAAAA,cAAc,CAACE,SAAf,CAAyBC,GAAzB,GAA+B,SAASA,GAAT,CAAaC,KAAb,EAAoB;AACjD,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B,OAAO,KAAKC,IAAL,CAAUD,KAAV,CAAP;AAC/B,WAAO,KAAKE,IAAL,CAAUF,KAAV,CAAP;AACD,GAHD;;AAKAJ,EAAAA,cAAc,CAACE,SAAf,CAAyBG,IAAzB,GAAgC,SAASA,IAAT,CAAcD,KAAd,EAAqB;AACnD,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,aAAKE,GAAL,CAASJ,CAAT,EAAYE,CAAZ,EAAe,KAAKG,GAAL,CAASL,CAAT,EAAYE,CAAZ,IAAiBL,KAAhC;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAPD;;AASAJ,EAAAA,cAAc,CAACE,SAAf,CAAyBI,IAAzB,GAAgC,SAASA,IAAT,CAAcO,MAAd,EAAsB;AACpDA,IAAAA,MAAM,GAAGZ,MAAM,CAACa,WAAP,CAAmBD,MAAnB,CAAT;;AACA,QAAI,KAAKL,IAAL,KAAcK,MAAM,CAACL,IAArB,IACF,KAAKE,OAAL,KAAiBG,MAAM,CAACH,OAD1B,EACmC;AACjC,YAAM,IAAIK,UAAJ,CAAe,mCAAf,CAAN;AACD;;AACD,SAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,aAAKE,GAAL,CAASJ,CAAT,EAAYE,CAAZ,EAAe,KAAKG,GAAL,CAASL,CAAT,EAAYE,CAAZ,IAAiBI,MAAM,CAACD,GAAP,CAAWL,CAAX,EAAcE,CAAd,CAAhC;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAZD;;AAcAT,EAAAA,cAAc,CAACG,GAAf,GAAqB,SAASA,GAAT,CAAaU,MAAb,EAAqBT,KAArB,EAA4B;AAC/C,UAAMY,SAAS,GAAG,IAAIf,MAAJ,CAAWY,MAAX,CAAlB;AACA,WAAOG,SAAS,CAACb,GAAV,CAAcC,KAAd,CAAP;AACD,GAHD;;AAKAJ,EAAAA,cAAc,CAACE,SAAf,CAAyBe,GAAzB,GAA+B,SAASA,GAAT,CAAab,KAAb,EAAoB;AACjD,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B,OAAO,KAAKc,IAAL,CAAUd,KAAV,CAAP;AAC/B,WAAO,KAAKe,IAAL,CAAUf,KAAV,CAAP;AACD,GAHD;;AAKAJ,EAAAA,cAAc,CAACE,SAAf,CAAyBgB,IAAzB,GAAgC,SAASA,IAAT,CAAcd,KAAd,EAAqB;AACnD,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,aAAKE,GAAL,CAASJ,CAAT,EAAYE,CAAZ,EAAe,KAAKG,GAAL,CAASL,CAAT,EAAYE,CAAZ,IAAiBL,KAAhC;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAPD;;AASAJ,EAAAA,cAAc,CAACE,SAAf,CAAyBiB,IAAzB,GAAgC,SAASA,IAAT,CAAcN,MAAd,EAAsB;AACpDA,IAAAA,MAAM,GAAGZ,MAAM,CAACa,WAAP,CAAmBD,MAAnB,CAAT;;AACA,QAAI,KAAKL,IAAL,KAAcK,MAAM,CAACL,IAArB,IACF,KAAKE,OAAL,KAAiBG,MAAM,CAACH,OAD1B,EACmC;AACjC,YAAM,IAAIK,UAAJ,CAAe,mCAAf,CAAN;AACD;;AACD,SAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,aAAKE,GAAL,CAASJ,CAAT,EAAYE,CAAZ,EAAe,KAAKG,GAAL,CAASL,CAAT,EAAYE,CAAZ,IAAiBI,MAAM,CAACD,GAAP,CAAWL,CAAX,EAAcE,CAAd,CAAhC;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAZD;;AAcAT,EAAAA,cAAc,CAACiB,GAAf,GAAqB,SAASA,GAAT,CAAaJ,MAAb,EAAqBT,KAArB,EAA4B;AAC/C,UAAMY,SAAS,GAAG,IAAIf,MAAJ,CAAWY,MAAX,CAAlB;AACA,WAAOG,SAAS,CAACC,GAAV,CAAcb,KAAd,CAAP;AACD,GAHD;;AAIAJ,EAAAA,cAAc,CAACE,SAAf,CAAyBkB,QAAzB,GAAoCpB,cAAc,CAACE,SAAf,CAAyBe,GAA7D;AACAjB,EAAAA,cAAc,CAACE,SAAf,CAAyBmB,SAAzB,GAAqCrB,cAAc,CAACE,SAAf,CAAyBgB,IAA9D;AACAlB,EAAAA,cAAc,CAACE,SAAf,CAAyBoB,SAAzB,GAAqCtB,cAAc,CAACE,SAAf,CAAyBiB,IAA9D;AACAnB,EAAAA,cAAc,CAACoB,QAAf,GAA0BpB,cAAc,CAACiB,GAAzC;;AAEAjB,EAAAA,cAAc,CAACE,SAAf,CAAyBqB,GAAzB,GAA+B,SAASA,GAAT,CAAanB,KAAb,EAAoB;AACjD,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B,OAAO,KAAKoB,IAAL,CAAUpB,KAAV,CAAP;AAC/B,WAAO,KAAKqB,IAAL,CAAUrB,KAAV,CAAP;AACD,GAHD;;AAKAJ,EAAAA,cAAc,CAACE,SAAf,CAAyBsB,IAAzB,GAAgC,SAASA,IAAT,CAAcpB,KAAd,EAAqB;AACnD,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,aAAKE,GAAL,CAASJ,CAAT,EAAYE,CAAZ,EAAe,KAAKG,GAAL,CAASL,CAAT,EAAYE,CAAZ,IAAiBL,KAAhC;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAPD;;AASAJ,EAAAA,cAAc,CAACE,SAAf,CAAyBuB,IAAzB,GAAgC,SAASA,IAAT,CAAcZ,MAAd,EAAsB;AACpDA,IAAAA,MAAM,GAAGZ,MAAM,CAACa,WAAP,CAAmBD,MAAnB,CAAT;;AACA,QAAI,KAAKL,IAAL,KAAcK,MAAM,CAACL,IAArB,IACF,KAAKE,OAAL,KAAiBG,MAAM,CAACH,OAD1B,EACmC;AACjC,YAAM,IAAIK,UAAJ,CAAe,mCAAf,CAAN;AACD;;AACD,SAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,aAAKE,GAAL,CAASJ,CAAT,EAAYE,CAAZ,EAAe,KAAKG,GAAL,CAASL,CAAT,EAAYE,CAAZ,IAAiBI,MAAM,CAACD,GAAP,CAAWL,CAAX,EAAcE,CAAd,CAAhC;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAZD;;AAcAT,EAAAA,cAAc,CAACuB,GAAf,GAAqB,SAASA,GAAT,CAAaV,MAAb,EAAqBT,KAArB,EAA4B;AAC/C,UAAMY,SAAS,GAAG,IAAIf,MAAJ,CAAWY,MAAX,CAAlB;AACA,WAAOG,SAAS,CAACO,GAAV,CAAcnB,KAAd,CAAP;AACD,GAHD;;AAIAJ,EAAAA,cAAc,CAACE,SAAf,CAAyBwB,QAAzB,GAAoC1B,cAAc,CAACE,SAAf,CAAyBqB,GAA7D;AACAvB,EAAAA,cAAc,CAACE,SAAf,CAAyByB,SAAzB,GAAqC3B,cAAc,CAACE,SAAf,CAAyBsB,IAA9D;AACAxB,EAAAA,cAAc,CAACE,SAAf,CAAyB0B,SAAzB,GAAqC5B,cAAc,CAACE,SAAf,CAAyBuB,IAA9D;AACAzB,EAAAA,cAAc,CAAC0B,QAAf,GAA0B1B,cAAc,CAACuB,GAAzC;;AAEAvB,EAAAA,cAAc,CAACE,SAAf,CAAyB2B,GAAzB,GAA+B,SAASA,GAAT,CAAazB,KAAb,EAAoB;AACjD,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B,OAAO,KAAK0B,IAAL,CAAU1B,KAAV,CAAP;AAC/B,WAAO,KAAK2B,IAAL,CAAU3B,KAAV,CAAP;AACD,GAHD;;AAKAJ,EAAAA,cAAc,CAACE,SAAf,CAAyB4B,IAAzB,GAAgC,SAASA,IAAT,CAAc1B,KAAd,EAAqB;AACnD,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,aAAKE,GAAL,CAASJ,CAAT,EAAYE,CAAZ,EAAe,KAAKG,GAAL,CAASL,CAAT,EAAYE,CAAZ,IAAiBL,KAAhC;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAPD;;AASAJ,EAAAA,cAAc,CAACE,SAAf,CAAyB6B,IAAzB,GAAgC,SAASA,IAAT,CAAclB,MAAd,EAAsB;AACpDA,IAAAA,MAAM,GAAGZ,MAAM,CAACa,WAAP,CAAmBD,MAAnB,CAAT;;AACA,QAAI,KAAKL,IAAL,KAAcK,MAAM,CAACL,IAArB,IACF,KAAKE,OAAL,KAAiBG,MAAM,CAACH,OAD1B,EACmC;AACjC,YAAM,IAAIK,UAAJ,CAAe,mCAAf,CAAN;AACD;;AACD,SAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,aAAKE,GAAL,CAASJ,CAAT,EAAYE,CAAZ,EAAe,KAAKG,GAAL,CAASL,CAAT,EAAYE,CAAZ,IAAiBI,MAAM,CAACD,GAAP,CAAWL,CAAX,EAAcE,CAAd,CAAhC;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAZD;;AAcAT,EAAAA,cAAc,CAAC6B,GAAf,GAAqB,SAASA,GAAT,CAAahB,MAAb,EAAqBT,KAArB,EAA4B;AAC/C,UAAMY,SAAS,GAAG,IAAIf,MAAJ,CAAWY,MAAX,CAAlB;AACA,WAAOG,SAAS,CAACa,GAAV,CAAczB,KAAd,CAAP;AACD,GAHD;;AAIAJ,EAAAA,cAAc,CAACE,SAAf,CAAyB8B,MAAzB,GAAkChC,cAAc,CAACE,SAAf,CAAyB2B,GAA3D;AACA7B,EAAAA,cAAc,CAACE,SAAf,CAAyB+B,OAAzB,GAAmCjC,cAAc,CAACE,SAAf,CAAyB4B,IAA5D;AACA9B,EAAAA,cAAc,CAACE,SAAf,CAAyBgC,OAAzB,GAAmClC,cAAc,CAACE,SAAf,CAAyB6B,IAA5D;AACA/B,EAAAA,cAAc,CAACgC,MAAf,GAAwBhC,cAAc,CAAC6B,GAAvC;;AAEA7B,EAAAA,cAAc,CAACE,SAAf,CAAyBiC,GAAzB,GAA+B,SAASA,GAAT,CAAa/B,KAAb,EAAoB;AACjD,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B,OAAO,KAAKgC,IAAL,CAAUhC,KAAV,CAAP;AAC/B,WAAO,KAAKiC,IAAL,CAAUjC,KAAV,CAAP;AACD,GAHD;;AAKAJ,EAAAA,cAAc,CAACE,SAAf,CAAyBkC,IAAzB,GAAgC,SAASA,IAAT,CAAchC,KAAd,EAAqB;AACnD,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,aAAKE,GAAL,CAASJ,CAAT,EAAYE,CAAZ,EAAe,KAAKG,GAAL,CAASL,CAAT,EAAYE,CAAZ,IAAiBL,KAAhC;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAPD;;AASAJ,EAAAA,cAAc,CAACE,SAAf,CAAyBmC,IAAzB,GAAgC,SAASA,IAAT,CAAcxB,MAAd,EAAsB;AACpDA,IAAAA,MAAM,GAAGZ,MAAM,CAACa,WAAP,CAAmBD,MAAnB,CAAT;;AACA,QAAI,KAAKL,IAAL,KAAcK,MAAM,CAACL,IAArB,IACF,KAAKE,OAAL,KAAiBG,MAAM,CAACH,OAD1B,EACmC;AACjC,YAAM,IAAIK,UAAJ,CAAe,mCAAf,CAAN;AACD;;AACD,SAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,aAAKE,GAAL,CAASJ,CAAT,EAAYE,CAAZ,EAAe,KAAKG,GAAL,CAASL,CAAT,EAAYE,CAAZ,IAAiBI,MAAM,CAACD,GAAP,CAAWL,CAAX,EAAcE,CAAd,CAAhC;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAZD;;AAcAT,EAAAA,cAAc,CAACmC,GAAf,GAAqB,SAASA,GAAT,CAAatB,MAAb,EAAqBT,KAArB,EAA4B;AAC/C,UAAMY,SAAS,GAAG,IAAIf,MAAJ,CAAWY,MAAX,CAAlB;AACA,WAAOG,SAAS,CAACmB,GAAV,CAAc/B,KAAd,CAAP;AACD,GAHD;;AAIAJ,EAAAA,cAAc,CAACE,SAAf,CAAyBoC,OAAzB,GAAmCtC,cAAc,CAACE,SAAf,CAAyBiC,GAA5D;AACAnC,EAAAA,cAAc,CAACE,SAAf,CAAyBqC,QAAzB,GAAoCvC,cAAc,CAACE,SAAf,CAAyBkC,IAA7D;AACApC,EAAAA,cAAc,CAACE,SAAf,CAAyBsC,QAAzB,GAAoCxC,cAAc,CAACE,SAAf,CAAyBmC,IAA7D;AACArC,EAAAA,cAAc,CAACsC,OAAf,GAAyBtC,cAAc,CAACmC,GAAxC;;AAEAnC,EAAAA,cAAc,CAACE,SAAf,CAAyBuC,GAAzB,GAA+B,SAASA,GAAT,CAAarC,KAAb,EAAoB;AACjD,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B,OAAO,KAAKsC,IAAL,CAAUtC,KAAV,CAAP;AAC/B,WAAO,KAAKuC,IAAL,CAAUvC,KAAV,CAAP;AACD,GAHD;;AAKAJ,EAAAA,cAAc,CAACE,SAAf,CAAyBwC,IAAzB,GAAgC,SAASA,IAAT,CAActC,KAAd,EAAqB;AACnD,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,aAAKE,GAAL,CAASJ,CAAT,EAAYE,CAAZ,EAAe,KAAKG,GAAL,CAASL,CAAT,EAAYE,CAAZ,IAAiBL,KAAhC;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAPD;;AASAJ,EAAAA,cAAc,CAACE,SAAf,CAAyByC,IAAzB,GAAgC,SAASA,IAAT,CAAc9B,MAAd,EAAsB;AACpDA,IAAAA,MAAM,GAAGZ,MAAM,CAACa,WAAP,CAAmBD,MAAnB,CAAT;;AACA,QAAI,KAAKL,IAAL,KAAcK,MAAM,CAACL,IAArB,IACF,KAAKE,OAAL,KAAiBG,MAAM,CAACH,OAD1B,EACmC;AACjC,YAAM,IAAIK,UAAJ,CAAe,mCAAf,CAAN;AACD;;AACD,SAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,aAAKE,GAAL,CAASJ,CAAT,EAAYE,CAAZ,EAAe,KAAKG,GAAL,CAASL,CAAT,EAAYE,CAAZ,IAAiBI,MAAM,CAACD,GAAP,CAAWL,CAAX,EAAcE,CAAd,CAAhC;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAZD;;AAcAT,EAAAA,cAAc,CAACyC,GAAf,GAAqB,SAASA,GAAT,CAAa5B,MAAb,EAAqBT,KAArB,EAA4B;AAC/C,UAAMY,SAAS,GAAG,IAAIf,MAAJ,CAAWY,MAAX,CAAlB;AACA,WAAOG,SAAS,CAACyB,GAAV,CAAcrC,KAAd,CAAP;AACD,GAHD;;AAKAJ,EAAAA,cAAc,CAACE,SAAf,CAAyB0C,EAAzB,GAA8B,SAASA,EAAT,CAAYxC,KAAZ,EAAmB;AAC/C,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B,OAAO,KAAKyC,GAAL,CAASzC,KAAT,CAAP;AAC/B,WAAO,KAAK0C,GAAL,CAAS1C,KAAT,CAAP;AACD,GAHD;;AAKAJ,EAAAA,cAAc,CAACE,SAAf,CAAyB2C,GAAzB,GAA+B,SAASA,GAAT,CAAazC,KAAb,EAAoB;AACjD,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,aAAKE,GAAL,CAASJ,CAAT,EAAYE,CAAZ,EAAe,KAAKG,GAAL,CAASL,CAAT,EAAYE,CAAZ,IAAiBL,KAAhC;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAPD;;AASAJ,EAAAA,cAAc,CAACE,SAAf,CAAyB4C,GAAzB,GAA+B,SAASA,GAAT,CAAajC,MAAb,EAAqB;AAClDA,IAAAA,MAAM,GAAGZ,MAAM,CAACa,WAAP,CAAmBD,MAAnB,CAAT;;AACA,QAAI,KAAKL,IAAL,KAAcK,MAAM,CAACL,IAArB,IACF,KAAKE,OAAL,KAAiBG,MAAM,CAACH,OAD1B,EACmC;AACjC,YAAM,IAAIK,UAAJ,CAAe,mCAAf,CAAN;AACD;;AACD,SAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,aAAKE,GAAL,CAASJ,CAAT,EAAYE,CAAZ,EAAe,KAAKG,GAAL,CAASL,CAAT,EAAYE,CAAZ,IAAiBI,MAAM,CAACD,GAAP,CAAWL,CAAX,EAAcE,CAAd,CAAhC;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAZD;;AAcAT,EAAAA,cAAc,CAAC4C,EAAf,GAAoB,SAASA,EAAT,CAAY/B,MAAZ,EAAoBT,KAApB,EAA2B;AAC7C,UAAMY,SAAS,GAAG,IAAIf,MAAJ,CAAWY,MAAX,CAAlB;AACA,WAAOG,SAAS,CAAC4B,EAAV,CAAaxC,KAAb,CAAP;AACD,GAHD;;AAKAJ,EAAAA,cAAc,CAACE,SAAf,CAAyB6C,GAAzB,GAA+B,SAASA,GAAT,CAAa3C,KAAb,EAAoB;AACjD,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B,OAAO,KAAK4C,IAAL,CAAU5C,KAAV,CAAP;AAC/B,WAAO,KAAK6C,IAAL,CAAU7C,KAAV,CAAP;AACD,GAHD;;AAKAJ,EAAAA,cAAc,CAACE,SAAf,CAAyB8C,IAAzB,GAAgC,SAASA,IAAT,CAAc5C,KAAd,EAAqB;AACnD,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,aAAKE,GAAL,CAASJ,CAAT,EAAYE,CAAZ,EAAe,KAAKG,GAAL,CAASL,CAAT,EAAYE,CAAZ,IAAiBL,KAAhC;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAPD;;AASAJ,EAAAA,cAAc,CAACE,SAAf,CAAyB+C,IAAzB,GAAgC,SAASA,IAAT,CAAcpC,MAAd,EAAsB;AACpDA,IAAAA,MAAM,GAAGZ,MAAM,CAACa,WAAP,CAAmBD,MAAnB,CAAT;;AACA,QAAI,KAAKL,IAAL,KAAcK,MAAM,CAACL,IAArB,IACF,KAAKE,OAAL,KAAiBG,MAAM,CAACH,OAD1B,EACmC;AACjC,YAAM,IAAIK,UAAJ,CAAe,mCAAf,CAAN;AACD;;AACD,SAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,aAAKE,GAAL,CAASJ,CAAT,EAAYE,CAAZ,EAAe,KAAKG,GAAL,CAASL,CAAT,EAAYE,CAAZ,IAAiBI,MAAM,CAACD,GAAP,CAAWL,CAAX,EAAcE,CAAd,CAAhC;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAZD;;AAcAT,EAAAA,cAAc,CAAC+C,GAAf,GAAqB,SAASA,GAAT,CAAalC,MAAb,EAAqBT,KAArB,EAA4B;AAC/C,UAAMY,SAAS,GAAG,IAAIf,MAAJ,CAAWY,MAAX,CAAlB;AACA,WAAOG,SAAS,CAAC+B,GAAV,CAAc3C,KAAd,CAAP;AACD,GAHD;;AAKAJ,EAAAA,cAAc,CAACE,SAAf,CAAyBgD,SAAzB,GAAqC,SAASA,SAAT,CAAmB9C,KAAnB,EAA0B;AAC7D,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B,OAAO,KAAK+C,UAAL,CAAgB/C,KAAhB,CAAP;AAC/B,WAAO,KAAKgD,UAAL,CAAgBhD,KAAhB,CAAP;AACD,GAHD;;AAKAJ,EAAAA,cAAc,CAACE,SAAf,CAAyBiD,UAAzB,GAAsC,SAASA,UAAT,CAAoB/C,KAApB,EAA2B;AAC/D,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,aAAKE,GAAL,CAASJ,CAAT,EAAYE,CAAZ,EAAe,KAAKG,GAAL,CAASL,CAAT,EAAYE,CAAZ,KAAkBL,KAAjC;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAPD;;AASAJ,EAAAA,cAAc,CAACE,SAAf,CAAyBkD,UAAzB,GAAsC,SAASA,UAAT,CAAoBvC,MAApB,EAA4B;AAChEA,IAAAA,MAAM,GAAGZ,MAAM,CAACa,WAAP,CAAmBD,MAAnB,CAAT;;AACA,QAAI,KAAKL,IAAL,KAAcK,MAAM,CAACL,IAArB,IACF,KAAKE,OAAL,KAAiBG,MAAM,CAACH,OAD1B,EACmC;AACjC,YAAM,IAAIK,UAAJ,CAAe,mCAAf,CAAN;AACD;;AACD,SAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,aAAKE,GAAL,CAASJ,CAAT,EAAYE,CAAZ,EAAe,KAAKG,GAAL,CAASL,CAAT,EAAYE,CAAZ,KAAkBI,MAAM,CAACD,GAAP,CAAWL,CAAX,EAAcE,CAAd,CAAjC;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAZD;;AAcAT,EAAAA,cAAc,CAACkD,SAAf,GAA2B,SAASA,SAAT,CAAmBrC,MAAnB,EAA2BT,KAA3B,EAAkC;AAC3D,UAAMY,SAAS,GAAG,IAAIf,MAAJ,CAAWY,MAAX,CAAlB;AACA,WAAOG,SAAS,CAACkC,SAAV,CAAoB9C,KAApB,CAAP;AACD,GAHD;;AAKAJ,EAAAA,cAAc,CAACE,SAAf,CAAyBmD,yBAAzB,GAAqD,SAASA,yBAAT,CAAmCjD,KAAnC,EAA0C;AAC7F,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B,OAAO,KAAKkD,0BAAL,CAAgClD,KAAhC,CAAP;AAC/B,WAAO,KAAKmD,0BAAL,CAAgCnD,KAAhC,CAAP;AACD,GAHD;;AAKAJ,EAAAA,cAAc,CAACE,SAAf,CAAyBoD,0BAAzB,GAAsD,SAASA,0BAAT,CAAoClD,KAApC,EAA2C;AAC/F,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,aAAKE,GAAL,CAASJ,CAAT,EAAYE,CAAZ,EAAe,KAAKG,GAAL,CAASL,CAAT,EAAYE,CAAZ,KAAkBL,KAAjC;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAPD;;AASAJ,EAAAA,cAAc,CAACE,SAAf,CAAyBqD,0BAAzB,GAAsD,SAASA,0BAAT,CAAoC1C,MAApC,EAA4C;AAChGA,IAAAA,MAAM,GAAGZ,MAAM,CAACa,WAAP,CAAmBD,MAAnB,CAAT;;AACA,QAAI,KAAKL,IAAL,KAAcK,MAAM,CAACL,IAArB,IACF,KAAKE,OAAL,KAAiBG,MAAM,CAACH,OAD1B,EACmC;AACjC,YAAM,IAAIK,UAAJ,CAAe,mCAAf,CAAN;AACD;;AACD,SAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,aAAKE,GAAL,CAASJ,CAAT,EAAYE,CAAZ,EAAe,KAAKG,GAAL,CAASL,CAAT,EAAYE,CAAZ,KAAkBI,MAAM,CAACD,GAAP,CAAWL,CAAX,EAAcE,CAAd,CAAjC;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAZD;;AAcAT,EAAAA,cAAc,CAACqD,yBAAf,GAA2C,SAASA,yBAAT,CAAmCxC,MAAnC,EAA2CT,KAA3C,EAAkD;AAC3F,UAAMY,SAAS,GAAG,IAAIf,MAAJ,CAAWY,MAAX,CAAlB;AACA,WAAOG,SAAS,CAACqC,yBAAV,CAAoCjD,KAApC,CAAP;AACD,GAHD;;AAKAJ,EAAAA,cAAc,CAACE,SAAf,CAAyBsD,UAAzB,GAAsC,SAASA,UAAT,CAAoBpD,KAApB,EAA2B;AAC/D,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B,OAAO,KAAKqD,WAAL,CAAiBrD,KAAjB,CAAP;AAC/B,WAAO,KAAKsD,WAAL,CAAiBtD,KAAjB,CAAP;AACD,GAHD;;AAKAJ,EAAAA,cAAc,CAACE,SAAf,CAAyBuD,WAAzB,GAAuC,SAASA,WAAT,CAAqBrD,KAArB,EAA4B;AACjE,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,aAAKE,GAAL,CAASJ,CAAT,EAAYE,CAAZ,EAAe,KAAKG,GAAL,CAASL,CAAT,EAAYE,CAAZ,MAAmBL,KAAlC;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAPD;;AASAJ,EAAAA,cAAc,CAACE,SAAf,CAAyBwD,WAAzB,GAAuC,SAASA,WAAT,CAAqB7C,MAArB,EAA6B;AAClEA,IAAAA,MAAM,GAAGZ,MAAM,CAACa,WAAP,CAAmBD,MAAnB,CAAT;;AACA,QAAI,KAAKL,IAAL,KAAcK,MAAM,CAACL,IAArB,IACF,KAAKE,OAAL,KAAiBG,MAAM,CAACH,OAD1B,EACmC;AACjC,YAAM,IAAIK,UAAJ,CAAe,mCAAf,CAAN;AACD;;AACD,SAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,aAAKE,GAAL,CAASJ,CAAT,EAAYE,CAAZ,EAAe,KAAKG,GAAL,CAASL,CAAT,EAAYE,CAAZ,MAAmBI,MAAM,CAACD,GAAP,CAAWL,CAAX,EAAcE,CAAd,CAAlC;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAZD;;AAcAT,EAAAA,cAAc,CAACwD,UAAf,GAA4B,SAASA,UAAT,CAAoB3C,MAApB,EAA4BT,KAA5B,EAAmC;AAC7D,UAAMY,SAAS,GAAG,IAAIf,MAAJ,CAAWY,MAAX,CAAlB;AACA,WAAOG,SAAS,CAACwC,UAAV,CAAqBpD,KAArB,CAAP;AACD,GAHD;;AAIAJ,EAAAA,cAAc,CAACE,SAAf,CAAyByD,kBAAzB,GAA8C3D,cAAc,CAACE,SAAf,CAAyBsD,UAAvE;AACAxD,EAAAA,cAAc,CAACE,SAAf,CAAyB0D,mBAAzB,GAA+C5D,cAAc,CAACE,SAAf,CAAyBuD,WAAxE;AACAzD,EAAAA,cAAc,CAACE,SAAf,CAAyB2D,mBAAzB,GAA+C7D,cAAc,CAACE,SAAf,CAAyBwD,WAAxE;AACA1D,EAAAA,cAAc,CAAC2D,kBAAf,GAAoC3D,cAAc,CAACwD,UAAnD;;AAEAxD,EAAAA,cAAc,CAACE,SAAf,CAAyB4D,GAAzB,GAA+B,SAASA,GAAT,GAAe;AAC5C,SAAK,IAAIvD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,aAAKE,GAAL,CAASJ,CAAT,EAAYE,CAAZ,EAAe,CAAE,KAAKG,GAAL,CAASL,CAAT,EAAYE,CAAZ,CAAjB;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAPD;;AASAT,EAAAA,cAAc,CAAC8D,GAAf,GAAqB,SAASA,GAAT,CAAajD,MAAb,EAAqB;AACxC,UAAMG,SAAS,GAAG,IAAIf,MAAJ,CAAWY,MAAX,CAAlB;AACA,WAAOG,SAAS,CAAC8C,GAAV,EAAP;AACD,GAHD;;AAKA9D,EAAAA,cAAc,CAACE,SAAf,CAAyB6D,GAAzB,GAA+B,SAASA,GAAT,GAAe;AAC5C,SAAK,IAAIxD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,aAAKE,GAAL,CAASJ,CAAT,EAAYE,CAAZ,EAAeuD,IAAI,CAACD,GAAL,CAAS,KAAKnD,GAAL,CAASL,CAAT,EAAYE,CAAZ,CAAT,CAAf;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAPD;;AASAT,EAAAA,cAAc,CAAC+D,GAAf,GAAqB,SAASA,GAAT,CAAalD,MAAb,EAAqB;AACxC,UAAMG,SAAS,GAAG,IAAIf,MAAJ,CAAWY,MAAX,CAAlB;AACA,WAAOG,SAAS,CAAC+C,GAAV,EAAP;AACD,GAHD;;AAKA/D,EAAAA,cAAc,CAACE,SAAf,CAAyB+D,IAAzB,GAAgC,SAASA,IAAT,GAAgB;AAC9C,SAAK,IAAI1D,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,aAAKE,GAAL,CAASJ,CAAT,EAAYE,CAAZ,EAAeuD,IAAI,CAACC,IAAL,CAAU,KAAKrD,GAAL,CAASL,CAAT,EAAYE,CAAZ,CAAV,CAAf;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAPD;;AASAT,EAAAA,cAAc,CAACiE,IAAf,GAAsB,SAASA,IAAT,CAAcpD,MAAd,EAAsB;AAC1C,UAAMG,SAAS,GAAG,IAAIf,MAAJ,CAAWY,MAAX,CAAlB;AACA,WAAOG,SAAS,CAACiD,IAAV,EAAP;AACD,GAHD;;AAKAjE,EAAAA,cAAc,CAACE,SAAf,CAAyBgE,KAAzB,GAAiC,SAASA,KAAT,GAAiB;AAChD,SAAK,IAAI3D,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,aAAKE,GAAL,CAASJ,CAAT,EAAYE,CAAZ,EAAeuD,IAAI,CAACE,KAAL,CAAW,KAAKtD,GAAL,CAASL,CAAT,EAAYE,CAAZ,CAAX,CAAf;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAPD;;AASAT,EAAAA,cAAc,CAACkE,KAAf,GAAuB,SAASA,KAAT,CAAerD,MAAf,EAAuB;AAC5C,UAAMG,SAAS,GAAG,IAAIf,MAAJ,CAAWY,MAAX,CAAlB;AACA,WAAOG,SAAS,CAACkD,KAAV,EAAP;AACD,GAHD;;AAKAlE,EAAAA,cAAc,CAACE,SAAf,CAAyBiE,IAAzB,GAAgC,SAASA,IAAT,GAAgB;AAC9C,SAAK,IAAI5D,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,aAAKE,GAAL,CAASJ,CAAT,EAAYE,CAAZ,EAAeuD,IAAI,CAACG,IAAL,CAAU,KAAKvD,GAAL,CAASL,CAAT,EAAYE,CAAZ,CAAV,CAAf;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAPD;;AASAT,EAAAA,cAAc,CAACmE,IAAf,GAAsB,SAASA,IAAT,CAActD,MAAd,EAAsB;AAC1C,UAAMG,SAAS,GAAG,IAAIf,MAAJ,CAAWY,MAAX,CAAlB;AACA,WAAOG,SAAS,CAACmD,IAAV,EAAP;AACD,GAHD;;AAKAnE,EAAAA,cAAc,CAACE,SAAf,CAAyBkE,KAAzB,GAAiC,SAASA,KAAT,GAAiB;AAChD,SAAK,IAAI7D,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,aAAKE,GAAL,CAASJ,CAAT,EAAYE,CAAZ,EAAeuD,IAAI,CAACI,KAAL,CAAW,KAAKxD,GAAL,CAASL,CAAT,EAAYE,CAAZ,CAAX,CAAf;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAPD;;AASAT,EAAAA,cAAc,CAACoE,KAAf,GAAuB,SAASA,KAAT,CAAevD,MAAf,EAAuB;AAC5C,UAAMG,SAAS,GAAG,IAAIf,MAAJ,CAAWY,MAAX,CAAlB;AACA,WAAOG,SAAS,CAACoD,KAAV,EAAP;AACD,GAHD;;AAKApE,EAAAA,cAAc,CAACE,SAAf,CAAyBmE,IAAzB,GAAgC,SAASA,IAAT,GAAgB;AAC9C,SAAK,IAAI9D,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,aAAKE,GAAL,CAASJ,CAAT,EAAYE,CAAZ,EAAeuD,IAAI,CAACK,IAAL,CAAU,KAAKzD,GAAL,CAASL,CAAT,EAAYE,CAAZ,CAAV,CAAf;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAPD;;AASAT,EAAAA,cAAc,CAACqE,IAAf,GAAsB,SAASA,IAAT,CAAcxD,MAAd,EAAsB;AAC1C,UAAMG,SAAS,GAAG,IAAIf,MAAJ,CAAWY,MAAX,CAAlB;AACA,WAAOG,SAAS,CAACqD,IAAV,EAAP;AACD,GAHD;;AAKArE,EAAAA,cAAc,CAACE,SAAf,CAAyBoE,KAAzB,GAAiC,SAASA,KAAT,GAAiB;AAChD,SAAK,IAAI/D,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,aAAKE,GAAL,CAASJ,CAAT,EAAYE,CAAZ,EAAeuD,IAAI,CAACM,KAAL,CAAW,KAAK1D,GAAL,CAASL,CAAT,EAAYE,CAAZ,CAAX,CAAf;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAPD;;AASAT,EAAAA,cAAc,CAACsE,KAAf,GAAuB,SAASA,KAAT,CAAezD,MAAf,EAAuB;AAC5C,UAAMG,SAAS,GAAG,IAAIf,MAAJ,CAAWY,MAAX,CAAlB;AACA,WAAOG,SAAS,CAACsD,KAAV,EAAP;AACD,GAHD;;AAKAtE,EAAAA,cAAc,CAACE,SAAf,CAAyBqE,IAAzB,GAAgC,SAASA,IAAT,GAAgB;AAC9C,SAAK,IAAIhE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,aAAKE,GAAL,CAASJ,CAAT,EAAYE,CAAZ,EAAeuD,IAAI,CAACO,IAAL,CAAU,KAAK3D,GAAL,CAASL,CAAT,EAAYE,CAAZ,CAAV,CAAf;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAPD;;AASAT,EAAAA,cAAc,CAACuE,IAAf,GAAsB,SAASA,IAAT,CAAc1D,MAAd,EAAsB;AAC1C,UAAMG,SAAS,GAAG,IAAIf,MAAJ,CAAWY,MAAX,CAAlB;AACA,WAAOG,SAAS,CAACuD,IAAV,EAAP;AACD,GAHD;;AAKAvE,EAAAA,cAAc,CAACE,SAAf,CAAyBsE,IAAzB,GAAgC,SAASA,IAAT,GAAgB;AAC9C,SAAK,IAAIjE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,aAAKE,GAAL,CAASJ,CAAT,EAAYE,CAAZ,EAAeuD,IAAI,CAACQ,IAAL,CAAU,KAAK5D,GAAL,CAASL,CAAT,EAAYE,CAAZ,CAAV,CAAf;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAPD;;AASAT,EAAAA,cAAc,CAACwE,IAAf,GAAsB,SAASA,IAAT,CAAc3D,MAAd,EAAsB;AAC1C,UAAMG,SAAS,GAAG,IAAIf,MAAJ,CAAWY,MAAX,CAAlB;AACA,WAAOG,SAAS,CAACwD,IAAV,EAAP;AACD,GAHD;;AAKAxE,EAAAA,cAAc,CAACE,SAAf,CAAyBuE,KAAzB,GAAiC,SAASA,KAAT,GAAiB;AAChD,SAAK,IAAIlE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,aAAKE,GAAL,CAASJ,CAAT,EAAYE,CAAZ,EAAeuD,IAAI,CAACS,KAAL,CAAW,KAAK7D,GAAL,CAASL,CAAT,EAAYE,CAAZ,CAAX,CAAf;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAPD;;AASAT,EAAAA,cAAc,CAACyE,KAAf,GAAuB,SAASA,KAAT,CAAe5D,MAAf,EAAuB;AAC5C,UAAMG,SAAS,GAAG,IAAIf,MAAJ,CAAWY,MAAX,CAAlB;AACA,WAAOG,SAAS,CAACyD,KAAV,EAAP;AACD,GAHD;;AAKAzE,EAAAA,cAAc,CAACE,SAAf,CAAyBwE,GAAzB,GAA+B,SAASA,GAAT,GAAe;AAC5C,SAAK,IAAInE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,aAAKE,GAAL,CAASJ,CAAT,EAAYE,CAAZ,EAAeuD,IAAI,CAACU,GAAL,CAAS,KAAK9D,GAAL,CAASL,CAAT,EAAYE,CAAZ,CAAT,CAAf;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAPD;;AASAT,EAAAA,cAAc,CAAC0E,GAAf,GAAqB,SAASA,GAAT,CAAa7D,MAAb,EAAqB;AACxC,UAAMG,SAAS,GAAG,IAAIf,MAAJ,CAAWY,MAAX,CAAlB;AACA,WAAOG,SAAS,CAAC0D,GAAV,EAAP;AACD,GAHD;;AAKA1E,EAAAA,cAAc,CAACE,SAAf,CAAyByE,IAAzB,GAAgC,SAASA,IAAT,GAAgB;AAC9C,SAAK,IAAIpE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,aAAKE,GAAL,CAASJ,CAAT,EAAYE,CAAZ,EAAeuD,IAAI,CAACW,IAAL,CAAU,KAAK/D,GAAL,CAASL,CAAT,EAAYE,CAAZ,CAAV,CAAf;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAPD;;AASAT,EAAAA,cAAc,CAAC2E,IAAf,GAAsB,SAASA,IAAT,CAAc9D,MAAd,EAAsB;AAC1C,UAAMG,SAAS,GAAG,IAAIf,MAAJ,CAAWY,MAAX,CAAlB;AACA,WAAOG,SAAS,CAAC2D,IAAV,EAAP;AACD,GAHD;;AAKA3E,EAAAA,cAAc,CAACE,SAAf,CAAyB0E,GAAzB,GAA+B,SAASA,GAAT,GAAe;AAC5C,SAAK,IAAIrE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,aAAKE,GAAL,CAASJ,CAAT,EAAYE,CAAZ,EAAeuD,IAAI,CAACY,GAAL,CAAS,KAAKhE,GAAL,CAASL,CAAT,EAAYE,CAAZ,CAAT,CAAf;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAPD;;AASAT,EAAAA,cAAc,CAAC4E,GAAf,GAAqB,SAASA,GAAT,CAAa/D,MAAb,EAAqB;AACxC,UAAMG,SAAS,GAAG,IAAIf,MAAJ,CAAWY,MAAX,CAAlB;AACA,WAAOG,SAAS,CAAC4D,GAAV,EAAP;AACD,GAHD;;AAKA5E,EAAAA,cAAc,CAACE,SAAf,CAAyB2E,KAAzB,GAAiC,SAASA,KAAT,GAAiB;AAChD,SAAK,IAAItE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,aAAKE,GAAL,CAASJ,CAAT,EAAYE,CAAZ,EAAeuD,IAAI,CAACa,KAAL,CAAW,KAAKjE,GAAL,CAASL,CAAT,EAAYE,CAAZ,CAAX,CAAf;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAPD;;AASAT,EAAAA,cAAc,CAAC6E,KAAf,GAAuB,SAASA,KAAT,CAAehE,MAAf,EAAuB;AAC5C,UAAMG,SAAS,GAAG,IAAIf,MAAJ,CAAWY,MAAX,CAAlB;AACA,WAAOG,SAAS,CAAC6D,KAAV,EAAP;AACD,GAHD;;AAKA7E,EAAAA,cAAc,CAACE,SAAf,CAAyB4E,KAAzB,GAAiC,SAASA,KAAT,GAAiB;AAChD,SAAK,IAAIvE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,aAAKE,GAAL,CAASJ,CAAT,EAAYE,CAAZ,EAAeuD,IAAI,CAACc,KAAL,CAAW,KAAKlE,GAAL,CAASL,CAAT,EAAYE,CAAZ,CAAX,CAAf;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAPD;;AASAT,EAAAA,cAAc,CAAC8E,KAAf,GAAuB,SAASA,KAAT,CAAejE,MAAf,EAAuB;AAC5C,UAAMG,SAAS,GAAG,IAAIf,MAAJ,CAAWY,MAAX,CAAlB;AACA,WAAOG,SAAS,CAAC8D,KAAV,EAAP;AACD,GAHD;;AAKA9E,EAAAA,cAAc,CAACE,SAAf,CAAyB6E,MAAzB,GAAkC,SAASA,MAAT,GAAkB;AAClD,SAAK,IAAIxE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,aAAKE,GAAL,CAASJ,CAAT,EAAYE,CAAZ,EAAeuD,IAAI,CAACe,MAAL,CAAY,KAAKnE,GAAL,CAASL,CAAT,EAAYE,CAAZ,CAAZ,CAAf;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAPD;;AASAT,EAAAA,cAAc,CAAC+E,MAAf,GAAwB,SAASA,MAAT,CAAgBlE,MAAhB,EAAwB;AAC9C,UAAMG,SAAS,GAAG,IAAIf,MAAJ,CAAWY,MAAX,CAAlB;AACA,WAAOG,SAAS,CAAC+D,MAAV,EAAP;AACD,GAHD;;AAKA/E,EAAAA,cAAc,CAACE,SAAf,CAAyB8E,GAAzB,GAA+B,SAASA,GAAT,GAAe;AAC5C,SAAK,IAAIzE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,aAAKE,GAAL,CAASJ,CAAT,EAAYE,CAAZ,EAAeuD,IAAI,CAACgB,GAAL,CAAS,KAAKpE,GAAL,CAASL,CAAT,EAAYE,CAAZ,CAAT,CAAf;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAPD;;AASAT,EAAAA,cAAc,CAACgF,GAAf,GAAqB,SAASA,GAAT,CAAanE,MAAb,EAAqB;AACxC,UAAMG,SAAS,GAAG,IAAIf,MAAJ,CAAWY,MAAX,CAAlB;AACA,WAAOG,SAAS,CAACgE,GAAV,EAAP;AACD,GAHD;;AAKAhF,EAAAA,cAAc,CAACE,SAAf,CAAyB+E,KAAzB,GAAiC,SAASA,KAAT,GAAiB;AAChD,SAAK,IAAI1E,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,aAAKE,GAAL,CAASJ,CAAT,EAAYE,CAAZ,EAAeuD,IAAI,CAACiB,KAAL,CAAW,KAAKrE,GAAL,CAASL,CAAT,EAAYE,CAAZ,CAAX,CAAf;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAPD;;AASAT,EAAAA,cAAc,CAACiF,KAAf,GAAuB,SAASA,KAAT,CAAepE,MAAf,EAAuB;AAC5C,UAAMG,SAAS,GAAG,IAAIf,MAAJ,CAAWY,MAAX,CAAlB;AACA,WAAOG,SAAS,CAACiE,KAAV,EAAP;AACD,GAHD;;AAKAjF,EAAAA,cAAc,CAACE,SAAf,CAAyBgF,KAAzB,GAAiC,SAASA,KAAT,GAAiB;AAChD,SAAK,IAAI3E,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,aAAKE,GAAL,CAASJ,CAAT,EAAYE,CAAZ,EAAeuD,IAAI,CAACkB,KAAL,CAAW,KAAKtE,GAAL,CAASL,CAAT,EAAYE,CAAZ,CAAX,CAAf;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAPD;;AASAT,EAAAA,cAAc,CAACkF,KAAf,GAAuB,SAASA,KAAT,CAAerE,MAAf,EAAuB;AAC5C,UAAMG,SAAS,GAAG,IAAIf,MAAJ,CAAWY,MAAX,CAAlB;AACA,WAAOG,SAAS,CAACkE,KAAV,EAAP;AACD,GAHD;;AAKAlF,EAAAA,cAAc,CAACE,SAAf,CAAyBiF,IAAzB,GAAgC,SAASA,IAAT,GAAgB;AAC9C,SAAK,IAAI5E,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,aAAKE,GAAL,CAASJ,CAAT,EAAYE,CAAZ,EAAeuD,IAAI,CAACmB,IAAL,CAAU,KAAKvE,GAAL,CAASL,CAAT,EAAYE,CAAZ,CAAV,CAAf;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAPD;;AASAT,EAAAA,cAAc,CAACmF,IAAf,GAAsB,SAASA,IAAT,CAActE,MAAd,EAAsB;AAC1C,UAAMG,SAAS,GAAG,IAAIf,MAAJ,CAAWY,MAAX,CAAlB;AACA,WAAOG,SAAS,CAACmE,IAAV,EAAP;AACD,GAHD;;AAKAnF,EAAAA,cAAc,CAACE,SAAf,CAAyBkF,KAAzB,GAAiC,SAASA,KAAT,GAAiB;AAChD,SAAK,IAAI7E,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,aAAKE,GAAL,CAASJ,CAAT,EAAYE,CAAZ,EAAeuD,IAAI,CAACoB,KAAL,CAAW,KAAKxE,GAAL,CAASL,CAAT,EAAYE,CAAZ,CAAX,CAAf;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAPD;;AASAT,EAAAA,cAAc,CAACoF,KAAf,GAAuB,SAASA,KAAT,CAAevE,MAAf,EAAuB;AAC5C,UAAMG,SAAS,GAAG,IAAIf,MAAJ,CAAWY,MAAX,CAAlB;AACA,WAAOG,SAAS,CAACoE,KAAV,EAAP;AACD,GAHD;;AAKApF,EAAAA,cAAc,CAACE,SAAf,CAAyBmF,IAAzB,GAAgC,SAASA,IAAT,GAAgB;AAC9C,SAAK,IAAI9E,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,aAAKE,GAAL,CAASJ,CAAT,EAAYE,CAAZ,EAAeuD,IAAI,CAACqB,IAAL,CAAU,KAAKzE,GAAL,CAASL,CAAT,EAAYE,CAAZ,CAAV,CAAf;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAPD;;AASAT,EAAAA,cAAc,CAACqF,IAAf,GAAsB,SAASA,IAAT,CAAcxE,MAAd,EAAsB;AAC1C,UAAMG,SAAS,GAAG,IAAIf,MAAJ,CAAWY,MAAX,CAAlB;AACA,WAAOG,SAAS,CAACqE,IAAV,EAAP;AACD,GAHD;;AAKArF,EAAAA,cAAc,CAACE,SAAf,CAAyBoF,GAAzB,GAA+B,SAASA,GAAT,GAAe;AAC5C,SAAK,IAAI/E,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,aAAKE,GAAL,CAASJ,CAAT,EAAYE,CAAZ,EAAeuD,IAAI,CAACsB,GAAL,CAAS,KAAK1E,GAAL,CAASL,CAAT,EAAYE,CAAZ,CAAT,CAAf;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAPD;;AASAT,EAAAA,cAAc,CAACsF,GAAf,GAAqB,SAASA,GAAT,CAAazE,MAAb,EAAqB;AACxC,UAAMG,SAAS,GAAG,IAAIf,MAAJ,CAAWY,MAAX,CAAlB;AACA,WAAOG,SAAS,CAACsE,GAAV,EAAP;AACD,GAHD;;AAKAtF,EAAAA,cAAc,CAACE,SAAf,CAAyBqF,IAAzB,GAAgC,SAASA,IAAT,GAAgB;AAC9C,SAAK,IAAIhF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,aAAKE,GAAL,CAASJ,CAAT,EAAYE,CAAZ,EAAeuD,IAAI,CAACuB,IAAL,CAAU,KAAK3E,GAAL,CAASL,CAAT,EAAYE,CAAZ,CAAV,CAAf;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAPD;;AASAT,EAAAA,cAAc,CAACuF,IAAf,GAAsB,SAASA,IAAT,CAAc1E,MAAd,EAAsB;AAC1C,UAAMG,SAAS,GAAG,IAAIf,MAAJ,CAAWY,MAAX,CAAlB;AACA,WAAOG,SAAS,CAACuE,IAAV,EAAP;AACD,GAHD;;AAKAvF,EAAAA,cAAc,CAACE,SAAf,CAAyBsF,IAAzB,GAAgC,SAASA,IAAT,GAAgB;AAC9C,SAAK,IAAIjF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,aAAKE,GAAL,CAASJ,CAAT,EAAYE,CAAZ,EAAeuD,IAAI,CAACwB,IAAL,CAAU,KAAK5E,GAAL,CAASL,CAAT,EAAYE,CAAZ,CAAV,CAAf;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAPD;;AASAT,EAAAA,cAAc,CAACwF,IAAf,GAAsB,SAASA,IAAT,CAAc3E,MAAd,EAAsB;AAC1C,UAAMG,SAAS,GAAG,IAAIf,MAAJ,CAAWY,MAAX,CAAlB;AACA,WAAOG,SAAS,CAACwE,IAAV,EAAP;AACD,GAHD;;AAKAxF,EAAAA,cAAc,CAACE,SAAf,CAAyBuF,GAAzB,GAA+B,SAASA,GAAT,GAAe;AAC5C,SAAK,IAAIlF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,aAAKE,GAAL,CAASJ,CAAT,EAAYE,CAAZ,EAAeuD,IAAI,CAACyB,GAAL,CAAS,KAAK7E,GAAL,CAASL,CAAT,EAAYE,CAAZ,CAAT,CAAf;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAPD;;AASAT,EAAAA,cAAc,CAACyF,GAAf,GAAqB,SAASA,GAAT,CAAa5E,MAAb,EAAqB;AACxC,UAAMG,SAAS,GAAG,IAAIf,MAAJ,CAAWY,MAAX,CAAlB;AACA,WAAOG,SAAS,CAACyE,GAAV,EAAP;AACD,GAHD;;AAKAzF,EAAAA,cAAc,CAACE,SAAf,CAAyBwF,IAAzB,GAAgC,SAASA,IAAT,GAAgB;AAC9C,SAAK,IAAInF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,aAAKE,GAAL,CAASJ,CAAT,EAAYE,CAAZ,EAAeuD,IAAI,CAAC0B,IAAL,CAAU,KAAK9E,GAAL,CAASL,CAAT,EAAYE,CAAZ,CAAV,CAAf;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAPD;;AASAT,EAAAA,cAAc,CAAC0F,IAAf,GAAsB,SAASA,IAAT,CAAc7E,MAAd,EAAsB;AAC1C,UAAMG,SAAS,GAAG,IAAIf,MAAJ,CAAWY,MAAX,CAAlB;AACA,WAAOG,SAAS,CAAC0E,IAAV,EAAP;AACD,GAHD;;AAKA1F,EAAAA,cAAc,CAACE,SAAf,CAAyByF,KAAzB,GAAiC,SAASA,KAAT,GAAiB;AAChD,SAAK,IAAIpF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,aAAKE,GAAL,CAASJ,CAAT,EAAYE,CAAZ,EAAeuD,IAAI,CAAC2B,KAAL,CAAW,KAAK/E,GAAL,CAASL,CAAT,EAAYE,CAAZ,CAAX,CAAf;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAPD;;AASAT,EAAAA,cAAc,CAAC2F,KAAf,GAAuB,SAASA,KAAT,CAAe9E,MAAf,EAAuB;AAC5C,UAAMG,SAAS,GAAG,IAAIf,MAAJ,CAAWY,MAAX,CAAlB;AACA,WAAOG,SAAS,CAAC2E,KAAV,EAAP;AACD,GAHD;;AAKA3F,EAAAA,cAAc,CAAC4F,GAAf,GAAqB,SAASA,GAAT,CAAa/E,MAAb,EAAqBgF,IAArB,EAA2B;AAC9C,UAAM7E,SAAS,GAAG,IAAIf,MAAJ,CAAWY,MAAX,CAAlB;AACA,WAAOG,SAAS,CAAC4E,GAAV,CAAcC,IAAd,CAAP;AACD,GAHD;;AAKA7F,EAAAA,cAAc,CAACE,SAAf,CAAyB0F,GAAzB,GAA+B,SAASA,GAAT,CAAaxF,KAAb,EAAoB;AACjD,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B,OAAO,KAAK0F,IAAL,CAAU1F,KAAV,CAAP;AAC/B,WAAO,KAAK2F,IAAL,CAAU3F,KAAV,CAAP;AACD,GAHD;;AAKAJ,EAAAA,cAAc,CAACE,SAAf,CAAyB4F,IAAzB,GAAgC,SAASA,IAAT,CAAc1F,KAAd,EAAqB;AACnD,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,aAAKE,GAAL,CAASJ,CAAT,EAAYE,CAAZ,EAAeuD,IAAI,CAAC4B,GAAL,CAAS,KAAKhF,GAAL,CAASL,CAAT,EAAYE,CAAZ,CAAT,EAAyBL,KAAzB,CAAf;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAPD;;AASAJ,EAAAA,cAAc,CAACE,SAAf,CAAyB6F,IAAzB,GAAgC,SAASA,IAAT,CAAclF,MAAd,EAAsB;AACpDA,IAAAA,MAAM,GAAGZ,MAAM,CAACa,WAAP,CAAmBD,MAAnB,CAAT;;AACA,QAAI,KAAKL,IAAL,KAAcK,MAAM,CAACL,IAArB,IACF,KAAKE,OAAL,KAAiBG,MAAM,CAACH,OAD1B,EACmC;AACjC,YAAM,IAAIK,UAAJ,CAAe,mCAAf,CAAN;AACD;;AACD,SAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,IAAzB,EAA+BD,CAAC,EAAhC,EAAoC;AAClC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKC,OAAzB,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,aAAKE,GAAL,CAASJ,CAAT,EAAYE,CAAZ,EAAeuD,IAAI,CAAC4B,GAAL,CAAS,KAAKhF,GAAL,CAASL,CAAT,EAAYE,CAAZ,CAAT,EAAyBI,MAAM,CAACD,GAAP,CAAWL,CAAX,EAAcE,CAAd,CAAzB,CAAf;AACD;AACF;;AACD,WAAO,IAAP;AACD,GAZD;AAaD","sourcesContent":["export function installMathOperations(AbstractMatrix, Matrix) {\n  AbstractMatrix.prototype.add = function add(value) {\n    if (typeof value === 'number') return this.addS(value);\n    return this.addM(value);\n  };\n\n  AbstractMatrix.prototype.addS = function addS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.addM = function addM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.add = function add(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.add(value);\n  };\n\n  AbstractMatrix.prototype.sub = function sub(value) {\n    if (typeof value === 'number') return this.subS(value);\n    return this.subM(value);\n  };\n\n  AbstractMatrix.prototype.subS = function subS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.subM = function subM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sub = function sub(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sub(value);\n  };\n  AbstractMatrix.prototype.subtract = AbstractMatrix.prototype.sub;\n  AbstractMatrix.prototype.subtractS = AbstractMatrix.prototype.subS;\n  AbstractMatrix.prototype.subtractM = AbstractMatrix.prototype.subM;\n  AbstractMatrix.subtract = AbstractMatrix.sub;\n\n  AbstractMatrix.prototype.mul = function mul(value) {\n    if (typeof value === 'number') return this.mulS(value);\n    return this.mulM(value);\n  };\n\n  AbstractMatrix.prototype.mulS = function mulS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.mulM = function mulM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.mul = function mul(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.mul(value);\n  };\n  AbstractMatrix.prototype.multiply = AbstractMatrix.prototype.mul;\n  AbstractMatrix.prototype.multiplyS = AbstractMatrix.prototype.mulS;\n  AbstractMatrix.prototype.multiplyM = AbstractMatrix.prototype.mulM;\n  AbstractMatrix.multiply = AbstractMatrix.mul;\n\n  AbstractMatrix.prototype.div = function div(value) {\n    if (typeof value === 'number') return this.divS(value);\n    return this.divM(value);\n  };\n\n  AbstractMatrix.prototype.divS = function divS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.divM = function divM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.div = function div(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.div(value);\n  };\n  AbstractMatrix.prototype.divide = AbstractMatrix.prototype.div;\n  AbstractMatrix.prototype.divideS = AbstractMatrix.prototype.divS;\n  AbstractMatrix.prototype.divideM = AbstractMatrix.prototype.divM;\n  AbstractMatrix.divide = AbstractMatrix.div;\n\n  AbstractMatrix.prototype.mod = function mod(value) {\n    if (typeof value === 'number') return this.modS(value);\n    return this.modM(value);\n  };\n\n  AbstractMatrix.prototype.modS = function modS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) % value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.modM = function modM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) % matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.mod = function mod(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.mod(value);\n  };\n  AbstractMatrix.prototype.modulus = AbstractMatrix.prototype.mod;\n  AbstractMatrix.prototype.modulusS = AbstractMatrix.prototype.modS;\n  AbstractMatrix.prototype.modulusM = AbstractMatrix.prototype.modM;\n  AbstractMatrix.modulus = AbstractMatrix.mod;\n\n  AbstractMatrix.prototype.and = function and(value) {\n    if (typeof value === 'number') return this.andS(value);\n    return this.andM(value);\n  };\n\n  AbstractMatrix.prototype.andS = function andS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) & value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.andM = function andM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) & matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.and = function and(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.and(value);\n  };\n\n  AbstractMatrix.prototype.or = function or(value) {\n    if (typeof value === 'number') return this.orS(value);\n    return this.orM(value);\n  };\n\n  AbstractMatrix.prototype.orS = function orS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) | value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.orM = function orM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) | matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.or = function or(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.or(value);\n  };\n\n  AbstractMatrix.prototype.xor = function xor(value) {\n    if (typeof value === 'number') return this.xorS(value);\n    return this.xorM(value);\n  };\n\n  AbstractMatrix.prototype.xorS = function xorS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ^ value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.xorM = function xorM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ^ matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.xor = function xor(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.xor(value);\n  };\n\n  AbstractMatrix.prototype.leftShift = function leftShift(value) {\n    if (typeof value === 'number') return this.leftShiftS(value);\n    return this.leftShiftM(value);\n  };\n\n  AbstractMatrix.prototype.leftShiftS = function leftShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) << value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.leftShiftM = function leftShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) << matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.leftShift = function leftShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.leftShift(value);\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShift = function signPropagatingRightShift(value) {\n    if (typeof value === 'number') return this.signPropagatingRightShiftS(value);\n    return this.signPropagatingRightShiftM(value);\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShiftS = function signPropagatingRightShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >> value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShiftM = function signPropagatingRightShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >> matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.signPropagatingRightShift = function signPropagatingRightShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.signPropagatingRightShift(value);\n  };\n\n  AbstractMatrix.prototype.rightShift = function rightShift(value) {\n    if (typeof value === 'number') return this.rightShiftS(value);\n    return this.rightShiftM(value);\n  };\n\n  AbstractMatrix.prototype.rightShiftS = function rightShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >>> value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.rightShiftM = function rightShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >>> matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.rightShift = function rightShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.rightShift(value);\n  };\n  AbstractMatrix.prototype.zeroFillRightShift = AbstractMatrix.prototype.rightShift;\n  AbstractMatrix.prototype.zeroFillRightShiftS = AbstractMatrix.prototype.rightShiftS;\n  AbstractMatrix.prototype.zeroFillRightShiftM = AbstractMatrix.prototype.rightShiftM;\n  AbstractMatrix.zeroFillRightShift = AbstractMatrix.rightShift;\n\n  AbstractMatrix.prototype.not = function not() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, ~(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.not = function not(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.not();\n  };\n\n  AbstractMatrix.prototype.abs = function abs() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.abs(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.abs = function abs(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.abs();\n  };\n\n  AbstractMatrix.prototype.acos = function acos() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.acos(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.acos = function acos(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.acos();\n  };\n\n  AbstractMatrix.prototype.acosh = function acosh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.acosh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.acosh = function acosh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.acosh();\n  };\n\n  AbstractMatrix.prototype.asin = function asin() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.asin(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.asin = function asin(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.asin();\n  };\n\n  AbstractMatrix.prototype.asinh = function asinh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.asinh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.asinh = function asinh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.asinh();\n  };\n\n  AbstractMatrix.prototype.atan = function atan() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.atan(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.atan = function atan(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.atan();\n  };\n\n  AbstractMatrix.prototype.atanh = function atanh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.atanh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.atanh = function atanh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.atanh();\n  };\n\n  AbstractMatrix.prototype.cbrt = function cbrt() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cbrt(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cbrt = function cbrt(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cbrt();\n  };\n\n  AbstractMatrix.prototype.ceil = function ceil() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.ceil(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.ceil = function ceil(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.ceil();\n  };\n\n  AbstractMatrix.prototype.clz32 = function clz32() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.clz32(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.clz32 = function clz32(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.clz32();\n  };\n\n  AbstractMatrix.prototype.cos = function cos() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cos(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cos = function cos(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cos();\n  };\n\n  AbstractMatrix.prototype.cosh = function cosh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cosh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cosh = function cosh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cosh();\n  };\n\n  AbstractMatrix.prototype.exp = function exp() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.exp(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.exp = function exp(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.exp();\n  };\n\n  AbstractMatrix.prototype.expm1 = function expm1() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.expm1(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.expm1 = function expm1(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.expm1();\n  };\n\n  AbstractMatrix.prototype.floor = function floor() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.floor(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.floor = function floor(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.floor();\n  };\n\n  AbstractMatrix.prototype.fround = function fround() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.fround(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.fround = function fround(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.fround();\n  };\n\n  AbstractMatrix.prototype.log = function log() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log = function log(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log();\n  };\n\n  AbstractMatrix.prototype.log1p = function log1p() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log1p(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log1p = function log1p(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log1p();\n  };\n\n  AbstractMatrix.prototype.log10 = function log10() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log10(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log10 = function log10(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log10();\n  };\n\n  AbstractMatrix.prototype.log2 = function log2() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log2(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log2 = function log2(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log2();\n  };\n\n  AbstractMatrix.prototype.round = function round() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.round(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.round = function round(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.round();\n  };\n\n  AbstractMatrix.prototype.sign = function sign() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sign(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sign = function sign(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sign();\n  };\n\n  AbstractMatrix.prototype.sin = function sin() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sin(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sin = function sin(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sin();\n  };\n\n  AbstractMatrix.prototype.sinh = function sinh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sinh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sinh = function sinh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sinh();\n  };\n\n  AbstractMatrix.prototype.sqrt = function sqrt() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sqrt(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sqrt = function sqrt(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sqrt();\n  };\n\n  AbstractMatrix.prototype.tan = function tan() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.tan(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.tan = function tan(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.tan();\n  };\n\n  AbstractMatrix.prototype.tanh = function tanh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.tanh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.tanh = function tanh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.tanh();\n  };\n\n  AbstractMatrix.prototype.trunc = function trunc() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.trunc(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.trunc = function trunc(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.trunc();\n  };\n\n  AbstractMatrix.pow = function pow(matrix, arg0) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.pow(arg0);\n  };\n\n  AbstractMatrix.prototype.pow = function pow(value) {\n    if (typeof value === 'number') return this.powS(value);\n    return this.powM(value);\n  };\n\n  AbstractMatrix.prototype.powS = function powS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.pow(this.get(i, j), value));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.powM = function powM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.pow(this.get(i, j), matrix.get(i, j)));\n      }\n    }\n    return this;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}