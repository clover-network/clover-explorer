{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.refreshElement = exports.drawChildren = void 0;\n\nvar svg_1 = require(\"./svg\");\n\nvar dom_1 = require(\"./dom\");\n\nfunction drawChildren(context, children) {\n  children.forEach(function (child) {\n    child.draw(context);\n  });\n}\n\nexports.drawChildren = drawChildren;\n/**\n * 更新元素，包括 group 和 shape\n * @param {IElement} element       SVG 元素\n * @param {ChangeType} changeType  更新类型\n */\n\nfunction refreshElement(element, changeType) {\n  // 对于还没有挂载到画布下的元素，canvas 可能为空\n  var canvas = element.get('canvas'); // 只有挂载到画布下，才对元素进行实际渲染\n\n  if (canvas && canvas.get('autoDraw')) {\n    var context = canvas.get('context');\n    var parent_1 = element.getParent();\n    var parentChildren = parent_1 ? parent_1.getChildren() : [canvas];\n    var el = element.get('el');\n\n    if (changeType === 'remove') {\n      var isClipShape = element.get('isClipShape'); // 对于 clip，不仅需要将 clipShape 对于的 SVG 元素删除，还需要将上层的 clipPath 元素也删除\n\n      if (isClipShape) {\n        var clipPathEl = el && el.parentNode;\n        var defsEl = clipPathEl && clipPathEl.parentNode;\n\n        if (clipPathEl && defsEl) {\n          defsEl.removeChild(clipPathEl);\n        }\n      } else if (el && el.parentNode) {\n        el.parentNode.removeChild(el);\n      }\n    } else if (changeType === 'show') {\n      el.setAttribute('visibility', 'visible');\n    } else if (changeType === 'hide') {\n      el.setAttribute('visibility', 'hidden');\n    } else if (changeType === 'zIndex') {\n      dom_1.moveTo(el, parentChildren.indexOf(element));\n    } else if (changeType === 'sort') {\n      var children_1 = element.get('children');\n\n      if (children_1 && children_1.length) {\n        dom_1.sortDom(element, function (a, b) {\n          return children_1.indexOf(a) - children_1.indexOf(b) ? 1 : 0;\n        });\n      }\n    } else if (changeType === 'clear') {\n      // el maybe null for group\n      if (el) {\n        el.innerHTML = '';\n      }\n    } else if (changeType === 'matrix') {\n      svg_1.setTransform(element);\n    } else if (changeType === 'clip') {\n      svg_1.setClip(element, context);\n    } else if (changeType === 'attr') {// 已在 afterAttrsChange 进行了处理，此处 do nothing\n    } else if (changeType === 'add') {\n      element.draw(context);\n    }\n  }\n}\n\nexports.refreshElement = refreshElement;","map":{"version":3,"sources":["../../src/util/draw.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.refreshElement = exports.drawChildren = void 0;\nvar svg_1 = require(\"./svg\");\nvar dom_1 = require(\"./dom\");\nfunction drawChildren(context, children) {\n    children.forEach(function (child) {\n        child.draw(context);\n    });\n}\nexports.drawChildren = drawChildren;\n/**\n * 更新元素，包括 group 和 shape\n * @param {IElement} element       SVG 元素\n * @param {ChangeType} changeType  更新类型\n */\nfunction refreshElement(element, changeType) {\n    // 对于还没有挂载到画布下的元素，canvas 可能为空\n    var canvas = element.get('canvas');\n    // 只有挂载到画布下，才对元素进行实际渲染\n    if (canvas && canvas.get('autoDraw')) {\n        var context = canvas.get('context');\n        var parent_1 = element.getParent();\n        var parentChildren = parent_1 ? parent_1.getChildren() : [canvas];\n        var el = element.get('el');\n        if (changeType === 'remove') {\n            var isClipShape = element.get('isClipShape');\n            // 对于 clip，不仅需要将 clipShape 对于的 SVG 元素删除，还需要将上层的 clipPath 元素也删除\n            if (isClipShape) {\n                var clipPathEl = el && el.parentNode;\n                var defsEl = clipPathEl && clipPathEl.parentNode;\n                if (clipPathEl && defsEl) {\n                    defsEl.removeChild(clipPathEl);\n                }\n            }\n            else if (el && el.parentNode) {\n                el.parentNode.removeChild(el);\n            }\n        }\n        else if (changeType === 'show') {\n            el.setAttribute('visibility', 'visible');\n        }\n        else if (changeType === 'hide') {\n            el.setAttribute('visibility', 'hidden');\n        }\n        else if (changeType === 'zIndex') {\n            dom_1.moveTo(el, parentChildren.indexOf(element));\n        }\n        else if (changeType === 'sort') {\n            var children_1 = element.get('children');\n            if (children_1 && children_1.length) {\n                dom_1.sortDom(element, function (a, b) {\n                    return children_1.indexOf(a) - children_1.indexOf(b) ? 1 : 0;\n                });\n            }\n        }\n        else if (changeType === 'clear') {\n            // el maybe null for group\n            if (el) {\n                el.innerHTML = '';\n            }\n        }\n        else if (changeType === 'matrix') {\n            svg_1.setTransform(element);\n        }\n        else if (changeType === 'clip') {\n            svg_1.setClip(element, context);\n        }\n        else if (changeType === 'attr') {\n            // 已在 afterAttrsChange 进行了处理，此处 do nothing\n        }\n        else if (changeType === 'add') {\n            element.draw(context);\n        }\n    }\n}\nexports.refreshElement = refreshElement;\n//# sourceMappingURL=draw.js.map"]},"metadata":{},"sourceType":"script"}