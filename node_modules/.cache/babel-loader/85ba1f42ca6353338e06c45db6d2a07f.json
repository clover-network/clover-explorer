{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\nimport * as zrUtil from 'zrender/esm/core/util';\nimport List from '../../data/List';\nimport Graph from '../../data/Graph';\nimport linkList from '../../data/helper/linkList';\nimport createDimensions from '../../data/helper/createDimensions';\nimport CoordinateSystem from '../../CoordinateSystem';\nimport createListFromArray from './createListFromArray';\nimport { convertOptionIdName } from '../../util/model';\nexport default function createGraphFromNodeEdge(nodes, edges, seriesModel, directed, beforeLink) {\n  var graph = new Graph(directed);\n\n  for (var i = 0; i < nodes.length; i++) {\n    graph.addNode(zrUtil.retrieve(nodes[i].id, nodes[i].name, i), i);\n  }\n\n  var linkNameList = [];\n  var validEdges = [];\n  var linkCount = 0;\n\n  for (var i = 0; i < edges.length; i++) {\n    var link = edges[i];\n    var source = link.source;\n    var target = link.target;\n\n    if (graph.addEdge(source, target, linkCount)) {\n      validEdges.push(link);\n      linkNameList.push(zrUtil.retrieve(convertOptionIdName(link.id, null), source + ' > ' + target));\n      linkCount++;\n    }\n  }\n\n  var coordSys = seriesModel.get('coordinateSystem');\n  var nodeData;\n\n  if (coordSys === 'cartesian2d' || coordSys === 'polar') {\n    nodeData = createListFromArray(nodes, seriesModel);\n  } else {\n    var coordSysCtor = CoordinateSystem.get(coordSys);\n    var coordDimensions = coordSysCtor ? coordSysCtor.dimensions || [] : [];\n\n    if (zrUtil.indexOf(coordDimensions, 'value') < 0) {\n      coordDimensions.concat(['value']);\n    }\n\n    var dimensionNames = createDimensions(nodes, {\n      coordDimensions: coordDimensions\n    });\n    nodeData = new List(dimensionNames, seriesModel);\n    nodeData.initData(nodes);\n  }\n\n  var edgeData = new List(['value'], seriesModel);\n  edgeData.initData(validEdges, linkNameList);\n  beforeLink && beforeLink(nodeData, edgeData);\n  linkList({\n    mainData: nodeData,\n    struct: graph,\n    structAttr: 'graph',\n    datas: {\n      node: nodeData,\n      edge: edgeData\n    },\n    datasAttr: {\n      node: 'data',\n      edge: 'edgeData'\n    }\n  });\n  graph.update();\n  return graph;\n}","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/echarts/esm/chart/helper/createGraphFromNodeEdge.js"],"names":["zrUtil","List","Graph","linkList","createDimensions","CoordinateSystem","createListFromArray","convertOptionIdName","createGraphFromNodeEdge","nodes","edges","seriesModel","directed","beforeLink","graph","i","length","addNode","retrieve","id","name","linkNameList","validEdges","linkCount","link","source","target","addEdge","push","coordSys","get","nodeData","coordSysCtor","coordDimensions","dimensions","indexOf","concat","dimensionNames","initData","edgeData","mainData","struct","structAttr","datas","node","edge","datasAttr","update"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\nimport * as zrUtil from 'zrender/esm/core/util';\nimport List from '../../data/List';\nimport Graph from '../../data/Graph';\nimport linkList from '../../data/helper/linkList';\nimport createDimensions from '../../data/helper/createDimensions';\nimport CoordinateSystem from '../../CoordinateSystem';\nimport createListFromArray from './createListFromArray';\nimport { convertOptionIdName } from '../../util/model';\nexport default function createGraphFromNodeEdge(nodes, edges, seriesModel, directed, beforeLink) {\n  var graph = new Graph(directed);\n\n  for (var i = 0; i < nodes.length; i++) {\n    graph.addNode(zrUtil.retrieve(nodes[i].id, nodes[i].name, i), i);\n  }\n\n  var linkNameList = [];\n  var validEdges = [];\n  var linkCount = 0;\n\n  for (var i = 0; i < edges.length; i++) {\n    var link = edges[i];\n    var source = link.source;\n    var target = link.target;\n\n    if (graph.addEdge(source, target, linkCount)) {\n      validEdges.push(link);\n      linkNameList.push(zrUtil.retrieve(convertOptionIdName(link.id, null), source + ' > ' + target));\n      linkCount++;\n    }\n  }\n\n  var coordSys = seriesModel.get('coordinateSystem');\n  var nodeData;\n\n  if (coordSys === 'cartesian2d' || coordSys === 'polar') {\n    nodeData = createListFromArray(nodes, seriesModel);\n  } else {\n    var coordSysCtor = CoordinateSystem.get(coordSys);\n    var coordDimensions = coordSysCtor ? coordSysCtor.dimensions || [] : [];\n\n    if (zrUtil.indexOf(coordDimensions, 'value') < 0) {\n      coordDimensions.concat(['value']);\n    }\n\n    var dimensionNames = createDimensions(nodes, {\n      coordDimensions: coordDimensions\n    });\n    nodeData = new List(dimensionNames, seriesModel);\n    nodeData.initData(nodes);\n  }\n\n  var edgeData = new List(['value'], seriesModel);\n  edgeData.initData(validEdges, linkNameList);\n  beforeLink && beforeLink(nodeData, edgeData);\n  linkList({\n    mainData: nodeData,\n    struct: graph,\n    structAttr: 'graph',\n    datas: {\n      node: nodeData,\n      edge: edgeData\n    },\n    datasAttr: {\n      node: 'data',\n      edge: 'edgeData'\n    }\n  });\n  graph.update();\n  return graph;\n}"]},"metadata":{},"sourceType":"module"}