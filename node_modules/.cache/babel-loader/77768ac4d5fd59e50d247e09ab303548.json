{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\"use strict\";\n\nvar _a, _b, _c;\n\nexports.__esModule = true;\n\nvar util_1 = require(\"zrender/lib/core/util\");\n\nvar model_1 = require(\"../../util/model\");\n\nvar Source_1 = require(\"../Source\");\n\nvar types_1 = require(\"../../util/types\");\n\nvar providerMethods;\nvar mountMethods;\n\nvar DefaultDataProvider = function () {\n  function DefaultDataProvider(sourceParam, dimSize) {\n    var source = !Source_1.isSourceInstance(sourceParam) ? Source_1.createSourceFromSeriesDataOption(sourceParam) : sourceParam;\n    this._source = source;\n    var data = this._data = source.data;\n\n    if (source.sourceFormat === types_1.SOURCE_FORMAT_TYPED_ARRAY) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (dimSize == null) {\n          throw new Error('Typed array data must specify dimension size');\n        }\n      }\n\n      this._offset = 0;\n      this._dimSize = dimSize;\n      this._data = data;\n    }\n\n    mountMethods(this, data, source);\n  }\n\n  DefaultDataProvider.prototype.getSource = function () {\n    return this._source;\n  };\n\n  DefaultDataProvider.prototype.count = function () {\n    return 0;\n  };\n\n  DefaultDataProvider.prototype.getItem = function (idx, out) {\n    return;\n  };\n\n  DefaultDataProvider.prototype.appendData = function (newData) {};\n\n  DefaultDataProvider.prototype.clean = function () {};\n\n  DefaultDataProvider.protoInitialize = function () {\n    var proto = DefaultDataProvider.prototype;\n    proto.pure = false;\n    proto.persistent = true;\n  }();\n\n  DefaultDataProvider.internalField = function () {\n    var _a;\n\n    mountMethods = function (provider, data, source) {\n      var sourceFormat = source.sourceFormat;\n      var seriesLayoutBy = source.seriesLayoutBy;\n      var startIndex = source.startIndex;\n      var dimsDef = source.dimensionsDefine;\n      var methods = providerMethods[getMethodMapKey(sourceFormat, seriesLayoutBy)];\n\n      if (process.env.NODE_ENV !== 'production') {\n        util_1.assert(methods, 'Invalide sourceFormat: ' + sourceFormat);\n      }\n\n      util_1.extend(provider, methods);\n\n      if (sourceFormat === types_1.SOURCE_FORMAT_TYPED_ARRAY) {\n        provider.getItem = getItemForTypedArray;\n        provider.count = countForTypedArray;\n        provider.fillStorage = fillStorageForTypedArray;\n      } else {\n        var rawItemGetter = getRawSourceItemGetter(sourceFormat, seriesLayoutBy);\n        provider.getItem = util_1.bind(rawItemGetter, null, data, startIndex, dimsDef);\n        var rawCounter = getRawSourceDataCounter(sourceFormat, seriesLayoutBy);\n        provider.count = util_1.bind(rawCounter, null, data, startIndex, dimsDef);\n      }\n    };\n\n    var getItemForTypedArray = function (idx, out) {\n      idx = idx - this._offset;\n      out = out || [];\n      var data = this._data;\n      var dimSize = this._dimSize;\n      var offset = dimSize * idx;\n\n      for (var i = 0; i < dimSize; i++) {\n        out[i] = data[offset + i];\n      }\n\n      return out;\n    };\n\n    var fillStorageForTypedArray = function (start, end, storage, extent) {\n      var data = this._data;\n      var dimSize = this._dimSize;\n\n      for (var dim = 0; dim < dimSize; dim++) {\n        var dimExtent = extent[dim];\n        var min = dimExtent[0] == null ? Infinity : dimExtent[0];\n        var max = dimExtent[1] == null ? -Infinity : dimExtent[1];\n        var count = end - start;\n        var arr = storage[dim];\n\n        for (var i = 0; i < count; i++) {\n          var val = data[(start + i) * dimSize + dim];\n          arr[start + i] = val;\n          val < min && (min = val);\n          val > max && (max = val);\n        }\n\n        dimExtent[0] = min;\n        dimExtent[1] = max;\n      }\n    };\n\n    var countForTypedArray = function () {\n      return this._data ? this._data.length / this._dimSize : 0;\n    };\n\n    providerMethods = (_a = {}, _a[types_1.SOURCE_FORMAT_ARRAY_ROWS + '_' + types_1.SERIES_LAYOUT_BY_COLUMN] = {\n      pure: true,\n      appendData: appendDataSimply\n    }, _a[types_1.SOURCE_FORMAT_ARRAY_ROWS + '_' + types_1.SERIES_LAYOUT_BY_ROW] = {\n      pure: true,\n      appendData: function () {\n        throw new Error('Do not support appendData when set seriesLayoutBy: \"row\".');\n      }\n    }, _a[types_1.SOURCE_FORMAT_OBJECT_ROWS] = {\n      pure: true,\n      appendData: appendDataSimply\n    }, _a[types_1.SOURCE_FORMAT_KEYED_COLUMNS] = {\n      pure: true,\n      appendData: function (newData) {\n        var data = this._data;\n        util_1.each(newData, function (newCol, key) {\n          var oldCol = data[key] || (data[key] = []);\n\n          for (var i = 0; i < (newCol || []).length; i++) {\n            oldCol.push(newCol[i]);\n          }\n        });\n      }\n    }, _a[types_1.SOURCE_FORMAT_ORIGINAL] = {\n      appendData: appendDataSimply\n    }, _a[types_1.SOURCE_FORMAT_TYPED_ARRAY] = {\n      persistent: false,\n      pure: true,\n      appendData: function (newData) {\n        if (process.env.NODE_ENV !== 'production') {\n          util_1.assert(util_1.isTypedArray(newData), 'Added data must be TypedArray if data in initialization is TypedArray');\n        }\n\n        this._data = newData;\n      },\n      clean: function () {\n        this._offset += this.count();\n        this._data = null;\n      }\n    }, _a);\n\n    function appendDataSimply(newData) {\n      for (var i = 0; i < newData.length; i++) {\n        this._data.push(newData[i]);\n      }\n    }\n  }();\n\n  return DefaultDataProvider;\n}();\n\nexports.DefaultDataProvider = DefaultDataProvider;\n\nvar getItemSimply = function (rawData, startIndex, dimsDef, idx) {\n  return rawData[idx];\n};\n\nvar rawSourceItemGetterMap = (_a = {}, _a[types_1.SOURCE_FORMAT_ARRAY_ROWS + '_' + types_1.SERIES_LAYOUT_BY_COLUMN] = function (rawData, startIndex, dimsDef, idx) {\n  return rawData[idx + startIndex];\n}, _a[types_1.SOURCE_FORMAT_ARRAY_ROWS + '_' + types_1.SERIES_LAYOUT_BY_ROW] = function (rawData, startIndex, dimsDef, idx) {\n  idx += startIndex;\n  var item = [];\n  var data = rawData;\n\n  for (var i = 0; i < data.length; i++) {\n    var row = data[i];\n    item.push(row ? row[idx] : null);\n  }\n\n  return item;\n}, _a[types_1.SOURCE_FORMAT_OBJECT_ROWS] = getItemSimply, _a[types_1.SOURCE_FORMAT_KEYED_COLUMNS] = function (rawData, startIndex, dimsDef, idx) {\n  var item = [];\n\n  for (var i = 0; i < dimsDef.length; i++) {\n    var dimName = dimsDef[i].name;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (dimName == null) {\n        throw new Error();\n      }\n    }\n\n    var col = rawData[dimName];\n    item.push(col ? col[idx] : null);\n  }\n\n  return item;\n}, _a[types_1.SOURCE_FORMAT_ORIGINAL] = getItemSimply, _a);\n\nfunction getRawSourceItemGetter(sourceFormat, seriesLayoutBy) {\n  var method = rawSourceItemGetterMap[getMethodMapKey(sourceFormat, seriesLayoutBy)];\n\n  if (process.env.NODE_ENV !== 'production') {\n    util_1.assert(method, 'Do not suppport get item on \"' + sourceFormat + '\", \"' + seriesLayoutBy + '\".');\n  }\n\n  return method;\n}\n\nexports.getRawSourceItemGetter = getRawSourceItemGetter;\n\nvar countSimply = function (rawData, startIndex, dimsDef) {\n  return rawData.length;\n};\n\nvar rawSourceDataCounterMap = (_b = {}, _b[types_1.SOURCE_FORMAT_ARRAY_ROWS + '_' + types_1.SERIES_LAYOUT_BY_COLUMN] = function (rawData, startIndex, dimsDef) {\n  return Math.max(0, rawData.length - startIndex);\n}, _b[types_1.SOURCE_FORMAT_ARRAY_ROWS + '_' + types_1.SERIES_LAYOUT_BY_ROW] = function (rawData, startIndex, dimsDef) {\n  var row = rawData[0];\n  return row ? Math.max(0, row.length - startIndex) : 0;\n}, _b[types_1.SOURCE_FORMAT_OBJECT_ROWS] = countSimply, _b[types_1.SOURCE_FORMAT_KEYED_COLUMNS] = function (rawData, startIndex, dimsDef) {\n  var dimName = dimsDef[0].name;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (dimName == null) {\n      throw new Error();\n    }\n  }\n\n  var col = rawData[dimName];\n  return col ? col.length : 0;\n}, _b[types_1.SOURCE_FORMAT_ORIGINAL] = countSimply, _b);\n\nfunction getRawSourceDataCounter(sourceFormat, seriesLayoutBy) {\n  var method = rawSourceDataCounterMap[getMethodMapKey(sourceFormat, seriesLayoutBy)];\n\n  if (process.env.NODE_ENV !== 'production') {\n    util_1.assert(method, 'Do not suppport count on \"' + sourceFormat + '\", \"' + seriesLayoutBy + '\".');\n  }\n\n  return method;\n}\n\nexports.getRawSourceDataCounter = getRawSourceDataCounter;\n\nvar getRawValueSimply = function (dataItem, dimIndex, dimName) {\n  return dimIndex != null ? dataItem[dimIndex] : dataItem;\n};\n\nvar rawSourceValueGetterMap = (_c = {}, _c[types_1.SOURCE_FORMAT_ARRAY_ROWS] = getRawValueSimply, _c[types_1.SOURCE_FORMAT_OBJECT_ROWS] = function (dataItem, dimIndex, dimName) {\n  return dimIndex != null ? dataItem[dimName] : dataItem;\n}, _c[types_1.SOURCE_FORMAT_KEYED_COLUMNS] = getRawValueSimply, _c[types_1.SOURCE_FORMAT_ORIGINAL] = function (dataItem, dimIndex, dimName) {\n  var value = model_1.getDataItemValue(dataItem);\n  return dimIndex == null || !(value instanceof Array) ? value : value[dimIndex];\n}, _c[types_1.SOURCE_FORMAT_TYPED_ARRAY] = getRawValueSimply, _c);\n\nfunction getRawSourceValueGetter(sourceFormat) {\n  var method = rawSourceValueGetterMap[sourceFormat];\n\n  if (process.env.NODE_ENV !== 'production') {\n    util_1.assert(method, 'Do not suppport get value on \"' + sourceFormat + '\".');\n  }\n\n  return method;\n}\n\nexports.getRawSourceValueGetter = getRawSourceValueGetter;\n\nfunction getMethodMapKey(sourceFormat, seriesLayoutBy) {\n  return sourceFormat === types_1.SOURCE_FORMAT_ARRAY_ROWS ? sourceFormat + '_' + seriesLayoutBy : sourceFormat;\n}\n\nfunction retrieveRawValue(data, dataIndex, dim) {\n  if (!data) {\n    return;\n  }\n\n  var dataItem = data.getRawDataItem(dataIndex);\n\n  if (dataItem == null) {\n    return;\n  }\n\n  var sourceFormat = data.getProvider().getSource().sourceFormat;\n  var dimName;\n  var dimIndex;\n  var dimInfo = data.getDimensionInfo(dim);\n\n  if (dimInfo) {\n    dimName = dimInfo.name;\n    dimIndex = dimInfo.index;\n  }\n\n  return getRawSourceValueGetter(sourceFormat)(dataItem, dimIndex, dimName);\n}\n\nexports.retrieveRawValue = retrieveRawValue;\n\nfunction retrieveRawAttr(data, dataIndex, attr) {\n  if (!data) {\n    return;\n  }\n\n  var sourceFormat = data.getProvider().getSource().sourceFormat;\n\n  if (sourceFormat !== types_1.SOURCE_FORMAT_ORIGINAL && sourceFormat !== types_1.SOURCE_FORMAT_OBJECT_ROWS) {\n    return;\n  }\n\n  var dataItem = data.getRawDataItem(dataIndex);\n\n  if (sourceFormat === types_1.SOURCE_FORMAT_ORIGINAL && !util_1.isObject(dataItem)) {\n    dataItem = null;\n  }\n\n  if (dataItem) {\n    return dataItem[attr];\n  }\n}\n\nexports.retrieveRawAttr = retrieveRawAttr;","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/echarts/lib/data/helper/dataProvider.js"],"names":["_a","_b","_c","exports","__esModule","util_1","require","model_1","Source_1","types_1","providerMethods","mountMethods","DefaultDataProvider","sourceParam","dimSize","source","isSourceInstance","createSourceFromSeriesDataOption","_source","data","_data","sourceFormat","SOURCE_FORMAT_TYPED_ARRAY","process","env","NODE_ENV","Error","_offset","_dimSize","prototype","getSource","count","getItem","idx","out","appendData","newData","clean","protoInitialize","proto","pure","persistent","internalField","provider","seriesLayoutBy","startIndex","dimsDef","dimensionsDefine","methods","getMethodMapKey","assert","extend","getItemForTypedArray","countForTypedArray","fillStorage","fillStorageForTypedArray","rawItemGetter","getRawSourceItemGetter","bind","rawCounter","getRawSourceDataCounter","offset","i","start","end","storage","extent","dim","dimExtent","min","Infinity","max","arr","val","length","SOURCE_FORMAT_ARRAY_ROWS","SERIES_LAYOUT_BY_COLUMN","appendDataSimply","SERIES_LAYOUT_BY_ROW","SOURCE_FORMAT_OBJECT_ROWS","SOURCE_FORMAT_KEYED_COLUMNS","each","newCol","key","oldCol","push","SOURCE_FORMAT_ORIGINAL","isTypedArray","getItemSimply","rawData","rawSourceItemGetterMap","item","row","dimName","name","col","method","countSimply","rawSourceDataCounterMap","Math","getRawValueSimply","dataItem","dimIndex","rawSourceValueGetterMap","value","getDataItemValue","Array","getRawSourceValueGetter","retrieveRawValue","dataIndex","getRawDataItem","getProvider","dimInfo","getDimensionInfo","index","retrieveRawAttr","attr","isObject"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n\"use strict\";\n\nvar _a, _b, _c;\n\nexports.__esModule = true;\n\nvar util_1 = require(\"zrender/lib/core/util\");\n\nvar model_1 = require(\"../../util/model\");\n\nvar Source_1 = require(\"../Source\");\n\nvar types_1 = require(\"../../util/types\");\n\nvar providerMethods;\nvar mountMethods;\n\nvar DefaultDataProvider = function () {\n  function DefaultDataProvider(sourceParam, dimSize) {\n    var source = !Source_1.isSourceInstance(sourceParam) ? Source_1.createSourceFromSeriesDataOption(sourceParam) : sourceParam;\n    this._source = source;\n    var data = this._data = source.data;\n\n    if (source.sourceFormat === types_1.SOURCE_FORMAT_TYPED_ARRAY) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (dimSize == null) {\n          throw new Error('Typed array data must specify dimension size');\n        }\n      }\n\n      this._offset = 0;\n      this._dimSize = dimSize;\n      this._data = data;\n    }\n\n    mountMethods(this, data, source);\n  }\n\n  DefaultDataProvider.prototype.getSource = function () {\n    return this._source;\n  };\n\n  DefaultDataProvider.prototype.count = function () {\n    return 0;\n  };\n\n  DefaultDataProvider.prototype.getItem = function (idx, out) {\n    return;\n  };\n\n  DefaultDataProvider.prototype.appendData = function (newData) {};\n\n  DefaultDataProvider.prototype.clean = function () {};\n\n  DefaultDataProvider.protoInitialize = function () {\n    var proto = DefaultDataProvider.prototype;\n    proto.pure = false;\n    proto.persistent = true;\n  }();\n\n  DefaultDataProvider.internalField = function () {\n    var _a;\n\n    mountMethods = function (provider, data, source) {\n      var sourceFormat = source.sourceFormat;\n      var seriesLayoutBy = source.seriesLayoutBy;\n      var startIndex = source.startIndex;\n      var dimsDef = source.dimensionsDefine;\n      var methods = providerMethods[getMethodMapKey(sourceFormat, seriesLayoutBy)];\n\n      if (process.env.NODE_ENV !== 'production') {\n        util_1.assert(methods, 'Invalide sourceFormat: ' + sourceFormat);\n      }\n\n      util_1.extend(provider, methods);\n\n      if (sourceFormat === types_1.SOURCE_FORMAT_TYPED_ARRAY) {\n        provider.getItem = getItemForTypedArray;\n        provider.count = countForTypedArray;\n        provider.fillStorage = fillStorageForTypedArray;\n      } else {\n        var rawItemGetter = getRawSourceItemGetter(sourceFormat, seriesLayoutBy);\n        provider.getItem = util_1.bind(rawItemGetter, null, data, startIndex, dimsDef);\n        var rawCounter = getRawSourceDataCounter(sourceFormat, seriesLayoutBy);\n        provider.count = util_1.bind(rawCounter, null, data, startIndex, dimsDef);\n      }\n    };\n\n    var getItemForTypedArray = function (idx, out) {\n      idx = idx - this._offset;\n      out = out || [];\n      var data = this._data;\n      var dimSize = this._dimSize;\n      var offset = dimSize * idx;\n\n      for (var i = 0; i < dimSize; i++) {\n        out[i] = data[offset + i];\n      }\n\n      return out;\n    };\n\n    var fillStorageForTypedArray = function (start, end, storage, extent) {\n      var data = this._data;\n      var dimSize = this._dimSize;\n\n      for (var dim = 0; dim < dimSize; dim++) {\n        var dimExtent = extent[dim];\n        var min = dimExtent[0] == null ? Infinity : dimExtent[0];\n        var max = dimExtent[1] == null ? -Infinity : dimExtent[1];\n        var count = end - start;\n        var arr = storage[dim];\n\n        for (var i = 0; i < count; i++) {\n          var val = data[(start + i) * dimSize + dim];\n          arr[start + i] = val;\n          val < min && (min = val);\n          val > max && (max = val);\n        }\n\n        dimExtent[0] = min;\n        dimExtent[1] = max;\n      }\n    };\n\n    var countForTypedArray = function () {\n      return this._data ? this._data.length / this._dimSize : 0;\n    };\n\n    providerMethods = (_a = {}, _a[types_1.SOURCE_FORMAT_ARRAY_ROWS + '_' + types_1.SERIES_LAYOUT_BY_COLUMN] = {\n      pure: true,\n      appendData: appendDataSimply\n    }, _a[types_1.SOURCE_FORMAT_ARRAY_ROWS + '_' + types_1.SERIES_LAYOUT_BY_ROW] = {\n      pure: true,\n      appendData: function () {\n        throw new Error('Do not support appendData when set seriesLayoutBy: \"row\".');\n      }\n    }, _a[types_1.SOURCE_FORMAT_OBJECT_ROWS] = {\n      pure: true,\n      appendData: appendDataSimply\n    }, _a[types_1.SOURCE_FORMAT_KEYED_COLUMNS] = {\n      pure: true,\n      appendData: function (newData) {\n        var data = this._data;\n        util_1.each(newData, function (newCol, key) {\n          var oldCol = data[key] || (data[key] = []);\n\n          for (var i = 0; i < (newCol || []).length; i++) {\n            oldCol.push(newCol[i]);\n          }\n        });\n      }\n    }, _a[types_1.SOURCE_FORMAT_ORIGINAL] = {\n      appendData: appendDataSimply\n    }, _a[types_1.SOURCE_FORMAT_TYPED_ARRAY] = {\n      persistent: false,\n      pure: true,\n      appendData: function (newData) {\n        if (process.env.NODE_ENV !== 'production') {\n          util_1.assert(util_1.isTypedArray(newData), 'Added data must be TypedArray if data in initialization is TypedArray');\n        }\n\n        this._data = newData;\n      },\n      clean: function () {\n        this._offset += this.count();\n        this._data = null;\n      }\n    }, _a);\n\n    function appendDataSimply(newData) {\n      for (var i = 0; i < newData.length; i++) {\n        this._data.push(newData[i]);\n      }\n    }\n  }();\n\n  return DefaultDataProvider;\n}();\n\nexports.DefaultDataProvider = DefaultDataProvider;\n\nvar getItemSimply = function (rawData, startIndex, dimsDef, idx) {\n  return rawData[idx];\n};\n\nvar rawSourceItemGetterMap = (_a = {}, _a[types_1.SOURCE_FORMAT_ARRAY_ROWS + '_' + types_1.SERIES_LAYOUT_BY_COLUMN] = function (rawData, startIndex, dimsDef, idx) {\n  return rawData[idx + startIndex];\n}, _a[types_1.SOURCE_FORMAT_ARRAY_ROWS + '_' + types_1.SERIES_LAYOUT_BY_ROW] = function (rawData, startIndex, dimsDef, idx) {\n  idx += startIndex;\n  var item = [];\n  var data = rawData;\n\n  for (var i = 0; i < data.length; i++) {\n    var row = data[i];\n    item.push(row ? row[idx] : null);\n  }\n\n  return item;\n}, _a[types_1.SOURCE_FORMAT_OBJECT_ROWS] = getItemSimply, _a[types_1.SOURCE_FORMAT_KEYED_COLUMNS] = function (rawData, startIndex, dimsDef, idx) {\n  var item = [];\n\n  for (var i = 0; i < dimsDef.length; i++) {\n    var dimName = dimsDef[i].name;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (dimName == null) {\n        throw new Error();\n      }\n    }\n\n    var col = rawData[dimName];\n    item.push(col ? col[idx] : null);\n  }\n\n  return item;\n}, _a[types_1.SOURCE_FORMAT_ORIGINAL] = getItemSimply, _a);\n\nfunction getRawSourceItemGetter(sourceFormat, seriesLayoutBy) {\n  var method = rawSourceItemGetterMap[getMethodMapKey(sourceFormat, seriesLayoutBy)];\n\n  if (process.env.NODE_ENV !== 'production') {\n    util_1.assert(method, 'Do not suppport get item on \"' + sourceFormat + '\", \"' + seriesLayoutBy + '\".');\n  }\n\n  return method;\n}\n\nexports.getRawSourceItemGetter = getRawSourceItemGetter;\n\nvar countSimply = function (rawData, startIndex, dimsDef) {\n  return rawData.length;\n};\n\nvar rawSourceDataCounterMap = (_b = {}, _b[types_1.SOURCE_FORMAT_ARRAY_ROWS + '_' + types_1.SERIES_LAYOUT_BY_COLUMN] = function (rawData, startIndex, dimsDef) {\n  return Math.max(0, rawData.length - startIndex);\n}, _b[types_1.SOURCE_FORMAT_ARRAY_ROWS + '_' + types_1.SERIES_LAYOUT_BY_ROW] = function (rawData, startIndex, dimsDef) {\n  var row = rawData[0];\n  return row ? Math.max(0, row.length - startIndex) : 0;\n}, _b[types_1.SOURCE_FORMAT_OBJECT_ROWS] = countSimply, _b[types_1.SOURCE_FORMAT_KEYED_COLUMNS] = function (rawData, startIndex, dimsDef) {\n  var dimName = dimsDef[0].name;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (dimName == null) {\n      throw new Error();\n    }\n  }\n\n  var col = rawData[dimName];\n  return col ? col.length : 0;\n}, _b[types_1.SOURCE_FORMAT_ORIGINAL] = countSimply, _b);\n\nfunction getRawSourceDataCounter(sourceFormat, seriesLayoutBy) {\n  var method = rawSourceDataCounterMap[getMethodMapKey(sourceFormat, seriesLayoutBy)];\n\n  if (process.env.NODE_ENV !== 'production') {\n    util_1.assert(method, 'Do not suppport count on \"' + sourceFormat + '\", \"' + seriesLayoutBy + '\".');\n  }\n\n  return method;\n}\n\nexports.getRawSourceDataCounter = getRawSourceDataCounter;\n\nvar getRawValueSimply = function (dataItem, dimIndex, dimName) {\n  return dimIndex != null ? dataItem[dimIndex] : dataItem;\n};\n\nvar rawSourceValueGetterMap = (_c = {}, _c[types_1.SOURCE_FORMAT_ARRAY_ROWS] = getRawValueSimply, _c[types_1.SOURCE_FORMAT_OBJECT_ROWS] = function (dataItem, dimIndex, dimName) {\n  return dimIndex != null ? dataItem[dimName] : dataItem;\n}, _c[types_1.SOURCE_FORMAT_KEYED_COLUMNS] = getRawValueSimply, _c[types_1.SOURCE_FORMAT_ORIGINAL] = function (dataItem, dimIndex, dimName) {\n  var value = model_1.getDataItemValue(dataItem);\n  return dimIndex == null || !(value instanceof Array) ? value : value[dimIndex];\n}, _c[types_1.SOURCE_FORMAT_TYPED_ARRAY] = getRawValueSimply, _c);\n\nfunction getRawSourceValueGetter(sourceFormat) {\n  var method = rawSourceValueGetterMap[sourceFormat];\n\n  if (process.env.NODE_ENV !== 'production') {\n    util_1.assert(method, 'Do not suppport get value on \"' + sourceFormat + '\".');\n  }\n\n  return method;\n}\n\nexports.getRawSourceValueGetter = getRawSourceValueGetter;\n\nfunction getMethodMapKey(sourceFormat, seriesLayoutBy) {\n  return sourceFormat === types_1.SOURCE_FORMAT_ARRAY_ROWS ? sourceFormat + '_' + seriesLayoutBy : sourceFormat;\n}\n\nfunction retrieveRawValue(data, dataIndex, dim) {\n  if (!data) {\n    return;\n  }\n\n  var dataItem = data.getRawDataItem(dataIndex);\n\n  if (dataItem == null) {\n    return;\n  }\n\n  var sourceFormat = data.getProvider().getSource().sourceFormat;\n  var dimName;\n  var dimIndex;\n  var dimInfo = data.getDimensionInfo(dim);\n\n  if (dimInfo) {\n    dimName = dimInfo.name;\n    dimIndex = dimInfo.index;\n  }\n\n  return getRawSourceValueGetter(sourceFormat)(dataItem, dimIndex, dimName);\n}\n\nexports.retrieveRawValue = retrieveRawValue;\n\nfunction retrieveRawAttr(data, dataIndex, attr) {\n  if (!data) {\n    return;\n  }\n\n  var sourceFormat = data.getProvider().getSource().sourceFormat;\n\n  if (sourceFormat !== types_1.SOURCE_FORMAT_ORIGINAL && sourceFormat !== types_1.SOURCE_FORMAT_OBJECT_ROWS) {\n    return;\n  }\n\n  var dataItem = data.getRawDataItem(dataIndex);\n\n  if (sourceFormat === types_1.SOURCE_FORMAT_ORIGINAL && !util_1.isObject(dataItem)) {\n    dataItem = null;\n  }\n\n  if (dataItem) {\n    return dataItem[attr];\n  }\n}\n\nexports.retrieveRawAttr = retrieveRawAttr;"]},"metadata":{},"sourceType":"script"}