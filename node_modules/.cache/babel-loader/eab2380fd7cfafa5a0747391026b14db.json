{"ast":null,"code":"import { __spreadArrays } from \"tslib\";\nimport { each, isNil, isObject } from '@antv/util';\nimport { AXIS_META_CONFIG_KEYS } from '../constant';\nimport { pick, deepAssign } from '../utils';\n/**\n * 通用 legend 配置, 适用于带 colorField 或 seriesField 的图表\n * @param params\n */\n\nexport function legend(params) {\n  var chart = params.chart,\n      options = params.options;\n  var legend = options.legend,\n      colorField = options.colorField,\n      seriesField = options.seriesField;\n\n  if (legend === false) {\n    chart.legend(false);\n  } else if (colorField || seriesField) {\n    chart.legend(colorField || seriesField, legend);\n  }\n\n  return params;\n}\n/**\n * 通用 tooltip 配置\n * @param params\n */\n\nexport function tooltip(params) {\n  var chart = params.chart,\n      options = params.options;\n  var tooltip = options.tooltip;\n\n  if (tooltip !== undefined) {\n    chart.tooltip(tooltip);\n  }\n\n  return params;\n}\n/**\n * Interaction 配置\n * @param params\n */\n\nexport function interaction(params) {\n  var chart = params.chart,\n      options = params.options;\n  var interactions = options.interactions;\n  each(interactions, function (i) {\n    if (i.enable === false) {\n      chart.removeInteraction(i.type);\n    } else {\n      chart.interaction(i.type, i.cfg || {});\n    }\n  });\n  return params;\n}\n/**\n * 动画\n * @param params\n */\n\nexport function animation(params) {\n  var chart = params.chart,\n      options = params.options;\n  var animation = options.animation; // 同时设置整个 view 动画选项\n\n  if (typeof animation === 'boolean') {\n    chart.animate(animation);\n  } else {\n    chart.animate(true);\n  } // 所有的 Geometry 都使用同一动画（各个图形如有区别，自行覆盖）\n\n\n  each(chart.geometries, function (g) {\n    g.animate(animation);\n  });\n  return params;\n}\n/**\n * 设置全局主题配置\n * @param params\n */\n\nexport function theme(params) {\n  var chart = params.chart,\n      options = params.options;\n  var theme = options.theme; // 存在主题才设置主题\n\n  if (theme) {\n    chart.theme(theme);\n  }\n\n  return params;\n}\n/**\n * 状态 state 配置\n * @param params\n */\n\nexport function state(params) {\n  var chart = params.chart,\n      options = params.options;\n  var state = options.state;\n\n  if (state) {\n    each(chart.geometries, function (geometry) {\n      geometry.state(state);\n    });\n  }\n\n  return params;\n}\n/**\n * 处理缩略轴的 adaptor\n * @param params\n */\n\nexport function slider(params) {\n  var chart = params.chart,\n      options = params.options;\n  var slider = options.slider;\n  chart.option('slider', slider);\n  return params;\n}\n/**\n * 处理缩略轴的 adaptor\n * @param params\n */\n\nexport function scrollbar(params) {\n  var chart = params.chart,\n      options = params.options;\n  var scrollbar = options.scrollbar;\n  chart.option('scrollbar', scrollbar);\n  return params;\n}\n/**\n * scale 的 adaptor\n * @param axes\n */\n\nexport function scale(axes, meta) {\n  return function (params) {\n    var chart = params.chart,\n        options = params.options; // 1. 轴配置中的 scale 信息\n\n    var scales = {};\n    each(axes, function (axis, field) {\n      scales[field] = pick(axis, AXIS_META_CONFIG_KEYS);\n    }); // 2. meta 直接是 scale 的信息\n\n    scales = deepAssign({}, meta, options.meta, scales);\n    chart.scale(scales);\n    return params;\n  };\n}\n/**\n * annotation 配置\n * @param params\n */\n\nexport function annotation(annotationOptions) {\n  return function (params) {\n    var chart = params.chart,\n        options = params.options;\n    var annotationController = chart.getController('annotation');\n    /** 自定义 annotation */\n\n    each(__spreadArrays(options.annotations || [], annotationOptions || []), function (annotationOption) {\n      // @ts-ignore\n      annotationController.annotation(annotationOption);\n    });\n    return params;\n  };\n}\n/**\n * 自动设置 limitInPlot\n * @param params\n */\n\nexport function limitInPlot(params) {\n  var chart = params.chart,\n      options = params.options;\n  var yAxis = options.yAxis,\n      limitInPlot = options.limitInPlot;\n  var value = limitInPlot; // 用户没有设置 limitInPlot，则自动根据 yAxis 是否有 min/max 来设置 limitInPlot\n\n  if (isObject(yAxis) && isNil(limitInPlot)) {\n    if (Object.values(pick(yAxis, ['min', 'max', 'minLimit', 'maxLimit'])).some(function (value) {\n      return !isNil(value);\n    })) {\n      value = true;\n    } else {\n      value = false;\n    }\n  }\n\n  chart.limitInPlot = value;\n  return params;\n}","map":{"version":3,"sources":["../../src/adaptor/common.ts"],"names":[],"mappings":"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","sourcesContent":["import { Geometry } from '@antv/g2';\nimport { each, isNil, isObject } from '@antv/util';\nimport { Params } from '../core/adaptor';\nimport { Options } from '../types';\nimport { Interaction } from '../types/interaction';\nimport { Axis } from '../types/axis';\nimport { AXIS_META_CONFIG_KEYS } from '../constant';\nimport { pick, deepAssign } from '../utils';\n\n/**\n * 通用 legend 配置, 适用于带 colorField 或 seriesField 的图表\n * @param params\n */\nexport function legend<O extends Pick<Options, 'legend'> & { colorField?: string; seriesField?: string }>(\n  params: Params<O>\n): Params<O> {\n  const { chart, options } = params;\n  const { legend, colorField, seriesField } = options;\n\n  if (legend === false) {\n    chart.legend(false);\n  } else if (colorField || seriesField) {\n    chart.legend(colorField || seriesField, legend);\n  }\n\n  return params;\n}\n\n/**\n * 通用 tooltip 配置\n * @param params\n */\nexport function tooltip<O extends Pick<Options, 'tooltip'>>(params: Params<O>): Params<O> {\n  const { chart, options } = params;\n  const { tooltip } = options;\n\n  if (tooltip !== undefined) {\n    chart.tooltip(tooltip);\n  }\n\n  return params;\n}\n\n/**\n * Interaction 配置\n * @param params\n */\nexport function interaction<O extends Pick<Options, 'interactions'>>(params: Params<O>): Params<O> {\n  const { chart, options } = params;\n  const { interactions } = options;\n\n  each(interactions, (i: Interaction) => {\n    if (i.enable === false) {\n      chart.removeInteraction(i.type);\n    } else {\n      chart.interaction(i.type, i.cfg || {});\n    }\n  });\n\n  return params;\n}\n\n/**\n * 动画\n * @param params\n */\nexport function animation<O extends Pick<Options, 'animation'>>(params: Params<O>): Params<O> {\n  const { chart, options } = params;\n  const { animation } = options;\n\n  // 同时设置整个 view 动画选项\n  if (typeof animation === 'boolean') {\n    chart.animate(animation);\n  } else {\n    chart.animate(true);\n  }\n\n  // 所有的 Geometry 都使用同一动画（各个图形如有区别，自行覆盖）\n  each(chart.geometries, (g: Geometry) => {\n    g.animate(animation);\n  });\n\n  return params;\n}\n\n/**\n * 设置全局主题配置\n * @param params\n */\nexport function theme<O extends Pick<Options, 'theme'>>(params: Params<O>): Params<O> {\n  const { chart, options } = params;\n  const { theme } = options;\n\n  // 存在主题才设置主题\n  if (theme) {\n    chart.theme(theme);\n  }\n  return params;\n}\n\n/**\n * 状态 state 配置\n * @param params\n */\nexport function state(params: Params<Options>): Params<Options> {\n  const { chart, options } = params;\n  const { state } = options;\n\n  if (state) {\n    each(chart.geometries, (geometry: Geometry) => {\n      geometry.state(state);\n    });\n  }\n\n  return params;\n}\n\n/**\n * 处理缩略轴的 adaptor\n * @param params\n */\nexport function slider(params: Params<Options>): Params<Options> {\n  const { chart, options } = params;\n  const { slider } = options;\n\n  chart.option('slider', slider);\n\n  return params;\n}\n\n/**\n * 处理缩略轴的 adaptor\n * @param params\n */\nexport function scrollbar(params: Params<Options>): Params<Options> {\n  const { chart, options } = params;\n  const { scrollbar } = options;\n\n  chart.option('scrollbar', scrollbar);\n\n  return params;\n}\n\n/**\n * scale 的 adaptor\n * @param axes\n */\nexport function scale(axes: Record<string, Axis>, meta?: Options['meta']) {\n  return function <O extends Pick<Options, 'meta'>>(params: Params<O>): Params<O> {\n    const { chart, options } = params;\n\n    // 1. 轴配置中的 scale 信息\n    let scales: Record<string, any> = {};\n    each(axes, (axis: Axis, field: string) => {\n      scales[field] = pick(axis, AXIS_META_CONFIG_KEYS);\n    });\n\n    // 2. meta 直接是 scale 的信息\n    scales = deepAssign({}, meta, options.meta, scales);\n\n    chart.scale(scales);\n\n    return params;\n  };\n}\n\n/**\n * annotation 配置\n * @param params\n */\nexport function annotation(annotationOptions?: Options['annotations']) {\n  return function <O extends Pick<Options, 'annotations'>>(params: Params<O>): Params<O> {\n    const { chart, options } = params;\n\n    const annotationController = chart.getController('annotation');\n\n    /** 自定义 annotation */\n    each([...(options.annotations || []), ...(annotationOptions || [])], (annotationOption) => {\n      // @ts-ignore\n      annotationController.annotation(annotationOption);\n    });\n\n    return params;\n  };\n}\n\n/**\n * 自动设置 limitInPlot\n * @param params\n */\nexport function limitInPlot(params: Params<Options>): Params<Options> {\n  const { chart, options } = params;\n  const { yAxis, limitInPlot } = options;\n\n  let value = limitInPlot;\n\n  // 用户没有设置 limitInPlot，则自动根据 yAxis 是否有 min/max 来设置 limitInPlot\n  if (isObject(yAxis) && isNil(limitInPlot)) {\n    if (Object.values(pick(yAxis, ['min', 'max', 'minLimit', 'maxLimit'])).some((value) => !isNil(value))) {\n      value = true;\n    } else {\n      value = false;\n    }\n  }\n  chart.limitInPlot = value;\n\n  return params;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}