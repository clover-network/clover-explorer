{"ast":null,"code":"import { regressionLinear, regressionExp, regressionLoess, regressionLog, regressionPoly, regressionPow, regressionQuad } from 'd3-regression';\nimport { isArray } from '@antv/util';\nimport { getSplinePath } from '../../utils';\nvar REGRESSION_MAP = {\n  exp: regressionExp,\n  linear: regressionLinear,\n  loess: regressionLoess,\n  log: regressionLog,\n  poly: regressionPoly,\n  pow: regressionPow,\n  quad: regressionQuad\n};\n/**\n * 获取四象限默认配置\n * @param {number} xBaseline\n * @param {number} yBaseline\n */\n\nexport function getQuadrantDefaultConfig(xBaseline, yBaseline) {\n  // 文本便宜距离\n  var textOffset = 10; // 四象限默认样式\n\n  var defaultConfig = {\n    regionStyle: [{\n      position: {\n        start: [xBaseline, 'max'],\n        end: ['max', yBaseline]\n      },\n      style: {\n        fill: '#d8d0c0',\n        opacity: 0.4\n      }\n    }, {\n      position: {\n        start: ['min', 'max'],\n        end: [xBaseline, yBaseline]\n      },\n      style: {\n        fill: '#a3dda1',\n        opacity: 0.4\n      }\n    }, {\n      position: {\n        start: ['min', yBaseline],\n        end: [xBaseline, 'min']\n      },\n      style: {\n        fill: '#d8d0c0',\n        opacity: 0.4\n      }\n    }, {\n      position: {\n        start: [xBaseline, yBaseline],\n        end: ['max', 'min']\n      },\n      style: {\n        fill: '#a3dda1',\n        opacity: 0.4\n      }\n    }],\n    lineStyle: {\n      stroke: '#9ba29a',\n      lineWidth: 1\n    },\n    labelStyle: [{\n      position: ['max', yBaseline],\n      offsetX: -textOffset,\n      offsetY: -textOffset,\n      style: {\n        textAlign: 'right',\n        textBaseline: 'bottom',\n        fontSize: 14,\n        fill: '#ccc'\n      }\n    }, {\n      position: ['min', yBaseline],\n      offsetX: textOffset,\n      offsetY: -textOffset,\n      style: {\n        textAlign: 'left',\n        textBaseline: 'bottom',\n        fontSize: 14,\n        fill: '#ccc'\n      }\n    }, {\n      position: ['min', yBaseline],\n      offsetX: textOffset,\n      offsetY: textOffset,\n      style: {\n        textAlign: 'left',\n        textBaseline: 'top',\n        fontSize: 14,\n        fill: '#ccc'\n      }\n    }, {\n      position: ['max', yBaseline],\n      offsetX: -textOffset,\n      offsetY: textOffset,\n      style: {\n        textAlign: 'right',\n        textBaseline: 'top',\n        fontSize: 14,\n        fill: '#ccc'\n      }\n    }]\n  };\n  return defaultConfig;\n}\n\nvar splinePath = function (data, config) {\n  var view = config.view,\n      _a = config.options,\n      xField = _a.xField,\n      yField = _a.yField;\n  var xScaleView = view.getScaleByField(xField);\n  var yScaleView = view.getScaleByField(yField);\n  var pathData = data.map(function (d) {\n    return view.getCoordinate().convert({\n      x: xScaleView.scale(d[0]),\n      y: yScaleView.scale(d[1])\n    });\n  });\n  return getSplinePath(pathData, false);\n};\n\nexport var getPath = function (config) {\n  var options = config.options;\n  var xField = options.xField,\n      yField = options.yField,\n      data = options.data,\n      regressionLine = options.regressionLine;\n  var _a = regressionLine.type,\n      type = _a === void 0 ? 'linear' : _a,\n      algorithm = regressionLine.algorithm;\n  var pathData;\n\n  if (algorithm) {\n    pathData = isArray(algorithm) ? algorithm : algorithm(data);\n  } else {\n    var reg = REGRESSION_MAP[type]().x(function (d) {\n      return d[xField];\n    }).y(function (d) {\n      return d[yField];\n    });\n    pathData = reg(data);\n  }\n\n  return splinePath(pathData, config);\n};","map":{"version":3,"sources":["../../../src/plots/scatter/util.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  regressionLinear,\n  regressionExp,\n  regressionLoess,\n  regressionLog,\n  regressionPoly,\n  regressionPow,\n  regressionQuad,\n} from 'd3-regression';\nimport { isArray } from '@antv/util';\nimport { View } from '@antv/g2';\nimport { getSplinePath } from '../../utils';\nimport { ScatterOptions } from './types';\n\nconst REGRESSION_MAP = {\n  exp: regressionExp,\n  linear: regressionLinear,\n  loess: regressionLoess,\n  log: regressionLog,\n  poly: regressionPoly,\n  pow: regressionPow,\n  quad: regressionQuad,\n};\n\ntype RenderOptions = {\n  view: View;\n  options: ScatterOptions;\n};\n\n/**\n * 获取四象限默认配置\n * @param {number} xBaseline\n * @param {number} yBaseline\n */\nexport function getQuadrantDefaultConfig(xBaseline: number, yBaseline: number) {\n  // 文本便宜距离\n  const textOffset = 10;\n  // 四象限默认样式\n  const defaultConfig: { [key: string]: any } = {\n    regionStyle: [\n      {\n        position: {\n          start: [xBaseline, 'max'],\n          end: ['max', yBaseline],\n        },\n        style: {\n          fill: '#d8d0c0',\n          opacity: 0.4,\n        },\n      },\n      {\n        position: {\n          start: ['min', 'max'],\n          end: [xBaseline, yBaseline],\n        },\n        style: {\n          fill: '#a3dda1',\n          opacity: 0.4,\n        },\n      },\n      {\n        position: {\n          start: ['min', yBaseline],\n          end: [xBaseline, 'min'],\n        },\n        style: {\n          fill: '#d8d0c0',\n          opacity: 0.4,\n        },\n      },\n      {\n        position: {\n          start: [xBaseline, yBaseline],\n          end: ['max', 'min'],\n        },\n        style: {\n          fill: '#a3dda1',\n          opacity: 0.4,\n        },\n      },\n    ],\n    lineStyle: {\n      stroke: '#9ba29a',\n      lineWidth: 1,\n    },\n    labelStyle: [\n      {\n        position: ['max', yBaseline],\n        offsetX: -textOffset,\n        offsetY: -textOffset,\n        style: {\n          textAlign: 'right',\n          textBaseline: 'bottom',\n          fontSize: 14,\n          fill: '#ccc',\n        },\n      },\n      {\n        position: ['min', yBaseline],\n        offsetX: textOffset,\n        offsetY: -textOffset,\n        style: {\n          textAlign: 'left',\n          textBaseline: 'bottom',\n          fontSize: 14,\n          fill: '#ccc',\n        },\n      },\n      {\n        position: ['min', yBaseline],\n        offsetX: textOffset,\n        offsetY: textOffset,\n        style: {\n          textAlign: 'left',\n          textBaseline: 'top',\n          fontSize: 14,\n          fill: '#ccc',\n        },\n      },\n      {\n        position: ['max', yBaseline],\n        offsetX: -textOffset,\n        offsetY: textOffset,\n        style: {\n          textAlign: 'right',\n          textBaseline: 'top',\n          fontSize: 14,\n          fill: '#ccc',\n        },\n      },\n    ],\n  };\n  return defaultConfig;\n}\n\nconst splinePath = (data: number[][], config: RenderOptions) => {\n  const {\n    view,\n    options: { xField, yField },\n  } = config;\n  const xScaleView = view.getScaleByField(xField);\n  const yScaleView = view.getScaleByField(yField);\n  const pathData = data.map((d: [number, number]) =>\n    view.getCoordinate().convert({ x: xScaleView.scale(d[0]), y: yScaleView.scale(d[1]) })\n  );\n  return getSplinePath(pathData, false);\n};\n\nexport const getPath = (config: RenderOptions) => {\n  const { options } = config;\n  const { xField, yField, data, regressionLine } = options;\n  const { type = 'linear', algorithm } = regressionLine;\n  let pathData: Array<[number, number]>;\n  if (algorithm) {\n    pathData = isArray(algorithm) ? algorithm : algorithm(data);\n  } else {\n    const reg = REGRESSION_MAP[type]()\n      .x((d) => d[xField])\n      .y((d) => d[yField]);\n    pathData = reg(data);\n  }\n  return splinePath(pathData, config);\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}