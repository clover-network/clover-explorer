{"ast":null,"code":"import { __rest } from \"tslib\";\nimport { isFunction, isObject } from '@antv/util';\nimport { findGeometry } from '../../utils';\nimport { flow, transformLabel } from '../../utils';\nimport { DEFAULT_COLORS } from '../../constant';\nimport { tooltip, interaction, animation, theme, scale, annotation } from '../../adaptor/common';\n/**\n * 数据字段映射\n * @param params\n */\n\nfunction field(params) {\n  var chart = params.chart,\n      options = params.options;\n  var data = options.data,\n      type = options.type,\n      reflect = options.reflect,\n      xField = options.xField,\n      yField = options.yField,\n      colorField = options.colorField,\n      sizeField = options.sizeField,\n      sizeRatio = options.sizeRatio,\n      shape = options.shape,\n      color = options.color;\n  chart.data(data);\n  var geometry;\n\n  if (type === 'density') {\n    geometry = chart.heatmap().position(xField + \"*\" + yField);\n  } else {\n    geometry = chart.polygon().position(xField + \"*\" + yField);\n  }\n\n  if (colorField) {\n    geometry.color(colorField, color || DEFAULT_COLORS.GRADIENT.CONTINUOUS);\n  }\n\n  if (reflect) {\n    chart.coordinate().reflect(reflect);\n  }\n  /**\n   * The ratio between the actual size and the max available size, must be in range `[0,1]`.\n   *\n   * If the `sizeRatio` attribute is undefined or it exceeds the range,\n   * `checkedSizeRatio` would be set to 1 as default.\n   */\n\n\n  var checkedSizeRatio = 1;\n\n  if (sizeRatio || sizeRatio === 0) {\n    if (!shape && !sizeField) {\n      console.warn('sizeRatio is not in effect: Must define shape or sizeField first');\n    } else if (sizeRatio < 0 || sizeRatio > 1) {\n      console.warn('sizeRatio is not in effect: It must be a number in [0,1]');\n    } else {\n      checkedSizeRatio = sizeRatio;\n    }\n  } // when it has to change shape from original rect\n\n\n  if (shape) {\n    // just to change shape in cell\n    if (!sizeField) {\n      geometry.shape('', function () {\n        return [shape, 1, checkedSizeRatio];\n      });\n    } // specific shape in different size\n\n\n    if (sizeField) {\n      var field_1 = data.map(function (row) {\n        return row[sizeField];\n      });\n      var min_1 = Math.min.apply(Math, field_1);\n      var max_1 = Math.max.apply(Math, field_1);\n      geometry.shape(sizeField, function (v) {\n        return [shape, (v - min_1) / (max_1 - min_1), checkedSizeRatio];\n      });\n    }\n  }\n\n  return params;\n}\n/**\n * meta 配置\n * @param params\n */\n\n\nfunction meta(params) {\n  var _a;\n\n  var options = params.options;\n  var xAxis = options.xAxis,\n      yAxis = options.yAxis,\n      xField = options.xField,\n      yField = options.yField;\n  return flow(scale((_a = {}, _a[xField] = xAxis, _a[yField] = yAxis, _a)))(params);\n}\n/**\n * axis 配置\n * @param params\n */\n\n\nfunction axis(params) {\n  var chart = params.chart,\n      options = params.options;\n  var xAxis = options.xAxis,\n      yAxis = options.yAxis,\n      xField = options.xField,\n      yField = options.yField; // 为 false 则是不显示轴\n\n  if (xAxis === false) {\n    chart.axis(xField, false);\n  } else {\n    chart.axis(xField, xAxis);\n  }\n\n  if (yAxis === false) {\n    chart.axis(yField, false);\n  } else {\n    chart.axis(yField, yAxis);\n  }\n\n  return params;\n}\n/**\n * legend 配置\n * @param params\n */\n\n\nfunction legend(params) {\n  var chart = params.chart,\n      options = params.options;\n  var legend = options.legend,\n      colorField = options.colorField;\n\n  if (legend) {\n    chart.legend(colorField, legend);\n  } else {\n    chart.legend(false);\n  }\n\n  return params;\n}\n/**\n * 样式\n * @param params\n */\n\n\nfunction style(params) {\n  var chart = params.chart,\n      options = params.options;\n  var xField = options.xField,\n      yField = options.yField,\n      colorField = options.colorField,\n      sizeField = options.sizeField,\n      heatmapStyle = options.heatmapStyle;\n  var geometry = chart.geometries[0];\n\n  if (heatmapStyle && geometry) {\n    if (isFunction(heatmapStyle)) {\n      geometry.style(xField + \"*\" + yField + \"*\" + colorField + \"*\" + sizeField, heatmapStyle);\n    } else if (isObject(heatmapStyle)) {\n      geometry.style(heatmapStyle);\n    }\n  }\n\n  return params;\n}\n/**\n * 数据标签\n * @param params\n */\n\n\nfunction label(params) {\n  var chart = params.chart,\n      options = params.options;\n  var label = options.label,\n      colorField = options.colorField,\n      type = options.type;\n  var geometry = findGeometry(chart, type === 'density' ? 'heatmap' : 'polygon');\n\n  if (!label) {\n    geometry.label(false);\n  } else if (colorField) {\n    var callback = label.callback,\n        cfg = __rest(label, [\"callback\"]);\n\n    geometry.label({\n      fields: [colorField],\n      callback: callback,\n      cfg: transformLabel(cfg)\n    });\n  }\n\n  return params;\n}\n/**\n * 热力图适配器\n * @param chart\n * @param options\n */\n\n\nexport function adaptor(params) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(field, meta, theme, axis, legend, tooltip, style, label, annotation(), interaction, animation)(params);\n}","map":{"version":3,"sources":["../../../src/plots/heatmap/adaptor.ts"],"names":[],"mappings":"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","sourcesContent":["import { isFunction, isObject } from '@antv/util';\nimport { Geometry } from '@antv/g2';\nimport { Params } from '../../core/adaptor';\nimport { findGeometry } from '../../utils';\nimport { flow, transformLabel } from '../../utils';\nimport { DEFAULT_COLORS } from '../../constant';\nimport { tooltip, interaction, animation, theme, scale, annotation } from '../../adaptor/common';\nimport { HeatmapOptions } from './types';\n\n/**\n * 数据字段映射\n * @param params\n */\nfunction field(params: Params<HeatmapOptions>): Params<HeatmapOptions> {\n  const { chart, options } = params;\n  const { data, type, reflect, xField, yField, colorField, sizeField, sizeRatio, shape, color } = options;\n\n  chart.data(data);\n  let geometry: Geometry;\n\n  if (type === 'density') {\n    geometry = chart.heatmap().position(`${xField}*${yField}`);\n  } else {\n    geometry = chart.polygon().position(`${xField}*${yField}`);\n  }\n\n  if (colorField) {\n    geometry.color(colorField, color || DEFAULT_COLORS.GRADIENT.CONTINUOUS);\n  }\n\n  if (reflect) {\n    chart.coordinate().reflect(reflect);\n  }\n\n  /**\n   * The ratio between the actual size and the max available size, must be in range `[0,1]`.\n   *\n   * If the `sizeRatio` attribute is undefined or it exceeds the range,\n   * `checkedSizeRatio` would be set to 1 as default.\n   */\n  let checkedSizeRatio = 1;\n  if (sizeRatio || sizeRatio === 0) {\n    if (!shape && !sizeField) {\n      console.warn('sizeRatio is not in effect: Must define shape or sizeField first');\n    } else if (sizeRatio < 0 || sizeRatio > 1) {\n      console.warn('sizeRatio is not in effect: It must be a number in [0,1]');\n    } else {\n      checkedSizeRatio = sizeRatio;\n    }\n  }\n\n  // when it has to change shape from original rect\n  if (shape) {\n    // just to change shape in cell\n    if (!sizeField) {\n      geometry.shape('', () => {\n        return [shape, 1, checkedSizeRatio];\n      });\n    }\n\n    // specific shape in different size\n    if (sizeField) {\n      const field = data.map((row) => row[sizeField]);\n      const min = Math.min(...field);\n      const max = Math.max(...field);\n\n      geometry.shape(sizeField, (v) => {\n        return [shape, (v - min) / (max - min), checkedSizeRatio];\n      });\n    }\n  }\n\n  return params;\n}\n\n/**\n * meta 配置\n * @param params\n */\nfunction meta(params: Params<HeatmapOptions>): Params<HeatmapOptions> {\n  const { options } = params;\n  const { xAxis, yAxis, xField, yField } = options;\n\n  return flow(\n    scale({\n      [xField]: xAxis,\n      [yField]: yAxis,\n    })\n  )(params);\n}\n\n/**\n * axis 配置\n * @param params\n */\nfunction axis(params: Params<HeatmapOptions>): Params<HeatmapOptions> {\n  const { chart, options } = params;\n  const { xAxis, yAxis, xField, yField } = options;\n\n  // 为 false 则是不显示轴\n  if (xAxis === false) {\n    chart.axis(xField, false);\n  } else {\n    chart.axis(xField, xAxis);\n  }\n\n  if (yAxis === false) {\n    chart.axis(yField, false);\n  } else {\n    chart.axis(yField, yAxis);\n  }\n\n  return params;\n}\n\n/**\n * legend 配置\n * @param params\n */\nfunction legend(params: Params<HeatmapOptions>): Params<HeatmapOptions> {\n  const { chart, options } = params;\n  const { legend, colorField } = options;\n\n  if (legend) {\n    chart.legend(colorField, legend);\n  } else {\n    chart.legend(false);\n  }\n\n  return params;\n}\n\n/**\n * 样式\n * @param params\n */\nfunction style(params: Params<HeatmapOptions>): Params<HeatmapOptions> {\n  const { chart, options } = params;\n  const { xField, yField, colorField, sizeField, heatmapStyle } = options;\n\n  const geometry = chart.geometries[0];\n  if (heatmapStyle && geometry) {\n    if (isFunction(heatmapStyle)) {\n      geometry.style(`${xField}*${yField}*${colorField}*${sizeField}`, heatmapStyle);\n    } else if (isObject(heatmapStyle)) {\n      geometry.style(heatmapStyle);\n    }\n  }\n  return params;\n}\n\n/**\n * 数据标签\n * @param params\n */\nfunction label(params: Params<HeatmapOptions>): Params<HeatmapOptions> {\n  const { chart, options } = params;\n  const { label, colorField, type } = options;\n\n  const geometry = findGeometry(chart, type === 'density' ? 'heatmap' : 'polygon');\n\n  if (!label) {\n    geometry.label(false);\n  } else if (colorField) {\n    const { callback, ...cfg } = label;\n    geometry.label({\n      fields: [colorField],\n      callback,\n      cfg: transformLabel(cfg),\n    });\n  }\n\n  return params;\n}\n\n/**\n * 热力图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<HeatmapOptions>) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(field, meta, theme, axis, legend, tooltip, style, label, annotation(), interaction, animation)(params);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}