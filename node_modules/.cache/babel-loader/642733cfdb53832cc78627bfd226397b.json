{"ast":null,"code":"import LinkedList from '../linked-list';\n\nvar Stack =\n/** @class */\nfunction () {\n  function Stack(maxStep) {\n    if (maxStep === void 0) {\n      maxStep = 10;\n    }\n\n    this.linkedList = new LinkedList();\n    this.maxStep = maxStep;\n  }\n\n  Object.defineProperty(Stack.prototype, \"length\", {\n    get: function get() {\n      return this.linkedList.toArray().length;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * 判断栈是否为空，如果链表中没有头部元素，则栈为空\n   */\n\n  Stack.prototype.isEmpty = function () {\n    return !this.linkedList.head;\n  };\n  /**\n   * 是否到定义的栈的最大长度，如果达到最大长度后，不再允许入栈\n   */\n\n\n  Stack.prototype.isMaxStack = function () {\n    return this.toArray().length >= this.maxStep;\n  };\n  /**\n   * 访问顶端元素\n   */\n\n\n  Stack.prototype.peek = function () {\n    if (this.isEmpty()) {\n      return null;\n    } // 返回头部元素，不删除元素\n\n\n    return this.linkedList.head.value;\n  };\n\n  Stack.prototype.push = function (value) {\n    this.linkedList.prepend(value);\n\n    if (this.length > this.maxStep) {\n      this.linkedList.deleteTail();\n    }\n  };\n\n  Stack.prototype.pop = function () {\n    var removeHead = this.linkedList.deleteHead();\n    return removeHead ? removeHead.value : null;\n  };\n\n  Stack.prototype.toArray = function () {\n    return this.linkedList.toArray().map(function (node) {\n      return node.value;\n    });\n  };\n\n  Stack.prototype.clear = function () {\n    while (!this.isEmpty()) {\n      this.pop();\n    }\n  };\n\n  return Stack;\n}();\n\nexport default Stack;","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/@antv/g6/es/algorithm/structs/stack/index.js"],"names":["LinkedList","Stack","maxStep","linkedList","Object","defineProperty","prototype","get","toArray","length","enumerable","configurable","isEmpty","head","isMaxStack","peek","value","push","prepend","deleteTail","pop","removeHead","deleteHead","map","node","clear"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,gBAAvB;;AAEA,IAAIC,KAAK;AACT;AACA,YAAY;AACV,WAASA,KAAT,CAAeC,OAAf,EAAwB;AACtB,QAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;AACtBA,MAAAA,OAAO,GAAG,EAAV;AACD;;AAED,SAAKC,UAAL,GAAkB,IAAIH,UAAJ,EAAlB;AACA,SAAKE,OAAL,GAAeA,OAAf;AACD;;AAEDE,EAAAA,MAAM,CAACC,cAAP,CAAsBJ,KAAK,CAACK,SAA5B,EAAuC,QAAvC,EAAiD;AAC/CC,IAAAA,GAAG,EAAE,SAASA,GAAT,GAAe;AAClB,aAAO,KAAKJ,UAAL,CAAgBK,OAAhB,GAA0BC,MAAjC;AACD,KAH8C;AAI/CC,IAAAA,UAAU,EAAE,KAJmC;AAK/CC,IAAAA,YAAY,EAAE;AALiC,GAAjD;AAOA;AACF;AACA;;AAEEV,EAAAA,KAAK,CAACK,SAAN,CAAgBM,OAAhB,GAA0B,YAAY;AACpC,WAAO,CAAC,KAAKT,UAAL,CAAgBU,IAAxB;AACD,GAFD;AAGA;AACF;AACA;;;AAGEZ,EAAAA,KAAK,CAACK,SAAN,CAAgBQ,UAAhB,GAA6B,YAAY;AACvC,WAAO,KAAKN,OAAL,GAAeC,MAAf,IAAyB,KAAKP,OAArC;AACD,GAFD;AAGA;AACF;AACA;;;AAGED,EAAAA,KAAK,CAACK,SAAN,CAAgBS,IAAhB,GAAuB,YAAY;AACjC,QAAI,KAAKH,OAAL,EAAJ,EAAoB;AAClB,aAAO,IAAP;AACD,KAHgC,CAG/B;;;AAGF,WAAO,KAAKT,UAAL,CAAgBU,IAAhB,CAAqBG,KAA5B;AACD,GAPD;;AASAf,EAAAA,KAAK,CAACK,SAAN,CAAgBW,IAAhB,GAAuB,UAAUD,KAAV,EAAiB;AACtC,SAAKb,UAAL,CAAgBe,OAAhB,CAAwBF,KAAxB;;AAEA,QAAI,KAAKP,MAAL,GAAc,KAAKP,OAAvB,EAAgC;AAC9B,WAAKC,UAAL,CAAgBgB,UAAhB;AACD;AACF,GAND;;AAQAlB,EAAAA,KAAK,CAACK,SAAN,CAAgBc,GAAhB,GAAsB,YAAY;AAChC,QAAIC,UAAU,GAAG,KAAKlB,UAAL,CAAgBmB,UAAhB,EAAjB;AACA,WAAOD,UAAU,GAAGA,UAAU,CAACL,KAAd,GAAsB,IAAvC;AACD,GAHD;;AAKAf,EAAAA,KAAK,CAACK,SAAN,CAAgBE,OAAhB,GAA0B,YAAY;AACpC,WAAO,KAAKL,UAAL,CAAgBK,OAAhB,GAA0Be,GAA1B,CAA8B,UAAUC,IAAV,EAAgB;AACnD,aAAOA,IAAI,CAACR,KAAZ;AACD,KAFM,CAAP;AAGD,GAJD;;AAMAf,EAAAA,KAAK,CAACK,SAAN,CAAgBmB,KAAhB,GAAwB,YAAY;AAClC,WAAO,CAAC,KAAKb,OAAL,EAAR,EAAwB;AACtB,WAAKQ,GAAL;AACD;AACF,GAJD;;AAMA,SAAOnB,KAAP;AACD,CAxED,EAFA;;AA4EA,eAAeA,KAAf","sourcesContent":["import LinkedList from '../linked-list';\n\nvar Stack =\n/** @class */\nfunction () {\n  function Stack(maxStep) {\n    if (maxStep === void 0) {\n      maxStep = 10;\n    }\n\n    this.linkedList = new LinkedList();\n    this.maxStep = maxStep;\n  }\n\n  Object.defineProperty(Stack.prototype, \"length\", {\n    get: function get() {\n      return this.linkedList.toArray().length;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * 判断栈是否为空，如果链表中没有头部元素，则栈为空\n   */\n\n  Stack.prototype.isEmpty = function () {\n    return !this.linkedList.head;\n  };\n  /**\n   * 是否到定义的栈的最大长度，如果达到最大长度后，不再允许入栈\n   */\n\n\n  Stack.prototype.isMaxStack = function () {\n    return this.toArray().length >= this.maxStep;\n  };\n  /**\n   * 访问顶端元素\n   */\n\n\n  Stack.prototype.peek = function () {\n    if (this.isEmpty()) {\n      return null;\n    } // 返回头部元素，不删除元素\n\n\n    return this.linkedList.head.value;\n  };\n\n  Stack.prototype.push = function (value) {\n    this.linkedList.prepend(value);\n\n    if (this.length > this.maxStep) {\n      this.linkedList.deleteTail();\n    }\n  };\n\n  Stack.prototype.pop = function () {\n    var removeHead = this.linkedList.deleteHead();\n    return removeHead ? removeHead.value : null;\n  };\n\n  Stack.prototype.toArray = function () {\n    return this.linkedList.toArray().map(function (node) {\n      return node.value;\n    });\n  };\n\n  Stack.prototype.clear = function () {\n    while (!this.isEmpty()) {\n      this.pop();\n    }\n  };\n\n  return Stack;\n}();\n\nexport default Stack;"]},"metadata":{},"sourceType":"module"}