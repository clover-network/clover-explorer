{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\nimport { __extends } from \"tslib\";\nimport List from '../../data/List';\nimport * as zrUtil from 'zrender/esm/core/util';\nimport { defaultEmphasis } from '../../util/model';\nimport Model from '../../model/Model';\nimport createGraphFromNodeEdge from '../helper/createGraphFromNodeEdge';\nimport LegendVisualProvider from '../../visual/LegendVisualProvider';\nimport SeriesModel from '../../model/Series';\nimport { createTooltipMarkup } from '../../component/tooltip/tooltipMarkup';\nimport { defaultSeriesFormatTooltip } from '../../component/tooltip/seriesFormatTooltip';\nimport { initCurvenessList, createEdgeMapForCurveness } from '../helper/multipleGraphEdgeHelper';\n\nvar GraphSeriesModel = function (_super) {\n  __extends(GraphSeriesModel, _super);\n\n  function GraphSeriesModel() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = GraphSeriesModel.type;\n    _this.hasSymbolVisual = true;\n    return _this;\n  }\n\n  GraphSeriesModel.prototype.init = function (option) {\n    _super.prototype.init.apply(this, arguments);\n\n    var self = this;\n\n    function getCategoriesData() {\n      return self._categoriesData;\n    }\n\n    this.legendVisualProvider = new LegendVisualProvider(getCategoriesData, getCategoriesData);\n    this.fillDataTextStyle(option.edges || option.links);\n\n    this._updateCategoriesData();\n  };\n\n  GraphSeriesModel.prototype.mergeOption = function (option) {\n    _super.prototype.mergeOption.apply(this, arguments);\n\n    this.fillDataTextStyle(option.edges || option.links);\n\n    this._updateCategoriesData();\n  };\n\n  GraphSeriesModel.prototype.mergeDefaultAndTheme = function (option) {\n    _super.prototype.mergeDefaultAndTheme.apply(this, arguments);\n\n    defaultEmphasis(option, 'edgeLabel', ['show']);\n  };\n\n  GraphSeriesModel.prototype.getInitialData = function (option, ecModel) {\n    var edges = option.edges || option.links || [];\n    var nodes = option.data || option.nodes || [];\n    var self = this;\n\n    if (nodes && edges) {\n      initCurvenessList(this);\n      var graph = createGraphFromNodeEdge(nodes, edges, this, true, beforeLink);\n      zrUtil.each(graph.edges, function (edge) {\n        createEdgeMapForCurveness(edge.node1, edge.node2, this, edge.dataIndex);\n      }, this);\n      return graph.data;\n    }\n\n    function beforeLink(nodeData, edgeData) {\n      nodeData.wrapMethod('getItemModel', function (model) {\n        var categoriesModels = self._categoriesModels;\n        var categoryIdx = model.getShallow('category');\n        var categoryModel = categoriesModels[categoryIdx];\n\n        if (categoryModel) {\n          categoryModel.parentModel = model.parentModel;\n          model.parentModel = categoryModel;\n        }\n\n        return model;\n      });\n      var oldGetModel = Model.prototype.getModel;\n\n      function newGetModel(path, parentModel) {\n        var model = oldGetModel.call(this, path, parentModel);\n        model.resolveParentPath = resolveParentPath;\n        return model;\n      }\n\n      edgeData.wrapMethod('getItemModel', function (model) {\n        model.resolveParentPath = resolveParentPath;\n        model.getModel = newGetModel;\n        return model;\n      });\n\n      function resolveParentPath(pathArr) {\n        if (pathArr && (pathArr[0] === 'label' || pathArr[1] === 'label')) {\n          var newPathArr = pathArr.slice();\n\n          if (pathArr[0] === 'label') {\n            newPathArr[0] = 'edgeLabel';\n          } else if (pathArr[1] === 'label') {\n            newPathArr[1] = 'edgeLabel';\n          }\n\n          return newPathArr;\n        }\n\n        return pathArr;\n      }\n    }\n  };\n\n  GraphSeriesModel.prototype.getGraph = function () {\n    return this.getData().graph;\n  };\n\n  GraphSeriesModel.prototype.getEdgeData = function () {\n    return this.getGraph().edgeData;\n  };\n\n  GraphSeriesModel.prototype.getCategoriesData = function () {\n    return this._categoriesData;\n  };\n\n  GraphSeriesModel.prototype.formatTooltip = function (dataIndex, multipleSeries, dataType) {\n    if (dataType === 'edge') {\n      var nodeData = this.getData();\n      var params = this.getDataParams(dataIndex, dataType);\n      var edge = nodeData.graph.getEdgeByIndex(dataIndex);\n      var sourceName = nodeData.getName(edge.node1.dataIndex);\n      var targetName = nodeData.getName(edge.node2.dataIndex);\n      var nameArr = [];\n      sourceName != null && nameArr.push(sourceName);\n      targetName != null && nameArr.push(targetName);\n      return createTooltipMarkup('nameValue', {\n        name: nameArr.join(' > '),\n        value: params.value,\n        noValue: params.value == null\n      });\n    }\n\n    var nodeMarkup = defaultSeriesFormatTooltip({\n      series: this,\n      dataIndex: dataIndex,\n      multipleSeries: multipleSeries\n    });\n    return nodeMarkup;\n  };\n\n  GraphSeriesModel.prototype._updateCategoriesData = function () {\n    var categories = zrUtil.map(this.option.categories || [], function (category) {\n      return category.value != null ? category : zrUtil.extend({\n        value: 0\n      }, category);\n    });\n    var categoriesData = new List(['value'], this);\n    categoriesData.initData(categories);\n    this._categoriesData = categoriesData;\n    this._categoriesModels = categoriesData.mapArray(function (idx) {\n      return categoriesData.getItemModel(idx);\n    });\n  };\n\n  GraphSeriesModel.prototype.setZoom = function (zoom) {\n    this.option.zoom = zoom;\n  };\n\n  GraphSeriesModel.prototype.setCenter = function (center) {\n    this.option.center = center;\n  };\n\n  GraphSeriesModel.prototype.isAnimationEnabled = function () {\n    return _super.prototype.isAnimationEnabled.call(this) && !(this.get('layout') === 'force' && this.get(['force', 'layoutAnimation']));\n  };\n\n  GraphSeriesModel.type = 'series.graph';\n  GraphSeriesModel.defaultOption = {\n    zlevel: 0,\n    z: 2,\n    coordinateSystem: 'view',\n    legendHoverLink: true,\n    layout: null,\n    focusNodeAdjacency: false,\n    circular: {\n      rotateLabel: false\n    },\n    force: {\n      initLayout: null,\n      repulsion: [0, 50],\n      gravity: 0.1,\n      friction: 0.6,\n      edgeLength: 30,\n      layoutAnimation: true\n    },\n    left: 'center',\n    top: 'center',\n    symbol: 'circle',\n    symbolSize: 10,\n    edgeSymbol: ['none', 'none'],\n    edgeSymbolSize: 10,\n    edgeLabel: {\n      position: 'middle',\n      distance: 5\n    },\n    draggable: false,\n    roam: false,\n    center: null,\n    zoom: 1,\n    nodeScaleRatio: 0.6,\n    label: {\n      show: false,\n      formatter: '{b}'\n    },\n    itemStyle: {},\n    lineStyle: {\n      color: '#aaa',\n      width: 1,\n      opacity: 0.5\n    },\n    emphasis: {\n      scale: true,\n      label: {\n        show: true\n      }\n    },\n    select: {\n      itemStyle: {\n        borderColor: '#212121'\n      }\n    }\n  };\n  return GraphSeriesModel;\n}(SeriesModel);\n\nSeriesModel.registerClass(GraphSeriesModel);\nexport default GraphSeriesModel;","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/echarts/esm/chart/graph/GraphSeries.js"],"names":["__extends","List","zrUtil","defaultEmphasis","Model","createGraphFromNodeEdge","LegendVisualProvider","SeriesModel","createTooltipMarkup","defaultSeriesFormatTooltip","initCurvenessList","createEdgeMapForCurveness","GraphSeriesModel","_super","_this","apply","arguments","type","hasSymbolVisual","prototype","init","option","self","getCategoriesData","_categoriesData","legendVisualProvider","fillDataTextStyle","edges","links","_updateCategoriesData","mergeOption","mergeDefaultAndTheme","getInitialData","ecModel","nodes","data","graph","beforeLink","each","edge","node1","node2","dataIndex","nodeData","edgeData","wrapMethod","model","categoriesModels","_categoriesModels","categoryIdx","getShallow","categoryModel","parentModel","oldGetModel","getModel","newGetModel","path","call","resolveParentPath","pathArr","newPathArr","slice","getGraph","getData","getEdgeData","formatTooltip","multipleSeries","dataType","params","getDataParams","getEdgeByIndex","sourceName","getName","targetName","nameArr","push","name","join","value","noValue","nodeMarkup","series","categories","map","category","extend","categoriesData","initData","mapArray","idx","getItemModel","setZoom","zoom","setCenter","center","isAnimationEnabled","get","defaultOption","zlevel","z","coordinateSystem","legendHoverLink","layout","focusNodeAdjacency","circular","rotateLabel","force","initLayout","repulsion","gravity","friction","edgeLength","layoutAnimation","left","top","symbol","symbolSize","edgeSymbol","edgeSymbolSize","edgeLabel","position","distance","draggable","roam","nodeScaleRatio","label","show","formatter","itemStyle","lineStyle","color","width","opacity","emphasis","scale","select","borderColor","registerClass"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\nimport { __extends } from \"tslib\";\nimport List from '../../data/List';\nimport * as zrUtil from 'zrender/esm/core/util';\nimport { defaultEmphasis } from '../../util/model';\nimport Model from '../../model/Model';\nimport createGraphFromNodeEdge from '../helper/createGraphFromNodeEdge';\nimport LegendVisualProvider from '../../visual/LegendVisualProvider';\nimport SeriesModel from '../../model/Series';\nimport { createTooltipMarkup } from '../../component/tooltip/tooltipMarkup';\nimport { defaultSeriesFormatTooltip } from '../../component/tooltip/seriesFormatTooltip';\nimport { initCurvenessList, createEdgeMapForCurveness } from '../helper/multipleGraphEdgeHelper';\n\nvar GraphSeriesModel = function (_super) {\n  __extends(GraphSeriesModel, _super);\n\n  function GraphSeriesModel() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = GraphSeriesModel.type;\n    _this.hasSymbolVisual = true;\n    return _this;\n  }\n\n  GraphSeriesModel.prototype.init = function (option) {\n    _super.prototype.init.apply(this, arguments);\n\n    var self = this;\n\n    function getCategoriesData() {\n      return self._categoriesData;\n    }\n\n    this.legendVisualProvider = new LegendVisualProvider(getCategoriesData, getCategoriesData);\n    this.fillDataTextStyle(option.edges || option.links);\n\n    this._updateCategoriesData();\n  };\n\n  GraphSeriesModel.prototype.mergeOption = function (option) {\n    _super.prototype.mergeOption.apply(this, arguments);\n\n    this.fillDataTextStyle(option.edges || option.links);\n\n    this._updateCategoriesData();\n  };\n\n  GraphSeriesModel.prototype.mergeDefaultAndTheme = function (option) {\n    _super.prototype.mergeDefaultAndTheme.apply(this, arguments);\n\n    defaultEmphasis(option, 'edgeLabel', ['show']);\n  };\n\n  GraphSeriesModel.prototype.getInitialData = function (option, ecModel) {\n    var edges = option.edges || option.links || [];\n    var nodes = option.data || option.nodes || [];\n    var self = this;\n\n    if (nodes && edges) {\n      initCurvenessList(this);\n      var graph = createGraphFromNodeEdge(nodes, edges, this, true, beforeLink);\n      zrUtil.each(graph.edges, function (edge) {\n        createEdgeMapForCurveness(edge.node1, edge.node2, this, edge.dataIndex);\n      }, this);\n      return graph.data;\n    }\n\n    function beforeLink(nodeData, edgeData) {\n      nodeData.wrapMethod('getItemModel', function (model) {\n        var categoriesModels = self._categoriesModels;\n        var categoryIdx = model.getShallow('category');\n        var categoryModel = categoriesModels[categoryIdx];\n\n        if (categoryModel) {\n          categoryModel.parentModel = model.parentModel;\n          model.parentModel = categoryModel;\n        }\n\n        return model;\n      });\n      var oldGetModel = Model.prototype.getModel;\n\n      function newGetModel(path, parentModel) {\n        var model = oldGetModel.call(this, path, parentModel);\n        model.resolveParentPath = resolveParentPath;\n        return model;\n      }\n\n      edgeData.wrapMethod('getItemModel', function (model) {\n        model.resolveParentPath = resolveParentPath;\n        model.getModel = newGetModel;\n        return model;\n      });\n\n      function resolveParentPath(pathArr) {\n        if (pathArr && (pathArr[0] === 'label' || pathArr[1] === 'label')) {\n          var newPathArr = pathArr.slice();\n\n          if (pathArr[0] === 'label') {\n            newPathArr[0] = 'edgeLabel';\n          } else if (pathArr[1] === 'label') {\n            newPathArr[1] = 'edgeLabel';\n          }\n\n          return newPathArr;\n        }\n\n        return pathArr;\n      }\n    }\n  };\n\n  GraphSeriesModel.prototype.getGraph = function () {\n    return this.getData().graph;\n  };\n\n  GraphSeriesModel.prototype.getEdgeData = function () {\n    return this.getGraph().edgeData;\n  };\n\n  GraphSeriesModel.prototype.getCategoriesData = function () {\n    return this._categoriesData;\n  };\n\n  GraphSeriesModel.prototype.formatTooltip = function (dataIndex, multipleSeries, dataType) {\n    if (dataType === 'edge') {\n      var nodeData = this.getData();\n      var params = this.getDataParams(dataIndex, dataType);\n      var edge = nodeData.graph.getEdgeByIndex(dataIndex);\n      var sourceName = nodeData.getName(edge.node1.dataIndex);\n      var targetName = nodeData.getName(edge.node2.dataIndex);\n      var nameArr = [];\n      sourceName != null && nameArr.push(sourceName);\n      targetName != null && nameArr.push(targetName);\n      return createTooltipMarkup('nameValue', {\n        name: nameArr.join(' > '),\n        value: params.value,\n        noValue: params.value == null\n      });\n    }\n\n    var nodeMarkup = defaultSeriesFormatTooltip({\n      series: this,\n      dataIndex: dataIndex,\n      multipleSeries: multipleSeries\n    });\n    return nodeMarkup;\n  };\n\n  GraphSeriesModel.prototype._updateCategoriesData = function () {\n    var categories = zrUtil.map(this.option.categories || [], function (category) {\n      return category.value != null ? category : zrUtil.extend({\n        value: 0\n      }, category);\n    });\n    var categoriesData = new List(['value'], this);\n    categoriesData.initData(categories);\n    this._categoriesData = categoriesData;\n    this._categoriesModels = categoriesData.mapArray(function (idx) {\n      return categoriesData.getItemModel(idx);\n    });\n  };\n\n  GraphSeriesModel.prototype.setZoom = function (zoom) {\n    this.option.zoom = zoom;\n  };\n\n  GraphSeriesModel.prototype.setCenter = function (center) {\n    this.option.center = center;\n  };\n\n  GraphSeriesModel.prototype.isAnimationEnabled = function () {\n    return _super.prototype.isAnimationEnabled.call(this) && !(this.get('layout') === 'force' && this.get(['force', 'layoutAnimation']));\n  };\n\n  GraphSeriesModel.type = 'series.graph';\n  GraphSeriesModel.defaultOption = {\n    zlevel: 0,\n    z: 2,\n    coordinateSystem: 'view',\n    legendHoverLink: true,\n    layout: null,\n    focusNodeAdjacency: false,\n    circular: {\n      rotateLabel: false\n    },\n    force: {\n      initLayout: null,\n      repulsion: [0, 50],\n      gravity: 0.1,\n      friction: 0.6,\n      edgeLength: 30,\n      layoutAnimation: true\n    },\n    left: 'center',\n    top: 'center',\n    symbol: 'circle',\n    symbolSize: 10,\n    edgeSymbol: ['none', 'none'],\n    edgeSymbolSize: 10,\n    edgeLabel: {\n      position: 'middle',\n      distance: 5\n    },\n    draggable: false,\n    roam: false,\n    center: null,\n    zoom: 1,\n    nodeScaleRatio: 0.6,\n    label: {\n      show: false,\n      formatter: '{b}'\n    },\n    itemStyle: {},\n    lineStyle: {\n      color: '#aaa',\n      width: 1,\n      opacity: 0.5\n    },\n    emphasis: {\n      scale: true,\n      label: {\n        show: true\n      }\n    },\n    select: {\n      itemStyle: {\n        borderColor: '#212121'\n      }\n    }\n  };\n  return GraphSeriesModel;\n}(SeriesModel);\n\nSeriesModel.registerClass(GraphSeriesModel);\nexport default GraphSeriesModel;"]},"metadata":{},"sourceType":"module"}