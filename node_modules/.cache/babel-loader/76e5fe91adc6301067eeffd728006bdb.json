{"ast":null,"code":"/**\n * PageRank https://en.wikipedia.org/wiki/PageRank\n * refer: https://github.com/anvaka/ngraph.pagerank\n * @param graph\n * @param epsilon 判断是否收敛的精度值，默认 0.000001\n * @param linkProb 阻尼系数（dumping factor），指任意时刻，用户访问到某节点后继续访问该节点链接的下一个节点的概率，经验值 0.85\n */\nvar getPageRank = function getPageRank(graph, epsilon, linkProb) {\n  if (typeof epsilon !== 'number') epsilon = 0.000001;\n  if (typeof linkProb !== 'number') linkProb = 0.85;\n  var distance = 1;\n  var leakedRank = 0;\n  var maxIterations = 1000;\n  var nodes = graph.getNodes();\n  var nodesCount = nodes.length;\n  var currentRank;\n  var curRanks = {};\n  var prevRanks = {}; // Initialize pageranks 初始化\n\n  for (var j = 0; j < nodesCount; ++j) {\n    var node = nodes[j];\n    var nodeId = node.get('id');\n    curRanks[nodeId] = 1 / nodesCount;\n    prevRanks[nodeId] = 1 / nodesCount;\n  }\n\n  while (maxIterations > 0 && distance > epsilon) {\n    leakedRank = 0;\n\n    for (var j = 0; j < nodesCount; ++j) {\n      var node = nodes[j];\n      var nodeId = node.get('id');\n      currentRank = 0;\n\n      if (graph.getNodeDegree(node, 'in') === 0) {\n        curRanks[nodeId] = 0;\n      } else {\n        var neighbors = node.getNeighbors('source');\n\n        for (var i = 0; i < neighbors.length; ++i) {\n          var neighbor = neighbors[i];\n          var outDegree = graph.getNodeDegree(neighbor, 'out');\n          if (outDegree > 0) currentRank += prevRanks[neighbor.get('id')] / outDegree;\n        }\n\n        curRanks[nodeId] = linkProb * currentRank;\n        leakedRank += curRanks[nodeId];\n      }\n    }\n\n    leakedRank = (1 - leakedRank) / nodesCount;\n    distance = 0;\n\n    for (var j = 0; j < nodesCount; ++j) {\n      var node = nodes[j];\n      var nodeId = node.get('id');\n      currentRank = curRanks[nodeId] + leakedRank;\n      distance += Math.abs(currentRank - prevRanks[nodeId]);\n      prevRanks[nodeId] = currentRank;\n    }\n\n    maxIterations -= 1;\n  }\n\n  return prevRanks;\n};\n\nexport default getPageRank;","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/@antv/g6/es/algorithm/pagerank.js"],"names":["getPageRank","graph","epsilon","linkProb","distance","leakedRank","maxIterations","nodes","getNodes","nodesCount","length","currentRank","curRanks","prevRanks","j","node","nodeId","get","getNodeDegree","neighbors","getNeighbors","i","neighbor","outDegree","Math","abs"],"mappings":"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","sourcesContent":["/**\n * PageRank https://en.wikipedia.org/wiki/PageRank\n * refer: https://github.com/anvaka/ngraph.pagerank\n * @param graph\n * @param epsilon 判断是否收敛的精度值，默认 0.000001\n * @param linkProb 阻尼系数（dumping factor），指任意时刻，用户访问到某节点后继续访问该节点链接的下一个节点的概率，经验值 0.85\n */\nvar getPageRank = function getPageRank(graph, epsilon, linkProb) {\n  if (typeof epsilon !== 'number') epsilon = 0.000001;\n  if (typeof linkProb !== 'number') linkProb = 0.85;\n  var distance = 1;\n  var leakedRank = 0;\n  var maxIterations = 1000;\n  var nodes = graph.getNodes();\n  var nodesCount = nodes.length;\n  var currentRank;\n  var curRanks = {};\n  var prevRanks = {}; // Initialize pageranks 初始化\n\n  for (var j = 0; j < nodesCount; ++j) {\n    var node = nodes[j];\n    var nodeId = node.get('id');\n    curRanks[nodeId] = 1 / nodesCount;\n    prevRanks[nodeId] = 1 / nodesCount;\n  }\n\n  while (maxIterations > 0 && distance > epsilon) {\n    leakedRank = 0;\n\n    for (var j = 0; j < nodesCount; ++j) {\n      var node = nodes[j];\n      var nodeId = node.get('id');\n      currentRank = 0;\n\n      if (graph.getNodeDegree(node, 'in') === 0) {\n        curRanks[nodeId] = 0;\n      } else {\n        var neighbors = node.getNeighbors('source');\n\n        for (var i = 0; i < neighbors.length; ++i) {\n          var neighbor = neighbors[i];\n          var outDegree = graph.getNodeDegree(neighbor, 'out');\n          if (outDegree > 0) currentRank += prevRanks[neighbor.get('id')] / outDegree;\n        }\n\n        curRanks[nodeId] = linkProb * currentRank;\n        leakedRank += curRanks[nodeId];\n      }\n    }\n\n    leakedRank = (1 - leakedRank) / nodesCount;\n    distance = 0;\n\n    for (var j = 0; j < nodesCount; ++j) {\n      var node = nodes[j];\n      var nodeId = node.get('id');\n      currentRank = curRanks[nodeId] + leakedRank;\n      distance += Math.abs(currentRank - prevRanks[nodeId]);\n      prevRanks[nodeId] = currentRank;\n    }\n\n    maxIterations -= 1;\n  }\n\n  return prevRanks;\n};\n\nexport default getPageRank;"]},"metadata":{},"sourceType":"module"}