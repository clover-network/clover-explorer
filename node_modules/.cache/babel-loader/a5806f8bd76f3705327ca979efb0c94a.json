{"ast":null,"code":"import React, { memo, useMemo, useCallback, useState, Fragment, forwardRef, useRef, useEffect } from 'react';\nimport { lineCurvePropType, blendModePropType, motionPropTypes, defsPropTypes, curveFromProp, useValueFormatter, useTheme, useMotionConfig, useAnimatedPath, getLabelGenerator, DotsItem, withContainer, useDimensions, CartesianMarkers, bindDefs, SvgWrapper, ResponsiveWrapper, getRelativeCursor, isCursorInRect } from '@nivo/core';\nimport { ordinalColorsPropType, useOrdinalColorScale, useInheritedColor } from '@nivo/colors';\nimport { axisPropType, Grid, Axes, renderGridLinesToCanvas, renderAxesToCanvas } from '@nivo/axes';\nimport { LegendPropShape, BoxLegendSvg, renderLegendToCanvas } from '@nivo/legends';\nimport { BasicTooltip, TableTooltip, useTooltip, Crosshair } from '@nivo/tooltip';\nimport { line, area } from 'd3-shape';\nimport { scalePropType, computeXYScalesForSeries } from '@nivo/scales';\nimport PropTypes from 'prop-types';\nimport { useSpring, animated } from 'react-spring';\nimport { Mesh as Mesh$2, useVoronoiMesh, renderVoronoiToCanvas, renderVoronoiCellToCanvas } from '@nivo/voronoi';\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nvar LinePointTooltip = function LinePointTooltip(_ref) {\n  var point = _ref.point;\n  return React.createElement(BasicTooltip, {\n    id: React.createElement(\"span\", null, \"x: \", React.createElement(\"strong\", null, point.data.xFormatted), \", y:\", ' ', React.createElement(\"strong\", null, point.data.yFormatted)),\n    enableChip: true,\n    color: point.serieColor\n  });\n};\n\nvar PointTooltip = memo(LinePointTooltip);\n\nvar Chip = function Chip(_ref) {\n  var color = _ref.color;\n  return React.createElement(\"span\", {\n    style: {\n      display: 'block',\n      width: '12px',\n      height: '12px',\n      background: color\n    }\n  });\n};\n\nvar SliceTooltip = function SliceTooltip(_ref2) {\n  var slice = _ref2.slice,\n      axis = _ref2.axis;\n  var otherAxis = axis === 'x' ? 'y' : 'x';\n  return React.createElement(TableTooltip, {\n    rows: slice.points.map(function (point) {\n      return [React.createElement(Chip, {\n        key: \"chip\",\n        color: point.serieColor\n      }), point.serieId, React.createElement(\"strong\", {\n        key: \"value\"\n      }, point.data[\"\".concat(otherAxis, \"Formatted\")])];\n    })\n  });\n};\n\nvar SliceTooltip$1 = memo(SliceTooltip);\nvar commonPropTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n    data: PropTypes.arrayOf(PropTypes.shape({\n      x: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)]),\n      y: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n    })).isRequired\n  })).isRequired,\n  xScale: scalePropType.isRequired,\n  xFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  yScale: scalePropType.isRequired,\n  yFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  layers: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.oneOf(['grid', 'markers', 'axes', 'areas', 'crosshair', 'lines', 'slices', 'points', 'mesh', 'legends']), PropTypes.func])).isRequired,\n  curve: lineCurvePropType.isRequired,\n  axisTop: axisPropType,\n  axisRight: axisPropType,\n  axisBottom: axisPropType,\n  axisLeft: axisPropType,\n  enableGridX: PropTypes.bool.isRequired,\n  enableGridY: PropTypes.bool.isRequired,\n  gridXValues: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)]))]),\n  gridYValues: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)]))]),\n  enablePoints: PropTypes.bool.isRequired,\n  pointSymbol: PropTypes.func,\n  pointSize: PropTypes.number.isRequired,\n  pointColor: PropTypes.any.isRequired,\n  pointBorderWidth: PropTypes.number.isRequired,\n  pointBorderColor: PropTypes.any.isRequired,\n  enablePointLabel: PropTypes.bool.isRequired,\n  pointLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n  markers: PropTypes.arrayOf(PropTypes.shape({\n    axis: PropTypes.oneOf(['x', 'y']).isRequired,\n    value: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)]).isRequired,\n    style: PropTypes.object\n  })),\n  colors: ordinalColorsPropType.isRequired,\n  enableArea: PropTypes.bool.isRequired,\n  areaOpacity: PropTypes.number.isRequired,\n  areaBlendMode: blendModePropType.isRequired,\n  areaBaselineValue: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)]).isRequired,\n  lineWidth: PropTypes.number.isRequired,\n  legends: PropTypes.arrayOf(PropTypes.shape(LegendPropShape)).isRequired,\n  isInteractive: PropTypes.bool.isRequired,\n  debugMesh: PropTypes.bool.isRequired,\n  tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n  enableSlices: PropTypes.oneOf(['x', 'y', false]).isRequired,\n  debugSlices: PropTypes.bool.isRequired,\n  sliceTooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n  enableCrosshair: PropTypes.bool.isRequired,\n  crosshairType: PropTypes.string.isRequired\n};\n\nvar LinePropTypes = _objectSpread2(_objectSpread2(_objectSpread2({}, commonPropTypes), {}, {\n  enablePointLabel: PropTypes.bool.isRequired,\n  role: PropTypes.string.isRequired,\n  useMesh: PropTypes.bool.isRequired\n}, motionPropTypes), defsPropTypes);\n\nvar LineCanvasPropTypes = _objectSpread2({\n  pixelRatio: PropTypes.number.isRequired\n}, commonPropTypes);\n\nvar commonDefaultProps = {\n  curve: 'linear',\n  xScale: {\n    type: 'point'\n  },\n  yScale: {\n    type: 'linear',\n    min: 0,\n    max: 'auto'\n  },\n  layers: ['grid', 'markers', 'axes', 'areas', 'crosshair', 'lines', 'points', 'slices', 'mesh', 'legends'],\n  axisBottom: {},\n  axisLeft: {},\n  enableGridX: true,\n  enableGridY: true,\n  enablePoints: true,\n  pointSize: 6,\n  pointColor: {\n    from: 'color'\n  },\n  pointBorderWidth: 0,\n  pointBorderColor: {\n    theme: 'background'\n  },\n  enablePointLabel: false,\n  pointLabel: 'yFormatted',\n  colors: {\n    scheme: 'nivo'\n  },\n  enableArea: false,\n  areaBaselineValue: 0,\n  areaOpacity: 0.2,\n  areaBlendMode: 'normal',\n  lineWidth: 2,\n  legends: [],\n  isInteractive: true,\n  tooltip: PointTooltip,\n  enableSlices: false,\n  debugSlices: false,\n  sliceTooltip: SliceTooltip$1,\n  debugMesh: false,\n  enableCrosshair: true,\n  crosshairType: 'bottom-left'\n};\n\nvar LineDefaultProps = _objectSpread2(_objectSpread2({}, commonDefaultProps), {}, {\n  enablePointLabel: false,\n  useMesh: false,\n  animate: true,\n  motionConfig: 'gentle',\n  defs: [],\n  fill: [],\n  role: 'img'\n});\n\nvar LineCanvasDefaultProps = _objectSpread2(_objectSpread2({}, commonDefaultProps), {}, {\n  pixelRatio: global.window && global.window.devicePixelRatio ? global.window.devicePixelRatio : 1\n});\n\nvar useLineGenerator = function useLineGenerator(_ref) {\n  var curve = _ref.curve;\n  return useMemo(function () {\n    return line().defined(function (d) {\n      return d.x !== null && d.y !== null;\n    }).x(function (d) {\n      return d.x;\n    }).y(function (d) {\n      return d.y;\n    }).curve(curveFromProp(curve));\n  }, [curve]);\n};\n\nvar useAreaGenerator = function useAreaGenerator(_ref2) {\n  var curve = _ref2.curve,\n      yScale = _ref2.yScale,\n      areaBaselineValue = _ref2.areaBaselineValue;\n  return useMemo(function () {\n    return area().defined(function (d) {\n      return d.x !== null && d.y !== null;\n    }).x(function (d) {\n      return d.x;\n    }).y1(function (d) {\n      return d.y;\n    }).curve(curveFromProp(curve)).y0(yScale(areaBaselineValue));\n  }, [curve, yScale, areaBaselineValue]);\n};\n\nvar usePoints = function usePoints(_ref3) {\n  var series = _ref3.series,\n      getPointColor = _ref3.getPointColor,\n      getPointBorderColor = _ref3.getPointBorderColor,\n      formatX = _ref3.formatX,\n      formatY = _ref3.formatY;\n  return useMemo(function () {\n    return series.reduce(function (acc, serie) {\n      return [].concat(_toConsumableArray(acc), _toConsumableArray(serie.data.filter(function (datum) {\n        return datum.position.x !== null && datum.position.y !== null;\n      }).map(function (datum, i) {\n        var point = {\n          id: \"\".concat(serie.id, \".\").concat(i),\n          index: acc.length + i,\n          serieId: serie.id,\n          serieColor: serie.color,\n          x: datum.position.x,\n          y: datum.position.y\n        };\n        point.color = getPointColor(serie);\n        point.borderColor = getPointBorderColor(point);\n        point.data = _objectSpread2(_objectSpread2({}, datum.data), {}, {\n          xFormatted: formatX(datum.data.x),\n          yFormatted: formatY(datum.data.y)\n        });\n        return point;\n      })));\n    }, []);\n  }, [series, getPointColor, getPointBorderColor, formatX, formatY]);\n};\n\nvar useSlices = function useSlices(_ref4) {\n  var enableSlices = _ref4.enableSlices,\n      points = _ref4.points,\n      width = _ref4.width,\n      height = _ref4.height;\n  return useMemo(function () {\n    if (enableSlices === false) return [];\n\n    if (enableSlices === 'x') {\n      var map = new Map();\n      points.forEach(function (point) {\n        if (point.data.x === null || point.data.y === null) return;\n        if (!map.has(point.x)) map.set(point.x, [point]);else map.get(point.x).push(point);\n      });\n      return Array.from(map.entries()).sort(function (a, b) {\n        return a[0] - b[0];\n      }).map(function (_ref5, i, slices) {\n        var _ref6 = _slicedToArray(_ref5, 2),\n            x = _ref6[0],\n            slicePoints = _ref6[1];\n\n        var prevSlice = slices[i - 1];\n        var nextSlice = slices[i + 1];\n        var x0;\n        if (!prevSlice) x0 = x;else x0 = x - (x - prevSlice[0]) / 2;\n        var sliceWidth;\n        if (!nextSlice) sliceWidth = width - x0;else sliceWidth = x - x0 + (nextSlice[0] - x) / 2;\n        return {\n          id: x,\n          x0: x0,\n          x: x,\n          y0: 0,\n          y: 0,\n          width: sliceWidth,\n          height: height,\n          points: slicePoints.reverse()\n        };\n      });\n    } else if (enableSlices === 'y') {\n      var _map = new Map();\n\n      points.forEach(function (point) {\n        if (point.data.x === null || point.data.y === null) return;\n        if (!_map.has(point.y)) _map.set(point.y, [point]);else _map.get(point.y).push(point);\n      });\n      return Array.from(_map.entries()).sort(function (a, b) {\n        return a[0] - b[0];\n      }).map(function (_ref7, i, slices) {\n        var _ref8 = _slicedToArray(_ref7, 2),\n            y = _ref8[0],\n            slicePoints = _ref8[1];\n\n        var prevSlice = slices[i - 1];\n        var nextSlice = slices[i + 1];\n        var y0;\n        if (!prevSlice) y0 = y;else y0 = y - (y - prevSlice[0]) / 2;\n        var sliceHeight;\n        if (!nextSlice) sliceHeight = height - y0;else sliceHeight = y - y0 + (nextSlice[0] - y) / 2;\n        return {\n          id: y,\n          x0: 0,\n          x: 0,\n          y0: y0,\n          y: y,\n          width: width,\n          height: sliceHeight,\n          points: slicePoints.reverse()\n        };\n      });\n    }\n  }, [enableSlices, points]);\n};\n\nvar useLine = function useLine(_ref9) {\n  var data = _ref9.data,\n      _ref9$xScale = _ref9.xScale,\n      xScaleSpec = _ref9$xScale === void 0 ? LineDefaultProps.xScale : _ref9$xScale,\n      xFormat = _ref9.xFormat,\n      _ref9$yScale = _ref9.yScale,\n      yScaleSpec = _ref9$yScale === void 0 ? LineDefaultProps.yScale : _ref9$yScale,\n      yFormat = _ref9.yFormat,\n      width = _ref9.width,\n      height = _ref9.height,\n      _ref9$colors = _ref9.colors,\n      colors = _ref9$colors === void 0 ? LineDefaultProps.colors : _ref9$colors,\n      _ref9$curve = _ref9.curve,\n      curve = _ref9$curve === void 0 ? LineDefaultProps.curve : _ref9$curve,\n      _ref9$areaBaselineVal = _ref9.areaBaselineValue,\n      areaBaselineValue = _ref9$areaBaselineVal === void 0 ? LineDefaultProps.areaBaselineValue : _ref9$areaBaselineVal,\n      _ref9$pointColor = _ref9.pointColor,\n      pointColor = _ref9$pointColor === void 0 ? LineDefaultProps.pointColor : _ref9$pointColor,\n      _ref9$pointBorderColo = _ref9.pointBorderColor,\n      pointBorderColor = _ref9$pointBorderColo === void 0 ? LineDefaultProps.pointBorderColor : _ref9$pointBorderColo,\n      _ref9$enableSlices = _ref9.enableSlices,\n      enableSlices = _ref9$enableSlices === void 0 ? LineDefaultProps.enableSlicesTooltip : _ref9$enableSlices;\n  var formatX = useValueFormatter(xFormat);\n  var formatY = useValueFormatter(yFormat);\n  var getColor = useOrdinalColorScale(colors, 'id');\n  var theme = useTheme();\n  var getPointColor = useInheritedColor(pointColor, theme);\n  var getPointBorderColor = useInheritedColor(pointBorderColor, theme);\n\n  var _useMemo = useMemo(function () {\n    return computeXYScalesForSeries(data, xScaleSpec, yScaleSpec, width, height);\n  }, [data, xScaleSpec, yScaleSpec, width, height]),\n      xScale = _useMemo.xScale,\n      yScale = _useMemo.yScale,\n      rawSeries = _useMemo.series;\n\n  var series = useMemo(function () {\n    return rawSeries.map(function (serie) {\n      return _objectSpread2(_objectSpread2({}, serie), {}, {\n        color: getColor(serie)\n      });\n    });\n  }, [rawSeries, getColor]);\n  var points = usePoints({\n    series: series,\n    getPointColor: getPointColor,\n    getPointBorderColor: getPointBorderColor,\n    formatX: formatX,\n    formatY: formatY\n  });\n  var slices = useSlices({\n    enableSlices: enableSlices,\n    points: points,\n    width: width,\n    height: height\n  });\n  var lineGenerator = useLineGenerator({\n    curve: curve\n  });\n  var areaGenerator = useAreaGenerator({\n    curve: curve,\n    yScale: yScale,\n    areaBaselineValue: areaBaselineValue\n  });\n  return {\n    lineGenerator: lineGenerator,\n    areaGenerator: areaGenerator,\n    getColor: getColor,\n    series: series,\n    xScale: xScale,\n    yScale: yScale,\n    slices: slices,\n    points: points\n  };\n};\n\nvar AreaPath = function AreaPath(_ref) {\n  var areaBlendMode = _ref.areaBlendMode,\n      areaOpacity = _ref.areaOpacity,\n      color = _ref.color,\n      fill = _ref.fill,\n      path = _ref.path;\n\n  var _useMotionConfig = useMotionConfig(),\n      animate = _useMotionConfig.animate,\n      springConfig = _useMotionConfig.config;\n\n  var animatedPath = useAnimatedPath(path);\n  var animatedProps = useSpring({\n    color: color,\n    config: springConfig,\n    immediate: !animate\n  });\n  return React.createElement(animated.path, {\n    d: animatedPath,\n    fill: fill ? fill : animatedProps.color,\n    fillOpacity: areaOpacity,\n    strokeWidth: 0,\n    style: {\n      mixBlendMode: areaBlendMode\n    }\n  });\n};\n\nvar Areas = function Areas(_ref2) {\n  var areaGenerator = _ref2.areaGenerator,\n      areaOpacity = _ref2.areaOpacity,\n      areaBlendMode = _ref2.areaBlendMode,\n      lines = _ref2.lines;\n  var computedLines = lines.slice(0).reverse();\n  return React.createElement(\"g\", null, computedLines.map(function (line) {\n    return React.createElement(AreaPath, Object.assign({\n      key: line.id,\n      path: areaGenerator(line.data.map(function (d) {\n        return d.position;\n      }))\n    }, _objectSpread2({\n      areaOpacity: areaOpacity,\n      areaBlendMode: areaBlendMode\n    }, line)));\n  }));\n};\n\nvar Areas$1 = memo(Areas);\n\nvar LinesItem = function LinesItem(_ref) {\n  var lineGenerator = _ref.lineGenerator,\n      points = _ref.points,\n      color = _ref.color,\n      thickness = _ref.thickness;\n  var path = useMemo(function () {\n    return lineGenerator(points);\n  }, [lineGenerator, points]);\n  var animatedPath = useAnimatedPath(path);\n  return React.createElement(animated.path, {\n    d: animatedPath,\n    fill: \"none\",\n    strokeWidth: thickness,\n    stroke: color\n  });\n};\n\nvar LinesItem$1 = memo(LinesItem);\n\nvar Lines = function Lines(_ref) {\n  var lines = _ref.lines,\n      lineGenerator = _ref.lineGenerator,\n      lineWidth = _ref.lineWidth;\n  return lines.reverse().map(function (_ref2) {\n    var id = _ref2.id,\n        data = _ref2.data,\n        color = _ref2.color;\n    return React.createElement(LinesItem$1, {\n      key: id,\n      id: id,\n      points: data.map(function (d) {\n        return d.position;\n      }),\n      lineGenerator: lineGenerator,\n      color: color,\n      thickness: lineWidth\n    });\n  });\n};\n\nvar Lines$1 = memo(Lines);\n\nvar SlicesItem = function SlicesItem(_ref) {\n  var slice = _ref.slice,\n      axis = _ref.axis,\n      debug = _ref.debug,\n      tooltip = _ref.tooltip,\n      isCurrent = _ref.isCurrent,\n      setCurrent = _ref.setCurrent;\n\n  var _useTooltip = useTooltip(),\n      showTooltipFromEvent = _useTooltip.showTooltipFromEvent,\n      hideTooltip = _useTooltip.hideTooltip;\n\n  var handleMouseEnter = useCallback(function (event) {\n    showTooltipFromEvent(React.createElement(tooltip, {\n      slice: slice,\n      axis: axis\n    }), event, 'right');\n    setCurrent(slice);\n  }, [showTooltipFromEvent, tooltip, slice]);\n  var handleMouseMove = useCallback(function (event) {\n    showTooltipFromEvent(React.createElement(tooltip, {\n      slice: slice,\n      axis: axis\n    }), event, 'right');\n  }, [showTooltipFromEvent, tooltip, slice]);\n  var handleMouseLeave = useCallback(function () {\n    hideTooltip();\n    setCurrent(null);\n  }, [hideTooltip]);\n  return React.createElement(\"rect\", {\n    x: slice.x0,\n    y: slice.y0,\n    width: slice.width,\n    height: slice.height,\n    stroke: \"red\",\n    strokeWidth: debug ? 1 : 0,\n    strokeOpacity: 0.75,\n    fill: \"red\",\n    fillOpacity: isCurrent && debug ? 0.35 : 0,\n    onMouseEnter: handleMouseEnter,\n    onMouseMove: handleMouseMove,\n    onMouseLeave: handleMouseLeave\n  });\n};\n\nvar SlicesItem$1 = memo(SlicesItem);\n\nvar Slices = function Slices(_ref) {\n  var slices = _ref.slices,\n      axis = _ref.axis,\n      debug = _ref.debug,\n      height = _ref.height,\n      tooltip = _ref.tooltip,\n      current = _ref.current,\n      setCurrent = _ref.setCurrent;\n  return slices.map(function (slice) {\n    return React.createElement(SlicesItem$1, {\n      key: slice.id,\n      slice: slice,\n      axis: axis,\n      debug: debug,\n      height: height,\n      tooltip: tooltip,\n      setCurrent: setCurrent,\n      isCurrent: current !== null && current.id === slice.id\n    });\n  });\n};\n\nvar Slices$1 = memo(Slices);\n\nvar Points = function Points(_ref) {\n  var points = _ref.points,\n      symbol = _ref.symbol,\n      size = _ref.size,\n      borderWidth = _ref.borderWidth,\n      enableLabel = _ref.enableLabel,\n      label = _ref.label,\n      labelYOffset = _ref.labelYOffset;\n  var theme = useTheme();\n  var getLabel = getLabelGenerator(label);\n  var mappedPoints = points.reverse().map(function (point) {\n    var mappedPoint = {\n      id: point.id,\n      x: point.x,\n      y: point.y,\n      datum: point.data,\n      fill: point.color,\n      stroke: point.borderColor,\n      label: enableLabel ? getLabel(point.data) : null\n    };\n    return mappedPoint;\n  });\n  return React.createElement(\"g\", null, mappedPoints.map(function (point) {\n    return React.createElement(DotsItem, {\n      key: point.id,\n      x: point.x,\n      y: point.y,\n      datum: point.datum,\n      symbol: symbol,\n      size: size,\n      color: point.fill,\n      borderWidth: borderWidth,\n      borderColor: point.stroke,\n      label: point.label,\n      labelYOffset: labelYOffset,\n      theme: theme\n    });\n  }));\n};\n\nvar Points$1 = memo(Points);\n\nvar Mesh = function Mesh(_ref) {\n  var points = _ref.points,\n      width = _ref.width,\n      height = _ref.height,\n      margin = _ref.margin,\n      setCurrent = _ref.setCurrent,\n      onMouseEnter = _ref.onMouseEnter,\n      onMouseMove = _ref.onMouseMove,\n      onMouseLeave = _ref.onMouseLeave,\n      onClick = _ref.onClick,\n      tooltip = _ref.tooltip,\n      debug = _ref.debug;\n\n  var _useTooltip = useTooltip(),\n      showTooltipAt = _useTooltip.showTooltipAt,\n      hideTooltip = _useTooltip.hideTooltip;\n\n  var handleMouseEnter = useCallback(function (point, event) {\n    showTooltipAt(React.createElement(tooltip, {\n      point: point\n    }), [point.x + margin.left, point.y + margin.top], 'top');\n    setCurrent(point);\n    onMouseEnter && onMouseEnter(point, event);\n  }, [setCurrent, showTooltipAt, tooltip, onMouseEnter, margin]);\n  var handleMouseMove = useCallback(function (point, event) {\n    showTooltipAt(React.createElement(tooltip, {\n      point: point\n    }), [point.x + margin.left, point.y + margin.top], 'top');\n    setCurrent(point);\n    onMouseMove && onMouseMove(point, event);\n  }, [setCurrent, showTooltipAt, tooltip, onMouseMove]);\n  var handleMouseLeave = useCallback(function (point, event) {\n    hideTooltip();\n    setCurrent(null);\n    onMouseLeave && onMouseLeave(point, event);\n  }, [hideTooltip, setCurrent, onMouseLeave]);\n  var handleClick = useCallback(function (point, event) {\n    onClick && onClick(point, event);\n  }, [onClick]);\n  return React.createElement(Mesh$2, {\n    nodes: points,\n    width: width,\n    height: height,\n    onMouseEnter: handleMouseEnter,\n    onMouseMove: handleMouseMove,\n    onMouseLeave: handleMouseLeave,\n    onClick: handleClick,\n    debug: debug\n  });\n};\n\nvar Mesh$1 = memo(Mesh);\n\nvar Line = function Line(props) {\n  var data = props.data,\n      xScaleSpec = props.xScale,\n      xFormat = props.xFormat,\n      yScaleSpec = props.yScale,\n      yFormat = props.yFormat,\n      layers = props.layers,\n      curve = props.curve,\n      areaBaselineValue = props.areaBaselineValue,\n      colors = props.colors,\n      partialMargin = props.margin,\n      width = props.width,\n      height = props.height,\n      axisTop = props.axisTop,\n      axisRight = props.axisRight,\n      axisBottom = props.axisBottom,\n      axisLeft = props.axisLeft,\n      enableGridX = props.enableGridX,\n      enableGridY = props.enableGridY,\n      gridXValues = props.gridXValues,\n      gridYValues = props.gridYValues,\n      lineWidth = props.lineWidth,\n      enableArea = props.enableArea,\n      areaOpacity = props.areaOpacity,\n      areaBlendMode = props.areaBlendMode,\n      enablePoints = props.enablePoints,\n      pointSymbol = props.pointSymbol,\n      pointSize = props.pointSize,\n      pointColor = props.pointColor,\n      pointBorderWidth = props.pointBorderWidth,\n      pointBorderColor = props.pointBorderColor,\n      enablePointLabel = props.enablePointLabel,\n      pointLabel = props.pointLabel,\n      pointLabelYOffset = props.pointLabelYOffset,\n      defs = props.defs,\n      fill = props.fill,\n      markers = props.markers,\n      legends = props.legends,\n      isInteractive = props.isInteractive,\n      useMesh = props.useMesh,\n      debugMesh = props.debugMesh,\n      onMouseEnter = props.onMouseEnter,\n      onMouseMove = props.onMouseMove,\n      onMouseLeave = props.onMouseLeave,\n      onClick = props.onClick,\n      tooltip = props.tooltip,\n      enableSlices = props.enableSlices,\n      debugSlices = props.debugSlices,\n      sliceTooltip = props.sliceTooltip,\n      enableCrosshair = props.enableCrosshair,\n      crosshairType = props.crosshairType,\n      role = props.role;\n\n  var _useDimensions = useDimensions(width, height, partialMargin),\n      margin = _useDimensions.margin,\n      innerWidth = _useDimensions.innerWidth,\n      innerHeight = _useDimensions.innerHeight,\n      outerWidth = _useDimensions.outerWidth,\n      outerHeight = _useDimensions.outerHeight;\n\n  var _useLine = useLine({\n    data: data,\n    xScale: xScaleSpec,\n    xFormat: xFormat,\n    yScale: yScaleSpec,\n    yFormat: yFormat,\n    width: innerWidth,\n    height: innerHeight,\n    colors: colors,\n    curve: curve,\n    areaBaselineValue: areaBaselineValue,\n    pointColor: pointColor,\n    pointBorderColor: pointBorderColor,\n    enableSlices: enableSlices\n  }),\n      lineGenerator = _useLine.lineGenerator,\n      areaGenerator = _useLine.areaGenerator,\n      series = _useLine.series,\n      xScale = _useLine.xScale,\n      yScale = _useLine.yScale,\n      slices = _useLine.slices,\n      points = _useLine.points;\n\n  var theme = useTheme();\n  var getPointColor = useInheritedColor(pointColor, theme);\n  var getPointBorderColor = useInheritedColor(pointBorderColor, theme);\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentPoint = _useState2[0],\n      setCurrentPoint = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      currentSlice = _useState4[0],\n      setCurrentSlice = _useState4[1];\n\n  var legendData = useMemo(function () {\n    return series.map(function (line) {\n      return {\n        id: line.id,\n        label: line.id,\n        color: line.color\n      };\n    }).reverse();\n  }, [series]);\n  var layerById = {\n    grid: React.createElement(Grid, {\n      key: \"grid\",\n      theme: theme,\n      width: innerWidth,\n      height: innerHeight,\n      xScale: enableGridX ? xScale : null,\n      yScale: enableGridY ? yScale : null,\n      xValues: gridXValues,\n      yValues: gridYValues\n    }),\n    markers: React.createElement(CartesianMarkers, {\n      key: \"markers\",\n      markers: markers,\n      width: innerWidth,\n      height: innerHeight,\n      xScale: xScale,\n      yScale: yScale,\n      theme: theme\n    }),\n    axes: React.createElement(Axes, {\n      key: \"axes\",\n      xScale: xScale,\n      yScale: yScale,\n      width: innerWidth,\n      height: innerHeight,\n      theme: theme,\n      top: axisTop,\n      right: axisRight,\n      bottom: axisBottom,\n      left: axisLeft\n    }),\n    areas: null,\n    lines: React.createElement(Lines$1, {\n      key: \"lines\",\n      lines: series,\n      lineGenerator: lineGenerator,\n      lineWidth: lineWidth\n    }),\n    slices: null,\n    points: null,\n    crosshair: null,\n    mesh: null,\n    legends: legends.map(function (legend, i) {\n      return React.createElement(BoxLegendSvg, Object.assign({\n        key: \"legend.\".concat(i)\n      }, legend, {\n        containerWidth: innerWidth,\n        containerHeight: innerHeight,\n        data: legend.data || legendData,\n        theme: theme\n      }));\n    })\n  };\n  var boundDefs = bindDefs(defs, series, fill);\n\n  if (enableArea) {\n    layerById.areas = React.createElement(Areas$1, {\n      key: \"areas\",\n      areaGenerator: areaGenerator,\n      areaOpacity: areaOpacity,\n      areaBlendMode: areaBlendMode,\n      lines: series\n    });\n  }\n\n  if (isInteractive && enableSlices !== false) {\n    layerById.slices = React.createElement(Slices$1, {\n      key: \"slices\",\n      slices: slices,\n      axis: enableSlices,\n      debug: debugSlices,\n      height: innerHeight,\n      tooltip: sliceTooltip,\n      current: currentSlice,\n      setCurrent: setCurrentSlice\n    });\n  }\n\n  if (enablePoints) {\n    layerById.points = React.createElement(Points$1, {\n      key: \"points\",\n      points: points,\n      symbol: pointSymbol,\n      size: pointSize,\n      color: getPointColor,\n      borderWidth: pointBorderWidth,\n      borderColor: getPointBorderColor,\n      enableLabel: enablePointLabel,\n      label: pointLabel,\n      labelYOffset: pointLabelYOffset\n    });\n  }\n\n  if (isInteractive && enableCrosshair) {\n    if (currentPoint !== null) {\n      layerById.crosshair = React.createElement(Crosshair, {\n        key: \"crosshair\",\n        width: innerWidth,\n        height: innerHeight,\n        x: currentPoint.x,\n        y: currentPoint.y,\n        type: crosshairType\n      });\n    }\n\n    if (currentSlice !== null) {\n      layerById.crosshair = React.createElement(Crosshair, {\n        key: \"crosshair\",\n        width: innerWidth,\n        height: innerHeight,\n        x: currentSlice.x,\n        y: currentSlice.y,\n        type: enableSlices\n      });\n    }\n  }\n\n  if (isInteractive && useMesh && enableSlices === false) {\n    layerById.mesh = React.createElement(Mesh$1, {\n      key: \"mesh\",\n      points: points,\n      width: innerWidth,\n      height: innerHeight,\n      margin: margin,\n      current: currentPoint,\n      setCurrent: setCurrentPoint,\n      onMouseEnter: onMouseEnter,\n      onMouseMove: onMouseMove,\n      onMouseLeave: onMouseLeave,\n      onClick: onClick,\n      tooltip: tooltip,\n      debug: debugMesh\n    });\n  }\n\n  return React.createElement(SvgWrapper, {\n    defs: boundDefs,\n    width: outerWidth,\n    height: outerHeight,\n    margin: margin,\n    role: role\n  }, layers.map(function (layer, i) {\n    if (typeof layer === 'function') {\n      return React.createElement(Fragment, {\n        key: i\n      }, layer(_objectSpread2(_objectSpread2({}, props), {}, {\n        innerWidth: innerWidth,\n        innerHeight: innerHeight,\n        series: series,\n        slices: slices,\n        points: points,\n        xScale: xScale,\n        yScale: yScale,\n        lineGenerator: lineGenerator,\n        areaGenerator: areaGenerator,\n        currentPoint: currentPoint,\n        setCurrentPoint: setCurrentPoint,\n        currentSlice: currentSlice,\n        setCurrentSlice: setCurrentSlice\n      })));\n    }\n\n    return layerById[layer];\n  }));\n};\n\nLine.defaultProps = LineDefaultProps;\nvar Line$1 = withContainer(Line);\n\nvar ResponsiveLine = function ResponsiveLine(props) {\n  return React.createElement(ResponsiveWrapper, null, function (_ref) {\n    var width = _ref.width,\n        height = _ref.height;\n    return React.createElement(Line$1, Object.assign({\n      width: width,\n      height: height\n    }, props));\n  });\n};\n\nvar LineCanvas = function LineCanvas(_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      partialMargin = _ref.margin,\n      pixelRatio = _ref.pixelRatio,\n      data = _ref.data,\n      xScaleSpec = _ref.xScale,\n      xFormat = _ref.xFormat,\n      yScaleSpec = _ref.yScale,\n      yFormat = _ref.yFormat,\n      curve = _ref.curve,\n      layers = _ref.layers,\n      colors = _ref.colors,\n      lineWidth = _ref.lineWidth,\n      enableArea = _ref.enableArea,\n      areaBaselineValue = _ref.areaBaselineValue,\n      areaOpacity = _ref.areaOpacity,\n      enablePoints = _ref.enablePoints,\n      pointSize = _ref.pointSize,\n      pointColor = _ref.pointColor,\n      pointBorderWidth = _ref.pointBorderWidth,\n      pointBorderColor = _ref.pointBorderColor,\n      enableGridX = _ref.enableGridX,\n      gridXValues = _ref.gridXValues,\n      enableGridY = _ref.enableGridY,\n      gridYValues = _ref.gridYValues,\n      axisTop = _ref.axisTop,\n      axisRight = _ref.axisRight,\n      axisBottom = _ref.axisBottom,\n      axisLeft = _ref.axisLeft,\n      legends = _ref.legends,\n      isInteractive = _ref.isInteractive,\n      debugMesh = _ref.debugMesh,\n      onMouseLeave = _ref.onMouseLeave,\n      onClick = _ref.onClick,\n      tooltip = _ref.tooltip,\n      canvasRef = _ref.canvasRef;\n  var canvasEl = useRef(null);\n\n  var _useDimensions = useDimensions(width, height, partialMargin),\n      margin = _useDimensions.margin,\n      innerWidth = _useDimensions.innerWidth,\n      innerHeight = _useDimensions.innerHeight,\n      outerWidth = _useDimensions.outerWidth,\n      outerHeight = _useDimensions.outerHeight;\n\n  var theme = useTheme();\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentPoint = _useState2[0],\n      setCurrentPoint = _useState2[1];\n\n  var _useLine = useLine({\n    data: data,\n    xScale: xScaleSpec,\n    xFormat: xFormat,\n    yScale: yScaleSpec,\n    yFormat: yFormat,\n    width: innerWidth,\n    height: innerHeight,\n    colors: colors,\n    curve: curve,\n    areaBaselineValue: areaBaselineValue,\n    pointColor: pointColor,\n    pointBorderColor: pointBorderColor\n  }),\n      lineGenerator = _useLine.lineGenerator,\n      areaGenerator = _useLine.areaGenerator,\n      series = _useLine.series,\n      xScale = _useLine.xScale,\n      yScale = _useLine.yScale,\n      points = _useLine.points;\n\n  var _useVoronoiMesh = useVoronoiMesh({\n    points: points,\n    width: innerWidth,\n    height: innerHeight,\n    debug: debugMesh\n  }),\n      delaunay = _useVoronoiMesh.delaunay,\n      voronoi = _useVoronoiMesh.voronoi;\n\n  useEffect(function () {\n    if (canvasRef) {\n      canvasRef.current = canvasEl.current;\n    }\n\n    canvasEl.current.width = outerWidth * pixelRatio;\n    canvasEl.current.height = outerHeight * pixelRatio;\n    var ctx = canvasEl.current.getContext('2d');\n    ctx.scale(pixelRatio, pixelRatio);\n    ctx.fillStyle = theme.background;\n    ctx.fillRect(0, 0, outerWidth, outerHeight);\n    ctx.translate(margin.left, margin.top);\n    layers.forEach(function (layer) {\n      if (typeof layer === 'function') {\n        layer({\n          ctx: ctx,\n          innerWidth: innerWidth,\n          innerHeight: innerHeight,\n          series: series,\n          points: points,\n          xScale: xScale,\n          yScale: yScale,\n          lineWidth: lineWidth,\n          lineGenerator: lineGenerator,\n          areaGenerator: areaGenerator,\n          currentPoint: currentPoint,\n          setCurrentPoint: setCurrentPoint\n        });\n      }\n\n      if (layer === 'grid' && theme.grid.line.strokeWidth > 0) {\n        ctx.lineWidth = theme.grid.line.strokeWidth;\n        ctx.strokeStyle = theme.grid.line.stroke;\n        enableGridX && renderGridLinesToCanvas(ctx, {\n          width: innerWidth,\n          height: innerHeight,\n          scale: xScale,\n          axis: 'x',\n          values: gridXValues\n        });\n        enableGridY && renderGridLinesToCanvas(ctx, {\n          width: innerWidth,\n          height: innerHeight,\n          scale: yScale,\n          axis: 'y',\n          values: gridYValues\n        });\n      }\n\n      if (layer === 'axes') {\n        renderAxesToCanvas(ctx, {\n          xScale: xScale,\n          yScale: yScale,\n          width: innerWidth,\n          height: innerHeight,\n          top: axisTop,\n          right: axisRight,\n          bottom: axisBottom,\n          left: axisLeft,\n          theme: theme\n        });\n      }\n\n      if (layer === 'areas' && enableArea === true) {\n        ctx.save();\n        ctx.globalAlpha = areaOpacity;\n        areaGenerator.context(ctx);\n        series.forEach(function (serie) {\n          ctx.fillStyle = serie.color;\n          ctx.beginPath();\n          areaGenerator(serie.data.map(function (d) {\n            return d.position;\n          }));\n          ctx.fill();\n        });\n        ctx.restore();\n      }\n\n      if (layer === 'lines') {\n        lineGenerator.context(ctx);\n        series.forEach(function (serie) {\n          ctx.strokeStyle = serie.color;\n          ctx.lineWidth = lineWidth;\n          ctx.beginPath();\n          lineGenerator(serie.data.map(function (d) {\n            return d.position;\n          }));\n          ctx.stroke();\n        });\n      }\n\n      if (layer === 'points' && enablePoints === true && pointSize > 0) {\n        points.forEach(function (point) {\n          ctx.fillStyle = point.color;\n          ctx.beginPath();\n          ctx.arc(point.x, point.y, pointSize / 2, 0, 2 * Math.PI);\n          ctx.fill();\n\n          if (pointBorderWidth > 0) {\n            ctx.strokeStyle = point.borderColor;\n            ctx.lineWidth = pointBorderWidth;\n            ctx.stroke();\n          }\n        });\n      }\n\n      if (layer === 'mesh' && debugMesh === true) {\n        renderVoronoiToCanvas(ctx, voronoi);\n\n        if (currentPoint) {\n          renderVoronoiCellToCanvas(ctx, voronoi, currentPoint.index);\n        }\n      }\n\n      if (layer === 'legends') {\n        var legendData = series.map(function (serie) {\n          return {\n            id: serie.id,\n            label: serie.id,\n            color: serie.color\n          };\n        }).reverse();\n        legends.forEach(function (legend) {\n          renderLegendToCanvas(ctx, _objectSpread2(_objectSpread2({}, legend), {}, {\n            data: legend.data || legendData,\n            containerWidth: innerWidth,\n            containerHeight: innerHeight,\n            theme: theme\n          }));\n        });\n      }\n    });\n  }, [canvasEl, outerWidth, outerHeight, layers, theme, lineGenerator, series, xScale, yScale, enableGridX, gridXValues, enableGridY, gridYValues, axisTop, axisRight, axisBottom, axisLeft, legends, points, enablePoints, pointSize, currentPoint]);\n  var getPointFromMouseEvent = useCallback(function (event) {\n    var _getRelativeCursor = getRelativeCursor(canvasEl.current, event),\n        _getRelativeCursor2 = _slicedToArray(_getRelativeCursor, 2),\n        x = _getRelativeCursor2[0],\n        y = _getRelativeCursor2[1];\n\n    if (!isCursorInRect(margin.left, margin.top, innerWidth, innerHeight, x, y)) return null;\n    var pointIndex = delaunay.find(x - margin.left, y - margin.top);\n    return points[pointIndex];\n  }, [canvasEl, margin, innerWidth, innerHeight, delaunay]);\n\n  var _useTooltip = useTooltip(),\n      showTooltipFromEvent = _useTooltip.showTooltipFromEvent,\n      hideTooltip = _useTooltip.hideTooltip;\n\n  var handleMouseHover = useCallback(function (event) {\n    var point = getPointFromMouseEvent(event);\n    setCurrentPoint(point);\n\n    if (point) {\n      showTooltipFromEvent(React.createElement(tooltip, {\n        point: point\n      }), event);\n    } else {\n      hideTooltip();\n    }\n  }, [getPointFromMouseEvent, setCurrentPoint, showTooltipFromEvent, hideTooltip, tooltip]);\n  var handleMouseLeave = useCallback(function (event) {\n    hideTooltip();\n    setCurrentPoint(null);\n    currentPoint && onMouseLeave && onMouseLeave(currentPoint, event);\n  }, [hideTooltip, setCurrentPoint, onMouseLeave]);\n  var handleClick = useCallback(function (event) {\n    if (onClick) {\n      var point = getPointFromMouseEvent(event);\n      point && onClick(point, event);\n    }\n  }, [getPointFromMouseEvent, onClick]);\n  return React.createElement(\"canvas\", {\n    ref: canvasEl,\n    width: outerWidth * pixelRatio,\n    height: outerHeight * pixelRatio,\n    style: {\n      width: outerWidth,\n      height: outerHeight,\n      cursor: isInteractive ? 'auto' : 'normal'\n    },\n    onMouseEnter: isInteractive ? handleMouseHover : undefined,\n    onMouseMove: isInteractive ? handleMouseHover : undefined,\n    onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n    onClick: isInteractive ? handleClick : undefined\n  });\n};\n\nLineCanvas.defaultProps = LineCanvasDefaultProps;\nvar LineCanvasWithContainer = withContainer(LineCanvas);\nvar LineCanvas$1 = forwardRef(function (props, ref) {\n  return React.createElement(LineCanvasWithContainer, Object.assign({}, props, {\n    canvasRef: ref\n  }));\n});\n\nvar ResponsiveLineCanvas = function ResponsiveLineCanvas(props, ref) {\n  return React.createElement(ResponsiveWrapper, null, function (_ref) {\n    var width = _ref.width,\n        height = _ref.height;\n    return React.createElement(LineCanvas$1, Object.assign({\n      width: width,\n      height: height\n    }, props, {\n      ref: ref\n    }));\n  });\n};\n\nvar ResponsiveLineCanvas$1 = forwardRef(ResponsiveLineCanvas);\nexport { Line$1 as Line, LineCanvas$1 as LineCanvas, LineCanvasDefaultProps, LineCanvasPropTypes, LineDefaultProps, LinePropTypes, ResponsiveLine, ResponsiveLineCanvas$1 as ResponsiveLineCanvas, useAreaGenerator, useLine, useLineGenerator, useSlices };","map":{"version":3,"sources":["../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../../../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../src/PointTooltip.js","../src/SliceTooltip.js","../src/props.js","../src/hooks.js","../src/Areas.js","../src/LinesItem.js","../src/Lines.js","../src/SlicesItem.js","../src/Slices.js","../src/Points.js","../src/Mesh.js","../src/Line.js","../src/ResponsiveLine.js","../src/LineCanvas.js","../src/ResponsiveLineCanvas.js"],"names":["defineProperty","arrayLikeToArray","arrayWithHoles","iterableToArrayLimit","unsupportedIterableToArray","nonIterableRest","arrayWithoutHoles","iterableToArray","nonIterableSpread","LinePointTooltip","point","serieColor","memo","Chip","color","display","width","height","background","SliceTooltip","slice","axis","otherAxis","commonPropTypes","data","id","PropTypes","x","y","isRequired","xScale","scalePropType","xFormat","yScale","yFormat","layers","curve","lineCurvePropType","axisTop","axisRight","axisBottom","axisLeft","enableGridX","enableGridY","gridXValues","gridYValues","enablePoints","pointSymbol","pointSize","pointColor","pointBorderWidth","pointBorderColor","enablePointLabel","pointLabel","markers","value","style","object","colors","ordinalColorsPropType","enableArea","areaOpacity","areaBlendMode","blendModePropType","areaBaselineValue","lineWidth","legends","isInteractive","debugMesh","tooltip","enableSlices","debugSlices","sliceTooltip","enableCrosshair","crosshairType","LinePropTypes","role","useMesh","LineCanvasPropTypes","pixelRatio","commonDefaultProps","type","min","max","from","theme","scheme","LineDefaultProps","animate","motionConfig","defs","fill","LineCanvasDefaultProps","global","useLineGenerator","useMemo","d","curveFromProp","useAreaGenerator","usePoints","series","getPointColor","getPointBorderColor","formatX","formatY","datum","serie","index","acc","serieId","xFormatted","yFormatted","useSlices","points","map","a","b","slicePoints","prevSlice","slices","i","nextSlice","x0","sliceWidth","y0","sliceHeight","useLine","xScaleSpec","yScaleSpec","enableSlicesTooltip","useValueFormatter","getColor","useOrdinalColorScale","useTheme","useInheritedColor","rawSeries","computeXYScalesForSeries","lineGenerator","areaGenerator","AreaPath","path","springConfig","useMotionConfig","animatedPath","useAnimatedPath","animatedProps","useSpring","config","immediate","mixBlendMode","Areas","lines","computedLines","line","LinesItem","thickness","Lines","SlicesItem","debug","isCurrent","setCurrent","showTooltipFromEvent","hideTooltip","useTooltip","handleMouseEnter","useCallback","handleMouseMove","handleMouseLeave","Slices","current","Points","symbol","size","borderWidth","enableLabel","label","labelYOffset","getLabel","getLabelGenerator","mappedPoints","mappedPoint","stroke","Mesh","margin","onMouseEnter","onMouseMove","onMouseLeave","onClick","showTooltipAt","handleClick","Line","partialMargin","pointLabelYOffset","props","innerWidth","innerHeight","outerWidth","outerHeight","useDimensions","currentPoint","setCurrentPoint","useState","currentSlice","setCurrentSlice","legendData","layerById","grid","axes","areas","crosshair","mesh","legend","boundDefs","bindDefs","layer","withContainer","ResponsiveLine","LineCanvas","canvasRef","canvasEl","useRef","delaunay","voronoi","useVoronoiMesh","useEffect","ctx","renderGridLinesToCanvas","scale","values","renderAxesToCanvas","top","right","bottom","left","Math","renderVoronoiToCanvas","renderVoronoiCellToCanvas","renderLegendToCanvas","containerWidth","containerHeight","getPointFromMouseEvent","getRelativeCursor","isCursorInRect","pointIndex","handleMouseHover","cursor","undefined","LineCanvasWithContainer","forwardRef","ref","ResponsiveLineCanvas"],"mappings":"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","sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nconst LinePointTooltip = ({ point }) => {\n    return (\n        <BasicTooltip\n            id={\n                <span>\n                    x: <strong>{point.data.xFormatted}</strong>, y:{' '}\n                    <strong>{point.data.yFormatted}</strong>\n                </span>\n            }\n            enableChip={true}\n            color={point.serieColor}\n        />\n    )\n}\n\nLinePointTooltip.propTypes = {\n    point: PropTypes.object.isRequired,\n}\n\nexport default memo(LinePointTooltip)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { TableTooltip } from '@nivo/tooltip'\n\nconst Chip = ({ color }) => (\n    <span style={{ display: 'block', width: '12px', height: '12px', background: color }} />\n)\n\nChip.propTypes = {\n    color: PropTypes.string.isRequired,\n}\n\nconst SliceTooltip = ({ slice, axis }) => {\n    const otherAxis = axis === 'x' ? 'y' : 'x'\n\n    return (\n        <TableTooltip\n            rows={slice.points.map(point => [\n                <Chip key=\"chip\" color={point.serieColor} />,\n                point.serieId,\n                <strong key=\"value\">{point.data[`${otherAxis}Formatted`]}</strong>,\n            ])}\n        />\n    )\n}\n\nSliceTooltip.propTypes = {\n    slice: PropTypes.object.isRequired,\n    axis: PropTypes.oneOf(['x', 'y']).isRequired,\n}\n\nexport default memo(SliceTooltip)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport PropTypes from 'prop-types'\nimport { lineCurvePropType, blendModePropType, motionPropTypes, defsPropTypes } from '@nivo/core'\nimport { ordinalColorsPropType } from '@nivo/colors'\nimport { axisPropType } from '@nivo/axes'\nimport { scalePropType } from '@nivo/scales'\nimport { LegendPropShape } from '@nivo/legends'\nimport PointTooltip from './PointTooltip'\nimport SliceTooltip from './SliceTooltip'\n\nconst commonPropTypes = {\n    data: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n            data: PropTypes.arrayOf(\n                PropTypes.shape({\n                    x: PropTypes.oneOfType([\n                        PropTypes.number,\n                        PropTypes.string,\n                        PropTypes.instanceOf(Date),\n                    ]),\n                    y: PropTypes.oneOfType([\n                        PropTypes.number,\n                        PropTypes.string,\n                        PropTypes.instanceOf(Date),\n                    ]),\n                })\n            ).isRequired,\n        })\n    ).isRequired,\n\n    xScale: scalePropType.isRequired,\n    xFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    yScale: scalePropType.isRequired,\n    yFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n\n    layers: PropTypes.arrayOf(\n        PropTypes.oneOfType([\n            PropTypes.oneOf([\n                'grid',\n                'markers',\n                'axes',\n                'areas',\n                'crosshair',\n                'lines',\n                'slices',\n                'points',\n                'mesh',\n                'legends',\n            ]),\n            PropTypes.func,\n        ])\n    ).isRequired,\n\n    curve: lineCurvePropType.isRequired,\n\n    axisTop: axisPropType,\n    axisRight: axisPropType,\n    axisBottom: axisPropType,\n    axisLeft: axisPropType,\n\n    enableGridX: PropTypes.bool.isRequired,\n    enableGridY: PropTypes.bool.isRequired,\n    gridXValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n    ]),\n    gridYValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n    ]),\n\n    enablePoints: PropTypes.bool.isRequired,\n    pointSymbol: PropTypes.func,\n    pointSize: PropTypes.number.isRequired,\n    pointColor: PropTypes.any.isRequired,\n    pointBorderWidth: PropTypes.number.isRequired,\n    pointBorderColor: PropTypes.any.isRequired,\n    enablePointLabel: PropTypes.bool.isRequired,\n    pointLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n\n    markers: PropTypes.arrayOf(\n        PropTypes.shape({\n            axis: PropTypes.oneOf(['x', 'y']).isRequired,\n            value: PropTypes.oneOfType([\n                PropTypes.number,\n                PropTypes.string,\n                PropTypes.instanceOf(Date),\n            ]).isRequired,\n            style: PropTypes.object,\n        })\n    ),\n\n    colors: ordinalColorsPropType.isRequired,\n\n    enableArea: PropTypes.bool.isRequired,\n    areaOpacity: PropTypes.number.isRequired,\n    areaBlendMode: blendModePropType.isRequired,\n    areaBaselineValue: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string,\n        PropTypes.instanceOf(Date),\n    ]).isRequired,\n    lineWidth: PropTypes.number.isRequired,\n\n    legends: PropTypes.arrayOf(PropTypes.shape(LegendPropShape)).isRequired,\n\n    isInteractive: PropTypes.bool.isRequired,\n    debugMesh: PropTypes.bool.isRequired,\n\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n\n    enableSlices: PropTypes.oneOf(['x', 'y', false]).isRequired,\n    debugSlices: PropTypes.bool.isRequired,\n    sliceTooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n\n    enableCrosshair: PropTypes.bool.isRequired,\n    crosshairType: PropTypes.string.isRequired,\n}\n\nexport const LinePropTypes = {\n    ...commonPropTypes,\n    enablePointLabel: PropTypes.bool.isRequired,\n    role: PropTypes.string.isRequired,\n    useMesh: PropTypes.bool.isRequired,\n    ...motionPropTypes,\n    ...defsPropTypes,\n}\n\nexport const LineCanvasPropTypes = {\n    pixelRatio: PropTypes.number.isRequired,\n    ...commonPropTypes,\n}\n\nconst commonDefaultProps = {\n    curve: 'linear',\n\n    xScale: {\n        type: 'point',\n    },\n    yScale: {\n        type: 'linear',\n        min: 0,\n        max: 'auto',\n    },\n\n    layers: [\n        'grid',\n        'markers',\n        'axes',\n        'areas',\n        'crosshair',\n        'lines',\n        'points',\n        'slices',\n        'mesh',\n        'legends',\n    ],\n    axisBottom: {},\n    axisLeft: {},\n    enableGridX: true,\n    enableGridY: true,\n\n    enablePoints: true,\n    pointSize: 6,\n    pointColor: { from: 'color' },\n    pointBorderWidth: 0,\n    pointBorderColor: { theme: 'background' },\n    enablePointLabel: false,\n    pointLabel: 'yFormatted',\n\n    colors: { scheme: 'nivo' },\n    enableArea: false,\n    areaBaselineValue: 0,\n    areaOpacity: 0.2,\n    areaBlendMode: 'normal',\n    lineWidth: 2,\n\n    legends: [],\n\n    isInteractive: true,\n    tooltip: PointTooltip,\n    enableSlices: false,\n    debugSlices: false,\n    sliceTooltip: SliceTooltip,\n    debugMesh: false,\n    enableCrosshair: true,\n    crosshairType: 'bottom-left',\n}\n\nexport const LineDefaultProps = {\n    ...commonDefaultProps,\n    enablePointLabel: false,\n    useMesh: false,\n    animate: true,\n    motionConfig: 'gentle',\n    defs: [],\n    fill: [],\n    role: 'img',\n}\n\nexport const LineCanvasDefaultProps = {\n    ...commonDefaultProps,\n    pixelRatio:\n        global.window && global.window.devicePixelRatio ? global.window.devicePixelRatio : 1,\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { useMemo } from 'react'\nimport { area, line } from 'd3-shape'\nimport { curveFromProp, useTheme, useValueFormatter } from '@nivo/core'\nimport { useOrdinalColorScale, useInheritedColor } from '@nivo/colors'\nimport { computeXYScalesForSeries } from '@nivo/scales'\nimport { LineDefaultProps } from './props'\n\nexport const useLineGenerator = ({ curve }) => {\n    return useMemo(\n        () =>\n            line()\n                .defined(d => d.x !== null && d.y !== null)\n                .x(d => d.x)\n                .y(d => d.y)\n                .curve(curveFromProp(curve)),\n        [curve]\n    )\n}\n\nexport const useAreaGenerator = ({ curve, yScale, areaBaselineValue }) => {\n    return useMemo(() => {\n        return area()\n            .defined(d => d.x !== null && d.y !== null)\n            .x(d => d.x)\n            .y1(d => d.y)\n            .curve(curveFromProp(curve))\n            .y0(yScale(areaBaselineValue))\n    }, [curve, yScale, areaBaselineValue])\n}\n\nconst usePoints = ({ series, getPointColor, getPointBorderColor, formatX, formatY }) => {\n    return useMemo(() => {\n        return series.reduce((acc, serie) => {\n            return [\n                ...acc,\n                ...serie.data\n                    .filter(datum => datum.position.x !== null && datum.position.y !== null)\n                    .map((datum, i) => {\n                        const point = {\n                            id: `${serie.id}.${i}`,\n                            index: acc.length + i,\n                            serieId: serie.id,\n                            serieColor: serie.color,\n                            x: datum.position.x,\n                            y: datum.position.y,\n                        }\n                        point.color = getPointColor(serie)\n                        point.borderColor = getPointBorderColor(point)\n                        point.data = {\n                            ...datum.data,\n                            xFormatted: formatX(datum.data.x),\n                            yFormatted: formatY(datum.data.y),\n                        }\n\n                        return point\n                    }),\n            ]\n        }, [])\n    }, [series, getPointColor, getPointBorderColor, formatX, formatY])\n}\n\nexport const useSlices = ({ enableSlices, points, width, height }) => {\n    return useMemo(() => {\n        if (enableSlices === false) return []\n\n        if (enableSlices === 'x') {\n            const map = new Map()\n            points.forEach(point => {\n                if (point.data.x === null || point.data.y === null) return\n                if (!map.has(point.x)) map.set(point.x, [point])\n                else map.get(point.x).push(point)\n            })\n            return Array.from(map.entries())\n                .sort((a, b) => a[0] - b[0])\n                .map(([x, slicePoints], i, slices) => {\n                    const prevSlice = slices[i - 1]\n                    const nextSlice = slices[i + 1]\n\n                    let x0\n                    if (!prevSlice) x0 = x\n                    else x0 = x - (x - prevSlice[0]) / 2\n\n                    let sliceWidth\n                    if (!nextSlice) sliceWidth = width - x0\n                    else sliceWidth = x - x0 + (nextSlice[0] - x) / 2\n\n                    return {\n                        id: x,\n                        x0,\n                        x,\n                        y0: 0,\n                        y: 0,\n                        width: sliceWidth,\n                        height,\n                        points: slicePoints.reverse(),\n                    }\n                })\n        } else if (enableSlices === 'y') {\n            const map = new Map()\n            points.forEach(point => {\n                if (point.data.x === null || point.data.y === null) return\n                if (!map.has(point.y)) map.set(point.y, [point])\n                else map.get(point.y).push(point)\n            })\n            return Array.from(map.entries())\n                .sort((a, b) => a[0] - b[0])\n                .map(([y, slicePoints], i, slices) => {\n                    const prevSlice = slices[i - 1]\n                    const nextSlice = slices[i + 1]\n\n                    let y0\n                    if (!prevSlice) y0 = y\n                    else y0 = y - (y - prevSlice[0]) / 2\n\n                    let sliceHeight\n                    if (!nextSlice) sliceHeight = height - y0\n                    else sliceHeight = y - y0 + (nextSlice[0] - y) / 2\n\n                    return {\n                        id: y,\n                        x0: 0,\n                        x: 0,\n                        y0,\n                        y,\n                        width,\n                        height: sliceHeight,\n                        points: slicePoints.reverse(),\n                    }\n                })\n        }\n    }, [enableSlices, points])\n}\n\nexport const useLine = ({\n    data,\n    xScale: xScaleSpec = LineDefaultProps.xScale,\n    xFormat,\n    yScale: yScaleSpec = LineDefaultProps.yScale,\n    yFormat,\n    width,\n    height,\n    colors = LineDefaultProps.colors,\n    curve = LineDefaultProps.curve,\n    areaBaselineValue = LineDefaultProps.areaBaselineValue,\n    pointColor = LineDefaultProps.pointColor,\n    pointBorderColor = LineDefaultProps.pointBorderColor,\n    enableSlices = LineDefaultProps.enableSlicesTooltip,\n}) => {\n    const formatX = useValueFormatter(xFormat)\n    const formatY = useValueFormatter(yFormat)\n    const getColor = useOrdinalColorScale(colors, 'id')\n    const theme = useTheme()\n    const getPointColor = useInheritedColor(pointColor, theme)\n    const getPointBorderColor = useInheritedColor(pointBorderColor, theme)\n\n    const { xScale, yScale, series: rawSeries } = useMemo(\n        () => computeXYScalesForSeries(data, xScaleSpec, yScaleSpec, width, height),\n        [data, xScaleSpec, yScaleSpec, width, height]\n    )\n\n    const series = useMemo(\n        () =>\n            rawSeries.map(serie => ({\n                ...serie,\n                color: getColor(serie),\n            })),\n        [rawSeries, getColor]\n    )\n\n    const points = usePoints({\n        series,\n        getPointColor,\n        getPointBorderColor,\n        formatX,\n        formatY,\n    })\n\n    const slices = useSlices({\n        enableSlices,\n        points,\n        width,\n        height,\n    })\n\n    const lineGenerator = useLineGenerator({ curve })\n    const areaGenerator = useAreaGenerator({\n        curve,\n        yScale,\n        areaBaselineValue,\n    })\n\n    return {\n        lineGenerator,\n        areaGenerator,\n        getColor,\n        series,\n        xScale,\n        yScale,\n        slices,\n        points,\n    }\n}\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { useSpring, animated } from 'react-spring'\nimport { useAnimatedPath, useMotionConfig, blendModePropType } from '@nivo/core'\n\nconst AreaPath = ({ areaBlendMode, areaOpacity, color, fill, path }) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedPath = useAnimatedPath(path)\n    const animatedProps = useSpring({\n        color,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.path\n            d={animatedPath}\n            fill={fill ? fill : animatedProps.color}\n            fillOpacity={areaOpacity}\n            strokeWidth={0}\n            style={{\n                mixBlendMode: areaBlendMode,\n            }}\n        />\n    )\n}\n\nAreaPath.propTypes = {\n    areaBlendMode: blendModePropType.isRequired,\n    areaOpacity: PropTypes.number.isRequired,\n    color: PropTypes.string,\n    fill: PropTypes.string,\n    path: PropTypes.string.isRequired,\n}\n\nconst Areas = ({ areaGenerator, areaOpacity, areaBlendMode, lines }) => {\n    const computedLines = lines.slice(0).reverse()\n\n    return (\n        <g>\n            {computedLines.map(line => (\n                <AreaPath\n                    key={line.id}\n                    path={areaGenerator(line.data.map(d => d.position))}\n                    {...{ areaOpacity, areaBlendMode, ...line }}\n                />\n            ))}\n        </g>\n    )\n}\n\nAreas.propTypes = {\n    areaGenerator: PropTypes.func.isRequired,\n    areaOpacity: PropTypes.number.isRequired,\n    areaBlendMode: blendModePropType.isRequired,\n    lines: PropTypes.arrayOf(PropTypes.object).isRequired,\n}\n\nexport default memo(Areas)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo, useMemo } from 'react'\nimport PropTypes from 'prop-types'\nimport { animated } from 'react-spring'\nimport { useAnimatedPath } from '@nivo/core'\n\nconst LinesItem = ({ lineGenerator, points, color, thickness }) => {\n    const path = useMemo(() => lineGenerator(points), [lineGenerator, points])\n    const animatedPath = useAnimatedPath(path)\n\n    return <animated.path d={animatedPath} fill=\"none\" strokeWidth={thickness} stroke={color} />\n}\n\nLinesItem.propTypes = {\n    points: PropTypes.arrayOf(\n        PropTypes.shape({\n            x: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n            y: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n        })\n    ),\n    lineGenerator: PropTypes.func.isRequired,\n    color: PropTypes.string.isRequired,\n    thickness: PropTypes.number.isRequired,\n}\n\nexport default memo(LinesItem)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport LinesItem from './LinesItem'\n\nconst Lines = ({ lines, lineGenerator, lineWidth }) => {\n    return lines\n        .reverse()\n        .map(({ id, data, color }) => (\n            <LinesItem\n                key={id}\n                id={id}\n                points={data.map(d => d.position)}\n                lineGenerator={lineGenerator}\n                color={color}\n                thickness={lineWidth}\n            />\n        ))\n}\n\nLines.propTypes = {\n    lines: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n            color: PropTypes.string.isRequired,\n            data: PropTypes.arrayOf(\n                PropTypes.shape({\n                    data: PropTypes.shape({\n                        x: PropTypes.oneOfType([\n                            PropTypes.string,\n                            PropTypes.number,\n                            PropTypes.instanceOf(Date),\n                        ]),\n                        y: PropTypes.oneOfType([\n                            PropTypes.string,\n                            PropTypes.number,\n                            PropTypes.instanceOf(Date),\n                        ]),\n                    }).isRequired,\n                    position: PropTypes.shape({\n                        x: PropTypes.number,\n                        y: PropTypes.number,\n                    }).isRequired,\n                })\n            ).isRequired,\n        })\n    ).isRequired,\n    lineWidth: PropTypes.number.isRequired,\n    lineGenerator: PropTypes.func.isRequired,\n}\n\nexport default memo(Lines)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo, useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTooltip } from '@nivo/tooltip'\n\nconst SlicesItem = ({ slice, axis, debug, tooltip, isCurrent, setCurrent }) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        event => {\n            showTooltipFromEvent(React.createElement(tooltip, { slice, axis }), event, 'right')\n            setCurrent(slice)\n        },\n        [showTooltipFromEvent, tooltip, slice]\n    )\n\n    const handleMouseMove = useCallback(\n        event => {\n            showTooltipFromEvent(React.createElement(tooltip, { slice, axis }), event, 'right')\n        },\n        [showTooltipFromEvent, tooltip, slice]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        hideTooltip()\n        setCurrent(null)\n    }, [hideTooltip])\n\n    return (\n        <rect\n            x={slice.x0}\n            y={slice.y0}\n            width={slice.width}\n            height={slice.height}\n            stroke=\"red\"\n            strokeWidth={debug ? 1 : 0}\n            strokeOpacity={0.75}\n            fill=\"red\"\n            fillOpacity={isCurrent && debug ? 0.35 : 0}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n        />\n    )\n}\n\nSlicesItem.propTypes = {\n    slice: PropTypes.object.isRequired,\n    axis: PropTypes.oneOf(['x', 'y']).isRequired,\n    debug: PropTypes.bool.isRequired,\n    height: PropTypes.number.isRequired,\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    isCurrent: PropTypes.bool.isRequired,\n    setCurrent: PropTypes.func.isRequired,\n}\n\nexport default memo(SlicesItem)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport SlicesItem from './SlicesItem'\n\nconst Slices = ({ slices, axis, debug, height, tooltip, current, setCurrent }) => {\n    return slices.map(slice => (\n        <SlicesItem\n            key={slice.id}\n            slice={slice}\n            axis={axis}\n            debug={debug}\n            height={height}\n            tooltip={tooltip}\n            setCurrent={setCurrent}\n            isCurrent={current !== null && current.id === slice.id}\n        />\n    ))\n}\n\nSlices.propTypes = {\n    slices: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.oneOfType([\n                PropTypes.number,\n                PropTypes.string,\n                PropTypes.instanceOf(Date),\n            ]).isRequired,\n            x: PropTypes.number.isRequired,\n            y: PropTypes.number.isRequired,\n            points: PropTypes.arrayOf(PropTypes.object).isRequired,\n        })\n    ).isRequired,\n    axis: PropTypes.oneOf(['x', 'y']).isRequired,\n    debug: PropTypes.bool.isRequired,\n    height: PropTypes.number.isRequired,\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n    current: PropTypes.object,\n    setCurrent: PropTypes.func.isRequired,\n}\n\nexport default memo(Slices)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { getLabelGenerator, DotsItem, useTheme } from '@nivo/core'\n\nconst Points = ({ points, symbol, size, borderWidth, enableLabel, label, labelYOffset }) => {\n    const theme = useTheme()\n    const getLabel = getLabelGenerator(label)\n\n    /**\n     * We reverse the `points` array so that points from the lower lines in stacked lines\n     * graph are drawn on top. See https://github.com/plouc/nivo/issues/1051.\n     */\n    const mappedPoints = points.reverse().map(point => {\n        const mappedPoint = {\n            id: point.id,\n            x: point.x,\n            y: point.y,\n            datum: point.data,\n            fill: point.color,\n            stroke: point.borderColor,\n            label: enableLabel ? getLabel(point.data) : null,\n        }\n\n        return mappedPoint\n    })\n\n    return (\n        <g>\n            {mappedPoints.map(point => (\n                <DotsItem\n                    key={point.id}\n                    x={point.x}\n                    y={point.y}\n                    datum={point.datum}\n                    symbol={symbol}\n                    size={size}\n                    color={point.fill}\n                    borderWidth={borderWidth}\n                    borderColor={point.stroke}\n                    label={point.label}\n                    labelYOffset={labelYOffset}\n                    theme={theme}\n                />\n            ))}\n        </g>\n    )\n}\n\nPoints.propTypes = {\n    points: PropTypes.arrayOf(PropTypes.object),\n    symbol: PropTypes.func,\n    size: PropTypes.number.isRequired,\n    color: PropTypes.func.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    borderColor: PropTypes.func.isRequired,\n    enableLabel: PropTypes.bool.isRequired,\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    labelYOffset: PropTypes.number,\n}\n\nexport default memo(Points)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { memo, useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTooltip } from '@nivo/tooltip'\nimport { Mesh as BaseMesh } from '@nivo/voronoi'\n\nconst Mesh = ({\n    points,\n    width,\n    height,\n    margin,\n    setCurrent,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    debug,\n}) => {\n    const { showTooltipAt, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        (point, event) => {\n            showTooltipAt(\n                React.createElement(tooltip, { point }),\n                [point.x + margin.left, point.y + margin.top],\n                'top'\n            )\n            setCurrent(point)\n            onMouseEnter && onMouseEnter(point, event)\n        },\n        [setCurrent, showTooltipAt, tooltip, onMouseEnter, margin]\n    )\n\n    const handleMouseMove = useCallback(\n        (point, event) => {\n            showTooltipAt(\n                React.createElement(tooltip, { point }),\n                [point.x + margin.left, point.y + margin.top],\n                'top'\n            )\n            setCurrent(point)\n            onMouseMove && onMouseMove(point, event)\n        },\n        [setCurrent, showTooltipAt, tooltip, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (point, event) => {\n            hideTooltip()\n            setCurrent(null)\n            onMouseLeave && onMouseLeave(point, event)\n        },\n        [hideTooltip, setCurrent, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        (point, event) => {\n            onClick && onClick(point, event)\n        },\n        [onClick]\n    )\n\n    return (\n        <BaseMesh\n            nodes={points}\n            width={width}\n            height={height}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onClick={handleClick}\n            debug={debug}\n        />\n    )\n}\n\nMesh.propTypes = {\n    points: PropTypes.arrayOf(PropTypes.object).isRequired,\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    margin: PropTypes.object.isRequired,\n    setCurrent: PropTypes.func.isRequired,\n    onMouseEnter: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onClick: PropTypes.func,\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n    debug: PropTypes.bool.isRequired,\n}\n\nexport default memo(Mesh)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { Fragment, useState, useMemo } from 'react'\nimport {\n    bindDefs,\n    withContainer,\n    useDimensions,\n    useTheme,\n    SvgWrapper,\n    CartesianMarkers,\n} from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { Axes, Grid } from '@nivo/axes'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { Crosshair } from '@nivo/tooltip'\nimport { useLine } from './hooks'\nimport { LinePropTypes, LineDefaultProps } from './props'\nimport Areas from './Areas'\nimport Lines from './Lines'\nimport Slices from './Slices'\nimport Points from './Points'\nimport Mesh from './Mesh'\n\nconst Line = props => {\n    const {\n        data,\n        xScale: xScaleSpec,\n        xFormat,\n        yScale: yScaleSpec,\n        yFormat,\n        layers,\n        curve,\n        areaBaselineValue,\n\n        colors,\n\n        margin: partialMargin,\n        width,\n        height,\n\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        enableGridX,\n        enableGridY,\n        gridXValues,\n        gridYValues,\n\n        lineWidth,\n        enableArea,\n        areaOpacity,\n        areaBlendMode,\n\n        enablePoints,\n        pointSymbol,\n        pointSize,\n        pointColor,\n        pointBorderWidth,\n        pointBorderColor,\n        enablePointLabel,\n        pointLabel,\n        pointLabelYOffset,\n\n        defs,\n        fill,\n\n        markers,\n\n        legends,\n\n        isInteractive,\n\n        useMesh,\n        debugMesh,\n\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n\n        tooltip,\n\n        enableSlices,\n        debugSlices,\n        sliceTooltip,\n\n        enableCrosshair,\n        crosshairType,\n\n        role,\n    } = props\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { lineGenerator, areaGenerator, series, xScale, yScale, slices, points } = useLine({\n        data,\n        xScale: xScaleSpec,\n        xFormat,\n        yScale: yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        colors,\n        curve,\n        areaBaselineValue,\n        pointColor,\n        pointBorderColor,\n        enableSlices,\n    })\n\n    const theme = useTheme()\n    const getPointColor = useInheritedColor(pointColor, theme)\n    const getPointBorderColor = useInheritedColor(pointBorderColor, theme)\n\n    const [currentPoint, setCurrentPoint] = useState(null)\n    const [currentSlice, setCurrentSlice] = useState(null)\n\n    const legendData = useMemo(\n        () =>\n            series\n                .map(line => ({\n                    id: line.id,\n                    label: line.id,\n                    color: line.color,\n                }))\n                .reverse(),\n        [series]\n    )\n\n    const layerById = {\n        grid: (\n            <Grid\n                key=\"grid\"\n                theme={theme}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        ),\n        markers: (\n            <CartesianMarkers\n                key=\"markers\"\n                markers={markers}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale}\n                yScale={yScale}\n                theme={theme}\n            />\n        ),\n        axes: (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                theme={theme}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        ),\n        areas: null,\n        lines: (\n            <Lines key=\"lines\" lines={series} lineGenerator={lineGenerator} lineWidth={lineWidth} />\n        ),\n        slices: null,\n        points: null,\n        crosshair: null,\n        mesh: null,\n        legends: legends.map((legend, i) => (\n            <BoxLegendSvg\n                key={`legend.${i}`}\n                {...legend}\n                containerWidth={innerWidth}\n                containerHeight={innerHeight}\n                data={legend.data || legendData}\n                theme={theme}\n            />\n        )),\n    }\n\n    const boundDefs = bindDefs(defs, series, fill)\n\n    if (enableArea) {\n        layerById.areas = (\n            <Areas\n                key=\"areas\"\n                areaGenerator={areaGenerator}\n                areaOpacity={areaOpacity}\n                areaBlendMode={areaBlendMode}\n                lines={series}\n            />\n        )\n    }\n\n    if (isInteractive && enableSlices !== false) {\n        layerById.slices = (\n            <Slices\n                key=\"slices\"\n                slices={slices}\n                axis={enableSlices}\n                debug={debugSlices}\n                height={innerHeight}\n                tooltip={sliceTooltip}\n                current={currentSlice}\n                setCurrent={setCurrentSlice}\n            />\n        )\n    }\n\n    if (enablePoints) {\n        layerById.points = (\n            <Points\n                key=\"points\"\n                points={points}\n                symbol={pointSymbol}\n                size={pointSize}\n                color={getPointColor}\n                borderWidth={pointBorderWidth}\n                borderColor={getPointBorderColor}\n                enableLabel={enablePointLabel}\n                label={pointLabel}\n                labelYOffset={pointLabelYOffset}\n            />\n        )\n    }\n\n    if (isInteractive && enableCrosshair) {\n        if (currentPoint !== null) {\n            layerById.crosshair = (\n                <Crosshair\n                    key=\"crosshair\"\n                    width={innerWidth}\n                    height={innerHeight}\n                    x={currentPoint.x}\n                    y={currentPoint.y}\n                    type={crosshairType}\n                />\n            )\n        }\n        if (currentSlice !== null) {\n            layerById.crosshair = (\n                <Crosshair\n                    key=\"crosshair\"\n                    width={innerWidth}\n                    height={innerHeight}\n                    x={currentSlice.x}\n                    y={currentSlice.y}\n                    type={enableSlices}\n                />\n            )\n        }\n    }\n\n    if (isInteractive && useMesh && enableSlices === false) {\n        layerById.mesh = (\n            <Mesh\n                key=\"mesh\"\n                points={points}\n                width={innerWidth}\n                height={innerHeight}\n                margin={margin}\n                current={currentPoint}\n                setCurrent={setCurrentPoint}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                tooltip={tooltip}\n                debug={debugMesh}\n            />\n        )\n    }\n\n    return (\n        <SvgWrapper\n            defs={boundDefs}\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return (\n                        <Fragment key={i}>\n                            {layer({\n                                ...props,\n                                innerWidth,\n                                innerHeight,\n                                series,\n                                slices,\n                                points,\n                                xScale,\n                                yScale,\n                                lineGenerator,\n                                areaGenerator,\n                                currentPoint,\n                                setCurrentPoint,\n                                currentSlice,\n                                setCurrentSlice,\n                            })}\n                        </Fragment>\n                    )\n                }\n\n                return layerById[layer]\n            })}\n        </SvgWrapper>\n    )\n}\n\nLine.propTypes = LinePropTypes\nLine.defaultProps = LineDefaultProps\n\nexport default withContainer(Line)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\nimport Line from './Line'\n\nconst ResponsiveLine = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Line width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveLine\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { useRef, useEffect, useState, useCallback, forwardRef } from 'react'\nimport {\n    withContainer,\n    useDimensions,\n    useTheme,\n    getRelativeCursor,\n    isCursorInRect,\n} from '@nivo/core'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useVoronoiMesh, renderVoronoiToCanvas, renderVoronoiCellToCanvas } from '@nivo/voronoi'\nimport { LineCanvasPropTypes, LineCanvasDefaultProps } from './props'\nimport { useLine } from './hooks'\n\nconst LineCanvas = ({\n    width,\n    height,\n    margin: partialMargin,\n    pixelRatio,\n\n    data,\n    xScale: xScaleSpec,\n    xFormat,\n    yScale: yScaleSpec,\n    yFormat,\n    curve,\n\n    layers,\n\n    colors,\n    lineWidth,\n\n    enableArea,\n    areaBaselineValue,\n    areaOpacity,\n\n    enablePoints,\n    pointSize,\n    pointColor,\n    pointBorderWidth,\n    pointBorderColor,\n\n    enableGridX,\n    gridXValues,\n    enableGridY,\n    gridYValues,\n    axisTop,\n    axisRight,\n    axisBottom,\n    axisLeft,\n\n    legends,\n\n    isInteractive,\n    debugMesh,\n    //onMouseEnter,\n    //onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n\n    canvasRef,\n}) => {\n    const canvasEl = useRef(null)\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n    const theme = useTheme()\n    const [currentPoint, setCurrentPoint] = useState(null)\n\n    const { lineGenerator, areaGenerator, series, xScale, yScale, points } = useLine({\n        data,\n        xScale: xScaleSpec,\n        xFormat,\n        yScale: yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        colors,\n        curve,\n        areaBaselineValue,\n        pointColor,\n        pointBorderColor,\n    })\n\n    const { delaunay, voronoi } = useVoronoiMesh({\n        points,\n        width: innerWidth,\n        height: innerHeight,\n        debug: debugMesh,\n    })\n\n    useEffect(() => {\n        if (canvasRef) {\n            canvasRef.current = canvasEl.current\n        }\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (typeof layer === 'function') {\n                layer({\n                    ctx,\n                    innerWidth,\n                    innerHeight,\n                    series,\n                    points,\n                    xScale,\n                    yScale,\n                    lineWidth,\n                    lineGenerator,\n                    areaGenerator,\n                    currentPoint,\n                    setCurrentPoint,\n                })\n            }\n\n            if (layer === 'grid' && theme.grid.line.strokeWidth > 0) {\n                ctx.lineWidth = theme.grid.line.strokeWidth\n                ctx.strokeStyle = theme.grid.line.stroke\n\n                enableGridX &&\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: xScale,\n                        axis: 'x',\n                        values: gridXValues,\n                    })\n\n                enableGridY &&\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: yScale,\n                        axis: 'y',\n                        values: gridYValues,\n                    })\n            }\n\n            if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale,\n                    yScale,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            }\n\n            if (layer === 'areas' && enableArea === true) {\n                ctx.save()\n                ctx.globalAlpha = areaOpacity\n\n                areaGenerator.context(ctx)\n                series.forEach(serie => {\n                    ctx.fillStyle = serie.color\n                    ctx.beginPath()\n                    areaGenerator(serie.data.map(d => d.position))\n                    ctx.fill()\n                })\n\n                ctx.restore()\n            }\n\n            if (layer === 'lines') {\n                lineGenerator.context(ctx)\n                series.forEach(serie => {\n                    ctx.strokeStyle = serie.color\n                    ctx.lineWidth = lineWidth\n                    ctx.beginPath()\n                    lineGenerator(serie.data.map(d => d.position))\n                    ctx.stroke()\n                })\n            }\n\n            if (layer === 'points' && enablePoints === true && pointSize > 0) {\n                points.forEach(point => {\n                    ctx.fillStyle = point.color\n                    ctx.beginPath()\n                    ctx.arc(point.x, point.y, pointSize / 2, 0, 2 * Math.PI)\n                    ctx.fill()\n\n                    if (pointBorderWidth > 0) {\n                        ctx.strokeStyle = point.borderColor\n                        ctx.lineWidth = pointBorderWidth\n                        ctx.stroke()\n                    }\n                })\n            }\n\n            if (layer === 'mesh' && debugMesh === true) {\n                renderVoronoiToCanvas(ctx, voronoi)\n                if (currentPoint) {\n                    renderVoronoiCellToCanvas(ctx, voronoi, currentPoint.index)\n                }\n            }\n\n            if (layer === 'legends') {\n                const legendData = series\n                    .map(serie => ({\n                        id: serie.id,\n                        label: serie.id,\n                        color: serie.color,\n                    }))\n                    .reverse()\n\n                legends.forEach(legend => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data: legend.data || legendData,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            }\n        })\n    }, [\n        canvasEl,\n        outerWidth,\n        outerHeight,\n        layers,\n        theme,\n        lineGenerator,\n        series,\n        xScale,\n        yScale,\n        enableGridX,\n        gridXValues,\n        enableGridY,\n        gridYValues,\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        legends,\n        points,\n        enablePoints,\n        pointSize,\n        currentPoint,\n    ])\n\n    const getPointFromMouseEvent = useCallback(\n        event => {\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            if (!isCursorInRect(margin.left, margin.top, innerWidth, innerHeight, x, y)) return null\n\n            const pointIndex = delaunay.find(x - margin.left, y - margin.top)\n            return points[pointIndex]\n        },\n        [canvasEl, margin, innerWidth, innerHeight, delaunay]\n    )\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = useCallback(\n        event => {\n            const point = getPointFromMouseEvent(event)\n            setCurrentPoint(point)\n\n            if (point) {\n                showTooltipFromEvent(React.createElement(tooltip, { point }), event)\n            } else {\n                hideTooltip()\n            }\n        },\n        [getPointFromMouseEvent, setCurrentPoint, showTooltipFromEvent, hideTooltip, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        event => {\n            hideTooltip()\n            setCurrentPoint(null)\n            currentPoint && onMouseLeave && onMouseLeave(currentPoint, event)\n        },\n        [hideTooltip, setCurrentPoint, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        event => {\n            if (onClick) {\n                const point = getPointFromMouseEvent(event)\n                point && onClick(point, event)\n            }\n        },\n        [getPointFromMouseEvent, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nLineCanvas.propTypes = LineCanvasPropTypes\nLineCanvas.defaultProps = LineCanvasDefaultProps\n\nconst LineCanvasWithContainer = withContainer(LineCanvas)\n\nexport default forwardRef((props, ref) => <LineCanvasWithContainer {...props} canvasRef={ref} />)\n","/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport React, { forwardRef } from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\nimport LineCanvas from './LineCanvas'\n\nconst ResponsiveLineCanvas = (props, ref) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <LineCanvas width={width} height={height} {...props} ref={ref} />}\n    </ResponsiveWrapper>\n)\n\nexport default forwardRef(ResponsiveLineCanvas)\n"]},"metadata":{},"sourceType":"module"}