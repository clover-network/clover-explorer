{"ast":null,"code":"/**\n * @fileOverview 自定义 Shape 的基类\n * @author dxq613@gmail.com\n */\nimport { __assign } from \"tslib\";\nimport { upperFirst } from '@antv/util';\nimport { createNodeFromXML } from './xml';\nvar cache = {}; // ucfirst 开销过大，进行缓存\n// 首字母大写\n\nfunction ucfirst(str) {\n  if (!cache[str]) {\n    cache[str] = upperFirst(str);\n  }\n\n  return cache[str];\n}\n/**\n * 工厂方法的基类\n * @type Shape.FactoryBase\n */\n\n\nvar ShapeFactoryBase = {\n  /**\n   * 默认的形状，当没有指定/匹配 shapeType 时，使用默认的\n   * @type {String}\n   */\n  defaultShapeType: 'defaultType',\n\n  /**\n   * 形状的 className，用于搜索\n   * @type {String}\n   */\n  className: null,\n\n  /**\n   * 获取绘制 Shape 的工具类，无状态\n   * @param  {String} type 类型\n   * @return {Shape} 工具类\n   */\n  getShape: function getShape(type) {\n    var self = this;\n    var shape = self[type] || self[self.defaultShapeType];\n    return shape;\n  },\n\n  /**\n   * 绘制图形\n   * @param  {String} type  类型\n   * @param  {Object} cfg 配置项\n   * @param  {G.Group} group 图形的分组\n   * @return {IShape} 图形对象\n   */\n  draw: function draw(type, cfg, group) {\n    var shape = this.getShape(type);\n    var rst = shape.draw(cfg, group);\n\n    if (shape.afterDraw) {\n      shape.afterDraw(cfg, group, rst);\n    }\n\n    return rst;\n  },\n\n  /**\n   * 更新\n   * @param  {String} type  类型\n   * @param  {Object} cfg 配置项\n   * @param  {G6.Item} item 节点、边、分组等\n   */\n  baseUpdate: function baseUpdate(type, cfg, item) {\n    var shape = this.getShape(type);\n\n    if (shape.update) {\n      // 防止没定义 update 函数\n      shape.update(cfg, item);\n    }\n\n    if (shape.afterUpdate) {\n      shape.afterUpdate(cfg, item);\n    }\n  },\n\n  /**\n   * 设置状态\n   * @param {String} type  类型\n   * @param {String} name  状态名\n   * @param {String | Boolean} value 状态值\n   * @param {G6.Item} item  节点、边、分组等\n   */\n  setState: function setState(type, name, value, item) {\n    var shape = this.getShape(type); // 调用 shape/shapeBase.ts 中的 setState 方法\n\n    shape.setState(name, value, item);\n  },\n\n  /**\n   * 是否允许更新，不重新绘制图形\n   * @param  {String} type 类型\n   * @return {Boolean} 是否允许使用更新\n   */\n  shouldUpdate: function shouldUpdate(type) {\n    var shape = this.getShape(type);\n    return !!shape.update;\n  },\n  getControlPoints: function getControlPoints(type, cfg) {\n    var shape = this.getShape(type);\n    return shape.getControlPoints(cfg);\n  },\n\n  /**\n   * 获取控制点\n   * @param {String} type 节点、边类型\n   * @param  {Object} cfg 节点、边的配置项\n   * @return {Array|null} 控制点的数组,如果为 null，则没有控制点\n   */\n  getAnchorPoints: function getAnchorPoints(type, cfg) {\n    var shape = this.getShape(type);\n    return shape.getAnchorPoints(cfg);\n  }\n};\n/**\n * 元素的框架\n */\n\nvar ShapeFramework = {\n  // 默认样式及配置\n  options: {},\n\n  /**\n   * 绘制\n   */\n  draw: function draw(cfg, group) {\n    return this.drawShape(cfg, group);\n  },\n\n  /**\n   * 绘制\n   */\n  drawShape: function drawShape()\n  /* cfg, group */\n  {},\n\n  /**\n   * 绘制完成后的操作，便于用户继承现有的节点、边\n   */\n  afterDraw: function afterDraw()\n  /* cfg, group */\n  {},\n  // update(cfg, item) // 默认不定义\n  afterUpdate: function afterUpdate()\n  /* cfg, item */\n  {},\n\n  /**\n   * 设置节点、边状态\n   */\n  setState: function setState()\n  /* name, value, item */\n  {},\n\n  /**\n   * 获取控制点\n   * @param  {Object} cfg 节点、边的配置项\n   * @return {Array|null} 控制点的数组,如果为 null，则没有控制点\n   */\n  getControlPoints: function getControlPoints(cfg) {\n    return cfg.controlPoints;\n  },\n\n  /**\n   * 获取控制点\n   * @param  {Object} cfg 节点、边的配置项\n   * @return {Array|null} 控制点的数组,如果为 null，则没有控制点\n   */\n  getAnchorPoints: function getAnchorPoints(cfg) {\n    var defaultAnchorPoints = this.options.anchorPoints;\n    var anchorPoints = cfg.anchorPoints || defaultAnchorPoints;\n    return anchorPoints;\n  }\n};\n\nvar Shape =\n/** @class */\nfunction () {\n  function Shape() {}\n\n  Shape.registerFactory = function (factoryType, cfg) {\n    var className = ucfirst(factoryType);\n    var factoryBase = ShapeFactoryBase;\n\n    var shapeFactory = __assign(__assign({}, factoryBase), cfg);\n\n    Shape[className] = shapeFactory;\n    shapeFactory.className = className;\n    return shapeFactory;\n  };\n\n  Shape.getFactory = function (factoryType) {\n    var className = ucfirst(factoryType);\n    return Shape[className];\n  };\n\n  Shape.registerNode = function (shapeType, nodeDefinition, extendShapeType) {\n    var shapeFactory = Shape.Node;\n    var shapeObj;\n\n    if (typeof nodeDefinition === 'string' || typeof nodeDefinition === 'function') {\n      var autoNodeDefinition = createNodeFromXML(nodeDefinition);\n      shapeObj = __assign(__assign({}, shapeFactory.getShape('single-node')), autoNodeDefinition);\n    } else if (nodeDefinition.jsx) {\n      var jsx = nodeDefinition.jsx;\n      var autoNodeDefinition = createNodeFromXML(jsx);\n      shapeObj = __assign(__assign(__assign({}, shapeFactory.getShape('single-node')), autoNodeDefinition), nodeDefinition);\n    } else {\n      var extendShape = extendShapeType ? shapeFactory.getShape(extendShapeType) : ShapeFramework;\n      shapeObj = __assign(__assign({}, extendShape), nodeDefinition);\n    }\n\n    shapeObj.type = shapeType;\n    shapeObj.itemType = 'node';\n    shapeFactory[shapeType] = shapeObj;\n    return shapeObj;\n  };\n\n  Shape.registerEdge = function (shapeType, edgeDefinition, extendShapeType) {\n    var shapeFactory = Shape.Edge;\n    var extendShape = extendShapeType ? shapeFactory.getShape(extendShapeType) : ShapeFramework;\n\n    var shapeObj = __assign(__assign({}, extendShape), edgeDefinition);\n\n    shapeObj.type = shapeType;\n    shapeObj.itemType = 'edge';\n    shapeFactory[shapeType] = shapeObj;\n    return shapeObj;\n  };\n\n  Shape.registerCombo = function (shapeType, comboDefinition, extendShapeType) {\n    var shapeFactory = Shape.Combo;\n    var extendShape = extendShapeType ? shapeFactory.getShape(extendShapeType) : ShapeFramework;\n\n    var shapeObj = __assign(__assign({}, extendShape), comboDefinition);\n\n    shapeObj.type = shapeType;\n    shapeObj.itemType = 'combo';\n    shapeFactory[shapeType] = shapeObj;\n    return shapeObj;\n  };\n\n  return Shape;\n}();\n\nexport default Shape; // 注册 Node 的工厂方法\n\nShape.registerFactory('node', {\n  defaultShapeType: 'circle'\n}); // 注册 Edge 的工厂方法\n\nShape.registerFactory('edge', {\n  defaultShapeType: 'line'\n}); // 注册 Combo 的工厂方法\n\nShape.registerFactory('combo', {\n  defaultShapeType: 'circle'\n});","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/@antv/g6/es/shape/shape.js"],"names":["__assign","upperFirst","createNodeFromXML","cache","ucfirst","str","ShapeFactoryBase","defaultShapeType","className","getShape","type","self","shape","draw","cfg","group","rst","afterDraw","baseUpdate","item","update","afterUpdate","setState","name","value","shouldUpdate","getControlPoints","getAnchorPoints","ShapeFramework","options","drawShape","controlPoints","defaultAnchorPoints","anchorPoints","Shape","registerFactory","factoryType","factoryBase","shapeFactory","getFactory","registerNode","shapeType","nodeDefinition","extendShapeType","Node","shapeObj","autoNodeDefinition","jsx","extendShape","itemType","registerEdge","edgeDefinition","Edge","registerCombo","comboDefinition","Combo"],"mappings":"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","sourcesContent":["/**\n * @fileOverview 自定义 Shape 的基类\n * @author dxq613@gmail.com\n */\nimport { __assign } from \"tslib\";\nimport { upperFirst } from '@antv/util';\nimport { createNodeFromXML } from './xml';\nvar cache = {}; // ucfirst 开销过大，进行缓存\n// 首字母大写\n\nfunction ucfirst(str) {\n  if (!cache[str]) {\n    cache[str] = upperFirst(str);\n  }\n\n  return cache[str];\n}\n/**\n * 工厂方法的基类\n * @type Shape.FactoryBase\n */\n\n\nvar ShapeFactoryBase = {\n  /**\n   * 默认的形状，当没有指定/匹配 shapeType 时，使用默认的\n   * @type {String}\n   */\n  defaultShapeType: 'defaultType',\n\n  /**\n   * 形状的 className，用于搜索\n   * @type {String}\n   */\n  className: null,\n\n  /**\n   * 获取绘制 Shape 的工具类，无状态\n   * @param  {String} type 类型\n   * @return {Shape} 工具类\n   */\n  getShape: function getShape(type) {\n    var self = this;\n    var shape = self[type] || self[self.defaultShapeType];\n    return shape;\n  },\n\n  /**\n   * 绘制图形\n   * @param  {String} type  类型\n   * @param  {Object} cfg 配置项\n   * @param  {G.Group} group 图形的分组\n   * @return {IShape} 图形对象\n   */\n  draw: function draw(type, cfg, group) {\n    var shape = this.getShape(type);\n    var rst = shape.draw(cfg, group);\n\n    if (shape.afterDraw) {\n      shape.afterDraw(cfg, group, rst);\n    }\n\n    return rst;\n  },\n\n  /**\n   * 更新\n   * @param  {String} type  类型\n   * @param  {Object} cfg 配置项\n   * @param  {G6.Item} item 节点、边、分组等\n   */\n  baseUpdate: function baseUpdate(type, cfg, item) {\n    var shape = this.getShape(type);\n\n    if (shape.update) {\n      // 防止没定义 update 函数\n      shape.update(cfg, item);\n    }\n\n    if (shape.afterUpdate) {\n      shape.afterUpdate(cfg, item);\n    }\n  },\n\n  /**\n   * 设置状态\n   * @param {String} type  类型\n   * @param {String} name  状态名\n   * @param {String | Boolean} value 状态值\n   * @param {G6.Item} item  节点、边、分组等\n   */\n  setState: function setState(type, name, value, item) {\n    var shape = this.getShape(type); // 调用 shape/shapeBase.ts 中的 setState 方法\n\n    shape.setState(name, value, item);\n  },\n\n  /**\n   * 是否允许更新，不重新绘制图形\n   * @param  {String} type 类型\n   * @return {Boolean} 是否允许使用更新\n   */\n  shouldUpdate: function shouldUpdate(type) {\n    var shape = this.getShape(type);\n    return !!shape.update;\n  },\n  getControlPoints: function getControlPoints(type, cfg) {\n    var shape = this.getShape(type);\n    return shape.getControlPoints(cfg);\n  },\n\n  /**\n   * 获取控制点\n   * @param {String} type 节点、边类型\n   * @param  {Object} cfg 节点、边的配置项\n   * @return {Array|null} 控制点的数组,如果为 null，则没有控制点\n   */\n  getAnchorPoints: function getAnchorPoints(type, cfg) {\n    var shape = this.getShape(type);\n    return shape.getAnchorPoints(cfg);\n  }\n};\n/**\n * 元素的框架\n */\n\nvar ShapeFramework = {\n  // 默认样式及配置\n  options: {},\n\n  /**\n   * 绘制\n   */\n  draw: function draw(cfg, group) {\n    return this.drawShape(cfg, group);\n  },\n\n  /**\n   * 绘制\n   */\n  drawShape: function drawShape()\n  /* cfg, group */\n  {},\n\n  /**\n   * 绘制完成后的操作，便于用户继承现有的节点、边\n   */\n  afterDraw: function afterDraw()\n  /* cfg, group */\n  {},\n  // update(cfg, item) // 默认不定义\n  afterUpdate: function afterUpdate()\n  /* cfg, item */\n  {},\n\n  /**\n   * 设置节点、边状态\n   */\n  setState: function setState()\n  /* name, value, item */\n  {},\n\n  /**\n   * 获取控制点\n   * @param  {Object} cfg 节点、边的配置项\n   * @return {Array|null} 控制点的数组,如果为 null，则没有控制点\n   */\n  getControlPoints: function getControlPoints(cfg) {\n    return cfg.controlPoints;\n  },\n\n  /**\n   * 获取控制点\n   * @param  {Object} cfg 节点、边的配置项\n   * @return {Array|null} 控制点的数组,如果为 null，则没有控制点\n   */\n  getAnchorPoints: function getAnchorPoints(cfg) {\n    var defaultAnchorPoints = this.options.anchorPoints;\n    var anchorPoints = cfg.anchorPoints || defaultAnchorPoints;\n    return anchorPoints;\n  }\n};\n\nvar Shape =\n/** @class */\nfunction () {\n  function Shape() {}\n\n  Shape.registerFactory = function (factoryType, cfg) {\n    var className = ucfirst(factoryType);\n    var factoryBase = ShapeFactoryBase;\n\n    var shapeFactory = __assign(__assign({}, factoryBase), cfg);\n\n    Shape[className] = shapeFactory;\n    shapeFactory.className = className;\n    return shapeFactory;\n  };\n\n  Shape.getFactory = function (factoryType) {\n    var className = ucfirst(factoryType);\n    return Shape[className];\n  };\n\n  Shape.registerNode = function (shapeType, nodeDefinition, extendShapeType) {\n    var shapeFactory = Shape.Node;\n    var shapeObj;\n\n    if (typeof nodeDefinition === 'string' || typeof nodeDefinition === 'function') {\n      var autoNodeDefinition = createNodeFromXML(nodeDefinition);\n      shapeObj = __assign(__assign({}, shapeFactory.getShape('single-node')), autoNodeDefinition);\n    } else if (nodeDefinition.jsx) {\n      var jsx = nodeDefinition.jsx;\n      var autoNodeDefinition = createNodeFromXML(jsx);\n      shapeObj = __assign(__assign(__assign({}, shapeFactory.getShape('single-node')), autoNodeDefinition), nodeDefinition);\n    } else {\n      var extendShape = extendShapeType ? shapeFactory.getShape(extendShapeType) : ShapeFramework;\n      shapeObj = __assign(__assign({}, extendShape), nodeDefinition);\n    }\n\n    shapeObj.type = shapeType;\n    shapeObj.itemType = 'node';\n    shapeFactory[shapeType] = shapeObj;\n    return shapeObj;\n  };\n\n  Shape.registerEdge = function (shapeType, edgeDefinition, extendShapeType) {\n    var shapeFactory = Shape.Edge;\n    var extendShape = extendShapeType ? shapeFactory.getShape(extendShapeType) : ShapeFramework;\n\n    var shapeObj = __assign(__assign({}, extendShape), edgeDefinition);\n\n    shapeObj.type = shapeType;\n    shapeObj.itemType = 'edge';\n    shapeFactory[shapeType] = shapeObj;\n    return shapeObj;\n  };\n\n  Shape.registerCombo = function (shapeType, comboDefinition, extendShapeType) {\n    var shapeFactory = Shape.Combo;\n    var extendShape = extendShapeType ? shapeFactory.getShape(extendShapeType) : ShapeFramework;\n\n    var shapeObj = __assign(__assign({}, extendShape), comboDefinition);\n\n    shapeObj.type = shapeType;\n    shapeObj.itemType = 'combo';\n    shapeFactory[shapeType] = shapeObj;\n    return shapeObj;\n  };\n\n  return Shape;\n}();\n\nexport default Shape; // 注册 Node 的工厂方法\n\nShape.registerFactory('node', {\n  defaultShapeType: 'circle'\n}); // 注册 Edge 的工厂方法\n\nShape.registerFactory('edge', {\n  defaultShapeType: 'line'\n}); // 注册 Combo 的工厂方法\n\nShape.registerFactory('combo', {\n  defaultShapeType: 'circle'\n});"]},"metadata":{},"sourceType":"module"}