{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\n\nvar tslib_1 = require(\"tslib\");\n\nvar Path_1 = require(\"../Path\");\n\nvar cos = Math.cos;\nvar sin = Math.sin;\n\nvar TrochoidShape = function () {\n  function TrochoidShape() {\n    this.cx = 0;\n    this.cy = 0;\n    this.r = 0;\n    this.r0 = 0;\n    this.d = 0;\n    this.location = 'out';\n  }\n\n  return TrochoidShape;\n}();\n\nvar Trochoid = function (_super) {\n  tslib_1.__extends(Trochoid, _super);\n\n  function Trochoid(opts) {\n    return _super.call(this, opts) || this;\n  }\n\n  Trochoid.prototype.getDefaultStyle = function () {\n    return {\n      stroke: '#000',\n      fill: null\n    };\n  };\n\n  Trochoid.prototype.getDefaultShape = function () {\n    return new TrochoidShape();\n  };\n\n  Trochoid.prototype.buildPath = function (ctx, shape) {\n    var R = shape.r;\n    var r = shape.r0;\n    var d = shape.d;\n    var offsetX = shape.cx;\n    var offsetY = shape.cy;\n    var delta = shape.location === 'out' ? 1 : -1;\n    var x1;\n    var y1;\n    var x2;\n    var y2;\n\n    if (shape.location && R <= r) {\n      return;\n    }\n\n    var num = 0;\n    var i = 1;\n    var theta;\n    x1 = (R + delta * r) * cos(0) - delta * d * cos(0) + offsetX;\n    y1 = (R + delta * r) * sin(0) - d * sin(0) + offsetY;\n    ctx.moveTo(x1, y1);\n\n    do {\n      num++;\n    } while (r * num % (R + delta * r) !== 0);\n\n    do {\n      theta = Math.PI / 180 * i;\n      x2 = (R + delta * r) * cos(theta) - delta * d * cos((R / r + delta) * theta) + offsetX;\n      y2 = (R + delta * r) * sin(theta) - d * sin((R / r + delta) * theta) + offsetY;\n      ctx.lineTo(x2, y2);\n      i++;\n    } while (i <= r * num / (R + delta * r) * 360);\n  };\n\n  return Trochoid;\n}(Path_1[\"default\"]);\n\nTrochoid.prototype.type = 'trochoid';\nexports[\"default\"] = Trochoid;","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/zrender/lib/graphic/shape/Trochoid.js"],"names":["exports","__esModule","tslib_1","require","Path_1","cos","Math","sin","TrochoidShape","cx","cy","r","r0","d","location","Trochoid","_super","__extends","opts","call","prototype","getDefaultStyle","stroke","fill","getDefaultShape","buildPath","ctx","shape","R","offsetX","offsetY","delta","x1","y1","x2","y2","num","i","theta","moveTo","PI","lineTo","type"],"mappings":"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","sourcesContent":["\"use strict\";\nexports.__esModule = true;\nvar tslib_1 = require(\"tslib\");\nvar Path_1 = require(\"../Path\");\nvar cos = Math.cos;\nvar sin = Math.sin;\nvar TrochoidShape = (function () {\n    function TrochoidShape() {\n        this.cx = 0;\n        this.cy = 0;\n        this.r = 0;\n        this.r0 = 0;\n        this.d = 0;\n        this.location = 'out';\n    }\n    return TrochoidShape;\n}());\nvar Trochoid = (function (_super) {\n    tslib_1.__extends(Trochoid, _super);\n    function Trochoid(opts) {\n        return _super.call(this, opts) || this;\n    }\n    Trochoid.prototype.getDefaultStyle = function () {\n        return {\n            stroke: '#000',\n            fill: null\n        };\n    };\n    Trochoid.prototype.getDefaultShape = function () {\n        return new TrochoidShape();\n    };\n    Trochoid.prototype.buildPath = function (ctx, shape) {\n        var R = shape.r;\n        var r = shape.r0;\n        var d = shape.d;\n        var offsetX = shape.cx;\n        var offsetY = shape.cy;\n        var delta = shape.location === 'out' ? 1 : -1;\n        var x1;\n        var y1;\n        var x2;\n        var y2;\n        if (shape.location && R <= r) {\n            return;\n        }\n        var num = 0;\n        var i = 1;\n        var theta;\n        x1 = (R + delta * r) * cos(0)\n            - delta * d * cos(0) + offsetX;\n        y1 = (R + delta * r) * sin(0)\n            - d * sin(0) + offsetY;\n        ctx.moveTo(x1, y1);\n        do {\n            num++;\n        } while ((r * num) % (R + delta * r) !== 0);\n        do {\n            theta = Math.PI / 180 * i;\n            x2 = (R + delta * r) * cos(theta)\n                - delta * d * cos((R / r + delta) * theta)\n                + offsetX;\n            y2 = (R + delta * r) * sin(theta)\n                - d * sin((R / r + delta) * theta)\n                + offsetY;\n            ctx.lineTo(x2, y2);\n            i++;\n        } while (i <= (r * num) / (R + delta * r) * 360);\n    };\n    return Trochoid;\n}(Path_1[\"default\"]));\nTrochoid.prototype.type = 'trochoid';\nexports[\"default\"] = Trochoid;\n"]},"metadata":{},"sourceType":"script"}