{"ast":null,"code":"import React, { useEffect } from 'react';\nimport G6 from '@antv/g6/es';\nimport { ErrorBoundary } from '../base';\nimport { getGraphSize, processMinimap } from './util';\nimport useGraph from '../hooks/useGraph';\nvar defaultStateStyles = {\n  hover: {\n    stroke: '#1890ff',\n    lineWidth: 2\n  }\n};\nvar defaultNodeSize = [120, 40];\nvar defaultNodeStyle = {\n  stroke: '#40a9ff'\n};\nvar defaultNodeAnchorPoints = [[0.5, 0], [0.5, 1]];\nvar defaultEdgeStyle = {\n  stroke: '#91d5ff',\n  endArrow: {\n    path: G6.Arrow.vee(10, 10),\n    fill: '#91d5ff'\n  }\n};\nvar defaultLayout = {\n  type: 'dagre',\n  rankdir: 'TB',\n  nodesepFunc: function (d) {\n    return 0;\n  },\n  ranksepFunc: function (d) {\n    return 0;\n  },\n  controlPoints: true\n};\nvar defaultLabelCfg = {\n  style: {\n    fill: '#000',\n    fontSize: 12\n  }\n};\nvar graph;\n\nvar DagreGraph = function (_a) {\n  var data = _a.data,\n      className = _a.className,\n      style = _a.style,\n      width = _a.width,\n      height = _a.height,\n      _b = _a.nodeType,\n      nodeType = _b === void 0 ? 'modelRect' : _b,\n      _c = _a.edgeType,\n      edgeType = _c === void 0 ? 'polyline' : _c,\n      _d = _a.behaviors,\n      behaviors = _d === void 0 ? ['zoom-canvas', 'drag-canvas'] : _d,\n      _e = _a.nodeSize,\n      nodeSize = _e === void 0 ? defaultNodeSize : _e,\n      _f = _a.nodeLabelCfg,\n      nodeLabelCfg = _f === void 0 ? defaultLabelCfg : _f,\n      _g = _a.edgeLabelCfg,\n      edgeLabelCfg = _g === void 0 ? defaultLabelCfg : _g,\n      _h = _a.nodeAnchorPoints,\n      nodeAnchorPoints = _h === void 0 ? defaultNodeAnchorPoints : _h,\n      _j = _a.layout,\n      layout = _j === void 0 ? defaultLayout : _j,\n      minimapCfg = _a.minimapCfg,\n      _k = _a.nodeStyle,\n      nodeStyle = _k === void 0 ? defaultNodeStyle : _k,\n      _l = _a.edgeStyle,\n      edgeStyle = _l === void 0 ? defaultEdgeStyle : _l,\n      _m = _a.nodeStateStyles,\n      nodeStateStyles = _m === void 0 ? defaultStateStyles : _m,\n      _o = _a.edgeStateStyles,\n      edgeStateStyles = _o === void 0 ? defaultStateStyles : _o,\n      handleEdgeClick = _a.handleEdgeClick,\n      handleEdgeHover = _a.handleEdgeHover,\n      handleEdgeUnHover = _a.handleEdgeUnHover,\n      handleNodeClick = _a.handleNodeClick,\n      handleNodeHover = _a.handleNodeHover,\n      handleNodeUnHover = _a.handleNodeUnHover,\n      handleCanvasClick = _a.handleCanvasClick,\n      graphRef = _a.graphRef;\n  var props = {\n    data: data,\n    className: className,\n    style: style,\n    width: width,\n    height: height,\n    nodeType: nodeType,\n    edgeType: edgeType,\n    behaviors: behaviors,\n    nodeSize: nodeSize,\n    nodeLabelCfg: nodeLabelCfg,\n    edgeLabelCfg: edgeLabelCfg,\n    nodeAnchorPoints: nodeAnchorPoints,\n    layout: layout,\n    minimapCfg: minimapCfg,\n    nodeStyle: nodeStyle,\n    edgeStyle: edgeStyle,\n    nodeStateStyles: nodeStateStyles,\n    edgeStateStyles: edgeStateStyles,\n    handleEdgeClick: handleEdgeClick,\n    handleEdgeHover: handleEdgeHover,\n    handleEdgeUnHover: handleEdgeUnHover,\n    handleNodeClick: handleNodeClick,\n    handleNodeHover: handleNodeHover,\n    handleNodeUnHover: handleNodeUnHover,\n    handleCanvasClick: handleCanvasClick,\n    graphRef: graphRef\n  };\n  var container = React.useRef(null);\n  useGraph(graph, props, container);\n  useEffect(function () {\n    var graphSize = getGraphSize(width, height, container);\n\n    if (!graph || graph.destroyed) {\n      graph = new G6.Graph({\n        container: container.current,\n        width: graphSize[0],\n        height: graphSize[1],\n        modes: {\n          default: behaviors\n        },\n        defaultNode: {\n          type: nodeType,\n          size: nodeSize,\n          style: nodeStyle,\n          anchorPoints: nodeAnchorPoints,\n          labelCfg: nodeLabelCfg\n        },\n        defaultEdge: {\n          type: edgeType,\n          style: edgeStyle,\n          labelCfg: edgeLabelCfg\n        },\n        nodeStateStyles: nodeStateStyles,\n        edgeStateStyles: edgeStateStyles,\n        layout: layout\n      });\n\n      if (graphRef) {\n        graphRef.current = graph;\n      }\n    }\n\n    processMinimap(minimapCfg, graph);\n    graph.data(data);\n    graph.render();\n    graph.fitView();\n    graph.on('edge:mouseenter', function (evt) {\n      var item = evt.item;\n      graph.setItemState(item, 'hover', true);\n\n      if (handleEdgeHover) {\n        handleEdgeHover(item, graph);\n      }\n    });\n    graph.on('node:mouseenter', function (evt) {\n      var item = evt.item;\n      graph.setItemState(item, 'hover', false);\n\n      if (handleNodeHover) {\n        handleNodeHover(item, graph);\n      }\n    });\n    graph.on('edge:mouseleave', function (evt) {\n      var item = evt.item;\n      graph.setItemState(item, 'hover', false);\n\n      if (handleEdgeUnHover) {\n        handleEdgeUnHover(item, graph);\n      }\n    });\n    graph.on('node:mouseleave', function (evt) {\n      var item = evt.item;\n      graph.setItemState(item, 'hover', false);\n\n      if (handleNodeUnHover) {\n        handleNodeUnHover(item, graph);\n      }\n    });\n    graph.on('edge:click', function (evt) {\n      var item = evt.item;\n\n      if (handleEdgeClick) {\n        handleEdgeClick(item, graph);\n      }\n    });\n    graph.on('node:click', function (evt) {\n      var item = evt.item;\n\n      if (handleNodeClick) {\n        handleNodeClick(item, graph);\n      }\n    });\n    graph.on('canvas:click', function (evt) {\n      handleCanvasClick && handleCanvasClick(graph);\n    });\n    return function () {\n      return graph.destroy();\n    };\n  }, []);\n  return React.createElement(ErrorBoundary, null, React.createElement(\"div\", {\n    className: className,\n    style: style,\n    ref: container\n  }));\n};\n\nexport default DagreGraph;","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/@ant-design/charts/es/graph/dagre.js"],"names":["React","useEffect","G6","ErrorBoundary","getGraphSize","processMinimap","useGraph","defaultStateStyles","hover","stroke","lineWidth","defaultNodeSize","defaultNodeStyle","defaultNodeAnchorPoints","defaultEdgeStyle","endArrow","path","Arrow","vee","fill","defaultLayout","type","rankdir","nodesepFunc","d","ranksepFunc","controlPoints","defaultLabelCfg","style","fontSize","graph","DagreGraph","_a","data","className","width","height","_b","nodeType","_c","edgeType","_d","behaviors","_e","nodeSize","_f","nodeLabelCfg","_g","edgeLabelCfg","_h","nodeAnchorPoints","_j","layout","minimapCfg","_k","nodeStyle","_l","edgeStyle","_m","nodeStateStyles","_o","edgeStateStyles","handleEdgeClick","handleEdgeHover","handleEdgeUnHover","handleNodeClick","handleNodeHover","handleNodeUnHover","handleCanvasClick","graphRef","props","container","useRef","graphSize","destroyed","Graph","current","modes","default","defaultNode","size","anchorPoints","labelCfg","defaultEdge","render","fitView","on","evt","item","setItemState","destroy","createElement","ref"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport G6 from '@antv/g6/es';\nimport { ErrorBoundary } from '../base';\nimport { getGraphSize, processMinimap } from './util';\nimport useGraph from '../hooks/useGraph';\nvar defaultStateStyles = {\n    hover: {\n        stroke: '#1890ff',\n        lineWidth: 2\n    }\n};\nvar defaultNodeSize = [120, 40];\nvar defaultNodeStyle = {\n    stroke: '#40a9ff'\n};\nvar defaultNodeAnchorPoints = [[0.5, 0], [0.5, 1]];\nvar defaultEdgeStyle = {\n    stroke: '#91d5ff',\n    endArrow: {\n        path: G6.Arrow.vee(10, 10),\n        fill: '#91d5ff',\n    }\n};\nvar defaultLayout = {\n    type: 'dagre',\n    rankdir: 'TB',\n    nodesepFunc: function (d) {\n        return 0;\n    },\n    ranksepFunc: function (d) {\n        return 0;\n    },\n    controlPoints: true\n};\nvar defaultLabelCfg = {\n    style: {\n        fill: '#000',\n        fontSize: 12\n    }\n};\nvar graph;\nvar DagreGraph = function (_a) {\n    var data = _a.data, className = _a.className, style = _a.style, width = _a.width, height = _a.height, _b = _a.nodeType, nodeType = _b === void 0 ? 'modelRect' : _b, _c = _a.edgeType, edgeType = _c === void 0 ? 'polyline' : _c, _d = _a.behaviors, behaviors = _d === void 0 ? ['zoom-canvas', 'drag-canvas'] : _d, _e = _a.nodeSize, nodeSize = _e === void 0 ? defaultNodeSize : _e, _f = _a.nodeLabelCfg, nodeLabelCfg = _f === void 0 ? defaultLabelCfg : _f, _g = _a.edgeLabelCfg, edgeLabelCfg = _g === void 0 ? defaultLabelCfg : _g, _h = _a.nodeAnchorPoints, nodeAnchorPoints = _h === void 0 ? defaultNodeAnchorPoints : _h, _j = _a.layout, layout = _j === void 0 ? defaultLayout : _j, minimapCfg = _a.minimapCfg, _k = _a.nodeStyle, nodeStyle = _k === void 0 ? defaultNodeStyle : _k, _l = _a.edgeStyle, edgeStyle = _l === void 0 ? defaultEdgeStyle : _l, _m = _a.nodeStateStyles, nodeStateStyles = _m === void 0 ? defaultStateStyles : _m, _o = _a.edgeStateStyles, edgeStateStyles = _o === void 0 ? defaultStateStyles : _o, handleEdgeClick = _a.handleEdgeClick, handleEdgeHover = _a.handleEdgeHover, handleEdgeUnHover = _a.handleEdgeUnHover, handleNodeClick = _a.handleNodeClick, handleNodeHover = _a.handleNodeHover, handleNodeUnHover = _a.handleNodeUnHover, handleCanvasClick = _a.handleCanvasClick, graphRef = _a.graphRef;\n    var props = {\n        data: data,\n        className: className,\n        style: style,\n        width: width,\n        height: height,\n        nodeType: nodeType,\n        edgeType: edgeType,\n        behaviors: behaviors,\n        nodeSize: nodeSize,\n        nodeLabelCfg: nodeLabelCfg,\n        edgeLabelCfg: edgeLabelCfg,\n        nodeAnchorPoints: nodeAnchorPoints,\n        layout: layout,\n        minimapCfg: minimapCfg,\n        nodeStyle: nodeStyle,\n        edgeStyle: edgeStyle,\n        nodeStateStyles: nodeStateStyles,\n        edgeStateStyles: edgeStateStyles,\n        handleEdgeClick: handleEdgeClick,\n        handleEdgeHover: handleEdgeHover,\n        handleEdgeUnHover: handleEdgeUnHover,\n        handleNodeClick: handleNodeClick,\n        handleNodeHover: handleNodeHover,\n        handleNodeUnHover: handleNodeUnHover,\n        handleCanvasClick: handleCanvasClick,\n        graphRef: graphRef\n    };\n    var container = React.useRef(null);\n    useGraph(graph, props, container);\n    useEffect(function () {\n        var graphSize = getGraphSize(width, height, container);\n        if (!graph || graph.destroyed) {\n            graph = new G6.Graph({\n                container: container.current,\n                width: graphSize[0],\n                height: graphSize[1],\n                modes: {\n                    default: behaviors,\n                },\n                defaultNode: {\n                    type: nodeType,\n                    size: nodeSize,\n                    style: nodeStyle,\n                    anchorPoints: nodeAnchorPoints,\n                    labelCfg: nodeLabelCfg\n                },\n                defaultEdge: {\n                    type: edgeType,\n                    style: edgeStyle,\n                    labelCfg: edgeLabelCfg\n                },\n                nodeStateStyles: nodeStateStyles,\n                edgeStateStyles: edgeStateStyles,\n                layout: layout,\n            });\n            if (graphRef) {\n                graphRef.current = graph;\n            }\n        }\n        processMinimap(minimapCfg, graph);\n        graph.data(data);\n        graph.render();\n        graph.fitView();\n        graph.on('edge:mouseenter', function (evt) {\n            var item = evt.item;\n            graph.setItemState(item, 'hover', true);\n            if (handleEdgeHover) {\n                handleEdgeHover(item, graph);\n            }\n        });\n        graph.on('node:mouseenter', function (evt) {\n            var item = evt.item;\n            graph.setItemState(item, 'hover', false);\n            if (handleNodeHover) {\n                handleNodeHover(item, graph);\n            }\n        });\n        graph.on('edge:mouseleave', function (evt) {\n            var item = evt.item;\n            graph.setItemState(item, 'hover', false);\n            if (handleEdgeUnHover) {\n                handleEdgeUnHover(item, graph);\n            }\n        });\n        graph.on('node:mouseleave', function (evt) {\n            var item = evt.item;\n            graph.setItemState(item, 'hover', false);\n            if (handleNodeUnHover) {\n                handleNodeUnHover(item, graph);\n            }\n        });\n        graph.on('edge:click', function (evt) {\n            var item = evt.item;\n            if (handleEdgeClick) {\n                handleEdgeClick(item, graph);\n            }\n        });\n        graph.on('node:click', function (evt) {\n            var item = evt.item;\n            if (handleNodeClick) {\n                handleNodeClick(item, graph);\n            }\n        });\n        graph.on('canvas:click', function (evt) {\n            handleCanvasClick && handleCanvasClick(graph);\n        });\n        return function () { return graph.destroy(); };\n    }, []);\n    return (React.createElement(ErrorBoundary, null,\n        React.createElement(\"div\", { className: className, style: style, ref: container })));\n};\nexport default DagreGraph;\n"]},"metadata":{},"sourceType":"module"}