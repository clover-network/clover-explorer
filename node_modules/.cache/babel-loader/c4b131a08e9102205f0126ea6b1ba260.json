{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\"use strict\";\n\nexports.__esModule = true;\n\nvar util_1 = require(\"zrender/lib/core/util\");\n\nvar Source_1 = require(\"../Source\");\n\nvar types_1 = require(\"../../util/types\");\n\nvar sourceHelper_1 = require(\"./sourceHelper\");\n\nvar transform_1 = require(\"./transform\");\n\nvar SourceManager = function () {\n  function SourceManager(sourceHost) {\n    this._sourceList = [];\n    this._upstreamSignList = [];\n    this._versionSignBase = 0;\n    this._sourceHost = sourceHost;\n  }\n\n  SourceManager.prototype.dirty = function () {\n    this._setLocalSource([], []);\n  };\n\n  SourceManager.prototype._setLocalSource = function (sourceList, upstreamSignList) {\n    this._sourceList = sourceList;\n    this._upstreamSignList = upstreamSignList;\n    this._versionSignBase++;\n\n    if (this._versionSignBase > 9e10) {\n      this._versionSignBase = 0;\n    }\n  };\n\n  SourceManager.prototype._getVersionSign = function () {\n    return this._sourceHost.uid + '_' + this._versionSignBase;\n  };\n\n  SourceManager.prototype.prepareSource = function () {\n    if (this._isDirty()) {\n      this._createSource();\n    }\n  };\n\n  SourceManager.prototype._createSource = function () {\n    this._setLocalSource([], []);\n\n    var sourceHost = this._sourceHost;\n\n    var upSourceMgrList = this._getUpstreamSourceManagers();\n\n    var hasUpstream = !!upSourceMgrList.length;\n    var resultSourceList;\n    var upstreamSignList;\n\n    if (isSeries(sourceHost)) {\n      var seriesModel = sourceHost;\n      var data = void 0;\n      var sourceFormat = void 0;\n      var upSource = void 0;\n\n      if (hasUpstream) {\n        var upSourceMgr = upSourceMgrList[0];\n        upSourceMgr.prepareSource();\n        upSource = upSourceMgr.getSource();\n        data = upSource.data;\n        sourceFormat = upSource.sourceFormat;\n        upstreamSignList = [upSourceMgr._getVersionSign()];\n      } else {\n        data = seriesModel.get('data', true);\n        sourceFormat = util_1.isTypedArray(data) ? types_1.SOURCE_FORMAT_TYPED_ARRAY : types_1.SOURCE_FORMAT_ORIGINAL;\n        upstreamSignList = [];\n      }\n\n      var thisMetaRawOption = sourceHelper_1.inheritSourceMetaRawOption(upSource, this._getSourceMetaRawOption());\n      resultSourceList = [Source_1.createSource(data, thisMetaRawOption, sourceFormat, seriesModel.get('encode', true))];\n    } else {\n      var datasetModel = sourceHost;\n\n      if (hasUpstream) {\n        var result = this._applyTransform(upSourceMgrList);\n\n        resultSourceList = result.sourceList;\n        upstreamSignList = result.upstreamSignList;\n      } else {\n        var sourceData = datasetModel.get('source', true);\n        resultSourceList = [Source_1.createSource(sourceData, this._getSourceMetaRawOption(), null, null)];\n        upstreamSignList = [];\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      util_1.assert(resultSourceList && upstreamSignList);\n    }\n\n    this._setLocalSource(resultSourceList, upstreamSignList);\n  };\n\n  SourceManager.prototype._applyTransform = function (upMgrList) {\n    var datasetModel = this._sourceHost;\n    var transformOption = datasetModel.get('transform', true);\n    var fromTransformResult = datasetModel.get('fromTransformResult', true);\n\n    if (process.env.NODE_ENV !== 'production') {\n      util_1.assert(fromTransformResult != null || transformOption != null);\n    }\n\n    if (fromTransformResult != null) {\n      var errMsg = '';\n\n      if (upMgrList.length !== 1) {\n        if (process.env.NODE_ENV !== 'production') {\n          errMsg = 'When using `fromTransformResult`, there should be only one upstream dataset';\n        }\n\n        doThrow(errMsg);\n      }\n    }\n\n    var sourceList;\n    var upSourceList = [];\n    var upstreamSignList = [];\n    util_1.each(upMgrList, function (upMgr) {\n      upMgr.prepareSource();\n      var upSource = upMgr.getSource(fromTransformResult || 0);\n      var errMsg = '';\n\n      if (fromTransformResult != null && !upSource) {\n        if (process.env.NODE_ENV !== 'production') {\n          errMsg = 'Can not retrieve result by `fromTransformResult`: ' + fromTransformResult;\n        }\n\n        doThrow(errMsg);\n      }\n\n      upSourceList.push(upSource);\n      upstreamSignList.push(upMgr._getVersionSign());\n    });\n\n    if (transformOption) {\n      sourceList = transform_1.applyDataTransform(transformOption, upSourceList, {\n        datasetIndex: datasetModel.componentIndex\n      });\n    } else if (fromTransformResult != null) {\n      sourceList = [Source_1.cloneSourceShallow(upSourceList[0])];\n    }\n\n    return {\n      sourceList: sourceList,\n      upstreamSignList: upstreamSignList\n    };\n  };\n\n  SourceManager.prototype._isDirty = function () {\n    var sourceList = this._sourceList;\n\n    if (!sourceList.length) {\n      return true;\n    }\n\n    var upSourceMgrList = this._getUpstreamSourceManagers();\n\n    for (var i = 0; i < upSourceMgrList.length; i++) {\n      var upSrcMgr = upSourceMgrList[i];\n\n      if (upSrcMgr._isDirty() || this._upstreamSignList[i] !== upSrcMgr._getVersionSign()) {\n        return true;\n      }\n    }\n  };\n\n  SourceManager.prototype.getSource = function (sourceIndex) {\n    return this._sourceList[sourceIndex || 0];\n  };\n\n  SourceManager.prototype._getUpstreamSourceManagers = function () {\n    var sourceHost = this._sourceHost;\n\n    if (isSeries(sourceHost)) {\n      var datasetModel = sourceHelper_1.querySeriesUpstreamDatasetModel(sourceHost);\n      return !datasetModel ? [] : [datasetModel.getSourceManager()];\n    } else {\n      return util_1.map(sourceHelper_1.queryDatasetUpstreamDatasetModels(sourceHost), function (datasetModel) {\n        return datasetModel.getSourceManager();\n      });\n    }\n  };\n\n  SourceManager.prototype._getSourceMetaRawOption = function () {\n    var sourceHost = this._sourceHost;\n    var seriesLayoutBy;\n    var sourceHeader;\n    var dimensions;\n\n    if (isSeries(sourceHost)) {\n      seriesLayoutBy = sourceHost.get('seriesLayoutBy', true);\n      sourceHeader = sourceHost.get('sourceHeader', true);\n      dimensions = sourceHost.get('dimensions', true);\n    } else if (!this._getUpstreamSourceManagers().length) {\n      var model = sourceHost;\n      seriesLayoutBy = model.get('seriesLayoutBy', true);\n      sourceHeader = model.get('sourceHeader', true);\n      dimensions = model.get('dimensions', true);\n    }\n\n    return {\n      seriesLayoutBy: seriesLayoutBy,\n      sourceHeader: sourceHeader,\n      dimensions: dimensions\n    };\n  };\n\n  return SourceManager;\n}();\n\nexports.SourceManager = SourceManager;\n\nfunction disableTransformOptionMerge(datasetModel) {\n  var transformOption = datasetModel.option.transform;\n  transformOption && util_1.setAsPrimitive(datasetModel.option.transform);\n}\n\nexports.disableTransformOptionMerge = disableTransformOptionMerge;\n\nfunction isSeries(sourceHost) {\n  return sourceHost.mainType === 'series';\n}\n\nfunction doThrow(errMsg) {\n  throw new Error(errMsg);\n}","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/echarts/lib/data/helper/sourceManager.js"],"names":["exports","__esModule","util_1","require","Source_1","types_1","sourceHelper_1","transform_1","SourceManager","sourceHost","_sourceList","_upstreamSignList","_versionSignBase","_sourceHost","prototype","dirty","_setLocalSource","sourceList","upstreamSignList","_getVersionSign","uid","prepareSource","_isDirty","_createSource","upSourceMgrList","_getUpstreamSourceManagers","hasUpstream","length","resultSourceList","isSeries","seriesModel","data","sourceFormat","upSource","upSourceMgr","getSource","get","isTypedArray","SOURCE_FORMAT_TYPED_ARRAY","SOURCE_FORMAT_ORIGINAL","thisMetaRawOption","inheritSourceMetaRawOption","_getSourceMetaRawOption","createSource","datasetModel","result","_applyTransform","sourceData","process","env","NODE_ENV","assert","upMgrList","transformOption","fromTransformResult","errMsg","doThrow","upSourceList","each","upMgr","push","applyDataTransform","datasetIndex","componentIndex","cloneSourceShallow","i","upSrcMgr","sourceIndex","querySeriesUpstreamDatasetModel","getSourceManager","map","queryDatasetUpstreamDatasetModels","seriesLayoutBy","sourceHeader","dimensions","model","disableTransformOptionMerge","option","transform","setAsPrimitive","mainType","Error"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n\"use strict\";\n\nexports.__esModule = true;\n\nvar util_1 = require(\"zrender/lib/core/util\");\n\nvar Source_1 = require(\"../Source\");\n\nvar types_1 = require(\"../../util/types\");\n\nvar sourceHelper_1 = require(\"./sourceHelper\");\n\nvar transform_1 = require(\"./transform\");\n\nvar SourceManager = function () {\n  function SourceManager(sourceHost) {\n    this._sourceList = [];\n    this._upstreamSignList = [];\n    this._versionSignBase = 0;\n    this._sourceHost = sourceHost;\n  }\n\n  SourceManager.prototype.dirty = function () {\n    this._setLocalSource([], []);\n  };\n\n  SourceManager.prototype._setLocalSource = function (sourceList, upstreamSignList) {\n    this._sourceList = sourceList;\n    this._upstreamSignList = upstreamSignList;\n    this._versionSignBase++;\n\n    if (this._versionSignBase > 9e10) {\n      this._versionSignBase = 0;\n    }\n  };\n\n  SourceManager.prototype._getVersionSign = function () {\n    return this._sourceHost.uid + '_' + this._versionSignBase;\n  };\n\n  SourceManager.prototype.prepareSource = function () {\n    if (this._isDirty()) {\n      this._createSource();\n    }\n  };\n\n  SourceManager.prototype._createSource = function () {\n    this._setLocalSource([], []);\n\n    var sourceHost = this._sourceHost;\n\n    var upSourceMgrList = this._getUpstreamSourceManagers();\n\n    var hasUpstream = !!upSourceMgrList.length;\n    var resultSourceList;\n    var upstreamSignList;\n\n    if (isSeries(sourceHost)) {\n      var seriesModel = sourceHost;\n      var data = void 0;\n      var sourceFormat = void 0;\n      var upSource = void 0;\n\n      if (hasUpstream) {\n        var upSourceMgr = upSourceMgrList[0];\n        upSourceMgr.prepareSource();\n        upSource = upSourceMgr.getSource();\n        data = upSource.data;\n        sourceFormat = upSource.sourceFormat;\n        upstreamSignList = [upSourceMgr._getVersionSign()];\n      } else {\n        data = seriesModel.get('data', true);\n        sourceFormat = util_1.isTypedArray(data) ? types_1.SOURCE_FORMAT_TYPED_ARRAY : types_1.SOURCE_FORMAT_ORIGINAL;\n        upstreamSignList = [];\n      }\n\n      var thisMetaRawOption = sourceHelper_1.inheritSourceMetaRawOption(upSource, this._getSourceMetaRawOption());\n      resultSourceList = [Source_1.createSource(data, thisMetaRawOption, sourceFormat, seriesModel.get('encode', true))];\n    } else {\n      var datasetModel = sourceHost;\n\n      if (hasUpstream) {\n        var result = this._applyTransform(upSourceMgrList);\n\n        resultSourceList = result.sourceList;\n        upstreamSignList = result.upstreamSignList;\n      } else {\n        var sourceData = datasetModel.get('source', true);\n        resultSourceList = [Source_1.createSource(sourceData, this._getSourceMetaRawOption(), null, null)];\n        upstreamSignList = [];\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      util_1.assert(resultSourceList && upstreamSignList);\n    }\n\n    this._setLocalSource(resultSourceList, upstreamSignList);\n  };\n\n  SourceManager.prototype._applyTransform = function (upMgrList) {\n    var datasetModel = this._sourceHost;\n    var transformOption = datasetModel.get('transform', true);\n    var fromTransformResult = datasetModel.get('fromTransformResult', true);\n\n    if (process.env.NODE_ENV !== 'production') {\n      util_1.assert(fromTransformResult != null || transformOption != null);\n    }\n\n    if (fromTransformResult != null) {\n      var errMsg = '';\n\n      if (upMgrList.length !== 1) {\n        if (process.env.NODE_ENV !== 'production') {\n          errMsg = 'When using `fromTransformResult`, there should be only one upstream dataset';\n        }\n\n        doThrow(errMsg);\n      }\n    }\n\n    var sourceList;\n    var upSourceList = [];\n    var upstreamSignList = [];\n    util_1.each(upMgrList, function (upMgr) {\n      upMgr.prepareSource();\n      var upSource = upMgr.getSource(fromTransformResult || 0);\n      var errMsg = '';\n\n      if (fromTransformResult != null && !upSource) {\n        if (process.env.NODE_ENV !== 'production') {\n          errMsg = 'Can not retrieve result by `fromTransformResult`: ' + fromTransformResult;\n        }\n\n        doThrow(errMsg);\n      }\n\n      upSourceList.push(upSource);\n      upstreamSignList.push(upMgr._getVersionSign());\n    });\n\n    if (transformOption) {\n      sourceList = transform_1.applyDataTransform(transformOption, upSourceList, {\n        datasetIndex: datasetModel.componentIndex\n      });\n    } else if (fromTransformResult != null) {\n      sourceList = [Source_1.cloneSourceShallow(upSourceList[0])];\n    }\n\n    return {\n      sourceList: sourceList,\n      upstreamSignList: upstreamSignList\n    };\n  };\n\n  SourceManager.prototype._isDirty = function () {\n    var sourceList = this._sourceList;\n\n    if (!sourceList.length) {\n      return true;\n    }\n\n    var upSourceMgrList = this._getUpstreamSourceManagers();\n\n    for (var i = 0; i < upSourceMgrList.length; i++) {\n      var upSrcMgr = upSourceMgrList[i];\n\n      if (upSrcMgr._isDirty() || this._upstreamSignList[i] !== upSrcMgr._getVersionSign()) {\n        return true;\n      }\n    }\n  };\n\n  SourceManager.prototype.getSource = function (sourceIndex) {\n    return this._sourceList[sourceIndex || 0];\n  };\n\n  SourceManager.prototype._getUpstreamSourceManagers = function () {\n    var sourceHost = this._sourceHost;\n\n    if (isSeries(sourceHost)) {\n      var datasetModel = sourceHelper_1.querySeriesUpstreamDatasetModel(sourceHost);\n      return !datasetModel ? [] : [datasetModel.getSourceManager()];\n    } else {\n      return util_1.map(sourceHelper_1.queryDatasetUpstreamDatasetModels(sourceHost), function (datasetModel) {\n        return datasetModel.getSourceManager();\n      });\n    }\n  };\n\n  SourceManager.prototype._getSourceMetaRawOption = function () {\n    var sourceHost = this._sourceHost;\n    var seriesLayoutBy;\n    var sourceHeader;\n    var dimensions;\n\n    if (isSeries(sourceHost)) {\n      seriesLayoutBy = sourceHost.get('seriesLayoutBy', true);\n      sourceHeader = sourceHost.get('sourceHeader', true);\n      dimensions = sourceHost.get('dimensions', true);\n    } else if (!this._getUpstreamSourceManagers().length) {\n      var model = sourceHost;\n      seriesLayoutBy = model.get('seriesLayoutBy', true);\n      sourceHeader = model.get('sourceHeader', true);\n      dimensions = model.get('dimensions', true);\n    }\n\n    return {\n      seriesLayoutBy: seriesLayoutBy,\n      sourceHeader: sourceHeader,\n      dimensions: dimensions\n    };\n  };\n\n  return SourceManager;\n}();\n\nexports.SourceManager = SourceManager;\n\nfunction disableTransformOptionMerge(datasetModel) {\n  var transformOption = datasetModel.option.transform;\n  transformOption && util_1.setAsPrimitive(datasetModel.option.transform);\n}\n\nexports.disableTransformOptionMerge = disableTransformOptionMerge;\n\nfunction isSeries(sourceHost) {\n  return sourceHost.mainType === 'series';\n}\n\nfunction doThrow(errMsg) {\n  throw new Error(errMsg);\n}"]},"metadata":{},"sourceType":"script"}