{"ast":null,"code":"import { clone, sortBy, valuesOfKey, getRange, each, hasKey, groupBy, isEmpty } from '@antv/util'; // 进行转换得到值所在的 range\n\nfunction getBinKey(value, binWidth) {\n  var index = Math.floor(value / binWidth);\n  return [binWidth * index, binWidth * (index + 1)];\n} // 默认 sturges 转换\n\n\nfunction sturges(values) {\n  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;\n}\n/**\n * 对数据进行百分比化\n * @param data\n * @param binField\n * @param binWidth\n * @param binNumber\n * @param stackField\n */\n\n\nexport function binHistogram(data, binField, binWidth, binNumber, stackField) {\n  var originData_copy = clone(data); // 根据 binField 对源数据进行排序\n\n  sortBy(originData_copy, binField); // 获取源数据 binField 的 range\n\n  var values = valuesOfKey(originData_copy, binField);\n  var range = getRange(values);\n  var rangeWidth = range.max - range.min; // 计算分箱，直方图分箱的计算基于 binWidth，如配置了 binNumber 则将其转为 binWidth 进行计算\n\n  var _binWidth = binWidth;\n\n  if (!binWidth && binNumber) {\n    _binWidth = rangeWidth / binNumber;\n  } // 当 binWidth 和 binNumber 都没有指定的情况，采用 Sturges formula 自动生成 binWidth\n\n\n  if (!binWidth && !binNumber) {\n    var _defaultBinNumber = sturges(values);\n\n    _binWidth = rangeWidth / _defaultBinNumber;\n  } // 构建 key - StatisticData 结构\n\n\n  var bins = {};\n  var groups = groupBy(originData_copy, stackField); // 判断分组是否为空，如果为空，说明没有 stackField 字段\n\n  if (isEmpty(groups)) {\n    each(originData_copy, function (data) {\n      var value = data[binField];\n      var bin = getBinKey(value, _binWidth);\n      var binKey = bin[0] + \"-\" + bin[1];\n\n      if (!hasKey(bins, binKey)) {\n        bins[binKey] = {\n          range: bin,\n          count: 0\n        };\n      }\n\n      bins[binKey].count += 1;\n    });\n  } else {\n    Object.keys(groups).forEach(function (groupKey) {\n      each(groups[groupKey], function (data) {\n        var value = data[binField];\n        var bin = getBinKey(value, _binWidth);\n        var binKey = bin[0] + \"-\" + bin[1];\n        var groupKeyBinKey = binKey + \"-\" + groupKey;\n\n        if (!hasKey(bins, groupKeyBinKey)) {\n          bins[groupKeyBinKey] = {\n            range: bin,\n            count: 0\n          };\n          bins[groupKeyBinKey][stackField] = groupKey;\n        }\n\n        bins[groupKeyBinKey].count += 1;\n      });\n    });\n  } // 将分箱数据转换为 plotData 才是图表所需要的\n\n\n  var plotData = [];\n  each(bins, function (bin) {\n    plotData.push(bin);\n  });\n  return plotData;\n}","map":{"version":3,"sources":["../../../src/utils/transform/histogram.ts"],"names":[],"mappings":"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","sourcesContent":["import { clone, sortBy, valuesOfKey, getRange, each, hasKey, groupBy, isEmpty } from '@antv/util';\nimport { Data } from '../../types';\n\ntype StatisticData = {\n  range: Array<number>;\n  count: number;\n};\ntype StatisticBin = {\n  [key: string]: StatisticData;\n};\n\n// 进行转换得到值所在的 range\nfunction getBinKey(value: number, binWidth: number): [number, number] {\n  const index = Math.floor(value / binWidth);\n  return [binWidth * index, binWidth * (index + 1)];\n}\n\n// 默认 sturges 转换\nfunction sturges(values: Array<number>): number {\n  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;\n}\n/**\n * 对数据进行百分比化\n * @param data\n * @param binField\n * @param binWidth\n * @param binNumber\n * @param stackField\n */\nexport function binHistogram(data: Data, binField: string, binWidth: number, binNumber?: number, stackField?: string) {\n  const originData_copy = clone(data);\n\n  // 根据 binField 对源数据进行排序\n  sortBy(originData_copy, binField);\n\n  // 获取源数据 binField 的 range\n  const values = valuesOfKey(originData_copy, binField);\n  const range = getRange(values);\n  const rangeWidth = range.max - range.min;\n\n  // 计算分箱，直方图分箱的计算基于 binWidth，如配置了 binNumber 则将其转为 binWidth 进行计算\n  let _binWidth = binWidth;\n  if (!binWidth && binNumber) {\n    _binWidth = rangeWidth / binNumber;\n  }\n  // 当 binWidth 和 binNumber 都没有指定的情况，采用 Sturges formula 自动生成 binWidth\n  if (!binWidth && !binNumber) {\n    const _defaultBinNumber = sturges(values);\n    _binWidth = rangeWidth / _defaultBinNumber;\n  }\n  // 构建 key - StatisticData 结构\n  const bins: StatisticBin = {};\n  const groups = groupBy(originData_copy, stackField);\n  // 判断分组是否为空，如果为空，说明没有 stackField 字段\n  if (isEmpty(groups)) {\n    each(originData_copy, (data: any) => {\n      const value = data[binField];\n      const bin = getBinKey(value, _binWidth);\n      const binKey = `${bin[0]}-${bin[1]}`;\n      if (!hasKey(bins, binKey)) {\n        bins[binKey] = { range: bin, count: 0 };\n      }\n      bins[binKey].count += 1;\n    });\n  } else {\n    Object.keys(groups).forEach((groupKey: string) => {\n      each(groups[groupKey], (data: any) => {\n        const value = data[binField];\n        const bin = getBinKey(value, _binWidth);\n        const binKey = `${bin[0]}-${bin[1]}`;\n        const groupKeyBinKey = `${binKey}-${groupKey}`;\n        if (!hasKey(bins, groupKeyBinKey)) {\n          bins[groupKeyBinKey] = { range: bin, count: 0 };\n          bins[groupKeyBinKey][stackField] = groupKey;\n        }\n        bins[groupKeyBinKey].count += 1;\n      });\n    });\n  }\n  // 将分箱数据转换为 plotData 才是图表所需要的\n  const plotData: Array<StatisticData> = [];\n  each(bins, (bin: StatisticData) => {\n    plotData.push(bin);\n  });\n  return plotData;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}