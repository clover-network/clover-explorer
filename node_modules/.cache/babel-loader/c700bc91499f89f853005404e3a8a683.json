{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assembleFont = exports.getTextWidth = exports.getLineSpaceing = exports.getTextHeight = void 0;\n\nvar util_1 = require(\"./util\");\n\nvar offscreen_1 = require(\"./offscreen\");\n/**\n * 获取文本的高度\n * @param text 文本\n * @param fontSize 字体大小\n * @param lineHeight 行高，可以为空\n */\n\n\nfunction getTextHeight(text, fontSize, lineHeight) {\n  var lineCount = 1;\n\n  if (util_1.isString(text)) {\n    lineCount = text.split('\\n').length;\n  }\n\n  if (lineCount > 1) {\n    var spaceingY = getLineSpaceing(fontSize, lineHeight);\n    return fontSize * lineCount + spaceingY * (lineCount - 1);\n  }\n\n  return fontSize;\n}\n\nexports.getTextHeight = getTextHeight;\n/**\n * 获取行间距如果文本多行，需要获取文本间距\n * @param fontSize 字体大小\n * @param lineHeight 行高\n */\n\nfunction getLineSpaceing(fontSize, lineHeight) {\n  return lineHeight ? lineHeight - fontSize : fontSize * 0.14;\n}\n\nexports.getLineSpaceing = getLineSpaceing;\n/**\n * 字体宽度\n * @param text 文本\n * @param font 字体\n */\n\nfunction getTextWidth(text, font) {\n  var context = offscreen_1.getOffScreenContext(); // 获取离屏的 ctx 进行计算\n\n  var width = 0; // null 或者 undefined 时，宽度为 0\n\n  if (util_1.isNil(text) || text === '') {\n    return width;\n  }\n\n  context.save();\n  context.font = font;\n\n  if (util_1.isString(text) && text.includes('\\n')) {\n    var textArr = text.split('\\n');\n    util_1.each(textArr, function (subText) {\n      var measureWidth = context.measureText(subText).width;\n\n      if (width < measureWidth) {\n        width = measureWidth;\n      }\n    });\n  } else {\n    width = context.measureText(text).width;\n  }\n\n  context.restore();\n  return width;\n}\n\nexports.getTextWidth = getTextWidth;\n\nfunction assembleFont(attrs) {\n  var fontSize = attrs.fontSize,\n      fontFamily = attrs.fontFamily,\n      fontWeight = attrs.fontWeight,\n      fontStyle = attrs.fontStyle,\n      fontVariant = attrs.fontVariant;\n  return [fontStyle, fontVariant, fontWeight, fontSize + \"px\", fontFamily].join(' ').trim();\n}\n\nexports.assembleFont = assembleFont;","map":{"version":3,"sources":["../../src/util/text.ts"],"names":[],"mappings":";;;;;;;AAAA,IAAA,MAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;AAGA;;;;;AAKG;;;AACH,SAAgB,aAAhB,CAA8B,IAA9B,EAA4C,QAA5C,EAA8D,UAA9D,EAAiF;AAC/E,MAAI,SAAS,GAAG,CAAhB;;AACA,MAAI,MAAA,CAAA,QAAA,CAAS,IAAT,CAAJ,EAAoB;AAClB,IAAA,SAAS,GAAG,IAAI,CAAC,KAAL,CAAW,IAAX,EAAiB,MAA7B;AACD;;AACD,MAAI,SAAS,GAAG,CAAhB,EAAmB;AACjB,QAAM,SAAS,GAAG,eAAe,CAAC,QAAD,EAAW,UAAX,CAAjC;AACA,WAAO,QAAQ,GAAG,SAAX,GAAuB,SAAS,IAAI,SAAS,GAAG,CAAhB,CAAvC;AACD;;AACD,SAAO,QAAP;AACD;;AAVD,OAAA,CAAA,aAAA,GAAA,aAAA;AAYA;;;;AAIG;;AACH,SAAgB,eAAhB,CAAgC,QAAhC,EAAkD,UAAlD,EAAqE;AACnE,SAAO,UAAU,GAAG,UAAU,GAAG,QAAhB,GAA2B,QAAQ,GAAG,IAAvD;AACD;;AAFD,OAAA,CAAA,eAAA,GAAA,eAAA;AAIA;;;;AAIG;;AACH,SAAgB,YAAhB,CAA6B,IAA7B,EAA2C,IAA3C,EAAuD;AACrD,MAAM,OAAO,GAAG,WAAA,CAAA,mBAAA,EAAhB,CADqD,CACd;;AACvC,MAAI,KAAK,GAAG,CAAZ,CAFqD,CAGrD;;AACA,MAAI,MAAA,CAAA,KAAA,CAAM,IAAN,KAAe,IAAI,KAAK,EAA5B,EAAgC;AAC9B,WAAO,KAAP;AACD;;AACD,EAAA,OAAO,CAAC,IAAR;AACA,EAAA,OAAO,CAAC,IAAR,GAAe,IAAf;;AACA,MAAI,MAAA,CAAA,QAAA,CAAS,IAAT,KAAkB,IAAI,CAAC,QAAL,CAAc,IAAd,CAAtB,EAA2C;AACzC,QAAM,OAAO,GAAG,IAAI,CAAC,KAAL,CAAW,IAAX,CAAhB;AACA,IAAA,MAAA,CAAA,IAAA,CAAK,OAAL,EAAc,UAAC,OAAD,EAAQ;AACpB,UAAM,YAAY,GAAG,OAAO,CAAC,WAAR,CAAoB,OAApB,EAA6B,KAAlD;;AACA,UAAI,KAAK,GAAG,YAAZ,EAA0B;AACxB,QAAA,KAAK,GAAG,YAAR;AACD;AACF,KALD;AAMD,GARD,MAQO;AACL,IAAA,KAAK,GAAG,OAAO,CAAC,WAAR,CAAoB,IAApB,EAA0B,KAAlC;AACD;;AACD,EAAA,OAAO,CAAC,OAAR;AACA,SAAO,KAAP;AACD;;AAtBD,OAAA,CAAA,YAAA,GAAA,YAAA;;AAwBA,SAAgB,YAAhB,CAA6B,KAA7B,EAA8C;AACpC,MAAA,QAAQ,GAAqD,KAAK,CAA1D,QAAR;AAAA,MAAU,UAAU,GAAyC,KAAK,CAA9C,UAApB;AAAA,MAAsB,UAAU,GAA6B,KAAK,CAAlC,UAAhC;AAAA,MAAkC,SAAS,GAAkB,KAAK,CAAvB,SAA3C;AAAA,MAA6C,WAAW,GAAK,KAAK,CAAV,WAAxD;AACR,SAAO,CAAC,SAAD,EAAY,WAAZ,EAAyB,UAAzB,EAAwC,QAAQ,GAAA,IAAhD,EAAsD,UAAtD,EAAkE,IAAlE,CAAuE,GAAvE,EAA4E,IAA5E,EAAP;AACD;;AAHD,OAAA,CAAA,YAAA,GAAA,YAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.assembleFont = exports.getTextWidth = exports.getLineSpaceing = exports.getTextHeight = void 0;\nvar util_1 = require(\"./util\");\nvar offscreen_1 = require(\"./offscreen\");\n/**\n * 获取文本的高度\n * @param text 文本\n * @param fontSize 字体大小\n * @param lineHeight 行高，可以为空\n */\nfunction getTextHeight(text, fontSize, lineHeight) {\n    var lineCount = 1;\n    if (util_1.isString(text)) {\n        lineCount = text.split('\\n').length;\n    }\n    if (lineCount > 1) {\n        var spaceingY = getLineSpaceing(fontSize, lineHeight);\n        return fontSize * lineCount + spaceingY * (lineCount - 1);\n    }\n    return fontSize;\n}\nexports.getTextHeight = getTextHeight;\n/**\n * 获取行间距如果文本多行，需要获取文本间距\n * @param fontSize 字体大小\n * @param lineHeight 行高\n */\nfunction getLineSpaceing(fontSize, lineHeight) {\n    return lineHeight ? lineHeight - fontSize : fontSize * 0.14;\n}\nexports.getLineSpaceing = getLineSpaceing;\n/**\n * 字体宽度\n * @param text 文本\n * @param font 字体\n */\nfunction getTextWidth(text, font) {\n    var context = offscreen_1.getOffScreenContext(); // 获取离屏的 ctx 进行计算\n    var width = 0;\n    // null 或者 undefined 时，宽度为 0\n    if (util_1.isNil(text) || text === '') {\n        return width;\n    }\n    context.save();\n    context.font = font;\n    if (util_1.isString(text) && text.includes('\\n')) {\n        var textArr = text.split('\\n');\n        util_1.each(textArr, function (subText) {\n            var measureWidth = context.measureText(subText).width;\n            if (width < measureWidth) {\n                width = measureWidth;\n            }\n        });\n    }\n    else {\n        width = context.measureText(text).width;\n    }\n    context.restore();\n    return width;\n}\nexports.getTextWidth = getTextWidth;\nfunction assembleFont(attrs) {\n    var fontSize = attrs.fontSize, fontFamily = attrs.fontFamily, fontWeight = attrs.fontWeight, fontStyle = attrs.fontStyle, fontVariant = attrs.fontVariant;\n    return [fontStyle, fontVariant, fontWeight, fontSize + \"px\", fontFamily].join(' ').trim();\n}\nexports.assembleFont = assembleFont;\n//# sourceMappingURL=text.js.map"]},"metadata":{},"sourceType":"script"}