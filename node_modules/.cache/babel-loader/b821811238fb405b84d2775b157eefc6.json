{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { each } from '@antv/util';\nimport { geometry as geometryAdaptor } from '../../adaptor/geometries/base';\nimport { interaction, animation, theme, tooltip } from '../../adaptor/common';\nimport { deepAssign, flow, pick } from '../../utils';\nimport { AXIS_META_CONFIG_KEYS } from '../../constant';\n/**\n * geometry 处理\n * @param params\n */\n\nfunction multiView(params) {\n  var chart = params.chart,\n      options = params.options;\n  var views = options.views,\n      legend = options.legend,\n      tooltip = options.tooltip;\n  each(views, function (v) {\n    var region = v.region,\n        data = v.data,\n        meta = v.meta,\n        axes = v.axes,\n        coordinate = v.coordinate,\n        annotations = v.annotations,\n        geometries = v.geometries; // 1. 创建 view\n\n    var viewOfG2 = chart.createView({\n      region: region\n    }); // 2. data\n\n    viewOfG2.data(data); // 3. meta\n\n    var scales = {};\n\n    if (axes) {\n      each(axes, function (axis, field) {\n        scales[field] = pick(axis, AXIS_META_CONFIG_KEYS);\n      });\n    }\n\n    scales = deepAssign({}, meta, scales);\n    viewOfG2.scale(scales); // 4. x y axis\n\n    if (!axes) {\n      viewOfG2.axis(false);\n    } else {\n      each(axes, function (axis, field) {\n        viewOfG2.axis(field, axis);\n      });\n    } // 5. coordinate\n\n\n    viewOfG2.coordinate(coordinate); // 6. geometry\n\n    each(geometries, function (geometry) {\n      var ext = geometryAdaptor({\n        chart: viewOfG2,\n        options: geometry\n      }).ext; // adjust\n\n      var adjust = geometry.adjust;\n\n      if (adjust) {\n        ext.geometry.adjust(adjust);\n      }\n    }); // 7. annotations\n\n    each(annotations, function (annotation) {\n      viewOfG2.annotation()[annotation.type](__assign({}, annotation));\n    });\n  }); // legend\n\n  if (!legend) {\n    chart.legend(false);\n  } else {\n    each(legend, function (l, field) {\n      chart.legend(field, l);\n    });\n  } // tooltip\n\n\n  chart.tooltip(tooltip);\n  return params;\n}\n/**\n * 图适配器\n * @param chart\n * @param options\n */\n\n\nexport function adaptor(params) {\n  return flow(animation, // 多 view 的图，动画配置放到最前面\n  multiView, interaction, animation, theme, tooltip // ... 其他的 adaptor flow\n  )(params);\n}","map":{"version":3,"sources":["../../../src/plots/multi-view/adaptor.ts"],"names":[],"mappings":"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","sourcesContent":["import { each } from '@antv/util';\nimport { geometry as geometryAdaptor } from '../../adaptor/geometries/base';\nimport { interaction, animation, theme, tooltip } from '../../adaptor/common';\nimport { Params } from '../../core/adaptor';\nimport { deepAssign, flow, pick } from '../../utils';\nimport { Axis } from '../../types/axis';\nimport { AXIS_META_CONFIG_KEYS } from '../../constant';\nimport { Legend } from '../../types/legend';\nimport { MultiViewOptions, IView, IGeometry } from './types';\n\n/**\n * geometry 处理\n * @param params\n */\nfunction multiView(params: Params<MultiViewOptions>): Params<MultiViewOptions> {\n  const { chart, options } = params;\n  const { views, legend, tooltip } = options;\n\n  each(views, (v: IView) => {\n    const { region, data, meta, axes, coordinate, annotations, geometries } = v;\n\n    // 1. 创建 view\n    const viewOfG2 = chart.createView({\n      region,\n    });\n\n    // 2. data\n    viewOfG2.data(data);\n\n    // 3. meta\n    let scales: Record<string, any> = {};\n    if (axes) {\n      each(axes, (axis: Axis, field: string) => {\n        scales[field] = pick(axis, AXIS_META_CONFIG_KEYS);\n      });\n    }\n\n    scales = deepAssign({}, meta, scales);\n    viewOfG2.scale(scales);\n\n    // 4. x y axis\n    if (!axes) {\n      viewOfG2.axis(false);\n    } else {\n      each(axes, (axis: Axis, field: string) => {\n        viewOfG2.axis(field, axis);\n      });\n    }\n\n    // 5. coordinate\n    viewOfG2.coordinate(coordinate);\n\n    // 6. geometry\n    each(geometries, (geometry: IGeometry) => {\n      const { ext } = geometryAdaptor({\n        chart: viewOfG2,\n        options: geometry,\n      });\n\n      // adjust\n      const { adjust } = geometry;\n      if (adjust) {\n        ext.geometry.adjust(adjust);\n      }\n    });\n\n    // 7. annotations\n    each(annotations, (annotation) => {\n      viewOfG2.annotation()[annotation.type]({\n        ...annotation,\n      });\n    });\n  });\n\n  // legend\n  if (!legend) {\n    chart.legend(false);\n  } else {\n    each(legend, (l: Legend, field: string) => {\n      chart.legend(field, l);\n    });\n  }\n\n  // tooltip\n  chart.tooltip(tooltip);\n  return params;\n}\n\n/**\n * 图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<MultiViewOptions>) {\n  return flow(\n    animation, // 多 view 的图，动画配置放到最前面\n    multiView,\n    interaction,\n    animation,\n    theme,\n    tooltip\n    // ... 其他的 adaptor flow\n  )(params);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}