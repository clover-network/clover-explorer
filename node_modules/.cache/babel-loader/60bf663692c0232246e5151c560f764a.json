{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { each } from '@antv/util';\nimport { point, line, interval } from '../../../adaptor/geometries';\nimport { pick, deepAssign } from '../../../utils';\nimport { isLine, isColumn } from './option';\n/**\n * 绘制单个图形\n * @param params\n */\n\nexport function drawSingleGeometry(params) {\n  var options = params.options,\n      chart = params.chart;\n  var geometryOption = options.geometryOption;\n  var isStack = geometryOption.isStack,\n      color = geometryOption.color,\n      seriesField = geometryOption.seriesField,\n      groupField = geometryOption.groupField,\n      isGroup = geometryOption.isGroup;\n  var FIELD_KEY = ['xField', 'yField'];\n\n  if (isLine(geometryOption)) {\n    // 绘制线\n    line(deepAssign({}, params, {\n      options: __assign(__assign(__assign({}, pick(options, FIELD_KEY)), geometryOption), {\n        line: {\n          color: geometryOption.color,\n          style: geometryOption.lineStyle\n        }\n      })\n    })); // 绘制点\n\n    point(deepAssign({}, params, {\n      options: __assign(__assign(__assign({}, pick(options, FIELD_KEY)), geometryOption), {\n        point: geometryOption.point && __assign({\n          color: color,\n          shape: 'circle'\n        }, geometryOption.point)\n      })\n    })); // adjust\n\n    var adjust_1 = [];\n\n    if (isGroup) {\n      adjust_1.push({\n        type: 'dodge',\n        dodgeBy: groupField || seriesField,\n        customOffset: 0\n      });\n    }\n\n    if (isStack) {\n      adjust_1.push({\n        type: 'stack'\n      });\n    }\n\n    if (adjust_1.length) {\n      each(chart.geometries, function (g) {\n        g.adjust(adjust_1);\n      });\n    }\n  }\n\n  if (isColumn(geometryOption)) {\n    interval(deepAssign({}, params, {\n      options: __assign(__assign(__assign({}, pick(options, FIELD_KEY)), geometryOption), {\n        widthRatio: geometryOption.columnWidthRatio,\n        interval: __assign(__assign({}, pick(geometryOption, ['color'])), {\n          style: geometryOption.columnStyle\n        })\n      })\n    }));\n  }\n\n  return params;\n}","map":{"version":3,"sources":["../../../../src/plots/dual-axes/util/geometry.ts"],"names":[],"mappings":"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","sourcesContent":["import { each } from '@antv/util';\nimport { Geometry } from '@antv/g2';\nimport { Params } from '../../../core/adaptor';\nimport { point, line, interval } from '../../../adaptor/geometries';\nimport { pick, deepAssign } from '../../../utils';\nimport { GeometryOption } from '../types';\nimport { isLine, isColumn } from './option';\n\n/**\n * 绘制单个图形\n * @param params\n */\nexport function drawSingleGeometry<O extends { xField: string; yField: string; geometryOption: GeometryOption }>(\n  params: Params<O>\n): Params<O> {\n  const { options, chart } = params;\n  const { geometryOption } = options;\n  const { isStack, color, seriesField, groupField, isGroup } = geometryOption;\n\n  const FIELD_KEY = ['xField', 'yField'];\n  if (isLine(geometryOption)) {\n    // 绘制线\n    line(\n      deepAssign({}, params, {\n        options: {\n          ...pick(options, FIELD_KEY),\n          ...geometryOption,\n          line: {\n            color: geometryOption.color,\n            style: geometryOption.lineStyle,\n          },\n        },\n      })\n    );\n    // 绘制点\n    point(\n      deepAssign({}, params, {\n        options: {\n          ...pick(options, FIELD_KEY),\n          ...geometryOption,\n          point: geometryOption.point && {\n            color,\n            shape: 'circle',\n            ...geometryOption.point,\n          },\n        },\n      })\n    );\n    // adjust\n    const adjust = [];\n    if (isGroup) {\n      adjust.push({\n        type: 'dodge',\n        dodgeBy: groupField || seriesField,\n        customOffset: 0,\n      });\n    }\n    if (isStack) {\n      adjust.push({\n        type: 'stack',\n      });\n    }\n    if (adjust.length) {\n      each(chart.geometries, (g: Geometry) => {\n        g.adjust(adjust);\n      });\n    }\n  }\n\n  if (isColumn(geometryOption)) {\n    interval(\n      deepAssign({}, params, {\n        options: {\n          ...pick(options, FIELD_KEY),\n          ...geometryOption,\n          widthRatio: geometryOption.columnWidthRatio,\n          interval: {\n            ...pick(geometryOption, ['color']),\n            style: geometryOption.columnStyle,\n          },\n        },\n      })\n    );\n  }\n\n  return params;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}