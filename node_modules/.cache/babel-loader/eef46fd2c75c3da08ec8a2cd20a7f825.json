{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { Plot } from '../../core/plot';\nimport { deepAssign } from '../../utils';\nimport { adaptor } from './adaptor';\nimport { processImageMask } from './utils'; // 注册的shape\n\nimport './shapes/word-cloud';\n\nvar WordCloud =\n/** @class */\nfunction (_super) {\n  __extends(WordCloud, _super);\n\n  function WordCloud() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /** 词云图 */\n\n\n    _this.type = 'word-cloud';\n    return _this;\n  }\n  /**\n   * 获取默认的 options 配置项\n   */\n\n\n  WordCloud.prototype.getDefaultOptions = function () {\n    return deepAssign({}, _super.prototype.getDefaultOptions.call(this), {\n      timeInterval: 2000,\n      tooltip: {\n        showTitle: false,\n        showMarkers: false,\n        showCrosshairs: false,\n        fields: ['text', 'value', 'color'],\n        formatter: function (datum) {\n          return {\n            name: datum.text,\n            value: datum.value\n          };\n        }\n      },\n      wordStyle: {\n        fontFamily: 'Verdana',\n        fontWeight: 'normal',\n        padding: 1,\n        fontSize: [12, 60],\n        rotation: [0, 90],\n        rotationSteps: 2,\n        rotateRatio: 0.5\n      }\n    });\n  };\n  /**\n   * 覆写父类方法，词云图需要加载图片资源，所以需要异步渲染\n   */\n\n\n  WordCloud.prototype.render = function () {\n    var _this = this;\n\n    return new Promise(function (res) {\n      var imageMask = _this.options.imageMask;\n\n      if (!imageMask) {\n        // 调用父类渲染函数\n        _super.prototype.render.call(_this);\n\n        res();\n        return;\n      }\n\n      var handler = function (img) {\n        _this.options = __assign(__assign({}, _this.options), {\n          imageMask: img || null\n        }); // 调用父类渲染函数\n\n        _super.prototype.render.call(_this);\n\n        res();\n      };\n\n      processImageMask(imageMask).then(handler).catch(handler);\n    });\n  };\n  /**\n   * 获取 词云图 的适配器\n   */\n\n\n  WordCloud.prototype.getSchemaAdaptor = function () {\n    return adaptor;\n  };\n  /**\n   * 覆写父类的方法，因为词云图使用 单独的函数 进行布局，原理上有些不一样\n   */\n\n\n  WordCloud.prototype.triggerResize = function () {\n    var _this = this;\n\n    if (!this.chart.destroyed) {\n      // 当整个词云图图表的宽高信息发生变化时，每个词语的坐标\n      // 需要重新执行 adaptor，不然会出现布局错乱，\n      // 如相邻词语重叠的情况。\n      this.execAdaptor(); // 延迟执行，有利于动画更流畅\n      // TODO: 在多次更改画布尺寸时，动画会越来越卡顿，原因未知\n\n      window.setTimeout(function () {\n        // 执行父类的方法\n        _super.prototype.triggerResize.call(_this);\n      });\n    }\n  };\n\n  return WordCloud;\n}(Plot);\n\nexport { WordCloud };","map":{"version":3,"sources":["../../../src/plots/word-cloud/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Plot } from '../../core/plot';\nimport { Adaptor } from '../../core/adaptor';\nimport { Datum } from '../../types';\nimport { deepAssign } from '../../utils';\nimport { WordCloudOptions } from './types';\nimport { adaptor } from './adaptor';\nimport { processImageMask } from './utils';\n// 注册的shape\nimport './shapes/word-cloud';\n\nexport { WordCloudOptions };\n\nexport class WordCloud extends Plot<WordCloudOptions> {\n  /** 词云图 */\n  public type: string = 'word-cloud';\n\n  /**\n   * 获取默认的 options 配置项\n   */\n  protected getDefaultOptions(): Partial<WordCloudOptions> {\n    return deepAssign({}, super.getDefaultOptions(), {\n      timeInterval: 2000,\n      tooltip: {\n        showTitle: false,\n        showMarkers: false,\n        showCrosshairs: false,\n        fields: ['text', 'value', 'color'],\n        formatter: (datum: Datum) => {\n          return { name: datum.text, value: datum.value };\n        },\n      },\n      wordStyle: {\n        fontFamily: 'Verdana',\n        fontWeight: 'normal',\n        padding: 1,\n        fontSize: [12, 60],\n        rotation: [0, 90],\n        rotationSteps: 2,\n        rotateRatio: 0.5,\n      },\n    });\n  }\n\n  /**\n   * 覆写父类方法，词云图需要加载图片资源，所以需要异步渲染\n   */\n  public render() {\n    return new Promise<void>((res) => {\n      const { imageMask } = this.options;\n\n      if (!imageMask) {\n        // 调用父类渲染函数\n        super.render();\n        res();\n        return;\n      }\n\n      const handler = (img: HTMLImageElement) => {\n        this.options = {\n          ...this.options,\n          imageMask: img || null,\n        };\n\n        // 调用父类渲染函数\n        super.render();\n        res();\n      };\n\n      processImageMask(imageMask).then(handler).catch(handler);\n    });\n  }\n\n  /**\n   * 获取 词云图 的适配器\n   */\n  protected getSchemaAdaptor(): Adaptor<WordCloudOptions> {\n    return adaptor;\n  }\n\n  /**\n   * 覆写父类的方法，因为词云图使用 单独的函数 进行布局，原理上有些不一样\n   */\n  protected triggerResize() {\n    if (!this.chart.destroyed) {\n      // 当整个词云图图表的宽高信息发生变化时，每个词语的坐标\n      // 需要重新执行 adaptor，不然会出现布局错乱，\n      // 如相邻词语重叠的情况。\n      this.execAdaptor();\n\n      // 延迟执行，有利于动画更流畅\n      // TODO: 在多次更改画布尺寸时，动画会越来越卡顿，原因未知\n      window.setTimeout(() => {\n        // 执行父类的方法\n        super.triggerResize();\n      });\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}