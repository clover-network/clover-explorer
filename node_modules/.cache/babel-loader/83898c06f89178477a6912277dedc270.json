{"ast":null,"code":"\"use strict\";\n/**\n * @fileoverview 矩阵运算，本来是要引入 gl-matrix, 但是考虑到 g-mobile 对大小有限制，同时 g-webgl 使用的 matrix 不一致\n * 所以，这里仅实现 2D 几个运算，上层自己引入 gl-matrix\n * @author dxq613@gmail.com\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.invert = exports.multiplyVec2 = exports.multiplyMatrix = void 0;\n/**\n * 3阶矩阵相乘\n * @param {number[]} a 矩阵1\n * @param {number[]} b 矩阵2\n */\n\nfunction multiplyMatrix(a, b) {\n  var out = [];\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a10 = a[3];\n  var a11 = a[4];\n  var a12 = a[5];\n  var a20 = a[6];\n  var a21 = a[7];\n  var a22 = a[8];\n  var b00 = b[0];\n  var b01 = b[1];\n  var b02 = b[2];\n  var b10 = b[3];\n  var b11 = b[4];\n  var b12 = b[5];\n  var b20 = b[6];\n  var b21 = b[7];\n  var b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n\nexports.multiplyMatrix = multiplyMatrix;\n/**\n * 3阶矩阵同2阶向量相乘\n * @param {number[]} m 矩阵\n * @param {number[]} v 二阶向量\n */\n\nfunction multiplyVec2(m, v) {\n  var out = [];\n  var x = v[0];\n  var y = v[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n\nexports.multiplyVec2 = multiplyVec2;\n/**\n * 矩阵的逆\n * @param {number[]} a 矩阵\n */\n\nfunction invert(a) {\n  var out = [];\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a10 = a[3];\n  var a11 = a[4];\n  var a12 = a[5];\n  var a20 = a[6];\n  var a21 = a[7];\n  var a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n\nexports.invert = invert;","map":{"version":3,"sources":["../../src/util/matrix.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\n/**\n * @fileoverview 矩阵运算，本来是要引入 gl-matrix, 但是考虑到 g-mobile 对大小有限制，同时 g-webgl 使用的 matrix 不一致\n * 所以，这里仅实现 2D 几个运算，上层自己引入 gl-matrix\n * @author dxq613@gmail.com\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.invert = exports.multiplyVec2 = exports.multiplyMatrix = void 0;\n/**\n * 3阶矩阵相乘\n * @param {number[]} a 矩阵1\n * @param {number[]} b 矩阵2\n */\nfunction multiplyMatrix(a, b) {\n    var out = [];\n    var a00 = a[0];\n    var a01 = a[1];\n    var a02 = a[2];\n    var a10 = a[3];\n    var a11 = a[4];\n    var a12 = a[5];\n    var a20 = a[6];\n    var a21 = a[7];\n    var a22 = a[8];\n    var b00 = b[0];\n    var b01 = b[1];\n    var b02 = b[2];\n    var b10 = b[3];\n    var b11 = b[4];\n    var b12 = b[5];\n    var b20 = b[6];\n    var b21 = b[7];\n    var b22 = b[8];\n    out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n    out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n    out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n    out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n    out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n    out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n    out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n    out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n    out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n    return out;\n}\nexports.multiplyMatrix = multiplyMatrix;\n/**\n * 3阶矩阵同2阶向量相乘\n * @param {number[]} m 矩阵\n * @param {number[]} v 二阶向量\n */\nfunction multiplyVec2(m, v) {\n    var out = [];\n    var x = v[0];\n    var y = v[1];\n    out[0] = m[0] * x + m[3] * y + m[6];\n    out[1] = m[1] * x + m[4] * y + m[7];\n    return out;\n}\nexports.multiplyVec2 = multiplyVec2;\n/**\n * 矩阵的逆\n * @param {number[]} a 矩阵\n */\nfunction invert(a) {\n    var out = [];\n    var a00 = a[0];\n    var a01 = a[1];\n    var a02 = a[2];\n    var a10 = a[3];\n    var a11 = a[4];\n    var a12 = a[5];\n    var a20 = a[6];\n    var a21 = a[7];\n    var a22 = a[8];\n    var b01 = a22 * a11 - a12 * a21;\n    var b11 = -a22 * a10 + a12 * a20;\n    var b21 = a21 * a10 - a11 * a20;\n    // Calculate the determinant\n    var det = a00 * b01 + a01 * b11 + a02 * b21;\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n    out[0] = b01 * det;\n    out[1] = (-a22 * a01 + a02 * a21) * det;\n    out[2] = (a12 * a01 - a02 * a11) * det;\n    out[3] = b11 * det;\n    out[4] = (a22 * a00 - a02 * a20) * det;\n    out[5] = (-a12 * a00 + a02 * a10) * det;\n    out[6] = b21 * det;\n    out[7] = (-a21 * a00 + a01 * a20) * det;\n    out[8] = (a11 * a00 - a01 * a10) * det;\n    return out;\n}\nexports.invert = invert;\n//# sourceMappingURL=matrix.js.map"]},"metadata":{},"sourceType":"script"}