{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.forEach = exports.sqrLen = exports.len = exports.sqrDist = exports.dist = exports.div = exports.mul = exports.sub = undefined;\nexports.create = create;\nexports.clone = clone;\nexports.length = length;\nexports.fromValues = fromValues;\nexports.copy = copy;\nexports.set = set;\nexports.add = add;\nexports.subtract = subtract;\nexports.multiply = multiply;\nexports.divide = divide;\nexports.ceil = ceil;\nexports.floor = floor;\nexports.min = min;\nexports.max = max;\nexports.round = round;\nexports.scale = scale;\nexports.scaleAndAdd = scaleAndAdd;\nexports.distance = distance;\nexports.squaredDistance = squaredDistance;\nexports.squaredLength = squaredLength;\nexports.negate = negate;\nexports.inverse = inverse;\nexports.normalize = normalize;\nexports.dot = dot;\nexports.cross = cross;\nexports.lerp = lerp;\nexports.hermite = hermite;\nexports.bezier = bezier;\nexports.random = random;\nexports.transformMat4 = transformMat4;\nexports.transformMat3 = transformMat3;\nexports.transformQuat = transformQuat;\nexports.rotateX = rotateX;\nexports.rotateY = rotateY;\nexports.rotateZ = rotateZ;\nexports.angle = angle;\nexports.str = str;\nexports.exactEquals = exactEquals;\nexports.equals = equals;\n\nvar _common = require('./common.js');\n\nvar glMatrix = _interopRequireWildcard(_common);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\n\nfunction create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {vec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\n\nfunction clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\n\nfunction length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\n\nfunction fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\n\n\nfunction copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\n\nfunction set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\n\n\nfunction add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\n\n\nfunction subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\n\n\nfunction multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\n\n\nfunction divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to ceil\n * @returns {vec3} out\n */\n\n\nfunction ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to floor\n * @returns {vec3} out\n */\n\n\nfunction floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\n\n\nfunction min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\n\n\nfunction max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to round\n * @returns {vec3} out\n */\n\n\nfunction round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\n\nfunction scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\n\nfunction scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\n\nfunction distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\n\nfunction squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\n\nfunction squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\n\n\nfunction negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\n\n\nfunction inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\n\n\nfunction normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    out[2] = a[2] * len;\n  }\n\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\n\nfunction dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\n\n\nfunction cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\n\nfunction lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\n\nfunction hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\n\nfunction bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\n\nfunction random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\n\n\nfunction transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\n\nfunction transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\n\n\nfunction transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\n\n\nfunction rotateX(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\n  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\n\n\nfunction rotateY(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\n\n\nfunction rotateZ(out, a, b, c) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\n  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\n\nfunction angle(a, b) {\n  var tempA = fromValues(a[0], a[1], a[2]);\n  var tempB = fromValues(b[0], b[1], b[2]);\n  normalize(tempA, tempA);\n  normalize(tempB, tempB);\n  var cosine = dot(tempA, tempB);\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {vec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\n\nfunction str(a) {\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\n\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\n\nfunction equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\n\nvar sub = exports.sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nvar mul = exports.mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nvar div = exports.div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nvar dist = exports.dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nvar sqrDist = exports.sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nvar len = exports.len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nvar sqrLen = exports.sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nvar forEach = exports.forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i = void 0,\n        l = void 0;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/@antv/gl-matrix/lib/gl-matrix/vec3.js"],"names":["Object","defineProperty","exports","value","forEach","sqrLen","len","sqrDist","dist","div","mul","sub","undefined","create","clone","length","fromValues","copy","set","add","subtract","multiply","divide","ceil","floor","min","max","round","scale","scaleAndAdd","distance","squaredDistance","squaredLength","negate","inverse","normalize","dot","cross","lerp","hermite","bezier","random","transformMat4","transformMat3","transformQuat","rotateX","rotateY","rotateZ","angle","str","exactEquals","equals","_common","require","glMatrix","_interopRequireWildcard","obj","__esModule","newObj","key","prototype","hasOwnProperty","call","default","out","ARRAY_TYPE","Float32Array","a","x","y","z","Math","sqrt","b","ax","ay","az","bx","by","bz","t","c","d","factorTimes2","factor1","factor2","factor3","factor4","inverseFactor","inverseFactorTimesTwo","r","RANDOM","PI","zScale","cos","sin","m","w","q","qx","qy","qz","qw","uvx","uvy","uvz","uuvx","uuvy","uuvz","w2","p","tempA","tempB","cosine","acos","a0","a1","a2","b0","b1","b2","abs","EPSILON","vec","stride","offset","count","fn","arg","i","l"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.forEach = exports.sqrLen = exports.len = exports.sqrDist = exports.dist = exports.div = exports.mul = exports.sub = undefined;\nexports.create = create;\nexports.clone = clone;\nexports.length = length;\nexports.fromValues = fromValues;\nexports.copy = copy;\nexports.set = set;\nexports.add = add;\nexports.subtract = subtract;\nexports.multiply = multiply;\nexports.divide = divide;\nexports.ceil = ceil;\nexports.floor = floor;\nexports.min = min;\nexports.max = max;\nexports.round = round;\nexports.scale = scale;\nexports.scaleAndAdd = scaleAndAdd;\nexports.distance = distance;\nexports.squaredDistance = squaredDistance;\nexports.squaredLength = squaredLength;\nexports.negate = negate;\nexports.inverse = inverse;\nexports.normalize = normalize;\nexports.dot = dot;\nexports.cross = cross;\nexports.lerp = lerp;\nexports.hermite = hermite;\nexports.bezier = bezier;\nexports.random = random;\nexports.transformMat4 = transformMat4;\nexports.transformMat3 = transformMat3;\nexports.transformQuat = transformQuat;\nexports.rotateX = rotateX;\nexports.rotateY = rotateY;\nexports.rotateZ = rotateZ;\nexports.angle = angle;\nexports.str = str;\nexports.exactEquals = exactEquals;\nexports.equals = equals;\n\nvar _common = require('./common.js');\n\nvar glMatrix = _interopRequireWildcard(_common);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\nfunction create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n  return out;\n}\n\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {vec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\nfunction clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nfunction length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\nfunction fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nfunction copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nfunction set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nfunction add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nfunction subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nfunction multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nfunction divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to ceil\n * @returns {vec3} out\n */\nfunction ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to floor\n * @returns {vec3} out\n */\nfunction floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nfunction min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nfunction max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to round\n * @returns {vec3} out\n */\nfunction round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nfunction scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\nfunction scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nfunction distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.sqrt(x * x + y * y + z * z);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nfunction squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nfunction squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\nfunction negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\nfunction inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nfunction normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    out[2] = a[2] * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nfunction dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nfunction cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nfunction lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nfunction hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n  return out;\n}\n\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\nfunction bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\nfunction random(out, scale) {\n  scale = scale || 1.0;\n\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\nfunction transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nfunction transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\nfunction transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x;\n  // var uuv = vec3.cross([], qvec, uv);\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx;\n  // vec3.scale(uv, uv, 2 * w);\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2;\n  // vec3.scale(uuv, uuv, 2);\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2;\n  // return vec3.add(out, a, vec3.add(out, uv, uuv));\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nfunction rotateX(out, a, b, c) {\n  var p = [],\n      r = [];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\n  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c);\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nfunction rotateY(out, a, b, c) {\n  var p = [],\n      r = [];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c);\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nfunction rotateZ(out, a, b, c) {\n  var p = [],\n      r = [];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\n  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\n  r[2] = p[2];\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\nfunction angle(a, b) {\n  var tempA = fromValues(a[0], a[1], a[2]);\n  var tempB = fromValues(b[0], b[1], b[2]);\n\n  normalize(tempA, tempA);\n  normalize(tempB, tempB);\n\n  var cosine = dot(tempA, tempB);\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nfunction str(a) {\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n}\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nfunction equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\nvar sub = exports.sub = subtract;\n\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\nvar mul = exports.mul = multiply;\n\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\nvar div = exports.div = divide;\n\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\nvar dist = exports.dist = distance;\n\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\nvar sqrDist = exports.sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec3.length}\n * @function\n */\nvar len = exports.len = length;\n\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\nvar sqrLen = exports.sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nvar forEach = exports.forEach = function () {\n  var vec = create();\n\n  return function (a, stride, offset, count, fn, arg) {\n    var i = void 0,\n        l = void 0;\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];vec[1] = a[i + 1];vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];a[i + 1] = vec[1];a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();"]},"metadata":{},"sourceType":"script"}