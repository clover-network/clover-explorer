{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\nimport { makeInner, getDataItemValue, queryReferringComponents, SINGLE_REFERRING } from '../../util/model';\nimport { createHashMap, each, isArray, isString, isObject, isTypedArray, retrieve2 } from 'zrender/esm/core/util';\nimport { SOURCE_FORMAT_ORIGINAL, SOURCE_FORMAT_ARRAY_ROWS, SOURCE_FORMAT_OBJECT_ROWS, SERIES_LAYOUT_BY_ROW, SOURCE_FORMAT_KEYED_COLUMNS } from '../../util/types';\nexport var BE_ORDINAL = {\n  Must: 1,\n  Might: 2,\n  Not: 3\n};\nvar innerGlobalModel = makeInner();\nexport function resetSourceDefaulter(ecModel) {\n  innerGlobalModel(ecModel).datasetMap = createHashMap();\n}\nexport function inheritSourceMetaRawOption(upstream, newMetaRawOption) {\n  var parentMetaRawOption = upstream ? upstream.metaRawOption : null;\n  var seriesLayoutBy = retrieve2(newMetaRawOption.seriesLayoutBy, parentMetaRawOption ? parentMetaRawOption.seriesLayoutBy : null);\n  var sourceHeader = retrieve2(newMetaRawOption.sourceHeader, upstream ? upstream.startIndex : null);\n  var dimensions = retrieve2(newMetaRawOption.dimensions, upstream ? upstream.dimensionsDefine : null);\n  return {\n    seriesLayoutBy: seriesLayoutBy,\n    sourceHeader: sourceHeader,\n    dimensions: dimensions\n  };\n}\nexport function makeSeriesEncodeForAxisCoordSys(coordDimensions, seriesModel, source) {\n  var encode = {};\n  var datasetModel = querySeriesUpstreamDatasetModel(seriesModel);\n\n  if (!datasetModel || !coordDimensions) {\n    return encode;\n  }\n\n  var encodeItemName = [];\n  var encodeSeriesName = [];\n  var ecModel = seriesModel.ecModel;\n  var datasetMap = innerGlobalModel(ecModel).datasetMap;\n  var key = datasetModel.uid + '_' + source.seriesLayoutBy;\n  var baseCategoryDimIndex;\n  var categoryWayValueDimStart;\n  coordDimensions = coordDimensions.slice();\n  each(coordDimensions, function (coordDimInfoLoose, coordDimIdx) {\n    var coordDimInfo = isObject(coordDimInfoLoose) ? coordDimInfoLoose : coordDimensions[coordDimIdx] = {\n      name: coordDimInfoLoose\n    };\n\n    if (coordDimInfo.type === 'ordinal' && baseCategoryDimIndex == null) {\n      baseCategoryDimIndex = coordDimIdx;\n      categoryWayValueDimStart = getDataDimCountOnCoordDim(coordDimInfo);\n    }\n\n    encode[coordDimInfo.name] = [];\n  });\n  var datasetRecord = datasetMap.get(key) || datasetMap.set(key, {\n    categoryWayDim: categoryWayValueDimStart,\n    valueWayDim: 0\n  });\n  each(coordDimensions, function (coordDimInfo, coordDimIdx) {\n    var coordDimName = coordDimInfo.name;\n    var count = getDataDimCountOnCoordDim(coordDimInfo);\n\n    if (baseCategoryDimIndex == null) {\n      var start = datasetRecord.valueWayDim;\n      pushDim(encode[coordDimName], start, count);\n      pushDim(encodeSeriesName, start, count);\n      datasetRecord.valueWayDim += count;\n    } else if (baseCategoryDimIndex === coordDimIdx) {\n      pushDim(encode[coordDimName], 0, count);\n      pushDim(encodeItemName, 0, count);\n    } else {\n      var start = datasetRecord.categoryWayDim;\n      pushDim(encode[coordDimName], start, count);\n      pushDim(encodeSeriesName, start, count);\n      datasetRecord.categoryWayDim += count;\n    }\n  });\n\n  function pushDim(dimIdxArr, idxFrom, idxCount) {\n    for (var i = 0; i < idxCount; i++) {\n      dimIdxArr.push(idxFrom + i);\n    }\n  }\n\n  function getDataDimCountOnCoordDim(coordDimInfo) {\n    var dimsDef = coordDimInfo.dimsDef;\n    return dimsDef ? dimsDef.length : 1;\n  }\n\n  encodeItemName.length && (encode.itemName = encodeItemName);\n  encodeSeriesName.length && (encode.seriesName = encodeSeriesName);\n  return encode;\n}\nexport function makeSeriesEncodeForNameBased(seriesModel, source, dimCount) {\n  var encode = {};\n  var datasetModel = querySeriesUpstreamDatasetModel(seriesModel);\n\n  if (!datasetModel) {\n    return encode;\n  }\n\n  var sourceFormat = source.sourceFormat;\n  var dimensionsDefine = source.dimensionsDefine;\n  var potentialNameDimIndex;\n\n  if (sourceFormat === SOURCE_FORMAT_OBJECT_ROWS || sourceFormat === SOURCE_FORMAT_KEYED_COLUMNS) {\n    each(dimensionsDefine, function (dim, idx) {\n      if ((isObject(dim) ? dim.name : dim) === 'name') {\n        potentialNameDimIndex = idx;\n      }\n    });\n  }\n\n  var idxResult = function () {\n    var idxRes0 = {};\n    var idxRes1 = {};\n    var guessRecords = [];\n\n    for (var i = 0, len = Math.min(5, dimCount); i < len; i++) {\n      var guessResult = doGuessOrdinal(source.data, sourceFormat, source.seriesLayoutBy, dimensionsDefine, source.startIndex, i);\n      guessRecords.push(guessResult);\n      var isPureNumber = guessResult === BE_ORDINAL.Not;\n\n      if (isPureNumber && idxRes0.v == null && i !== potentialNameDimIndex) {\n        idxRes0.v = i;\n      }\n\n      if (idxRes0.n == null || idxRes0.n === idxRes0.v || !isPureNumber && guessRecords[idxRes0.n] === BE_ORDINAL.Not) {\n        idxRes0.n = i;\n      }\n\n      if (fulfilled(idxRes0) && guessRecords[idxRes0.n] !== BE_ORDINAL.Not) {\n        return idxRes0;\n      }\n\n      if (!isPureNumber) {\n        if (guessResult === BE_ORDINAL.Might && idxRes1.v == null && i !== potentialNameDimIndex) {\n          idxRes1.v = i;\n        }\n\n        if (idxRes1.n == null || idxRes1.n === idxRes1.v) {\n          idxRes1.n = i;\n        }\n      }\n    }\n\n    function fulfilled(idxResult) {\n      return idxResult.v != null && idxResult.n != null;\n    }\n\n    return fulfilled(idxRes0) ? idxRes0 : fulfilled(idxRes1) ? idxRes1 : null;\n  }();\n\n  if (idxResult) {\n    encode.value = [idxResult.v];\n    var nameDimIndex = potentialNameDimIndex != null ? potentialNameDimIndex : idxResult.n;\n    encode.itemName = [nameDimIndex];\n    encode.seriesName = [nameDimIndex];\n  }\n\n  return encode;\n}\nexport function querySeriesUpstreamDatasetModel(seriesModel) {\n  var thisData = seriesModel.get('data', true);\n\n  if (!thisData) {\n    return queryReferringComponents(seriesModel.ecModel, 'dataset', {\n      index: seriesModel.get('datasetIndex', true),\n      id: seriesModel.get('datasetId', true)\n    }, SINGLE_REFERRING).models[0];\n  }\n}\nexport function queryDatasetUpstreamDatasetModels(datasetModel) {\n  if (!datasetModel.get('transform', true) && !datasetModel.get('fromTransformResult', true)) {\n    return [];\n  }\n\n  return queryReferringComponents(datasetModel.ecModel, 'dataset', {\n    index: datasetModel.get('fromDatasetIndex', true),\n    id: datasetModel.get('fromDatasetId', true)\n  }, SINGLE_REFERRING).models;\n}\nexport function guessOrdinal(source, dimIndex) {\n  return doGuessOrdinal(source.data, source.sourceFormat, source.seriesLayoutBy, source.dimensionsDefine, source.startIndex, dimIndex);\n}\n\nfunction doGuessOrdinal(data, sourceFormat, seriesLayoutBy, dimensionsDefine, startIndex, dimIndex) {\n  var result;\n  var maxLoop = 5;\n\n  if (isTypedArray(data)) {\n    return BE_ORDINAL.Not;\n  }\n\n  var dimName;\n  var dimType;\n\n  if (dimensionsDefine) {\n    var dimDefItem = dimensionsDefine[dimIndex];\n\n    if (isObject(dimDefItem)) {\n      dimName = dimDefItem.name;\n      dimType = dimDefItem.type;\n    } else if (isString(dimDefItem)) {\n      dimName = dimDefItem;\n    }\n  }\n\n  if (dimType != null) {\n    return dimType === 'ordinal' ? BE_ORDINAL.Must : BE_ORDINAL.Not;\n  }\n\n  if (sourceFormat === SOURCE_FORMAT_ARRAY_ROWS) {\n    var dataArrayRows = data;\n\n    if (seriesLayoutBy === SERIES_LAYOUT_BY_ROW) {\n      var sample = dataArrayRows[dimIndex];\n\n      for (var i = 0; i < (sample || []).length && i < maxLoop; i++) {\n        if ((result = detectValue(sample[startIndex + i])) != null) {\n          return result;\n        }\n      }\n    } else {\n      for (var i = 0; i < dataArrayRows.length && i < maxLoop; i++) {\n        var row = dataArrayRows[startIndex + i];\n\n        if (row && (result = detectValue(row[dimIndex])) != null) {\n          return result;\n        }\n      }\n    }\n  } else if (sourceFormat === SOURCE_FORMAT_OBJECT_ROWS) {\n    var dataObjectRows = data;\n\n    if (!dimName) {\n      return BE_ORDINAL.Not;\n    }\n\n    for (var i = 0; i < dataObjectRows.length && i < maxLoop; i++) {\n      var item = dataObjectRows[i];\n\n      if (item && (result = detectValue(item[dimName])) != null) {\n        return result;\n      }\n    }\n  } else if (sourceFormat === SOURCE_FORMAT_KEYED_COLUMNS) {\n    var dataKeyedColumns = data;\n\n    if (!dimName) {\n      return BE_ORDINAL.Not;\n    }\n\n    var sample = dataKeyedColumns[dimName];\n\n    if (!sample || isTypedArray(sample)) {\n      return BE_ORDINAL.Not;\n    }\n\n    for (var i = 0; i < sample.length && i < maxLoop; i++) {\n      if ((result = detectValue(sample[i])) != null) {\n        return result;\n      }\n    }\n  } else if (sourceFormat === SOURCE_FORMAT_ORIGINAL) {\n    var dataOriginal = data;\n\n    for (var i = 0; i < dataOriginal.length && i < maxLoop; i++) {\n      var item = dataOriginal[i];\n      var val = getDataItemValue(item);\n\n      if (!isArray(val)) {\n        return BE_ORDINAL.Not;\n      }\n\n      if ((result = detectValue(val[dimIndex])) != null) {\n        return result;\n      }\n    }\n  }\n\n  function detectValue(val) {\n    var beStr = isString(val);\n\n    if (val != null && isFinite(val) && val !== '') {\n      return beStr ? BE_ORDINAL.Might : BE_ORDINAL.Not;\n    } else if (beStr && val !== '-') {\n      return BE_ORDINAL.Must;\n    }\n  }\n\n  return BE_ORDINAL.Not;\n}","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/echarts/esm/data/helper/sourceHelper.js"],"names":["makeInner","getDataItemValue","queryReferringComponents","SINGLE_REFERRING","createHashMap","each","isArray","isString","isObject","isTypedArray","retrieve2","SOURCE_FORMAT_ORIGINAL","SOURCE_FORMAT_ARRAY_ROWS","SOURCE_FORMAT_OBJECT_ROWS","SERIES_LAYOUT_BY_ROW","SOURCE_FORMAT_KEYED_COLUMNS","BE_ORDINAL","Must","Might","Not","innerGlobalModel","resetSourceDefaulter","ecModel","datasetMap","inheritSourceMetaRawOption","upstream","newMetaRawOption","parentMetaRawOption","metaRawOption","seriesLayoutBy","sourceHeader","startIndex","dimensions","dimensionsDefine","makeSeriesEncodeForAxisCoordSys","coordDimensions","seriesModel","source","encode","datasetModel","querySeriesUpstreamDatasetModel","encodeItemName","encodeSeriesName","key","uid","baseCategoryDimIndex","categoryWayValueDimStart","slice","coordDimInfoLoose","coordDimIdx","coordDimInfo","name","type","getDataDimCountOnCoordDim","datasetRecord","get","set","categoryWayDim","valueWayDim","coordDimName","count","start","pushDim","dimIdxArr","idxFrom","idxCount","i","push","dimsDef","length","itemName","seriesName","makeSeriesEncodeForNameBased","dimCount","sourceFormat","potentialNameDimIndex","dim","idx","idxResult","idxRes0","idxRes1","guessRecords","len","Math","min","guessResult","doGuessOrdinal","data","isPureNumber","v","n","fulfilled","value","nameDimIndex","thisData","index","id","models","queryDatasetUpstreamDatasetModels","guessOrdinal","dimIndex","result","maxLoop","dimName","dimType","dimDefItem","dataArrayRows","sample","detectValue","row","dataObjectRows","item","dataKeyedColumns","dataOriginal","val","beStr","isFinite"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\nimport { makeInner, getDataItemValue, queryReferringComponents, SINGLE_REFERRING } from '../../util/model';\nimport { createHashMap, each, isArray, isString, isObject, isTypedArray, retrieve2 } from 'zrender/esm/core/util';\nimport { SOURCE_FORMAT_ORIGINAL, SOURCE_FORMAT_ARRAY_ROWS, SOURCE_FORMAT_OBJECT_ROWS, SERIES_LAYOUT_BY_ROW, SOURCE_FORMAT_KEYED_COLUMNS } from '../../util/types';\nexport var BE_ORDINAL = {\n  Must: 1,\n  Might: 2,\n  Not: 3\n};\nvar innerGlobalModel = makeInner();\nexport function resetSourceDefaulter(ecModel) {\n  innerGlobalModel(ecModel).datasetMap = createHashMap();\n}\nexport function inheritSourceMetaRawOption(upstream, newMetaRawOption) {\n  var parentMetaRawOption = upstream ? upstream.metaRawOption : null;\n  var seriesLayoutBy = retrieve2(newMetaRawOption.seriesLayoutBy, parentMetaRawOption ? parentMetaRawOption.seriesLayoutBy : null);\n  var sourceHeader = retrieve2(newMetaRawOption.sourceHeader, upstream ? upstream.startIndex : null);\n  var dimensions = retrieve2(newMetaRawOption.dimensions, upstream ? upstream.dimensionsDefine : null);\n  return {\n    seriesLayoutBy: seriesLayoutBy,\n    sourceHeader: sourceHeader,\n    dimensions: dimensions\n  };\n}\nexport function makeSeriesEncodeForAxisCoordSys(coordDimensions, seriesModel, source) {\n  var encode = {};\n  var datasetModel = querySeriesUpstreamDatasetModel(seriesModel);\n\n  if (!datasetModel || !coordDimensions) {\n    return encode;\n  }\n\n  var encodeItemName = [];\n  var encodeSeriesName = [];\n  var ecModel = seriesModel.ecModel;\n  var datasetMap = innerGlobalModel(ecModel).datasetMap;\n  var key = datasetModel.uid + '_' + source.seriesLayoutBy;\n  var baseCategoryDimIndex;\n  var categoryWayValueDimStart;\n  coordDimensions = coordDimensions.slice();\n  each(coordDimensions, function (coordDimInfoLoose, coordDimIdx) {\n    var coordDimInfo = isObject(coordDimInfoLoose) ? coordDimInfoLoose : coordDimensions[coordDimIdx] = {\n      name: coordDimInfoLoose\n    };\n\n    if (coordDimInfo.type === 'ordinal' && baseCategoryDimIndex == null) {\n      baseCategoryDimIndex = coordDimIdx;\n      categoryWayValueDimStart = getDataDimCountOnCoordDim(coordDimInfo);\n    }\n\n    encode[coordDimInfo.name] = [];\n  });\n  var datasetRecord = datasetMap.get(key) || datasetMap.set(key, {\n    categoryWayDim: categoryWayValueDimStart,\n    valueWayDim: 0\n  });\n  each(coordDimensions, function (coordDimInfo, coordDimIdx) {\n    var coordDimName = coordDimInfo.name;\n    var count = getDataDimCountOnCoordDim(coordDimInfo);\n\n    if (baseCategoryDimIndex == null) {\n      var start = datasetRecord.valueWayDim;\n      pushDim(encode[coordDimName], start, count);\n      pushDim(encodeSeriesName, start, count);\n      datasetRecord.valueWayDim += count;\n    } else if (baseCategoryDimIndex === coordDimIdx) {\n      pushDim(encode[coordDimName], 0, count);\n      pushDim(encodeItemName, 0, count);\n    } else {\n      var start = datasetRecord.categoryWayDim;\n      pushDim(encode[coordDimName], start, count);\n      pushDim(encodeSeriesName, start, count);\n      datasetRecord.categoryWayDim += count;\n    }\n  });\n\n  function pushDim(dimIdxArr, idxFrom, idxCount) {\n    for (var i = 0; i < idxCount; i++) {\n      dimIdxArr.push(idxFrom + i);\n    }\n  }\n\n  function getDataDimCountOnCoordDim(coordDimInfo) {\n    var dimsDef = coordDimInfo.dimsDef;\n    return dimsDef ? dimsDef.length : 1;\n  }\n\n  encodeItemName.length && (encode.itemName = encodeItemName);\n  encodeSeriesName.length && (encode.seriesName = encodeSeriesName);\n  return encode;\n}\nexport function makeSeriesEncodeForNameBased(seriesModel, source, dimCount) {\n  var encode = {};\n  var datasetModel = querySeriesUpstreamDatasetModel(seriesModel);\n\n  if (!datasetModel) {\n    return encode;\n  }\n\n  var sourceFormat = source.sourceFormat;\n  var dimensionsDefine = source.dimensionsDefine;\n  var potentialNameDimIndex;\n\n  if (sourceFormat === SOURCE_FORMAT_OBJECT_ROWS || sourceFormat === SOURCE_FORMAT_KEYED_COLUMNS) {\n    each(dimensionsDefine, function (dim, idx) {\n      if ((isObject(dim) ? dim.name : dim) === 'name') {\n        potentialNameDimIndex = idx;\n      }\n    });\n  }\n\n  var idxResult = function () {\n    var idxRes0 = {};\n    var idxRes1 = {};\n    var guessRecords = [];\n\n    for (var i = 0, len = Math.min(5, dimCount); i < len; i++) {\n      var guessResult = doGuessOrdinal(source.data, sourceFormat, source.seriesLayoutBy, dimensionsDefine, source.startIndex, i);\n      guessRecords.push(guessResult);\n      var isPureNumber = guessResult === BE_ORDINAL.Not;\n\n      if (isPureNumber && idxRes0.v == null && i !== potentialNameDimIndex) {\n        idxRes0.v = i;\n      }\n\n      if (idxRes0.n == null || idxRes0.n === idxRes0.v || !isPureNumber && guessRecords[idxRes0.n] === BE_ORDINAL.Not) {\n        idxRes0.n = i;\n      }\n\n      if (fulfilled(idxRes0) && guessRecords[idxRes0.n] !== BE_ORDINAL.Not) {\n        return idxRes0;\n      }\n\n      if (!isPureNumber) {\n        if (guessResult === BE_ORDINAL.Might && idxRes1.v == null && i !== potentialNameDimIndex) {\n          idxRes1.v = i;\n        }\n\n        if (idxRes1.n == null || idxRes1.n === idxRes1.v) {\n          idxRes1.n = i;\n        }\n      }\n    }\n\n    function fulfilled(idxResult) {\n      return idxResult.v != null && idxResult.n != null;\n    }\n\n    return fulfilled(idxRes0) ? idxRes0 : fulfilled(idxRes1) ? idxRes1 : null;\n  }();\n\n  if (idxResult) {\n    encode.value = [idxResult.v];\n    var nameDimIndex = potentialNameDimIndex != null ? potentialNameDimIndex : idxResult.n;\n    encode.itemName = [nameDimIndex];\n    encode.seriesName = [nameDimIndex];\n  }\n\n  return encode;\n}\nexport function querySeriesUpstreamDatasetModel(seriesModel) {\n  var thisData = seriesModel.get('data', true);\n\n  if (!thisData) {\n    return queryReferringComponents(seriesModel.ecModel, 'dataset', {\n      index: seriesModel.get('datasetIndex', true),\n      id: seriesModel.get('datasetId', true)\n    }, SINGLE_REFERRING).models[0];\n  }\n}\nexport function queryDatasetUpstreamDatasetModels(datasetModel) {\n  if (!datasetModel.get('transform', true) && !datasetModel.get('fromTransformResult', true)) {\n    return [];\n  }\n\n  return queryReferringComponents(datasetModel.ecModel, 'dataset', {\n    index: datasetModel.get('fromDatasetIndex', true),\n    id: datasetModel.get('fromDatasetId', true)\n  }, SINGLE_REFERRING).models;\n}\nexport function guessOrdinal(source, dimIndex) {\n  return doGuessOrdinal(source.data, source.sourceFormat, source.seriesLayoutBy, source.dimensionsDefine, source.startIndex, dimIndex);\n}\n\nfunction doGuessOrdinal(data, sourceFormat, seriesLayoutBy, dimensionsDefine, startIndex, dimIndex) {\n  var result;\n  var maxLoop = 5;\n\n  if (isTypedArray(data)) {\n    return BE_ORDINAL.Not;\n  }\n\n  var dimName;\n  var dimType;\n\n  if (dimensionsDefine) {\n    var dimDefItem = dimensionsDefine[dimIndex];\n\n    if (isObject(dimDefItem)) {\n      dimName = dimDefItem.name;\n      dimType = dimDefItem.type;\n    } else if (isString(dimDefItem)) {\n      dimName = dimDefItem;\n    }\n  }\n\n  if (dimType != null) {\n    return dimType === 'ordinal' ? BE_ORDINAL.Must : BE_ORDINAL.Not;\n  }\n\n  if (sourceFormat === SOURCE_FORMAT_ARRAY_ROWS) {\n    var dataArrayRows = data;\n\n    if (seriesLayoutBy === SERIES_LAYOUT_BY_ROW) {\n      var sample = dataArrayRows[dimIndex];\n\n      for (var i = 0; i < (sample || []).length && i < maxLoop; i++) {\n        if ((result = detectValue(sample[startIndex + i])) != null) {\n          return result;\n        }\n      }\n    } else {\n      for (var i = 0; i < dataArrayRows.length && i < maxLoop; i++) {\n        var row = dataArrayRows[startIndex + i];\n\n        if (row && (result = detectValue(row[dimIndex])) != null) {\n          return result;\n        }\n      }\n    }\n  } else if (sourceFormat === SOURCE_FORMAT_OBJECT_ROWS) {\n    var dataObjectRows = data;\n\n    if (!dimName) {\n      return BE_ORDINAL.Not;\n    }\n\n    for (var i = 0; i < dataObjectRows.length && i < maxLoop; i++) {\n      var item = dataObjectRows[i];\n\n      if (item && (result = detectValue(item[dimName])) != null) {\n        return result;\n      }\n    }\n  } else if (sourceFormat === SOURCE_FORMAT_KEYED_COLUMNS) {\n    var dataKeyedColumns = data;\n\n    if (!dimName) {\n      return BE_ORDINAL.Not;\n    }\n\n    var sample = dataKeyedColumns[dimName];\n\n    if (!sample || isTypedArray(sample)) {\n      return BE_ORDINAL.Not;\n    }\n\n    for (var i = 0; i < sample.length && i < maxLoop; i++) {\n      if ((result = detectValue(sample[i])) != null) {\n        return result;\n      }\n    }\n  } else if (sourceFormat === SOURCE_FORMAT_ORIGINAL) {\n    var dataOriginal = data;\n\n    for (var i = 0; i < dataOriginal.length && i < maxLoop; i++) {\n      var item = dataOriginal[i];\n      var val = getDataItemValue(item);\n\n      if (!isArray(val)) {\n        return BE_ORDINAL.Not;\n      }\n\n      if ((result = detectValue(val[dimIndex])) != null) {\n        return result;\n      }\n    }\n  }\n\n  function detectValue(val) {\n    var beStr = isString(val);\n\n    if (val != null && isFinite(val) && val !== '') {\n      return beStr ? BE_ORDINAL.Might : BE_ORDINAL.Not;\n    } else if (beStr && val !== '-') {\n      return BE_ORDINAL.Must;\n    }\n  }\n\n  return BE_ORDINAL.Not;\n}"]},"metadata":{},"sourceType":"module"}