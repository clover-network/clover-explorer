{"ast":null,"code":"import { isArray, isString } from '@antv/util';\nvar INVALID_FIELD_ERR_MSG = 'Invalid field: it must be a string!';\nexport function getField(options, defaultField) {\n  var field = options.field,\n      fields = options.fields;\n\n  if (isString(field)) {\n    return field;\n  }\n\n  if (isArray(field)) {\n    console.warn(INVALID_FIELD_ERR_MSG);\n    return field[0];\n  }\n\n  console.warn(INVALID_FIELD_ERR_MSG + \" will try to get fields instead.\");\n\n  if (isString(fields)) {\n    return fields;\n  }\n\n  if (isArray(fields) && fields.length) {\n    return fields[0];\n  }\n\n  if (defaultField) {\n    return defaultField;\n  }\n\n  throw new TypeError(INVALID_FIELD_ERR_MSG);\n}\nexport function getAllNodes(root) {\n  var nodes = [];\n\n  if (root && root.each) {\n    // d3-hierarchy\n    root.each(function (node) {\n      nodes.push(node);\n    });\n  } else if (root && root.eachNode) {\n    // @antv/hierarchy\n    root.eachNode(function (node) {\n      nodes.push(node);\n    });\n  }\n\n  return nodes;\n}","map":{"version":3,"sources":["../../../../src/plots/sunburst/hierarchy/util.ts"],"names":[],"mappings":"AAAA,SAAS,OAAT,EAAkB,QAAlB,QAAkC,YAAlC;AAEA,IAAM,qBAAqB,GAAG,qCAA9B;AAOA,OAAM,SAAU,QAAV,CAAmB,OAAnB,EAAqC,YAArC,EAA0D;AACtD,MAAA,KAAK,GAAa,OAAO,CAApB,KAAL;AAAA,MAAO,MAAM,GAAK,OAAO,CAAZ,MAAb;;AACR,MAAI,QAAQ,CAAC,KAAD,CAAZ,EAAqB;AACnB,WAAO,KAAP;AACD;;AACD,MAAI,OAAO,CAAC,KAAD,CAAX,EAAoB;AAClB,IAAA,OAAO,CAAC,IAAR,CAAa,qBAAb;AACA,WAAO,KAAK,CAAC,CAAD,CAAZ;AACD;;AACD,EAAA,OAAO,CAAC,IAAR,CAAgB,qBAAqB,GAAA,kCAArC;;AACA,MAAI,QAAQ,CAAC,MAAD,CAAZ,EAAsB;AACpB,WAAO,MAAP;AACD;;AACD,MAAI,OAAO,CAAC,MAAD,CAAP,IAAmB,MAAM,CAAC,MAA9B,EAAsC;AACpC,WAAO,MAAM,CAAC,CAAD,CAAb;AACD;;AACD,MAAI,YAAJ,EAAkB;AAChB,WAAO,YAAP;AACD;;AACD,QAAM,IAAI,SAAJ,CAAc,qBAAd,CAAN;AACD;AAED,OAAM,SAAU,WAAV,CAAsB,IAAtB,EAA+B;AACnC,MAAM,KAAK,GAAU,EAArB;;AACA,MAAI,IAAI,IAAI,IAAI,CAAC,IAAjB,EAAuB;AACrB;AACA,IAAA,IAAI,CAAC,IAAL,CAAU,UAAC,IAAD,EAAU;AAClB,MAAA,KAAK,CAAC,IAAN,CAAW,IAAX;AACD,KAFD;AAGD,GALD,MAKO,IAAI,IAAI,IAAI,IAAI,CAAC,QAAjB,EAA2B;AAChC;AACA,IAAA,IAAI,CAAC,QAAL,CAAc,UAAC,IAAD,EAAU;AACtB,MAAA,KAAK,CAAC,IAAN,CAAW,IAAX;AACD,KAFD;AAGD;;AACD,SAAO,KAAP;AACD","sourcesContent":["import { isArray, isString } from '@antv/util';\n\nconst INVALID_FIELD_ERR_MSG = 'Invalid field: it must be a string!';\n\ninterface Options {\n  field?: string | string[];\n  fields?: string | string[];\n}\n\nexport function getField(options: Options, defaultField?: string): string {\n  const { field, fields } = options;\n  if (isString(field)) {\n    return field;\n  }\n  if (isArray(field)) {\n    console.warn(INVALID_FIELD_ERR_MSG);\n    return field[0];\n  }\n  console.warn(`${INVALID_FIELD_ERR_MSG} will try to get fields instead.`);\n  if (isString(fields)) {\n    return fields;\n  }\n  if (isArray(fields) && fields.length) {\n    return fields[0];\n  }\n  if (defaultField) {\n    return defaultField;\n  }\n  throw new TypeError(INVALID_FIELD_ERR_MSG);\n}\n\nexport function getAllNodes(root: any) {\n  const nodes: any[] = [];\n  if (root && root.each) {\n    // d3-hierarchy\n    root.each((node: any) => {\n      nodes.push(node);\n    });\n  } else if (root && root.eachNode) {\n    // @antv/hierarchy\n    root.eachNode((node: any) => {\n      nodes.push(node);\n    });\n  }\n  return nodes;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}