{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\"use strict\";\n\nexports.__esModule = true;\n\nvar tslib_1 = require(\"tslib\");\n\nvar BaseAxisPointer_1 = require(\"./BaseAxisPointer\");\n\nvar viewHelper = require(\"./viewHelper\");\n\nvar cartesianAxisHelper = require(\"../../coord/cartesian/cartesianAxisHelper\");\n\nvar AxisView_1 = require(\"../axis/AxisView\");\n\nvar CartesianAxisPointer = function (_super) {\n  tslib_1.__extends(CartesianAxisPointer, _super);\n\n  function CartesianAxisPointer() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  CartesianAxisPointer.prototype.makeElOption = function (elOption, value, axisModel, axisPointerModel, api) {\n    var axis = axisModel.axis;\n    var grid = axis.grid;\n    var axisPointerType = axisPointerModel.get('type');\n    var otherExtent = getCartesian(grid, axis).getOtherAxis(axis).getGlobalExtent();\n    var pixelValue = axis.toGlobalCoord(axis.dataToCoord(value, true));\n\n    if (axisPointerType && axisPointerType !== 'none') {\n      var elStyle = viewHelper.buildElStyle(axisPointerModel);\n      var pointerOption = pointerShapeBuilder[axisPointerType](axis, pixelValue, otherExtent);\n      pointerOption.style = elStyle;\n      elOption.graphicKey = pointerOption.type;\n      elOption.pointer = pointerOption;\n    }\n\n    var layoutInfo = cartesianAxisHelper.layout(grid.model, axisModel);\n    viewHelper.buildCartesianSingleLabelElOption(value, elOption, layoutInfo, axisModel, axisPointerModel, api);\n  };\n\n  CartesianAxisPointer.prototype.getHandleTransform = function (value, axisModel, axisPointerModel) {\n    var layoutInfo = cartesianAxisHelper.layout(axisModel.axis.grid.model, axisModel, {\n      labelInside: false\n    });\n    layoutInfo.labelMargin = axisPointerModel.get(['handle', 'margin']);\n    var pos = viewHelper.getTransformedPosition(axisModel.axis, value, layoutInfo);\n    return {\n      x: pos[0],\n      y: pos[1],\n      rotation: layoutInfo.rotation + (layoutInfo.labelDirection < 0 ? Math.PI : 0)\n    };\n  };\n\n  CartesianAxisPointer.prototype.updateHandleTransform = function (transform, delta, axisModel, axisPointerModel) {\n    var axis = axisModel.axis;\n    var grid = axis.grid;\n    var axisExtent = axis.getGlobalExtent(true);\n    var otherExtent = getCartesian(grid, axis).getOtherAxis(axis).getGlobalExtent();\n    var dimIndex = axis.dim === 'x' ? 0 : 1;\n    var currPosition = [transform.x, transform.y];\n    currPosition[dimIndex] += delta[dimIndex];\n    currPosition[dimIndex] = Math.min(axisExtent[1], currPosition[dimIndex]);\n    currPosition[dimIndex] = Math.max(axisExtent[0], currPosition[dimIndex]);\n    var cursorOtherValue = (otherExtent[1] + otherExtent[0]) / 2;\n    var cursorPoint = [cursorOtherValue, cursorOtherValue];\n    cursorPoint[dimIndex] = currPosition[dimIndex];\n    var tooltipOptions = [{\n      verticalAlign: 'middle'\n    }, {\n      align: 'center'\n    }];\n    return {\n      x: currPosition[0],\n      y: currPosition[1],\n      rotation: transform.rotation,\n      cursorPoint: cursorPoint,\n      tooltipOption: tooltipOptions[dimIndex]\n    };\n  };\n\n  return CartesianAxisPointer;\n}(BaseAxisPointer_1[\"default\"]);\n\nfunction getCartesian(grid, axis) {\n  var opt = {};\n  opt[axis.dim + 'AxisIndex'] = axis.index;\n  return grid.getCartesian(opt);\n}\n\nvar pointerShapeBuilder = {\n  line: function (axis, pixelValue, otherExtent) {\n    var targetShape = viewHelper.makeLineShape([pixelValue, otherExtent[0]], [pixelValue, otherExtent[1]], getAxisDimIndex(axis));\n    return {\n      type: 'Line',\n      subPixelOptimize: true,\n      shape: targetShape\n    };\n  },\n  shadow: function (axis, pixelValue, otherExtent) {\n    var bandWidth = Math.max(1, axis.getBandWidth());\n    var span = otherExtent[1] - otherExtent[0];\n    return {\n      type: 'Rect',\n      shape: viewHelper.makeRectShape([pixelValue - bandWidth / 2, otherExtent[0]], [bandWidth, span], getAxisDimIndex(axis))\n    };\n  }\n};\n\nfunction getAxisDimIndex(axis) {\n  return axis.dim === 'x' ? 0 : 1;\n}\n\nAxisView_1[\"default\"].registerAxisPointerClass('CartesianAxisPointer', CartesianAxisPointer);\nexports[\"default\"] = CartesianAxisPointer;","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/echarts/lib/component/axisPointer/CartesianAxisPointer.js"],"names":["exports","__esModule","tslib_1","require","BaseAxisPointer_1","viewHelper","cartesianAxisHelper","AxisView_1","CartesianAxisPointer","_super","__extends","apply","arguments","prototype","makeElOption","elOption","value","axisModel","axisPointerModel","api","axis","grid","axisPointerType","get","otherExtent","getCartesian","getOtherAxis","getGlobalExtent","pixelValue","toGlobalCoord","dataToCoord","elStyle","buildElStyle","pointerOption","pointerShapeBuilder","style","graphicKey","type","pointer","layoutInfo","layout","model","buildCartesianSingleLabelElOption","getHandleTransform","labelInside","labelMargin","pos","getTransformedPosition","x","y","rotation","labelDirection","Math","PI","updateHandleTransform","transform","delta","axisExtent","dimIndex","dim","currPosition","min","max","cursorOtherValue","cursorPoint","tooltipOptions","verticalAlign","align","tooltipOption","opt","index","line","targetShape","makeLineShape","getAxisDimIndex","subPixelOptimize","shape","shadow","bandWidth","getBandWidth","span","makeRectShape","registerAxisPointerClass"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n\"use strict\";\n\nexports.__esModule = true;\n\nvar tslib_1 = require(\"tslib\");\n\nvar BaseAxisPointer_1 = require(\"./BaseAxisPointer\");\n\nvar viewHelper = require(\"./viewHelper\");\n\nvar cartesianAxisHelper = require(\"../../coord/cartesian/cartesianAxisHelper\");\n\nvar AxisView_1 = require(\"../axis/AxisView\");\n\nvar CartesianAxisPointer = function (_super) {\n  tslib_1.__extends(CartesianAxisPointer, _super);\n\n  function CartesianAxisPointer() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  CartesianAxisPointer.prototype.makeElOption = function (elOption, value, axisModel, axisPointerModel, api) {\n    var axis = axisModel.axis;\n    var grid = axis.grid;\n    var axisPointerType = axisPointerModel.get('type');\n    var otherExtent = getCartesian(grid, axis).getOtherAxis(axis).getGlobalExtent();\n    var pixelValue = axis.toGlobalCoord(axis.dataToCoord(value, true));\n\n    if (axisPointerType && axisPointerType !== 'none') {\n      var elStyle = viewHelper.buildElStyle(axisPointerModel);\n      var pointerOption = pointerShapeBuilder[axisPointerType](axis, pixelValue, otherExtent);\n      pointerOption.style = elStyle;\n      elOption.graphicKey = pointerOption.type;\n      elOption.pointer = pointerOption;\n    }\n\n    var layoutInfo = cartesianAxisHelper.layout(grid.model, axisModel);\n    viewHelper.buildCartesianSingleLabelElOption(value, elOption, layoutInfo, axisModel, axisPointerModel, api);\n  };\n\n  CartesianAxisPointer.prototype.getHandleTransform = function (value, axisModel, axisPointerModel) {\n    var layoutInfo = cartesianAxisHelper.layout(axisModel.axis.grid.model, axisModel, {\n      labelInside: false\n    });\n    layoutInfo.labelMargin = axisPointerModel.get(['handle', 'margin']);\n    var pos = viewHelper.getTransformedPosition(axisModel.axis, value, layoutInfo);\n    return {\n      x: pos[0],\n      y: pos[1],\n      rotation: layoutInfo.rotation + (layoutInfo.labelDirection < 0 ? Math.PI : 0)\n    };\n  };\n\n  CartesianAxisPointer.prototype.updateHandleTransform = function (transform, delta, axisModel, axisPointerModel) {\n    var axis = axisModel.axis;\n    var grid = axis.grid;\n    var axisExtent = axis.getGlobalExtent(true);\n    var otherExtent = getCartesian(grid, axis).getOtherAxis(axis).getGlobalExtent();\n    var dimIndex = axis.dim === 'x' ? 0 : 1;\n    var currPosition = [transform.x, transform.y];\n    currPosition[dimIndex] += delta[dimIndex];\n    currPosition[dimIndex] = Math.min(axisExtent[1], currPosition[dimIndex]);\n    currPosition[dimIndex] = Math.max(axisExtent[0], currPosition[dimIndex]);\n    var cursorOtherValue = (otherExtent[1] + otherExtent[0]) / 2;\n    var cursorPoint = [cursorOtherValue, cursorOtherValue];\n    cursorPoint[dimIndex] = currPosition[dimIndex];\n    var tooltipOptions = [{\n      verticalAlign: 'middle'\n    }, {\n      align: 'center'\n    }];\n    return {\n      x: currPosition[0],\n      y: currPosition[1],\n      rotation: transform.rotation,\n      cursorPoint: cursorPoint,\n      tooltipOption: tooltipOptions[dimIndex]\n    };\n  };\n\n  return CartesianAxisPointer;\n}(BaseAxisPointer_1[\"default\"]);\n\nfunction getCartesian(grid, axis) {\n  var opt = {};\n  opt[axis.dim + 'AxisIndex'] = axis.index;\n  return grid.getCartesian(opt);\n}\n\nvar pointerShapeBuilder = {\n  line: function (axis, pixelValue, otherExtent) {\n    var targetShape = viewHelper.makeLineShape([pixelValue, otherExtent[0]], [pixelValue, otherExtent[1]], getAxisDimIndex(axis));\n    return {\n      type: 'Line',\n      subPixelOptimize: true,\n      shape: targetShape\n    };\n  },\n  shadow: function (axis, pixelValue, otherExtent) {\n    var bandWidth = Math.max(1, axis.getBandWidth());\n    var span = otherExtent[1] - otherExtent[0];\n    return {\n      type: 'Rect',\n      shape: viewHelper.makeRectShape([pixelValue - bandWidth / 2, otherExtent[0]], [bandWidth, span], getAxisDimIndex(axis))\n    };\n  }\n};\n\nfunction getAxisDimIndex(axis) {\n  return axis.dim === 'x' ? 0 : 1;\n}\n\nAxisView_1[\"default\"].registerAxisPointerClass('CartesianAxisPointer', CartesianAxisPointer);\nexports[\"default\"] = CartesianAxisPointer;"]},"metadata":{},"sourceType":"script"}