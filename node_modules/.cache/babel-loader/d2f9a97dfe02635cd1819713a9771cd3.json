{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { mix, each, isArray, isString } from '@antv/util';\nimport { pointsToPolygon } from '../../util/path';\nimport Global from '../../global';\nimport Shape from '../shape';\nimport { getPathWithBorderRadiusByPolyline } from './polyline-util';\nimport { pathFinder } from './router'; // 折线\n\nShape.registerEdge('polyline', {\n  options: {\n    color: Global.defaultEdge.color,\n    size: Global.defaultEdge.size,\n    style: {\n      radius: 0,\n      offset: 15,\n      x: 0,\n      y: 0,\n      stroke: Global.defaultEdge.style.stroke,\n      lineAppendWidth: Global.defaultEdge.style.lineAppendWidth\n    },\n    // 文本样式配置\n    labelCfg: {\n      style: {\n        fill: Global.edgeLabel.style.fill,\n        fontSize: Global.edgeLabel.style.fontSize\n      }\n    },\n    routeCfg: {\n      obstacles: [],\n      maxAllowedDirectionChange: 90,\n      maximumLoops: 1000,\n      gridSize: 10\n    },\n    stateStyles: __assign({}, Global.edgeStateStyles)\n  },\n  shapeType: 'polyline',\n  // 文本位置\n  labelPosition: 'center',\n  drawShape: function drawShape(cfg, group) {\n    var shapeStyle = this.getShapeStyle(cfg);\n    if (shapeStyle.radius === 0) delete shapeStyle.radius;\n    var keyShape = group.addShape('path', {\n      className: 'edge-shape',\n      name: 'edge-shape',\n      attrs: shapeStyle\n    });\n    return keyShape;\n  },\n  getShapeStyle: function getShapeStyle(cfg) {\n    var defaultStyle = this.options.style;\n    var strokeStyle = {\n      stroke: cfg.color\n    };\n    var style = mix({}, defaultStyle, strokeStyle, cfg.style);\n    cfg = this.getPathPoints(cfg);\n    this.radius = style.radius;\n    this.offset = style.offset;\n    var startPoint = cfg.startPoint,\n        endPoint = cfg.endPoint;\n    var controlPoints = this.getControlPoints(cfg);\n    var points = [startPoint]; // 添加起始点\n    // 添加控制点\n\n    if (controlPoints) {\n      points = points.concat(controlPoints);\n    } // 添加结束点\n\n\n    points.push(endPoint);\n    var source = cfg.sourceNode;\n    var target = cfg.targetNode;\n    var radius = style.radius;\n    var routeCfg = this.options.routeCfg;\n    routeCfg.offset = style.offset;\n    var path = this.getPath(points, source, target, radius, routeCfg);\n\n    if (isArray(path) && path.length <= 1 || isString(path) && path.indexOf('L') === -1) {\n      path = 'M0 0, L0 0';\n    }\n\n    if (isNaN(startPoint.x) || isNaN(startPoint.y) || isNaN(endPoint.x) || isNaN(endPoint.y)) {\n      path = 'M0 0, L0 0';\n    }\n\n    var attrs = mix({}, Global.defaultEdge.style, style, {\n      lineWidth: cfg.size,\n      path: path\n    });\n    return attrs;\n  },\n  updateShapeStyle: function updateShapeStyle(cfg, item) {\n    var group = item.getContainer();\n    var strokeStyle = {\n      stroke: cfg.color\n    };\n    var shape = group.find(function (element) {\n      return element.get('className') === 'edge-shape';\n    }) || item.getKeyShape();\n    var size = cfg.size;\n    cfg = this.getPathPoints(cfg);\n    var startPoint = cfg.startPoint,\n        endPoint = cfg.endPoint;\n    var controlPoints = this.getControlPoints(cfg); // || cfg.controlPoints;\n\n    var points = [startPoint]; // 添加起始点\n    // 添加控制点\n\n    if (controlPoints) {\n      points = points.concat(controlPoints);\n    } // 添加结束点\n\n\n    points.push(endPoint);\n    var previousStyle = mix({}, strokeStyle, shape.attr(), cfg.style);\n    var source = cfg.sourceNode;\n    var target = cfg.targetNode;\n    var radius = previousStyle.radius;\n    var routeCfg = this.options.routeCfg;\n    routeCfg.offset = previousStyle.offset;\n    var path = this.getPath(points, source, target, radius, routeCfg);\n\n    if (isArray(path) && path.length <= 1 || isString(path) && path.indexOf('L') === -1) {\n      path = 'M0 0, L0 0';\n    }\n\n    if (isNaN(startPoint.x) || isNaN(startPoint.y) || isNaN(endPoint.x) || isNaN(endPoint.y)) {\n      path = 'M0 0, L0 0';\n    }\n\n    var style = mix(strokeStyle, shape.attr(), {\n      lineWidth: size,\n      path: path\n    }, cfg.style);\n\n    if (shape) {\n      shape.attr(style);\n    }\n  },\n  getPath: function getPath(points, source, target, radius, routeCfg) {\n    var offset = routeCfg.offset; // 指定了控制点\n\n    if (!offset || points.length > 2) {\n      if (radius) {\n        return getPathWithBorderRadiusByPolyline(points, radius);\n      }\n\n      var pathArray_1 = [];\n      each(points, function (point, index) {\n        if (index === 0) {\n          pathArray_1.push(['M', point.x, point.y]);\n        } else {\n          pathArray_1.push(['L', point.x, point.y]);\n        }\n      });\n      return pathArray_1;\n    } // 未指定控制点\n\n\n    var polylinePoints;\n\n    if (radius) {\n      polylinePoints = pathFinder(points[0], points[points.length - 1], source, target, routeCfg);\n      var res_1 = getPathWithBorderRadiusByPolyline(polylinePoints, radius);\n      return res_1;\n    }\n\n    polylinePoints = pathFinder(points[0], points[points.length - 1], source, target, routeCfg);\n    var res = pointsToPolygon(polylinePoints);\n    return res;\n  }\n}, 'single-edge');","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/@antv/g6/es/shape/edges/polyline.js"],"names":["__assign","mix","each","isArray","isString","pointsToPolygon","Global","Shape","getPathWithBorderRadiusByPolyline","pathFinder","registerEdge","options","color","defaultEdge","size","style","radius","offset","x","y","stroke","lineAppendWidth","labelCfg","fill","edgeLabel","fontSize","routeCfg","obstacles","maxAllowedDirectionChange","maximumLoops","gridSize","stateStyles","edgeStateStyles","shapeType","labelPosition","drawShape","cfg","group","shapeStyle","getShapeStyle","keyShape","addShape","className","name","attrs","defaultStyle","strokeStyle","getPathPoints","startPoint","endPoint","controlPoints","getControlPoints","points","concat","push","source","sourceNode","target","targetNode","path","getPath","length","indexOf","isNaN","lineWidth","updateShapeStyle","item","getContainer","shape","find","element","get","getKeyShape","previousStyle","attr","pathArray_1","point","index","polylinePoints","res_1","res"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,OAApB,EAA6BC,QAA7B,QAA6C,YAA7C;AACA,SAASC,eAAT,QAAgC,iBAAhC;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,SAASC,iCAAT,QAAkD,iBAAlD;AACA,SAASC,UAAT,QAA2B,UAA3B,C,CAAuC;;AAEvCF,KAAK,CAACG,YAAN,CAAmB,UAAnB,EAA+B;AAC7BC,EAAAA,OAAO,EAAE;AACPC,IAAAA,KAAK,EAAEN,MAAM,CAACO,WAAP,CAAmBD,KADnB;AAEPE,IAAAA,IAAI,EAAER,MAAM,CAACO,WAAP,CAAmBC,IAFlB;AAGPC,IAAAA,KAAK,EAAE;AACLC,MAAAA,MAAM,EAAE,CADH;AAELC,MAAAA,MAAM,EAAE,EAFH;AAGLC,MAAAA,CAAC,EAAE,CAHE;AAILC,MAAAA,CAAC,EAAE,CAJE;AAKLC,MAAAA,MAAM,EAAEd,MAAM,CAACO,WAAP,CAAmBE,KAAnB,CAAyBK,MAL5B;AAMLC,MAAAA,eAAe,EAAEf,MAAM,CAACO,WAAP,CAAmBE,KAAnB,CAAyBM;AANrC,KAHA;AAWP;AACAC,IAAAA,QAAQ,EAAE;AACRP,MAAAA,KAAK,EAAE;AACLQ,QAAAA,IAAI,EAAEjB,MAAM,CAACkB,SAAP,CAAiBT,KAAjB,CAAuBQ,IADxB;AAELE,QAAAA,QAAQ,EAAEnB,MAAM,CAACkB,SAAP,CAAiBT,KAAjB,CAAuBU;AAF5B;AADC,KAZH;AAkBPC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,SAAS,EAAE,EADH;AAERC,MAAAA,yBAAyB,EAAE,EAFnB;AAGRC,MAAAA,YAAY,EAAE,IAHN;AAIRC,MAAAA,QAAQ,EAAE;AAJF,KAlBH;AAwBPC,IAAAA,WAAW,EAAE/B,QAAQ,CAAC,EAAD,EAAKM,MAAM,CAAC0B,eAAZ;AAxBd,GADoB;AA2B7BC,EAAAA,SAAS,EAAE,UA3BkB;AA4B7B;AACAC,EAAAA,aAAa,EAAE,QA7Bc;AA8B7BC,EAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBC,GAAnB,EAAwBC,KAAxB,EAA+B;AACxC,QAAIC,UAAU,GAAG,KAAKC,aAAL,CAAmBH,GAAnB,CAAjB;AACA,QAAIE,UAAU,CAACtB,MAAX,KAAsB,CAA1B,EAA6B,OAAOsB,UAAU,CAACtB,MAAlB;AAC7B,QAAIwB,QAAQ,GAAGH,KAAK,CAACI,QAAN,CAAe,MAAf,EAAuB;AACpCC,MAAAA,SAAS,EAAE,YADyB;AAEpCC,MAAAA,IAAI,EAAE,YAF8B;AAGpCC,MAAAA,KAAK,EAAEN;AAH6B,KAAvB,CAAf;AAKA,WAAOE,QAAP;AACD,GAvC4B;AAwC7BD,EAAAA,aAAa,EAAE,SAASA,aAAT,CAAuBH,GAAvB,EAA4B;AACzC,QAAIS,YAAY,GAAG,KAAKlC,OAAL,CAAaI,KAAhC;AACA,QAAI+B,WAAW,GAAG;AAChB1B,MAAAA,MAAM,EAAEgB,GAAG,CAACxB;AADI,KAAlB;AAGA,QAAIG,KAAK,GAAGd,GAAG,CAAC,EAAD,EAAK4C,YAAL,EAAmBC,WAAnB,EAAgCV,GAAG,CAACrB,KAApC,CAAf;AACAqB,IAAAA,GAAG,GAAG,KAAKW,aAAL,CAAmBX,GAAnB,CAAN;AACA,SAAKpB,MAAL,GAAcD,KAAK,CAACC,MAApB;AACA,SAAKC,MAAL,GAAcF,KAAK,CAACE,MAApB;AACA,QAAI+B,UAAU,GAAGZ,GAAG,CAACY,UAArB;AAAA,QACIC,QAAQ,GAAGb,GAAG,CAACa,QADnB;AAEA,QAAIC,aAAa,GAAG,KAAKC,gBAAL,CAAsBf,GAAtB,CAApB;AACA,QAAIgB,MAAM,GAAG,CAACJ,UAAD,CAAb,CAZyC,CAYd;AAC3B;;AAEA,QAAIE,aAAJ,EAAmB;AACjBE,MAAAA,MAAM,GAAGA,MAAM,CAACC,MAAP,CAAcH,aAAd,CAAT;AACD,KAjBwC,CAiBvC;;;AAGFE,IAAAA,MAAM,CAACE,IAAP,CAAYL,QAAZ;AACA,QAAIM,MAAM,GAAGnB,GAAG,CAACoB,UAAjB;AACA,QAAIC,MAAM,GAAGrB,GAAG,CAACsB,UAAjB;AACA,QAAI1C,MAAM,GAAGD,KAAK,CAACC,MAAnB;AACA,QAAIU,QAAQ,GAAG,KAAKf,OAAL,CAAae,QAA5B;AACAA,IAAAA,QAAQ,CAACT,MAAT,GAAkBF,KAAK,CAACE,MAAxB;AACA,QAAI0C,IAAI,GAAG,KAAKC,OAAL,CAAaR,MAAb,EAAqBG,MAArB,EAA6BE,MAA7B,EAAqCzC,MAArC,EAA6CU,QAA7C,CAAX;;AAEA,QAAIvB,OAAO,CAACwD,IAAD,CAAP,IAAiBA,IAAI,CAACE,MAAL,IAAe,CAAhC,IAAqCzD,QAAQ,CAACuD,IAAD,CAAR,IAAkBA,IAAI,CAACG,OAAL,CAAa,GAAb,MAAsB,CAAC,CAAlF,EAAqF;AACnFH,MAAAA,IAAI,GAAG,YAAP;AACD;;AAED,QAAII,KAAK,CAACf,UAAU,CAAC9B,CAAZ,CAAL,IAAuB6C,KAAK,CAACf,UAAU,CAAC7B,CAAZ,CAA5B,IAA8C4C,KAAK,CAACd,QAAQ,CAAC/B,CAAV,CAAnD,IAAmE6C,KAAK,CAACd,QAAQ,CAAC9B,CAAV,CAA5E,EAA0F;AACxFwC,MAAAA,IAAI,GAAG,YAAP;AACD;;AAED,QAAIf,KAAK,GAAG3C,GAAG,CAAC,EAAD,EAAKK,MAAM,CAACO,WAAP,CAAmBE,KAAxB,EAA+BA,KAA/B,EAAsC;AACnDiD,MAAAA,SAAS,EAAE5B,GAAG,CAACtB,IADoC;AAEnD6C,MAAAA,IAAI,EAAEA;AAF6C,KAAtC,CAAf;AAIA,WAAOf,KAAP;AACD,GAjF4B;AAkF7BqB,EAAAA,gBAAgB,EAAE,SAASA,gBAAT,CAA0B7B,GAA1B,EAA+B8B,IAA/B,EAAqC;AACrD,QAAI7B,KAAK,GAAG6B,IAAI,CAACC,YAAL,EAAZ;AACA,QAAIrB,WAAW,GAAG;AAChB1B,MAAAA,MAAM,EAAEgB,GAAG,CAACxB;AADI,KAAlB;AAGA,QAAIwD,KAAK,GAAG/B,KAAK,CAACgC,IAAN,CAAW,UAAUC,OAAV,EAAmB;AACxC,aAAOA,OAAO,CAACC,GAAR,CAAY,WAAZ,MAA6B,YAApC;AACD,KAFW,KAENL,IAAI,CAACM,WAAL,EAFN;AAGA,QAAI1D,IAAI,GAAGsB,GAAG,CAACtB,IAAf;AACAsB,IAAAA,GAAG,GAAG,KAAKW,aAAL,CAAmBX,GAAnB,CAAN;AACA,QAAIY,UAAU,GAAGZ,GAAG,CAACY,UAArB;AAAA,QACIC,QAAQ,GAAGb,GAAG,CAACa,QADnB;AAEA,QAAIC,aAAa,GAAG,KAAKC,gBAAL,CAAsBf,GAAtB,CAApB,CAZqD,CAYL;;AAEhD,QAAIgB,MAAM,GAAG,CAACJ,UAAD,CAAb,CAdqD,CAc1B;AAC3B;;AAEA,QAAIE,aAAJ,EAAmB;AACjBE,MAAAA,MAAM,GAAGA,MAAM,CAACC,MAAP,CAAcH,aAAd,CAAT;AACD,KAnBoD,CAmBnD;;;AAGFE,IAAAA,MAAM,CAACE,IAAP,CAAYL,QAAZ;AACA,QAAIwB,aAAa,GAAGxE,GAAG,CAAC,EAAD,EAAK6C,WAAL,EAAkBsB,KAAK,CAACM,IAAN,EAAlB,EAAgCtC,GAAG,CAACrB,KAApC,CAAvB;AACA,QAAIwC,MAAM,GAAGnB,GAAG,CAACoB,UAAjB;AACA,QAAIC,MAAM,GAAGrB,GAAG,CAACsB,UAAjB;AACA,QAAI1C,MAAM,GAAGyD,aAAa,CAACzD,MAA3B;AACA,QAAIU,QAAQ,GAAG,KAAKf,OAAL,CAAae,QAA5B;AACAA,IAAAA,QAAQ,CAACT,MAAT,GAAkBwD,aAAa,CAACxD,MAAhC;AACA,QAAI0C,IAAI,GAAG,KAAKC,OAAL,CAAaR,MAAb,EAAqBG,MAArB,EAA6BE,MAA7B,EAAqCzC,MAArC,EAA6CU,QAA7C,CAAX;;AAEA,QAAIvB,OAAO,CAACwD,IAAD,CAAP,IAAiBA,IAAI,CAACE,MAAL,IAAe,CAAhC,IAAqCzD,QAAQ,CAACuD,IAAD,CAAR,IAAkBA,IAAI,CAACG,OAAL,CAAa,GAAb,MAAsB,CAAC,CAAlF,EAAqF;AACnFH,MAAAA,IAAI,GAAG,YAAP;AACD;;AAED,QAAII,KAAK,CAACf,UAAU,CAAC9B,CAAZ,CAAL,IAAuB6C,KAAK,CAACf,UAAU,CAAC7B,CAAZ,CAA5B,IAA8C4C,KAAK,CAACd,QAAQ,CAAC/B,CAAV,CAAnD,IAAmE6C,KAAK,CAACd,QAAQ,CAAC9B,CAAV,CAA5E,EAA0F;AACxFwC,MAAAA,IAAI,GAAG,YAAP;AACD;;AAED,QAAI5C,KAAK,GAAGd,GAAG,CAAC6C,WAAD,EAAcsB,KAAK,CAACM,IAAN,EAAd,EAA4B;AACzCV,MAAAA,SAAS,EAAElD,IAD8B;AAEzC6C,MAAAA,IAAI,EAAEA;AAFmC,KAA5B,EAGZvB,GAAG,CAACrB,KAHQ,CAAf;;AAKA,QAAIqD,KAAJ,EAAW;AACTA,MAAAA,KAAK,CAACM,IAAN,CAAW3D,KAAX;AACD;AACF,GAjI4B;AAkI7B6C,EAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBR,MAAjB,EAAyBG,MAAzB,EAAiCE,MAAjC,EAAyCzC,MAAzC,EAAiDU,QAAjD,EAA2D;AAClE,QAAIT,MAAM,GAAGS,QAAQ,CAACT,MAAtB,CADkE,CACpC;;AAE9B,QAAI,CAACA,MAAD,IAAWmC,MAAM,CAACS,MAAP,GAAgB,CAA/B,EAAkC;AAChC,UAAI7C,MAAJ,EAAY;AACV,eAAOR,iCAAiC,CAAC4C,MAAD,EAASpC,MAAT,CAAxC;AACD;;AAED,UAAI2D,WAAW,GAAG,EAAlB;AACAzE,MAAAA,IAAI,CAACkD,MAAD,EAAS,UAAUwB,KAAV,EAAiBC,KAAjB,EAAwB;AACnC,YAAIA,KAAK,KAAK,CAAd,EAAiB;AACfF,UAAAA,WAAW,CAACrB,IAAZ,CAAiB,CAAC,GAAD,EAAMsB,KAAK,CAAC1D,CAAZ,EAAe0D,KAAK,CAACzD,CAArB,CAAjB;AACD,SAFD,MAEO;AACLwD,UAAAA,WAAW,CAACrB,IAAZ,CAAiB,CAAC,GAAD,EAAMsB,KAAK,CAAC1D,CAAZ,EAAe0D,KAAK,CAACzD,CAArB,CAAjB;AACD;AACF,OANG,CAAJ;AAOA,aAAOwD,WAAP;AACD,KAjBiE,CAiBhE;;;AAGF,QAAIG,cAAJ;;AAEA,QAAI9D,MAAJ,EAAY;AACV8D,MAAAA,cAAc,GAAGrE,UAAU,CAAC2C,MAAM,CAAC,CAAD,CAAP,EAAYA,MAAM,CAACA,MAAM,CAACS,MAAP,GAAgB,CAAjB,CAAlB,EAAuCN,MAAvC,EAA+CE,MAA/C,EAAuD/B,QAAvD,CAA3B;AACA,UAAIqD,KAAK,GAAGvE,iCAAiC,CAACsE,cAAD,EAAiB9D,MAAjB,CAA7C;AACA,aAAO+D,KAAP;AACD;;AAEDD,IAAAA,cAAc,GAAGrE,UAAU,CAAC2C,MAAM,CAAC,CAAD,CAAP,EAAYA,MAAM,CAACA,MAAM,CAACS,MAAP,GAAgB,CAAjB,CAAlB,EAAuCN,MAAvC,EAA+CE,MAA/C,EAAuD/B,QAAvD,CAA3B;AACA,QAAIsD,GAAG,GAAG3E,eAAe,CAACyE,cAAD,CAAzB;AACA,WAAOE,GAAP;AACD;AAjK4B,CAA/B,EAkKG,aAlKH","sourcesContent":["import { __assign } from \"tslib\";\nimport { mix, each, isArray, isString } from '@antv/util';\nimport { pointsToPolygon } from '../../util/path';\nimport Global from '../../global';\nimport Shape from '../shape';\nimport { getPathWithBorderRadiusByPolyline } from './polyline-util';\nimport { pathFinder } from './router'; // 折线\n\nShape.registerEdge('polyline', {\n  options: {\n    color: Global.defaultEdge.color,\n    size: Global.defaultEdge.size,\n    style: {\n      radius: 0,\n      offset: 15,\n      x: 0,\n      y: 0,\n      stroke: Global.defaultEdge.style.stroke,\n      lineAppendWidth: Global.defaultEdge.style.lineAppendWidth\n    },\n    // 文本样式配置\n    labelCfg: {\n      style: {\n        fill: Global.edgeLabel.style.fill,\n        fontSize: Global.edgeLabel.style.fontSize\n      }\n    },\n    routeCfg: {\n      obstacles: [],\n      maxAllowedDirectionChange: 90,\n      maximumLoops: 1000,\n      gridSize: 10\n    },\n    stateStyles: __assign({}, Global.edgeStateStyles)\n  },\n  shapeType: 'polyline',\n  // 文本位置\n  labelPosition: 'center',\n  drawShape: function drawShape(cfg, group) {\n    var shapeStyle = this.getShapeStyle(cfg);\n    if (shapeStyle.radius === 0) delete shapeStyle.radius;\n    var keyShape = group.addShape('path', {\n      className: 'edge-shape',\n      name: 'edge-shape',\n      attrs: shapeStyle\n    });\n    return keyShape;\n  },\n  getShapeStyle: function getShapeStyle(cfg) {\n    var defaultStyle = this.options.style;\n    var strokeStyle = {\n      stroke: cfg.color\n    };\n    var style = mix({}, defaultStyle, strokeStyle, cfg.style);\n    cfg = this.getPathPoints(cfg);\n    this.radius = style.radius;\n    this.offset = style.offset;\n    var startPoint = cfg.startPoint,\n        endPoint = cfg.endPoint;\n    var controlPoints = this.getControlPoints(cfg);\n    var points = [startPoint]; // 添加起始点\n    // 添加控制点\n\n    if (controlPoints) {\n      points = points.concat(controlPoints);\n    } // 添加结束点\n\n\n    points.push(endPoint);\n    var source = cfg.sourceNode;\n    var target = cfg.targetNode;\n    var radius = style.radius;\n    var routeCfg = this.options.routeCfg;\n    routeCfg.offset = style.offset;\n    var path = this.getPath(points, source, target, radius, routeCfg);\n\n    if (isArray(path) && path.length <= 1 || isString(path) && path.indexOf('L') === -1) {\n      path = 'M0 0, L0 0';\n    }\n\n    if (isNaN(startPoint.x) || isNaN(startPoint.y) || isNaN(endPoint.x) || isNaN(endPoint.y)) {\n      path = 'M0 0, L0 0';\n    }\n\n    var attrs = mix({}, Global.defaultEdge.style, style, {\n      lineWidth: cfg.size,\n      path: path\n    });\n    return attrs;\n  },\n  updateShapeStyle: function updateShapeStyle(cfg, item) {\n    var group = item.getContainer();\n    var strokeStyle = {\n      stroke: cfg.color\n    };\n    var shape = group.find(function (element) {\n      return element.get('className') === 'edge-shape';\n    }) || item.getKeyShape();\n    var size = cfg.size;\n    cfg = this.getPathPoints(cfg);\n    var startPoint = cfg.startPoint,\n        endPoint = cfg.endPoint;\n    var controlPoints = this.getControlPoints(cfg); // || cfg.controlPoints;\n\n    var points = [startPoint]; // 添加起始点\n    // 添加控制点\n\n    if (controlPoints) {\n      points = points.concat(controlPoints);\n    } // 添加结束点\n\n\n    points.push(endPoint);\n    var previousStyle = mix({}, strokeStyle, shape.attr(), cfg.style);\n    var source = cfg.sourceNode;\n    var target = cfg.targetNode;\n    var radius = previousStyle.radius;\n    var routeCfg = this.options.routeCfg;\n    routeCfg.offset = previousStyle.offset;\n    var path = this.getPath(points, source, target, radius, routeCfg);\n\n    if (isArray(path) && path.length <= 1 || isString(path) && path.indexOf('L') === -1) {\n      path = 'M0 0, L0 0';\n    }\n\n    if (isNaN(startPoint.x) || isNaN(startPoint.y) || isNaN(endPoint.x) || isNaN(endPoint.y)) {\n      path = 'M0 0, L0 0';\n    }\n\n    var style = mix(strokeStyle, shape.attr(), {\n      lineWidth: size,\n      path: path\n    }, cfg.style);\n\n    if (shape) {\n      shape.attr(style);\n    }\n  },\n  getPath: function getPath(points, source, target, radius, routeCfg) {\n    var offset = routeCfg.offset; // 指定了控制点\n\n    if (!offset || points.length > 2) {\n      if (radius) {\n        return getPathWithBorderRadiusByPolyline(points, radius);\n      }\n\n      var pathArray_1 = [];\n      each(points, function (point, index) {\n        if (index === 0) {\n          pathArray_1.push(['M', point.x, point.y]);\n        } else {\n          pathArray_1.push(['L', point.x, point.y]);\n        }\n      });\n      return pathArray_1;\n    } // 未指定控制点\n\n\n    var polylinePoints;\n\n    if (radius) {\n      polylinePoints = pathFinder(points[0], points[points.length - 1], source, target, routeCfg);\n      var res_1 = getPathWithBorderRadiusByPolyline(polylinePoints, radius);\n      return res_1;\n    }\n\n    polylinePoints = pathFinder(points[0], points[points.length - 1], source, target, routeCfg);\n    var res = pointsToPolygon(polylinePoints);\n    return res;\n  }\n}, 'single-edge');"]},"metadata":{},"sourceType":"module"}