{"ast":null,"code":"export default {\n  getDefaultCfg: function getDefaultCfg() {\n    return {\n      trigger: 'mouseenter',\n      activeState: 'active',\n      inactiveState: 'inactive',\n      resetSelected: false,\n      shouldUpdate: function shouldUpdate() {\n        return true;\n      }\n    };\n  },\n  getEvents: function getEvents() {\n    if (this.get('trigger') === 'mouseenter') {\n      return {\n        'node:mouseenter': 'setAllItemStates',\n        'node:mouseleave': 'clearActiveState'\n      };\n    }\n\n    return {\n      'node:click': 'setAllItemStates',\n      'canvas:click': 'clearAllItemStates'\n    };\n  },\n  setAllItemStates: function setAllItemStates(e) {\n    var item = e.item;\n    var graph = this.graph;\n    this.item = item;\n\n    if (!this.shouldUpdate(e.item, {\n      event: e,\n      action: 'activate'\n    })) {\n      return;\n    }\n\n    var self = this;\n    var activeState = this.activeState;\n    var inactiveState = this.inactiveState;\n    var nodes = graph.getNodes();\n    var edges = graph.getEdges();\n    var nodeLength = nodes.length;\n    var edgeLength = edges.length;\n\n    for (var i = 0; i < nodeLength; i++) {\n      var node = nodes[i];\n      var hasSelected = node.hasState('selected');\n\n      if (self.resetSelected) {\n        if (hasSelected) {\n          graph.setItemState(node, 'selected', false);\n        }\n      }\n\n      graph.setItemState(node, activeState, false);\n\n      if (inactiveState) {\n        graph.setItemState(node, inactiveState, true);\n      }\n    }\n\n    for (var i = 0; i < edgeLength; i++) {\n      var edge = edges[i];\n      graph.setItemState(edge, activeState, false);\n\n      if (inactiveState) {\n        graph.setItemState(edge, inactiveState, true);\n      }\n    }\n\n    if (inactiveState) {\n      graph.setItemState(item, inactiveState, false);\n    }\n\n    graph.setItemState(item, activeState, true);\n    var rEdges = item.getEdges();\n    var rEdgeLegnth = rEdges.length;\n\n    for (var i = 0; i < rEdgeLegnth; i++) {\n      var edge = rEdges[i];\n      var otherEnd = void 0;\n\n      if (edge.getSource() === item) {\n        otherEnd = edge.getTarget();\n      } else {\n        otherEnd = edge.getSource();\n      }\n\n      if (inactiveState) {\n        graph.setItemState(otherEnd, inactiveState, false);\n      }\n\n      graph.setItemState(otherEnd, activeState, true);\n      graph.setItemState(edge, inactiveState, false);\n      graph.setItemState(edge, activeState, true);\n      edge.toFront();\n    }\n\n    graph.emit('afteractivaterelations', {\n      item: e.item,\n      action: 'activate'\n    });\n  },\n  clearActiveState: function clearActiveState(e) {\n    var self = this;\n    var graph = self.get('graph');\n\n    if (!self.shouldUpdate(e.item, {\n      event: e,\n      action: 'deactivate'\n    })) {\n      return;\n    }\n\n    var activeState = this.activeState;\n    var inactiveState = this.inactiveState;\n    var autoPaint = graph.get('autoPaint');\n    graph.setAutoPaint(false);\n    var nodes = graph.getNodes();\n    var edges = graph.getEdges();\n    var nodeLength = nodes.length;\n    var edgeLength = edges.length;\n\n    for (var i = 0; i < nodeLength; i++) {\n      var node = nodes[i];\n      graph.clearItemStates(node, [activeState, inactiveState]);\n    }\n\n    for (var i = 0; i < edgeLength; i++) {\n      var edge = edges[i];\n      graph.clearItemStates(edge, [activeState, inactiveState, 'deactivate']);\n    }\n\n    graph.paint();\n    graph.setAutoPaint(autoPaint);\n    graph.emit('afteractivaterelations', {\n      item: e.item || self.get('item'),\n      action: 'deactivate'\n    });\n  },\n  clearAllItemStates: function clearAllItemStates(e) {\n    var self = this;\n    var graph = self.graph;\n\n    if (!self.shouldUpdate(e.item, {\n      event: e,\n      action: 'deactivate'\n    })) {\n      return;\n    }\n\n    var activeState = this.activeState;\n    var inactiveState = this.inactiveState;\n    var nodes = graph.getNodes();\n    var edges = graph.getEdges();\n    var nodeLength = nodes.length;\n    var edgeLength = edges.length;\n\n    for (var i = 0; i < nodeLength; i++) {\n      var node = nodes[i];\n      graph.clearItemStates(node, [activeState, inactiveState]);\n    }\n\n    for (var i = 0; i < edgeLength; i++) {\n      var edge = edges[i];\n      graph.clearItemStates(edge, [activeState, inactiveState, 'deactivate']);\n    }\n\n    graph.emit('afteractivaterelations', {\n      item: e.item || self.get('item'),\n      action: 'deactivate'\n    });\n  }\n};","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/@antv/g6/es/behavior/activate-relations.js"],"names":["getDefaultCfg","trigger","activeState","inactiveState","resetSelected","shouldUpdate","getEvents","get","setAllItemStates","e","item","graph","event","action","self","nodes","getNodes","edges","getEdges","nodeLength","length","edgeLength","i","node","hasSelected","hasState","setItemState","edge","rEdges","rEdgeLegnth","otherEnd","getSource","getTarget","toFront","emit","clearActiveState","autoPaint","setAutoPaint","clearItemStates","paint","clearAllItemStates"],"mappings":"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","sourcesContent":["export default {\n  getDefaultCfg: function getDefaultCfg() {\n    return {\n      trigger: 'mouseenter',\n      activeState: 'active',\n      inactiveState: 'inactive',\n      resetSelected: false,\n      shouldUpdate: function shouldUpdate() {\n        return true;\n      }\n    };\n  },\n  getEvents: function getEvents() {\n    if (this.get('trigger') === 'mouseenter') {\n      return {\n        'node:mouseenter': 'setAllItemStates',\n        'node:mouseleave': 'clearActiveState'\n      };\n    }\n\n    return {\n      'node:click': 'setAllItemStates',\n      'canvas:click': 'clearAllItemStates'\n    };\n  },\n  setAllItemStates: function setAllItemStates(e) {\n    var item = e.item;\n    var graph = this.graph;\n    this.item = item;\n\n    if (!this.shouldUpdate(e.item, {\n      event: e,\n      action: 'activate'\n    })) {\n      return;\n    }\n\n    var self = this;\n    var activeState = this.activeState;\n    var inactiveState = this.inactiveState;\n    var nodes = graph.getNodes();\n    var edges = graph.getEdges();\n    var nodeLength = nodes.length;\n    var edgeLength = edges.length;\n\n    for (var i = 0; i < nodeLength; i++) {\n      var node = nodes[i];\n      var hasSelected = node.hasState('selected');\n\n      if (self.resetSelected) {\n        if (hasSelected) {\n          graph.setItemState(node, 'selected', false);\n        }\n      }\n\n      graph.setItemState(node, activeState, false);\n\n      if (inactiveState) {\n        graph.setItemState(node, inactiveState, true);\n      }\n    }\n\n    for (var i = 0; i < edgeLength; i++) {\n      var edge = edges[i];\n      graph.setItemState(edge, activeState, false);\n\n      if (inactiveState) {\n        graph.setItemState(edge, inactiveState, true);\n      }\n    }\n\n    if (inactiveState) {\n      graph.setItemState(item, inactiveState, false);\n    }\n\n    graph.setItemState(item, activeState, true);\n    var rEdges = item.getEdges();\n    var rEdgeLegnth = rEdges.length;\n\n    for (var i = 0; i < rEdgeLegnth; i++) {\n      var edge = rEdges[i];\n      var otherEnd = void 0;\n\n      if (edge.getSource() === item) {\n        otherEnd = edge.getTarget();\n      } else {\n        otherEnd = edge.getSource();\n      }\n\n      if (inactiveState) {\n        graph.setItemState(otherEnd, inactiveState, false);\n      }\n\n      graph.setItemState(otherEnd, activeState, true);\n      graph.setItemState(edge, inactiveState, false);\n      graph.setItemState(edge, activeState, true);\n      edge.toFront();\n    }\n\n    graph.emit('afteractivaterelations', {\n      item: e.item,\n      action: 'activate'\n    });\n  },\n  clearActiveState: function clearActiveState(e) {\n    var self = this;\n    var graph = self.get('graph');\n\n    if (!self.shouldUpdate(e.item, {\n      event: e,\n      action: 'deactivate'\n    })) {\n      return;\n    }\n\n    var activeState = this.activeState;\n    var inactiveState = this.inactiveState;\n    var autoPaint = graph.get('autoPaint');\n    graph.setAutoPaint(false);\n    var nodes = graph.getNodes();\n    var edges = graph.getEdges();\n    var nodeLength = nodes.length;\n    var edgeLength = edges.length;\n\n    for (var i = 0; i < nodeLength; i++) {\n      var node = nodes[i];\n      graph.clearItemStates(node, [activeState, inactiveState]);\n    }\n\n    for (var i = 0; i < edgeLength; i++) {\n      var edge = edges[i];\n      graph.clearItemStates(edge, [activeState, inactiveState, 'deactivate']);\n    }\n\n    graph.paint();\n    graph.setAutoPaint(autoPaint);\n    graph.emit('afteractivaterelations', {\n      item: e.item || self.get('item'),\n      action: 'deactivate'\n    });\n  },\n  clearAllItemStates: function clearAllItemStates(e) {\n    var self = this;\n    var graph = self.graph;\n\n    if (!self.shouldUpdate(e.item, {\n      event: e,\n      action: 'deactivate'\n    })) {\n      return;\n    }\n\n    var activeState = this.activeState;\n    var inactiveState = this.inactiveState;\n    var nodes = graph.getNodes();\n    var edges = graph.getEdges();\n    var nodeLength = nodes.length;\n    var edgeLength = edges.length;\n\n    for (var i = 0; i < nodeLength; i++) {\n      var node = nodes[i];\n      graph.clearItemStates(node, [activeState, inactiveState]);\n    }\n\n    for (var i = 0; i < edgeLength; i++) {\n      var edge = edges[i];\n      graph.clearItemStates(edge, [activeState, inactiveState, 'deactivate']);\n    }\n\n    graph.emit('afteractivaterelations', {\n      item: e.item || self.get('item'),\n      action: 'deactivate'\n    });\n  }\n};"]},"metadata":{},"sourceType":"module"}