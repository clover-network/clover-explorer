{"ast":null,"code":"import rescale from 'ml-array-rescale';\nimport { inspectMatrix, inspectMatrixWithOptions } from './inspect';\nimport { installMathOperations } from './mathOperations';\nimport { sumByRow, sumByColumn, sumAll, productByRow, productByColumn, productAll, varianceByRow, varianceByColumn, varianceAll, centerByRow, centerByColumn, centerAll, scaleByRow, scaleByColumn, scaleAll, getScaleByRow, getScaleByColumn, getScaleAll } from './stat';\nimport { checkRowVector, checkRowIndex, checkColumnIndex, checkColumnVector, checkRange, checkIndices } from './util';\nexport class AbstractMatrix {\n  static from1DArray(newRows, newColumns, newData) {\n    let length = newRows * newColumns;\n\n    if (length !== newData.length) {\n      throw new RangeError('data length does not match given dimensions');\n    }\n\n    let newMatrix = new Matrix(newRows, newColumns);\n\n    for (let row = 0; row < newRows; row++) {\n      for (let column = 0; column < newColumns; column++) {\n        newMatrix.set(row, column, newData[row * newColumns + column]);\n      }\n    }\n\n    return newMatrix;\n  }\n\n  static rowVector(newData) {\n    let vector = new Matrix(1, newData.length);\n\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(0, i, newData[i]);\n    }\n\n    return vector;\n  }\n\n  static columnVector(newData) {\n    let vector = new Matrix(newData.length, 1);\n\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(i, 0, newData[i]);\n    }\n\n    return vector;\n  }\n\n  static zeros(rows, columns) {\n    return new Matrix(rows, columns);\n  }\n\n  static ones(rows, columns) {\n    return new Matrix(rows, columns).fill(1);\n  }\n\n  static rand(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n\n    const {\n      random = Math.random\n    } = options;\n    let matrix = new Matrix(rows, columns);\n\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.set(i, j, random());\n      }\n    }\n\n    return matrix;\n  }\n\n  static randInt(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n\n    const {\n      min = 0,\n      max = 1000,\n      random = Math.random\n    } = options;\n    if (!Number.isInteger(min)) throw new TypeError('min must be an integer');\n    if (!Number.isInteger(max)) throw new TypeError('max must be an integer');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let interval = max - min;\n    let matrix = new Matrix(rows, columns);\n\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        let value = min + Math.round(random() * interval);\n        matrix.set(i, j, value);\n      }\n    }\n\n    return matrix;\n  }\n\n  static eye(rows, columns, value) {\n    if (columns === undefined) columns = rows;\n    if (value === undefined) value = 1;\n    let min = Math.min(rows, columns);\n    let matrix = this.zeros(rows, columns);\n\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, value);\n    }\n\n    return matrix;\n  }\n\n  static diag(data, rows, columns) {\n    let l = data.length;\n    if (rows === undefined) rows = l;\n    if (columns === undefined) columns = rows;\n    let min = Math.min(l, rows, columns);\n    let matrix = this.zeros(rows, columns);\n\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, data[i]);\n    }\n\n    return matrix;\n  }\n\n  static min(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new Matrix(rows, columns);\n\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n\n    return result;\n  }\n\n  static max(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new this(rows, columns);\n\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n\n    return result;\n  }\n\n  static checkMatrix(value) {\n    return AbstractMatrix.isMatrix(value) ? value : new Matrix(value);\n  }\n\n  static isMatrix(value) {\n    return value != null && value.klass === 'Matrix';\n  }\n\n  get size() {\n    return this.rows * this.columns;\n  }\n\n  apply(callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('callback must be a function');\n    }\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        callback.call(this, i, j);\n      }\n    }\n\n    return this;\n  }\n\n  to1DArray() {\n    let array = [];\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        array.push(this.get(i, j));\n      }\n    }\n\n    return array;\n  }\n\n  to2DArray() {\n    let copy = [];\n\n    for (let i = 0; i < this.rows; i++) {\n      copy.push([]);\n\n      for (let j = 0; j < this.columns; j++) {\n        copy[i].push(this.get(i, j));\n      }\n    }\n\n    return copy;\n  }\n\n  toJSON() {\n    return this.to2DArray();\n  }\n\n  isRowVector() {\n    return this.rows === 1;\n  }\n\n  isColumnVector() {\n    return this.columns === 1;\n  }\n\n  isVector() {\n    return this.rows === 1 || this.columns === 1;\n  }\n\n  isSquare() {\n    return this.rows === this.columns;\n  }\n\n  isSymmetric() {\n    if (this.isSquare()) {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j <= i; j++) {\n          if (this.get(i, j) !== this.get(j, i)) {\n            return false;\n          }\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  isEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isEchelonForm = true;\n    let checked = false;\n\n    while (i < this.rows && isEchelonForm) {\n      j = 0;\n      checked = false;\n\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isEchelonForm = false;\n          checked = true;\n        }\n      }\n\n      i++;\n    }\n\n    return isEchelonForm;\n  }\n\n  isReducedEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isReducedEchelonForm = true;\n    let checked = false;\n\n    while (i < this.rows && isReducedEchelonForm) {\n      j = 0;\n      checked = false;\n\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isReducedEchelonForm = false;\n          checked = true;\n        }\n      }\n\n      for (let k = j + 1; k < this.rows; k++) {\n        if (this.get(i, k) !== 0) {\n          isReducedEchelonForm = false;\n        }\n      }\n\n      i++;\n    }\n\n    return isReducedEchelonForm;\n  }\n\n  echelonForm() {\n    let result = this.clone();\n    let h = 0;\n    let k = 0;\n\n    while (h < result.rows && k < result.columns) {\n      let iMax = h;\n\n      for (let i = h; i < result.rows; i++) {\n        if (result.get(i, k) > result.get(iMax, k)) {\n          iMax = i;\n        }\n      }\n\n      if (result.get(iMax, k) === 0) {\n        k++;\n      } else {\n        result.swapRows(h, iMax);\n        let tmp = result.get(h, k);\n\n        for (let j = k; j < result.columns; j++) {\n          result.set(h, j, result.get(h, j) / tmp);\n        }\n\n        for (let i = h + 1; i < result.rows; i++) {\n          let factor = result.get(i, k) / result.get(h, k);\n          result.set(i, k, 0);\n\n          for (let j = k + 1; j < result.columns; j++) {\n            result.set(i, j, result.get(i, j) - result.get(h, j) * factor);\n          }\n        }\n\n        h++;\n        k++;\n      }\n    }\n\n    return result;\n  }\n\n  reducedEchelonForm() {\n    let result = this.echelonForm();\n    let m = result.columns;\n    let n = result.rows;\n    let h = n - 1;\n\n    while (h >= 0) {\n      if (result.maxRow(h) === 0) {\n        h--;\n      } else {\n        let p = 0;\n        let pivot = false;\n\n        while (p < n && pivot === false) {\n          if (result.get(h, p) === 1) {\n            pivot = true;\n          } else {\n            p++;\n          }\n        }\n\n        for (let i = 0; i < h; i++) {\n          let factor = result.get(i, p);\n\n          for (let j = p; j < m; j++) {\n            let tmp = result.get(i, j) - factor * result.get(h, j);\n            result.set(i, j, tmp);\n          }\n        }\n\n        h--;\n      }\n    }\n\n    return result;\n  }\n\n  set() {\n    throw new Error('set method is unimplemented');\n  }\n\n  get() {\n    throw new Error('get method is unimplemented');\n  }\n\n  repeat(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n\n    const {\n      rows = 1,\n      columns = 1\n    } = options;\n\n    if (!Number.isInteger(rows) || rows <= 0) {\n      throw new TypeError('rows must be a positive integer');\n    }\n\n    if (!Number.isInteger(columns) || columns <= 0) {\n      throw new TypeError('columns must be a positive integer');\n    }\n\n    let matrix = new Matrix(this.rows * rows, this.columns * columns);\n\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.setSubMatrix(this, this.rows * i, this.columns * j);\n      }\n    }\n\n    return matrix;\n  }\n\n  fill(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, value);\n      }\n    }\n\n    return this;\n  }\n\n  neg() {\n    return this.mulS(-1);\n  }\n\n  getRow(index) {\n    checkRowIndex(this, index);\n    let row = [];\n\n    for (let i = 0; i < this.columns; i++) {\n      row.push(this.get(index, i));\n    }\n\n    return row;\n  }\n\n  getRowVector(index) {\n    return Matrix.rowVector(this.getRow(index));\n  }\n\n  setRow(index, array) {\n    checkRowIndex(this, index);\n    array = checkRowVector(this, array);\n\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, array[i]);\n    }\n\n    return this;\n  }\n\n  swapRows(row1, row2) {\n    checkRowIndex(this, row1);\n    checkRowIndex(this, row2);\n\n    for (let i = 0; i < this.columns; i++) {\n      let temp = this.get(row1, i);\n      this.set(row1, i, this.get(row2, i));\n      this.set(row2, i, temp);\n    }\n\n    return this;\n  }\n\n  getColumn(index) {\n    checkColumnIndex(this, index);\n    let column = [];\n\n    for (let i = 0; i < this.rows; i++) {\n      column.push(this.get(i, index));\n    }\n\n    return column;\n  }\n\n  getColumnVector(index) {\n    return Matrix.columnVector(this.getColumn(index));\n  }\n\n  setColumn(index, array) {\n    checkColumnIndex(this, index);\n    array = checkColumnVector(this, array);\n\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, array[i]);\n    }\n\n    return this;\n  }\n\n  swapColumns(column1, column2) {\n    checkColumnIndex(this, column1);\n    checkColumnIndex(this, column2);\n\n    for (let i = 0; i < this.rows; i++) {\n      let temp = this.get(i, column1);\n      this.set(i, column1, this.get(i, column2));\n      this.set(i, column2, temp);\n    }\n\n    return this;\n  }\n\n  addRowVector(vector) {\n    vector = checkRowVector(this, vector);\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[j]);\n      }\n    }\n\n    return this;\n  }\n\n  subRowVector(vector) {\n    vector = checkRowVector(this, vector);\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[j]);\n      }\n    }\n\n    return this;\n  }\n\n  mulRowVector(vector) {\n    vector = checkRowVector(this, vector);\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[j]);\n      }\n    }\n\n    return this;\n  }\n\n  divRowVector(vector) {\n    vector = checkRowVector(this, vector);\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[j]);\n      }\n    }\n\n    return this;\n  }\n\n  addColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[i]);\n      }\n    }\n\n    return this;\n  }\n\n  subColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[i]);\n      }\n    }\n\n    return this;\n  }\n\n  mulColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[i]);\n      }\n    }\n\n    return this;\n  }\n\n  divColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[i]);\n      }\n    }\n\n    return this;\n  }\n\n  mulRow(index, value) {\n    checkRowIndex(this, index);\n\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, this.get(index, i) * value);\n    }\n\n    return this;\n  }\n\n  mulColumn(index, value) {\n    checkColumnIndex(this, index);\n\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, this.get(i, index) * value);\n    }\n\n    return this;\n  }\n\n  max() {\n    let v = this.get(0, 0);\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) > v) {\n          v = this.get(i, j);\n        }\n      }\n    }\n\n    return v;\n  }\n\n  maxIndex() {\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) > v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n\n    return idx;\n  }\n\n  min() {\n    let v = this.get(0, 0);\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) < v) {\n          v = this.get(i, j);\n        }\n      }\n    }\n\n    return v;\n  }\n\n  minIndex() {\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) < v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n\n    return idx;\n  }\n\n  maxRow(row) {\n    checkRowIndex(this, row);\n    let v = this.get(row, 0);\n\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n      }\n    }\n\n    return v;\n  }\n\n  maxRowIndex(row) {\n    checkRowIndex(this, row);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n\n    return idx;\n  }\n\n  minRow(row) {\n    checkRowIndex(this, row);\n    let v = this.get(row, 0);\n\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n      }\n    }\n\n    return v;\n  }\n\n  minRowIndex(row) {\n    checkRowIndex(this, row);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n\n    return idx;\n  }\n\n  maxColumn(column) {\n    checkColumnIndex(this, column);\n    let v = this.get(0, column);\n\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n      }\n    }\n\n    return v;\n  }\n\n  maxColumnIndex(column) {\n    checkColumnIndex(this, column);\n    let v = this.get(0, column);\n    let idx = [0, column];\n\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n\n    return idx;\n  }\n\n  minColumn(column) {\n    checkColumnIndex(this, column);\n    let v = this.get(0, column);\n\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n      }\n    }\n\n    return v;\n  }\n\n  minColumnIndex(column) {\n    checkColumnIndex(this, column);\n    let v = this.get(0, column);\n    let idx = [0, column];\n\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n\n    return idx;\n  }\n\n  diag() {\n    let min = Math.min(this.rows, this.columns);\n    let diag = [];\n\n    for (let i = 0; i < min; i++) {\n      diag.push(this.get(i, i));\n    }\n\n    return diag;\n  }\n\n  norm(type = 'frobenius') {\n    let result = 0;\n\n    if (type === 'max') {\n      return this.max();\n    } else if (type === 'frobenius') {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j < this.columns; j++) {\n          result = result + this.get(i, j) * this.get(i, j);\n        }\n      }\n\n      return Math.sqrt(result);\n    } else {\n      throw new RangeError(`unknown norm type: ${type}`);\n    }\n  }\n\n  cumulativeSum() {\n    let sum = 0;\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        sum += this.get(i, j);\n        this.set(i, j, sum);\n      }\n    }\n\n    return this;\n  }\n\n  dot(vector2) {\n    if (AbstractMatrix.isMatrix(vector2)) vector2 = vector2.to1DArray();\n    let vector1 = this.to1DArray();\n\n    if (vector1.length !== vector2.length) {\n      throw new RangeError('vectors do not have the same size');\n    }\n\n    let dot = 0;\n\n    for (let i = 0; i < vector1.length; i++) {\n      dot += vector1[i] * vector2[i];\n    }\n\n    return dot;\n  }\n\n  mmul(other) {\n    other = Matrix.checkMatrix(other);\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.columns;\n    let result = new Matrix(m, p);\n    let Bcolj = new Float64Array(n);\n\n    for (let j = 0; j < p; j++) {\n      for (let k = 0; k < n; k++) {\n        Bcolj[k] = other.get(k, j);\n      }\n\n      for (let i = 0; i < m; i++) {\n        let s = 0;\n\n        for (let k = 0; k < n; k++) {\n          s += this.get(i, k) * Bcolj[k];\n        }\n\n        result.set(i, j, s);\n      }\n    }\n\n    return result;\n  }\n\n  strassen2x2(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(2, 2);\n    const a11 = this.get(0, 0);\n    const b11 = other.get(0, 0);\n    const a12 = this.get(0, 1);\n    const b12 = other.get(0, 1);\n    const a21 = this.get(1, 0);\n    const b21 = other.get(1, 0);\n    const a22 = this.get(1, 1);\n    const b22 = other.get(1, 1); // Compute intermediate values.\n\n    const m1 = (a11 + a22) * (b11 + b22);\n    const m2 = (a21 + a22) * b11;\n    const m3 = a11 * (b12 - b22);\n    const m4 = a22 * (b21 - b11);\n    const m5 = (a11 + a12) * b22;\n    const m6 = (a21 - a11) * (b11 + b12);\n    const m7 = (a12 - a22) * (b21 + b22); // Combine intermediate values into the output.\n\n    const c00 = m1 + m4 - m5 + m7;\n    const c01 = m3 + m5;\n    const c10 = m2 + m4;\n    const c11 = m1 - m2 + m3 + m6;\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    return result;\n  }\n\n  strassen3x3(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(3, 3);\n    const a00 = this.get(0, 0);\n    const a01 = this.get(0, 1);\n    const a02 = this.get(0, 2);\n    const a10 = this.get(1, 0);\n    const a11 = this.get(1, 1);\n    const a12 = this.get(1, 2);\n    const a20 = this.get(2, 0);\n    const a21 = this.get(2, 1);\n    const a22 = this.get(2, 2);\n    const b00 = other.get(0, 0);\n    const b01 = other.get(0, 1);\n    const b02 = other.get(0, 2);\n    const b10 = other.get(1, 0);\n    const b11 = other.get(1, 1);\n    const b12 = other.get(1, 2);\n    const b20 = other.get(2, 0);\n    const b21 = other.get(2, 1);\n    const b22 = other.get(2, 2);\n    const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;\n    const m2 = (a00 - a10) * (-b01 + b11);\n    const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);\n    const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);\n    const m5 = (a10 + a11) * (-b00 + b01);\n    const m6 = a00 * b00;\n    const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);\n    const m8 = (-a00 + a20) * (b02 - b12);\n    const m9 = (a20 + a21) * (-b00 + b02);\n    const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;\n    const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);\n    const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);\n    const m13 = (a02 - a22) * (b11 - b21);\n    const m14 = a02 * b20;\n    const m15 = (a21 + a22) * (-b20 + b21);\n    const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);\n    const m17 = (a02 - a12) * (b12 - b22);\n    const m18 = (a11 + a12) * (-b20 + b22);\n    const m19 = a01 * b10;\n    const m20 = a12 * b21;\n    const m21 = a10 * b02;\n    const m22 = a20 * b01;\n    const m23 = a22 * b22;\n    const c00 = m6 + m14 + m19;\n    const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;\n    const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;\n    const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;\n    const c11 = m2 + m4 + m5 + m6 + m20;\n    const c12 = m14 + m16 + m17 + m18 + m21;\n    const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;\n    const c21 = m12 + m13 + m14 + m15 + m22;\n    const c22 = m6 + m7 + m8 + m9 + m23;\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(0, 2, c02);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    result.set(1, 2, c12);\n    result.set(2, 0, c20);\n    result.set(2, 1, c21);\n    result.set(2, 2, c22);\n    return result;\n  }\n\n  mmulStrassen(y) {\n    y = Matrix.checkMatrix(y);\n    let x = this.clone();\n    let r1 = x.rows;\n    let c1 = x.columns;\n    let r2 = y.rows;\n    let c2 = y.columns;\n\n    if (c1 !== r2) {\n      // eslint-disable-next-line no-console\n      console.warn(`Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`);\n    } // Put a matrix into the top left of a matrix of zeros.\n    // `rows` and `cols` are the dimensions of the output matrix.\n\n\n    function embed(mat, rows, cols) {\n      let r = mat.rows;\n      let c = mat.columns;\n\n      if (r === rows && c === cols) {\n        return mat;\n      } else {\n        let resultat = AbstractMatrix.zeros(rows, cols);\n        resultat = resultat.setSubMatrix(mat, 0, 0);\n        return resultat;\n      }\n    } // Make sure both matrices are the same size.\n    // This is exclusively for simplicity:\n    // this algorithm can be implemented with matrices of different sizes.\n\n\n    let r = Math.max(r1, r2);\n    let c = Math.max(c1, c2);\n    x = embed(x, r, c);\n    y = embed(y, r, c); // Our recursive multiplication function.\n\n    function blockMult(a, b, rows, cols) {\n      // For small matrices, resort to naive multiplication.\n      if (rows <= 512 || cols <= 512) {\n        return a.mmul(b); // a is equivalent to this\n      } // Apply dynamic padding.\n\n\n      if (rows % 2 === 1 && cols % 2 === 1) {\n        a = embed(a, rows + 1, cols + 1);\n        b = embed(b, rows + 1, cols + 1);\n      } else if (rows % 2 === 1) {\n        a = embed(a, rows + 1, cols);\n        b = embed(b, rows + 1, cols);\n      } else if (cols % 2 === 1) {\n        a = embed(a, rows, cols + 1);\n        b = embed(b, rows, cols + 1);\n      }\n\n      let halfRows = parseInt(a.rows / 2, 10);\n      let halfCols = parseInt(a.columns / 2, 10); // Subdivide input matrices.\n\n      let a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n      let b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n      let a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);\n      let b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);\n      let a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);\n      let b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);\n      let a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);\n      let b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1); // Compute intermediate values.\n\n      let m1 = blockMult(AbstractMatrix.add(a11, a22), AbstractMatrix.add(b11, b22), halfRows, halfCols);\n      let m2 = blockMult(AbstractMatrix.add(a21, a22), b11, halfRows, halfCols);\n      let m3 = blockMult(a11, AbstractMatrix.sub(b12, b22), halfRows, halfCols);\n      let m4 = blockMult(a22, AbstractMatrix.sub(b21, b11), halfRows, halfCols);\n      let m5 = blockMult(AbstractMatrix.add(a11, a12), b22, halfRows, halfCols);\n      let m6 = blockMult(AbstractMatrix.sub(a21, a11), AbstractMatrix.add(b11, b12), halfRows, halfCols);\n      let m7 = blockMult(AbstractMatrix.sub(a12, a22), AbstractMatrix.add(b21, b22), halfRows, halfCols); // Combine intermediate values into the output.\n\n      let c11 = AbstractMatrix.add(m1, m4);\n      c11.sub(m5);\n      c11.add(m7);\n      let c12 = AbstractMatrix.add(m3, m5);\n      let c21 = AbstractMatrix.add(m2, m4);\n      let c22 = AbstractMatrix.sub(m1, m2);\n      c22.add(m3);\n      c22.add(m6); // Crop output to the desired size (undo dynamic padding).\n\n      let resultat = AbstractMatrix.zeros(2 * c11.rows, 2 * c11.columns);\n      resultat = resultat.setSubMatrix(c11, 0, 0);\n      resultat = resultat.setSubMatrix(c12, c11.rows, 0);\n      resultat = resultat.setSubMatrix(c21, 0, c11.columns);\n      resultat = resultat.setSubMatrix(c22, c11.rows, c11.columns);\n      return resultat.subMatrix(0, rows - 1, 0, cols - 1);\n    }\n\n    return blockMult(x, y, r, c);\n  }\n\n  scaleRows(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n\n    const {\n      min = 0,\n      max = 1\n    } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n\n    for (let i = 0; i < this.rows; i++) {\n      const row = this.getRow(i);\n      rescale(row, {\n        min,\n        max,\n        output: row\n      });\n      newMatrix.setRow(i, row);\n    }\n\n    return newMatrix;\n  }\n\n  scaleColumns(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n\n    const {\n      min = 0,\n      max = 1\n    } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n\n    for (let i = 0; i < this.columns; i++) {\n      const column = this.getColumn(i);\n      rescale(column, {\n        min: min,\n        max: max,\n        output: column\n      });\n      newMatrix.setColumn(i, column);\n    }\n\n    return newMatrix;\n  }\n\n  flipRows() {\n    const middle = Math.ceil(this.columns / 2);\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < middle; j++) {\n        let first = this.get(i, j);\n        let last = this.get(i, this.columns - 1 - j);\n        this.set(i, j, last);\n        this.set(i, this.columns - 1 - j, first);\n      }\n    }\n\n    return this;\n  }\n\n  flipColumns() {\n    const middle = Math.ceil(this.rows / 2);\n\n    for (let j = 0; j < this.columns; j++) {\n      for (let i = 0; i < middle; i++) {\n        let first = this.get(i, j);\n        let last = this.get(this.rows - 1 - i, j);\n        this.set(i, j, last);\n        this.set(this.rows - 1 - i, j, first);\n      }\n    }\n\n    return this;\n  }\n\n  kroneckerProduct(other) {\n    other = Matrix.checkMatrix(other);\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.rows;\n    let q = other.columns;\n    let result = new Matrix(m * p, n * q);\n\n    for (let i = 0; i < m; i++) {\n      for (let j = 0; j < n; j++) {\n        for (let k = 0; k < p; k++) {\n          for (let l = 0; l < q; l++) {\n            result.set(p * i + k, q * j + l, this.get(i, j) * other.get(k, l));\n          }\n        }\n      }\n    }\n\n    return result;\n  }\n\n  transpose() {\n    let result = new Matrix(this.columns, this.rows);\n\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        result.set(j, i, this.get(i, j));\n      }\n    }\n\n    return result;\n  }\n\n  sortRows(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.rows; i++) {\n      this.setRow(i, this.getRow(i).sort(compareFunction));\n    }\n\n    return this;\n  }\n\n  sortColumns(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.columns; i++) {\n      this.setColumn(i, this.getColumn(i).sort(compareFunction));\n    }\n\n    return this;\n  }\n\n  subMatrix(startRow, endRow, startColumn, endColumn) {\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    let newMatrix = new Matrix(endRow - startRow + 1, endColumn - startColumn + 1);\n\n    for (let i = startRow; i <= endRow; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        newMatrix.set(i - startRow, j - startColumn, this.get(i, j));\n      }\n    }\n\n    return newMatrix;\n  }\n\n  subMatrixRow(indices, startColumn, endColumn) {\n    if (startColumn === undefined) startColumn = 0;\n    if (endColumn === undefined) endColumn = this.columns - 1;\n\n    if (startColumn > endColumn || startColumn < 0 || startColumn >= this.columns || endColumn < 0 || endColumn >= this.columns) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(indices.length, endColumn - startColumn + 1);\n\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        if (indices[i] < 0 || indices[i] >= this.rows) {\n          throw new RangeError(`Row index out of range: ${indices[i]}`);\n        }\n\n        newMatrix.set(i, j - startColumn, this.get(indices[i], j));\n      }\n    }\n\n    return newMatrix;\n  }\n\n  subMatrixColumn(indices, startRow, endRow) {\n    if (startRow === undefined) startRow = 0;\n    if (endRow === undefined) endRow = this.rows - 1;\n\n    if (startRow > endRow || startRow < 0 || startRow >= this.rows || endRow < 0 || endRow >= this.rows) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(endRow - startRow + 1, indices.length);\n\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startRow; j <= endRow; j++) {\n        if (indices[i] < 0 || indices[i] >= this.columns) {\n          throw new RangeError(`Column index out of range: ${indices[i]}`);\n        }\n\n        newMatrix.set(j - startRow, i, this.get(j, indices[i]));\n      }\n    }\n\n    return newMatrix;\n  }\n\n  setSubMatrix(matrix, startRow, startColumn) {\n    matrix = Matrix.checkMatrix(matrix);\n    let endRow = startRow + matrix.rows - 1;\n    let endColumn = startColumn + matrix.columns - 1;\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n\n    for (let i = 0; i < matrix.rows; i++) {\n      for (let j = 0; j < matrix.columns; j++) {\n        this.set(startRow + i, startColumn + j, matrix.get(i, j));\n      }\n    }\n\n    return this;\n  }\n\n  selection(rowIndices, columnIndices) {\n    let indices = checkIndices(this, rowIndices, columnIndices);\n    let newMatrix = new Matrix(rowIndices.length, columnIndices.length);\n\n    for (let i = 0; i < indices.row.length; i++) {\n      let rowIndex = indices.row[i];\n\n      for (let j = 0; j < indices.column.length; j++) {\n        let columnIndex = indices.column[j];\n        newMatrix.set(i, j, this.get(rowIndex, columnIndex));\n      }\n    }\n\n    return newMatrix;\n  }\n\n  trace() {\n    let min = Math.min(this.rows, this.columns);\n    let trace = 0;\n\n    for (let i = 0; i < min; i++) {\n      trace += this.get(i, i);\n    }\n\n    return trace;\n  }\n\n  clone() {\n    let newMatrix = new Matrix(this.rows, this.columns);\n\n    for (let row = 0; row < this.rows; row++) {\n      for (let column = 0; column < this.columns; column++) {\n        newMatrix.set(row, column, this.get(row, column));\n      }\n    }\n\n    return newMatrix;\n  }\n\n  sum(by) {\n    switch (by) {\n      case 'row':\n        return sumByRow(this);\n\n      case 'column':\n        return sumByColumn(this);\n\n      case undefined:\n        return sumAll(this);\n\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  product(by) {\n    switch (by) {\n      case 'row':\n        return productByRow(this);\n\n      case 'column':\n        return productByColumn(this);\n\n      case undefined:\n        return productAll(this);\n\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  mean(by) {\n    const sum = this.sum(by);\n\n    switch (by) {\n      case 'row':\n        {\n          for (let i = 0; i < this.rows; i++) {\n            sum[i] /= this.columns;\n          }\n\n          return sum;\n        }\n\n      case 'column':\n        {\n          for (let i = 0; i < this.columns; i++) {\n            sum[i] /= this.rows;\n          }\n\n          return sum;\n        }\n\n      case undefined:\n        return sum / this.size;\n\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  variance(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n\n    const {\n      unbiased = true,\n      mean = this.mean(by)\n    } = options;\n\n    if (typeof unbiased !== 'boolean') {\n      throw new TypeError('unbiased must be a boolean');\n    }\n\n    switch (by) {\n      case 'row':\n        {\n          if (!Array.isArray(mean)) {\n            throw new TypeError('mean must be an array');\n          }\n\n          return varianceByRow(this, unbiased, mean);\n        }\n\n      case 'column':\n        {\n          if (!Array.isArray(mean)) {\n            throw new TypeError('mean must be an array');\n          }\n\n          return varianceByColumn(this, unbiased, mean);\n        }\n\n      case undefined:\n        {\n          if (typeof mean !== 'number') {\n            throw new TypeError('mean must be a number');\n          }\n\n          return varianceAll(this, unbiased, mean);\n        }\n\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  standardDeviation(by, options) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n\n    const variance = this.variance(by, options);\n\n    if (by === undefined) {\n      return Math.sqrt(variance);\n    } else {\n      for (let i = 0; i < variance.length; i++) {\n        variance[i] = Math.sqrt(variance[i]);\n      }\n\n      return variance;\n    }\n  }\n\n  center(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n\n    const {\n      center = this.mean(by)\n    } = options;\n\n    switch (by) {\n      case 'row':\n        {\n          if (!Array.isArray(center)) {\n            throw new TypeError('center must be an array');\n          }\n\n          centerByRow(this, center);\n          return this;\n        }\n\n      case 'column':\n        {\n          if (!Array.isArray(center)) {\n            throw new TypeError('center must be an array');\n          }\n\n          centerByColumn(this, center);\n          return this;\n        }\n\n      case undefined:\n        {\n          if (typeof center !== 'number') {\n            throw new TypeError('center must be a number');\n          }\n\n          centerAll(this, center);\n          return this;\n        }\n\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  scale(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n\n    let scale = options.scale;\n\n    switch (by) {\n      case 'row':\n        {\n          if (scale === undefined) {\n            scale = getScaleByRow(this);\n          } else if (!Array.isArray(scale)) {\n            throw new TypeError('scale must be an array');\n          }\n\n          scaleByRow(this, scale);\n          return this;\n        }\n\n      case 'column':\n        {\n          if (scale === undefined) {\n            scale = getScaleByColumn(this);\n          } else if (!Array.isArray(scale)) {\n            throw new TypeError('scale must be an array');\n          }\n\n          scaleByColumn(this, scale);\n          return this;\n        }\n\n      case undefined:\n        {\n          if (scale === undefined) {\n            scale = getScaleAll(this);\n          } else if (typeof scale !== 'number') {\n            throw new TypeError('scale must be a number');\n          }\n\n          scaleAll(this, scale);\n          return this;\n        }\n\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  toString(options) {\n    return inspectMatrixWithOptions(this, options);\n  }\n\n}\nAbstractMatrix.prototype.klass = 'Matrix';\n\nif (typeof Symbol !== 'undefined') {\n  AbstractMatrix.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspectMatrix;\n}\n\nfunction compareNumbers(a, b) {\n  return a - b;\n} // Synonyms\n\n\nAbstractMatrix.random = AbstractMatrix.rand;\nAbstractMatrix.randomInt = AbstractMatrix.randInt;\nAbstractMatrix.diagonal = AbstractMatrix.diag;\nAbstractMatrix.prototype.diagonal = AbstractMatrix.prototype.diag;\nAbstractMatrix.identity = AbstractMatrix.eye;\nAbstractMatrix.prototype.negate = AbstractMatrix.prototype.neg;\nAbstractMatrix.prototype.tensorProduct = AbstractMatrix.prototype.kroneckerProduct;\nexport default class Matrix extends AbstractMatrix {\n  constructor(nRows, nColumns) {\n    super();\n\n    if (Matrix.isMatrix(nRows)) {\n      // eslint-disable-next-line no-constructor-return\n      return nRows.clone();\n    } else if (Number.isInteger(nRows) && nRows > 0) {\n      // Create an empty matrix\n      this.data = [];\n\n      if (Number.isInteger(nColumns) && nColumns > 0) {\n        for (let i = 0; i < nRows; i++) {\n          this.data.push(new Float64Array(nColumns));\n        }\n      } else {\n        throw new TypeError('nColumns must be a positive integer');\n      }\n    } else if (Array.isArray(nRows)) {\n      // Copy the values from the 2D array\n      const arrayData = nRows;\n      nRows = arrayData.length;\n      nColumns = arrayData[0].length;\n\n      if (typeof nColumns !== 'number' || nColumns === 0) {\n        throw new TypeError('Data must be a 2D array with at least one element');\n      }\n\n      this.data = [];\n\n      for (let i = 0; i < nRows; i++) {\n        if (arrayData[i].length !== nColumns) {\n          throw new RangeError('Inconsistent array dimensions');\n        }\n\n        this.data.push(Float64Array.from(arrayData[i]));\n      }\n    } else {\n      throw new TypeError('First argument must be a positive number or an array');\n    }\n\n    this.rows = nRows;\n    this.columns = nColumns;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n\n  removeRow(index) {\n    checkRowIndex(this, index);\n\n    if (this.rows === 1) {\n      throw new RangeError('A matrix cannot have less than one row');\n    }\n\n    this.data.splice(index, 1);\n    this.rows -= 1;\n    return this;\n  }\n\n  addRow(index, array) {\n    if (array === undefined) {\n      array = index;\n      index = this.rows;\n    }\n\n    checkRowIndex(this, index, true);\n    array = Float64Array.from(checkRowVector(this, array, true));\n    this.data.splice(index, 0, array);\n    this.rows += 1;\n    return this;\n  }\n\n  removeColumn(index) {\n    checkColumnIndex(this, index);\n\n    if (this.columns === 1) {\n      throw new RangeError('A matrix cannot have less than one column');\n    }\n\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns - 1);\n\n      for (let j = 0; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n\n      for (let j = index + 1; j < this.columns; j++) {\n        newRow[j - 1] = this.data[i][j];\n      }\n\n      this.data[i] = newRow;\n    }\n\n    this.columns -= 1;\n    return this;\n  }\n\n  addColumn(index, array) {\n    if (typeof array === 'undefined') {\n      array = index;\n      index = this.columns;\n    }\n\n    checkColumnIndex(this, index, true);\n    array = checkColumnVector(this, array);\n\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns + 1);\n      let j = 0;\n\n      for (; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n\n      newRow[j++] = array[i];\n\n      for (; j < this.columns + 1; j++) {\n        newRow[j] = this.data[i][j - 1];\n      }\n\n      this.data[i] = newRow;\n    }\n\n    this.columns += 1;\n    return this;\n  }\n\n}\ninstallMathOperations(AbstractMatrix, Matrix);","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/ml-matrix/src/matrix.js"],"names":["rescale","inspectMatrix","inspectMatrixWithOptions","installMathOperations","sumByRow","sumByColumn","sumAll","productByRow","productByColumn","productAll","varianceByRow","varianceByColumn","varianceAll","centerByRow","centerByColumn","centerAll","scaleByRow","scaleByColumn","scaleAll","getScaleByRow","getScaleByColumn","getScaleAll","checkRowVector","checkRowIndex","checkColumnIndex","checkColumnVector","checkRange","checkIndices","AbstractMatrix","from1DArray","newRows","newColumns","newData","length","RangeError","newMatrix","Matrix","row","column","set","rowVector","vector","i","columnVector","zeros","rows","columns","ones","fill","rand","options","TypeError","random","Math","matrix","j","randInt","min","max","Number","isInteger","interval","value","round","eye","undefined","diag","data","l","matrix1","matrix2","checkMatrix","result","get","isMatrix","klass","size","apply","callback","call","to1DArray","array","push","to2DArray","copy","toJSON","isRowVector","isColumnVector","isVector","isSquare","isSymmetric","isEchelonForm","previousColumn","checked","isReducedEchelonForm","k","echelonForm","clone","h","iMax","swapRows","tmp","factor","reducedEchelonForm","m","n","maxRow","p","pivot","Error","repeat","setSubMatrix","neg","mulS","getRow","index","getRowVector","setRow","row1","row2","temp","getColumn","getColumnVector","setColumn","swapColumns","column1","column2","addRowVector","subRowVector","mulRowVector","divRowVector","addColumnVector","subColumnVector","mulColumnVector","divColumnVector","mulRow","mulColumn","v","maxIndex","idx","minIndex","maxRowIndex","minRow","minRowIndex","maxColumn","maxColumnIndex","minColumn","minColumnIndex","norm","type","sqrt","cumulativeSum","sum","dot","vector2","vector1","mmul","other","Bcolj","Float64Array","s","strassen2x2","a11","b11","a12","b12","a21","b21","a22","b22","m1","m2","m3","m4","m5","m6","m7","c00","c01","c10","c11","strassen3x3","a00","a01","a02","a10","a20","b00","b01","b02","b10","b20","m8","m9","m10","m11","m12","m13","m14","m15","m16","m17","m18","m19","m20","m21","m22","m23","c02","c12","c20","c21","c22","mmulStrassen","y","x","r1","c1","r2","c2","console","warn","embed","mat","cols","r","c","resultat","blockMult","a","b","halfRows","parseInt","halfCols","subMatrix","add","sub","scaleRows","isFinite","output","scaleColumns","flipRows","middle","ceil","first","last","flipColumns","kroneckerProduct","q","transpose","sortRows","compareFunction","compareNumbers","sort","sortColumns","startRow","endRow","startColumn","endColumn","subMatrixRow","indices","subMatrixColumn","selection","rowIndices","columnIndices","rowIndex","columnIndex","trace","by","product","mean","variance","unbiased","Array","isArray","standardDeviation","center","scale","toString","prototype","Symbol","for","randomInt","diagonal","identity","negate","tensorProduct","constructor","nRows","nColumns","arrayData","from","removeRow","splice","addRow","removeColumn","newRow","addColumn"],"mappings":"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","sourcesContent":["import rescale from 'ml-array-rescale';\n\nimport { inspectMatrix, inspectMatrixWithOptions } from './inspect';\nimport { installMathOperations } from './mathOperations';\nimport {\n  sumByRow,\n  sumByColumn,\n  sumAll,\n  productByRow,\n  productByColumn,\n  productAll,\n  varianceByRow,\n  varianceByColumn,\n  varianceAll,\n  centerByRow,\n  centerByColumn,\n  centerAll,\n  scaleByRow,\n  scaleByColumn,\n  scaleAll,\n  getScaleByRow,\n  getScaleByColumn,\n  getScaleAll,\n} from './stat';\nimport {\n  checkRowVector,\n  checkRowIndex,\n  checkColumnIndex,\n  checkColumnVector,\n  checkRange,\n  checkIndices,\n} from './util';\n\nexport class AbstractMatrix {\n  static from1DArray(newRows, newColumns, newData) {\n    let length = newRows * newColumns;\n    if (length !== newData.length) {\n      throw new RangeError('data length does not match given dimensions');\n    }\n    let newMatrix = new Matrix(newRows, newColumns);\n    for (let row = 0; row < newRows; row++) {\n      for (let column = 0; column < newColumns; column++) {\n        newMatrix.set(row, column, newData[row * newColumns + column]);\n      }\n    }\n    return newMatrix;\n  }\n\n  static rowVector(newData) {\n    let vector = new Matrix(1, newData.length);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(0, i, newData[i]);\n    }\n    return vector;\n  }\n\n  static columnVector(newData) {\n    let vector = new Matrix(newData.length, 1);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(i, 0, newData[i]);\n    }\n    return vector;\n  }\n\n  static zeros(rows, columns) {\n    return new Matrix(rows, columns);\n  }\n\n  static ones(rows, columns) {\n    return new Matrix(rows, columns).fill(1);\n  }\n\n  static rand(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { random = Math.random } = options;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.set(i, j, random());\n      }\n    }\n    return matrix;\n  }\n\n  static randInt(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1000, random = Math.random } = options;\n    if (!Number.isInteger(min)) throw new TypeError('min must be an integer');\n    if (!Number.isInteger(max)) throw new TypeError('max must be an integer');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let interval = max - min;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        let value = min + Math.round(random() * interval);\n        matrix.set(i, j, value);\n      }\n    }\n    return matrix;\n  }\n\n  static eye(rows, columns, value) {\n    if (columns === undefined) columns = rows;\n    if (value === undefined) value = 1;\n    let min = Math.min(rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, value);\n    }\n    return matrix;\n  }\n\n  static diag(data, rows, columns) {\n    let l = data.length;\n    if (rows === undefined) rows = l;\n    if (columns === undefined) columns = rows;\n    let min = Math.min(l, rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, data[i]);\n    }\n    return matrix;\n  }\n\n  static min(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static max(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new this(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static checkMatrix(value) {\n    return AbstractMatrix.isMatrix(value) ? value : new Matrix(value);\n  }\n\n  static isMatrix(value) {\n    return value != null && value.klass === 'Matrix';\n  }\n\n  get size() {\n    return this.rows * this.columns;\n  }\n\n  apply(callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('callback must be a function');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        callback.call(this, i, j);\n      }\n    }\n    return this;\n  }\n\n  to1DArray() {\n    let array = [];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        array.push(this.get(i, j));\n      }\n    }\n    return array;\n  }\n\n  to2DArray() {\n    let copy = [];\n    for (let i = 0; i < this.rows; i++) {\n      copy.push([]);\n      for (let j = 0; j < this.columns; j++) {\n        copy[i].push(this.get(i, j));\n      }\n    }\n    return copy;\n  }\n\n  toJSON() {\n    return this.to2DArray();\n  }\n\n  isRowVector() {\n    return this.rows === 1;\n  }\n\n  isColumnVector() {\n    return this.columns === 1;\n  }\n\n  isVector() {\n    return this.rows === 1 || this.columns === 1;\n  }\n\n  isSquare() {\n    return this.rows === this.columns;\n  }\n\n  isSymmetric() {\n    if (this.isSquare()) {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j <= i; j++) {\n          if (this.get(i, j) !== this.get(j, i)) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  isEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isEchelonForm = false;\n          checked = true;\n        }\n      }\n      i++;\n    }\n    return isEchelonForm;\n  }\n\n  isReducedEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isReducedEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isReducedEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isReducedEchelonForm = false;\n          checked = true;\n        }\n      }\n      for (let k = j + 1; k < this.rows; k++) {\n        if (this.get(i, k) !== 0) {\n          isReducedEchelonForm = false;\n        }\n      }\n      i++;\n    }\n    return isReducedEchelonForm;\n  }\n\n  echelonForm() {\n    let result = this.clone();\n    let h = 0;\n    let k = 0;\n    while (h < result.rows && k < result.columns) {\n      let iMax = h;\n      for (let i = h; i < result.rows; i++) {\n        if (result.get(i, k) > result.get(iMax, k)) {\n          iMax = i;\n        }\n      }\n      if (result.get(iMax, k) === 0) {\n        k++;\n      } else {\n        result.swapRows(h, iMax);\n        let tmp = result.get(h, k);\n        for (let j = k; j < result.columns; j++) {\n          result.set(h, j, result.get(h, j) / tmp);\n        }\n        for (let i = h + 1; i < result.rows; i++) {\n          let factor = result.get(i, k) / result.get(h, k);\n          result.set(i, k, 0);\n          for (let j = k + 1; j < result.columns; j++) {\n            result.set(i, j, result.get(i, j) - result.get(h, j) * factor);\n          }\n        }\n        h++;\n        k++;\n      }\n    }\n    return result;\n  }\n\n  reducedEchelonForm() {\n    let result = this.echelonForm();\n    let m = result.columns;\n    let n = result.rows;\n    let h = n - 1;\n    while (h >= 0) {\n      if (result.maxRow(h) === 0) {\n        h--;\n      } else {\n        let p = 0;\n        let pivot = false;\n        while (p < n && pivot === false) {\n          if (result.get(h, p) === 1) {\n            pivot = true;\n          } else {\n            p++;\n          }\n        }\n        for (let i = 0; i < h; i++) {\n          let factor = result.get(i, p);\n          for (let j = p; j < m; j++) {\n            let tmp = result.get(i, j) - factor * result.get(h, j);\n            result.set(i, j, tmp);\n          }\n        }\n        h--;\n      }\n    }\n    return result;\n  }\n\n  set() {\n    throw new Error('set method is unimplemented');\n  }\n\n  get() {\n    throw new Error('get method is unimplemented');\n  }\n\n  repeat(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { rows = 1, columns = 1 } = options;\n    if (!Number.isInteger(rows) || rows <= 0) {\n      throw new TypeError('rows must be a positive integer');\n    }\n    if (!Number.isInteger(columns) || columns <= 0) {\n      throw new TypeError('columns must be a positive integer');\n    }\n    let matrix = new Matrix(this.rows * rows, this.columns * columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.setSubMatrix(this, this.rows * i, this.columns * j);\n      }\n    }\n    return matrix;\n  }\n\n  fill(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, value);\n      }\n    }\n    return this;\n  }\n\n  neg() {\n    return this.mulS(-1);\n  }\n\n  getRow(index) {\n    checkRowIndex(this, index);\n    let row = [];\n    for (let i = 0; i < this.columns; i++) {\n      row.push(this.get(index, i));\n    }\n    return row;\n  }\n\n  getRowVector(index) {\n    return Matrix.rowVector(this.getRow(index));\n  }\n\n  setRow(index, array) {\n    checkRowIndex(this, index);\n    array = checkRowVector(this, array);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, array[i]);\n    }\n    return this;\n  }\n\n  swapRows(row1, row2) {\n    checkRowIndex(this, row1);\n    checkRowIndex(this, row2);\n    for (let i = 0; i < this.columns; i++) {\n      let temp = this.get(row1, i);\n      this.set(row1, i, this.get(row2, i));\n      this.set(row2, i, temp);\n    }\n    return this;\n  }\n\n  getColumn(index) {\n    checkColumnIndex(this, index);\n    let column = [];\n    for (let i = 0; i < this.rows; i++) {\n      column.push(this.get(i, index));\n    }\n    return column;\n  }\n\n  getColumnVector(index) {\n    return Matrix.columnVector(this.getColumn(index));\n  }\n\n  setColumn(index, array) {\n    checkColumnIndex(this, index);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, array[i]);\n    }\n    return this;\n  }\n\n  swapColumns(column1, column2) {\n    checkColumnIndex(this, column1);\n    checkColumnIndex(this, column2);\n    for (let i = 0; i < this.rows; i++) {\n      let temp = this.get(i, column1);\n      this.set(i, column1, this.get(i, column2));\n      this.set(i, column2, temp);\n    }\n    return this;\n  }\n\n  addRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[j]);\n      }\n    }\n    return this;\n  }\n\n  subRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[j]);\n      }\n    }\n    return this;\n  }\n\n  mulRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[j]);\n      }\n    }\n    return this;\n  }\n\n  divRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[j]);\n      }\n    }\n    return this;\n  }\n\n  addColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[i]);\n      }\n    }\n    return this;\n  }\n\n  subColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[i]);\n      }\n    }\n    return this;\n  }\n\n  divColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulRow(index, value) {\n    checkRowIndex(this, index);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, this.get(index, i) * value);\n    }\n    return this;\n  }\n\n  mulColumn(index, value) {\n    checkColumnIndex(this, index);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, this.get(i, index) * value);\n    }\n    return this;\n  }\n\n  max() {\n    let v = this.get(0, 0);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) > v) {\n          v = this.get(i, j);\n        }\n      }\n    }\n    return v;\n  }\n\n  maxIndex() {\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) > v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  min() {\n    let v = this.get(0, 0);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) < v) {\n          v = this.get(i, j);\n        }\n      }\n    }\n    return v;\n  }\n\n  minIndex() {\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) < v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  maxRow(row) {\n    checkRowIndex(this, row);\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  maxRowIndex(row) {\n    checkRowIndex(this, row);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  minRow(row) {\n    checkRowIndex(this, row);\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  minRowIndex(row) {\n    checkRowIndex(this, row);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  maxColumn(column) {\n    checkColumnIndex(this, column);\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  maxColumnIndex(column) {\n    checkColumnIndex(this, column);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  minColumn(column) {\n    checkColumnIndex(this, column);\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  minColumnIndex(column) {\n    checkColumnIndex(this, column);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  diag() {\n    let min = Math.min(this.rows, this.columns);\n    let diag = [];\n    for (let i = 0; i < min; i++) {\n      diag.push(this.get(i, i));\n    }\n    return diag;\n  }\n\n  norm(type = 'frobenius') {\n    let result = 0;\n    if (type === 'max') {\n      return this.max();\n    } else if (type === 'frobenius') {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j < this.columns; j++) {\n          result = result + this.get(i, j) * this.get(i, j);\n        }\n      }\n      return Math.sqrt(result);\n    } else {\n      throw new RangeError(`unknown norm type: ${type}`);\n    }\n  }\n\n  cumulativeSum() {\n    let sum = 0;\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        sum += this.get(i, j);\n        this.set(i, j, sum);\n      }\n    }\n    return this;\n  }\n\n  dot(vector2) {\n    if (AbstractMatrix.isMatrix(vector2)) vector2 = vector2.to1DArray();\n    let vector1 = this.to1DArray();\n    if (vector1.length !== vector2.length) {\n      throw new RangeError('vectors do not have the same size');\n    }\n    let dot = 0;\n    for (let i = 0; i < vector1.length; i++) {\n      dot += vector1[i] * vector2[i];\n    }\n    return dot;\n  }\n\n  mmul(other) {\n    other = Matrix.checkMatrix(other);\n\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.columns;\n\n    let result = new Matrix(m, p);\n\n    let Bcolj = new Float64Array(n);\n    for (let j = 0; j < p; j++) {\n      for (let k = 0; k < n; k++) {\n        Bcolj[k] = other.get(k, j);\n      }\n\n      for (let i = 0; i < m; i++) {\n        let s = 0;\n        for (let k = 0; k < n; k++) {\n          s += this.get(i, k) * Bcolj[k];\n        }\n\n        result.set(i, j, s);\n      }\n    }\n    return result;\n  }\n\n  strassen2x2(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(2, 2);\n    const a11 = this.get(0, 0);\n    const b11 = other.get(0, 0);\n    const a12 = this.get(0, 1);\n    const b12 = other.get(0, 1);\n    const a21 = this.get(1, 0);\n    const b21 = other.get(1, 0);\n    const a22 = this.get(1, 1);\n    const b22 = other.get(1, 1);\n\n    // Compute intermediate values.\n    const m1 = (a11 + a22) * (b11 + b22);\n    const m2 = (a21 + a22) * b11;\n    const m3 = a11 * (b12 - b22);\n    const m4 = a22 * (b21 - b11);\n    const m5 = (a11 + a12) * b22;\n    const m6 = (a21 - a11) * (b11 + b12);\n    const m7 = (a12 - a22) * (b21 + b22);\n\n    // Combine intermediate values into the output.\n    const c00 = m1 + m4 - m5 + m7;\n    const c01 = m3 + m5;\n    const c10 = m2 + m4;\n    const c11 = m1 - m2 + m3 + m6;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    return result;\n  }\n\n  strassen3x3(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(3, 3);\n\n    const a00 = this.get(0, 0);\n    const a01 = this.get(0, 1);\n    const a02 = this.get(0, 2);\n    const a10 = this.get(1, 0);\n    const a11 = this.get(1, 1);\n    const a12 = this.get(1, 2);\n    const a20 = this.get(2, 0);\n    const a21 = this.get(2, 1);\n    const a22 = this.get(2, 2);\n\n    const b00 = other.get(0, 0);\n    const b01 = other.get(0, 1);\n    const b02 = other.get(0, 2);\n    const b10 = other.get(1, 0);\n    const b11 = other.get(1, 1);\n    const b12 = other.get(1, 2);\n    const b20 = other.get(2, 0);\n    const b21 = other.get(2, 1);\n    const b22 = other.get(2, 2);\n\n    const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;\n    const m2 = (a00 - a10) * (-b01 + b11);\n    const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);\n    const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);\n    const m5 = (a10 + a11) * (-b00 + b01);\n    const m6 = a00 * b00;\n    const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);\n    const m8 = (-a00 + a20) * (b02 - b12);\n    const m9 = (a20 + a21) * (-b00 + b02);\n    const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;\n    const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);\n    const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);\n    const m13 = (a02 - a22) * (b11 - b21);\n    const m14 = a02 * b20;\n    const m15 = (a21 + a22) * (-b20 + b21);\n    const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);\n    const m17 = (a02 - a12) * (b12 - b22);\n    const m18 = (a11 + a12) * (-b20 + b22);\n    const m19 = a01 * b10;\n    const m20 = a12 * b21;\n    const m21 = a10 * b02;\n    const m22 = a20 * b01;\n    const m23 = a22 * b22;\n\n    const c00 = m6 + m14 + m19;\n    const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;\n    const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;\n    const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;\n    const c11 = m2 + m4 + m5 + m6 + m20;\n    const c12 = m14 + m16 + m17 + m18 + m21;\n    const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;\n    const c21 = m12 + m13 + m14 + m15 + m22;\n    const c22 = m6 + m7 + m8 + m9 + m23;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(0, 2, c02);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    result.set(1, 2, c12);\n    result.set(2, 0, c20);\n    result.set(2, 1, c21);\n    result.set(2, 2, c22);\n    return result;\n  }\n\n  mmulStrassen(y) {\n    y = Matrix.checkMatrix(y);\n    let x = this.clone();\n    let r1 = x.rows;\n    let c1 = x.columns;\n    let r2 = y.rows;\n    let c2 = y.columns;\n    if (c1 !== r2) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`,\n      );\n    }\n\n    // Put a matrix into the top left of a matrix of zeros.\n    // `rows` and `cols` are the dimensions of the output matrix.\n    function embed(mat, rows, cols) {\n      let r = mat.rows;\n      let c = mat.columns;\n      if (r === rows && c === cols) {\n        return mat;\n      } else {\n        let resultat = AbstractMatrix.zeros(rows, cols);\n        resultat = resultat.setSubMatrix(mat, 0, 0);\n        return resultat;\n      }\n    }\n\n    // Make sure both matrices are the same size.\n    // This is exclusively for simplicity:\n    // this algorithm can be implemented with matrices of different sizes.\n\n    let r = Math.max(r1, r2);\n    let c = Math.max(c1, c2);\n    x = embed(x, r, c);\n    y = embed(y, r, c);\n\n    // Our recursive multiplication function.\n    function blockMult(a, b, rows, cols) {\n      // For small matrices, resort to naive multiplication.\n      if (rows <= 512 || cols <= 512) {\n        return a.mmul(b); // a is equivalent to this\n      }\n\n      // Apply dynamic padding.\n      if (rows % 2 === 1 && cols % 2 === 1) {\n        a = embed(a, rows + 1, cols + 1);\n        b = embed(b, rows + 1, cols + 1);\n      } else if (rows % 2 === 1) {\n        a = embed(a, rows + 1, cols);\n        b = embed(b, rows + 1, cols);\n      } else if (cols % 2 === 1) {\n        a = embed(a, rows, cols + 1);\n        b = embed(b, rows, cols + 1);\n      }\n\n      let halfRows = parseInt(a.rows / 2, 10);\n      let halfCols = parseInt(a.columns / 2, 10);\n      // Subdivide input matrices.\n      let a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n      let b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n\n      let a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);\n      let b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);\n\n      let a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);\n      let b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);\n\n      let a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);\n      let b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);\n\n      // Compute intermediate values.\n      let m1 = blockMult(\n        AbstractMatrix.add(a11, a22),\n        AbstractMatrix.add(b11, b22),\n        halfRows,\n        halfCols,\n      );\n      let m2 = blockMult(AbstractMatrix.add(a21, a22), b11, halfRows, halfCols);\n      let m3 = blockMult(a11, AbstractMatrix.sub(b12, b22), halfRows, halfCols);\n      let m4 = blockMult(a22, AbstractMatrix.sub(b21, b11), halfRows, halfCols);\n      let m5 = blockMult(AbstractMatrix.add(a11, a12), b22, halfRows, halfCols);\n      let m6 = blockMult(\n        AbstractMatrix.sub(a21, a11),\n        AbstractMatrix.add(b11, b12),\n        halfRows,\n        halfCols,\n      );\n      let m7 = blockMult(\n        AbstractMatrix.sub(a12, a22),\n        AbstractMatrix.add(b21, b22),\n        halfRows,\n        halfCols,\n      );\n\n      // Combine intermediate values into the output.\n      let c11 = AbstractMatrix.add(m1, m4);\n      c11.sub(m5);\n      c11.add(m7);\n      let c12 = AbstractMatrix.add(m3, m5);\n      let c21 = AbstractMatrix.add(m2, m4);\n      let c22 = AbstractMatrix.sub(m1, m2);\n      c22.add(m3);\n      c22.add(m6);\n\n      // Crop output to the desired size (undo dynamic padding).\n      let resultat = AbstractMatrix.zeros(2 * c11.rows, 2 * c11.columns);\n      resultat = resultat.setSubMatrix(c11, 0, 0);\n      resultat = resultat.setSubMatrix(c12, c11.rows, 0);\n      resultat = resultat.setSubMatrix(c21, 0, c11.columns);\n      resultat = resultat.setSubMatrix(c22, c11.rows, c11.columns);\n      return resultat.subMatrix(0, rows - 1, 0, cols - 1);\n    }\n    return blockMult(x, y, r, c);\n  }\n\n  scaleRows(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.rows; i++) {\n      const row = this.getRow(i);\n      rescale(row, { min, max, output: row });\n      newMatrix.setRow(i, row);\n    }\n    return newMatrix;\n  }\n\n  scaleColumns(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.columns; i++) {\n      const column = this.getColumn(i);\n      rescale(column, {\n        min: min,\n        max: max,\n        output: column,\n      });\n      newMatrix.setColumn(i, column);\n    }\n    return newMatrix;\n  }\n\n  flipRows() {\n    const middle = Math.ceil(this.columns / 2);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < middle; j++) {\n        let first = this.get(i, j);\n        let last = this.get(i, this.columns - 1 - j);\n        this.set(i, j, last);\n        this.set(i, this.columns - 1 - j, first);\n      }\n    }\n    return this;\n  }\n\n  flipColumns() {\n    const middle = Math.ceil(this.rows / 2);\n    for (let j = 0; j < this.columns; j++) {\n      for (let i = 0; i < middle; i++) {\n        let first = this.get(i, j);\n        let last = this.get(this.rows - 1 - i, j);\n        this.set(i, j, last);\n        this.set(this.rows - 1 - i, j, first);\n      }\n    }\n    return this;\n  }\n\n  kroneckerProduct(other) {\n    other = Matrix.checkMatrix(other);\n\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.rows;\n    let q = other.columns;\n\n    let result = new Matrix(m * p, n * q);\n    for (let i = 0; i < m; i++) {\n      for (let j = 0; j < n; j++) {\n        for (let k = 0; k < p; k++) {\n          for (let l = 0; l < q; l++) {\n            result.set(p * i + k, q * j + l, this.get(i, j) * other.get(k, l));\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n  transpose() {\n    let result = new Matrix(this.columns, this.rows);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        result.set(j, i, this.get(i, j));\n      }\n    }\n    return result;\n  }\n\n  sortRows(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.rows; i++) {\n      this.setRow(i, this.getRow(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  sortColumns(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.columns; i++) {\n      this.setColumn(i, this.getColumn(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  subMatrix(startRow, endRow, startColumn, endColumn) {\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    let newMatrix = new Matrix(\n      endRow - startRow + 1,\n      endColumn - startColumn + 1,\n    );\n    for (let i = startRow; i <= endRow; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        newMatrix.set(i - startRow, j - startColumn, this.get(i, j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixRow(indices, startColumn, endColumn) {\n    if (startColumn === undefined) startColumn = 0;\n    if (endColumn === undefined) endColumn = this.columns - 1;\n    if (\n      startColumn > endColumn ||\n      startColumn < 0 ||\n      startColumn >= this.columns ||\n      endColumn < 0 ||\n      endColumn >= this.columns\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(indices.length, endColumn - startColumn + 1);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        if (indices[i] < 0 || indices[i] >= this.rows) {\n          throw new RangeError(`Row index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(i, j - startColumn, this.get(indices[i], j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixColumn(indices, startRow, endRow) {\n    if (startRow === undefined) startRow = 0;\n    if (endRow === undefined) endRow = this.rows - 1;\n    if (\n      startRow > endRow ||\n      startRow < 0 ||\n      startRow >= this.rows ||\n      endRow < 0 ||\n      endRow >= this.rows\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(endRow - startRow + 1, indices.length);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startRow; j <= endRow; j++) {\n        if (indices[i] < 0 || indices[i] >= this.columns) {\n          throw new RangeError(`Column index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(j - startRow, i, this.get(j, indices[i]));\n      }\n    }\n    return newMatrix;\n  }\n\n  setSubMatrix(matrix, startRow, startColumn) {\n    matrix = Matrix.checkMatrix(matrix);\n    let endRow = startRow + matrix.rows - 1;\n    let endColumn = startColumn + matrix.columns - 1;\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    for (let i = 0; i < matrix.rows; i++) {\n      for (let j = 0; j < matrix.columns; j++) {\n        this.set(startRow + i, startColumn + j, matrix.get(i, j));\n      }\n    }\n    return this;\n  }\n\n  selection(rowIndices, columnIndices) {\n    let indices = checkIndices(this, rowIndices, columnIndices);\n    let newMatrix = new Matrix(rowIndices.length, columnIndices.length);\n    for (let i = 0; i < indices.row.length; i++) {\n      let rowIndex = indices.row[i];\n      for (let j = 0; j < indices.column.length; j++) {\n        let columnIndex = indices.column[j];\n        newMatrix.set(i, j, this.get(rowIndex, columnIndex));\n      }\n    }\n    return newMatrix;\n  }\n\n  trace() {\n    let min = Math.min(this.rows, this.columns);\n    let trace = 0;\n    for (let i = 0; i < min; i++) {\n      trace += this.get(i, i);\n    }\n    return trace;\n  }\n\n  clone() {\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let row = 0; row < this.rows; row++) {\n      for (let column = 0; column < this.columns; column++) {\n        newMatrix.set(row, column, this.get(row, column));\n      }\n    }\n    return newMatrix;\n  }\n\n  sum(by) {\n    switch (by) {\n      case 'row':\n        return sumByRow(this);\n      case 'column':\n        return sumByColumn(this);\n      case undefined:\n        return sumAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  product(by) {\n    switch (by) {\n      case 'row':\n        return productByRow(this);\n      case 'column':\n        return productByColumn(this);\n      case undefined:\n        return productAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  mean(by) {\n    const sum = this.sum(by);\n    switch (by) {\n      case 'row': {\n        for (let i = 0; i < this.rows; i++) {\n          sum[i] /= this.columns;\n        }\n        return sum;\n      }\n      case 'column': {\n        for (let i = 0; i < this.columns; i++) {\n          sum[i] /= this.rows;\n        }\n        return sum;\n      }\n      case undefined:\n        return sum / this.size;\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  variance(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { unbiased = true, mean = this.mean(by) } = options;\n    if (typeof unbiased !== 'boolean') {\n      throw new TypeError('unbiased must be a boolean');\n    }\n    switch (by) {\n      case 'row': {\n        if (!Array.isArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByRow(this, unbiased, mean);\n      }\n      case 'column': {\n        if (!Array.isArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByColumn(this, unbiased, mean);\n      }\n      case undefined: {\n        if (typeof mean !== 'number') {\n          throw new TypeError('mean must be a number');\n        }\n        return varianceAll(this, unbiased, mean);\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  standardDeviation(by, options) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    const variance = this.variance(by, options);\n    if (by === undefined) {\n      return Math.sqrt(variance);\n    } else {\n      for (let i = 0; i < variance.length; i++) {\n        variance[i] = Math.sqrt(variance[i]);\n      }\n      return variance;\n    }\n  }\n\n  center(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { center = this.mean(by) } = options;\n    switch (by) {\n      case 'row': {\n        if (!Array.isArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByRow(this, center);\n        return this;\n      }\n      case 'column': {\n        if (!Array.isArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByColumn(this, center);\n        return this;\n      }\n      case undefined: {\n        if (typeof center !== 'number') {\n          throw new TypeError('center must be a number');\n        }\n        centerAll(this, center);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  scale(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    let scale = options.scale;\n    switch (by) {\n      case 'row': {\n        if (scale === undefined) {\n          scale = getScaleByRow(this);\n        } else if (!Array.isArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByRow(this, scale);\n        return this;\n      }\n      case 'column': {\n        if (scale === undefined) {\n          scale = getScaleByColumn(this);\n        } else if (!Array.isArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByColumn(this, scale);\n        return this;\n      }\n      case undefined: {\n        if (scale === undefined) {\n          scale = getScaleAll(this);\n        } else if (typeof scale !== 'number') {\n          throw new TypeError('scale must be a number');\n        }\n        scaleAll(this, scale);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  toString(options) {\n    return inspectMatrixWithOptions(this, options);\n  }\n}\n\nAbstractMatrix.prototype.klass = 'Matrix';\nif (typeof Symbol !== 'undefined') {\n  AbstractMatrix.prototype[\n    Symbol.for('nodejs.util.inspect.custom')\n  ] = inspectMatrix;\n}\n\nfunction compareNumbers(a, b) {\n  return a - b;\n}\n\n// Synonyms\nAbstractMatrix.random = AbstractMatrix.rand;\nAbstractMatrix.randomInt = AbstractMatrix.randInt;\nAbstractMatrix.diagonal = AbstractMatrix.diag;\nAbstractMatrix.prototype.diagonal = AbstractMatrix.prototype.diag;\nAbstractMatrix.identity = AbstractMatrix.eye;\nAbstractMatrix.prototype.negate = AbstractMatrix.prototype.neg;\nAbstractMatrix.prototype.tensorProduct =\n  AbstractMatrix.prototype.kroneckerProduct;\n\nexport default class Matrix extends AbstractMatrix {\n  constructor(nRows, nColumns) {\n    super();\n    if (Matrix.isMatrix(nRows)) {\n      // eslint-disable-next-line no-constructor-return\n      return nRows.clone();\n    } else if (Number.isInteger(nRows) && nRows > 0) {\n      // Create an empty matrix\n      this.data = [];\n      if (Number.isInteger(nColumns) && nColumns > 0) {\n        for (let i = 0; i < nRows; i++) {\n          this.data.push(new Float64Array(nColumns));\n        }\n      } else {\n        throw new TypeError('nColumns must be a positive integer');\n      }\n    } else if (Array.isArray(nRows)) {\n      // Copy the values from the 2D array\n      const arrayData = nRows;\n      nRows = arrayData.length;\n      nColumns = arrayData[0].length;\n      if (typeof nColumns !== 'number' || nColumns === 0) {\n        throw new TypeError(\n          'Data must be a 2D array with at least one element',\n        );\n      }\n      this.data = [];\n      for (let i = 0; i < nRows; i++) {\n        if (arrayData[i].length !== nColumns) {\n          throw new RangeError('Inconsistent array dimensions');\n        }\n        this.data.push(Float64Array.from(arrayData[i]));\n      }\n    } else {\n      throw new TypeError(\n        'First argument must be a positive number or an array',\n      );\n    }\n    this.rows = nRows;\n    this.columns = nColumns;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n\n  removeRow(index) {\n    checkRowIndex(this, index);\n    if (this.rows === 1) {\n      throw new RangeError('A matrix cannot have less than one row');\n    }\n    this.data.splice(index, 1);\n    this.rows -= 1;\n    return this;\n  }\n\n  addRow(index, array) {\n    if (array === undefined) {\n      array = index;\n      index = this.rows;\n    }\n    checkRowIndex(this, index, true);\n    array = Float64Array.from(checkRowVector(this, array, true));\n    this.data.splice(index, 0, array);\n    this.rows += 1;\n    return this;\n  }\n\n  removeColumn(index) {\n    checkColumnIndex(this, index);\n    if (this.columns === 1) {\n      throw new RangeError('A matrix cannot have less than one column');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns - 1);\n      for (let j = 0; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      for (let j = index + 1; j < this.columns; j++) {\n        newRow[j - 1] = this.data[i][j];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns -= 1;\n    return this;\n  }\n\n  addColumn(index, array) {\n    if (typeof array === 'undefined') {\n      array = index;\n      index = this.columns;\n    }\n    checkColumnIndex(this, index, true);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns + 1);\n      let j = 0;\n      for (; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      newRow[j++] = array[i];\n      for (; j < this.columns + 1; j++) {\n        newRow[j] = this.data[i][j - 1];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns += 1;\n    return this;\n  }\n}\n\ninstallMathOperations(AbstractMatrix, Matrix);\n"]},"metadata":{},"sourceType":"module"}