{"ast":null,"code":"/**\n * @desc simple kebabCase like lodash\n *\n * kebabCase('fooBar'); => 'foo-bar'\n */\nexport function kebabCase(word) {\n  if (!word) {\n    return word;\n  }\n\n  var result = word.match(/(([A-Z]{0,1}[a-z]*[^A-Z])|([A-Z]{1}))/g);\n  return result.map(function (s) {\n    return s.toLowerCase();\n  }).join('-');\n}","map":{"version":3,"sources":["../../src/utils/kebab-case.ts"],"names":[],"mappings":"AAAA;;;;AAIG;AACH,OAAM,SAAU,SAAV,CAAoB,IAApB,EAAgC;AACpC,MAAI,CAAC,IAAL,EAAW;AACT,WAAO,IAAP;AACD;;AACD,MAAM,MAAM,GAAG,IAAI,CAAC,KAAL,CAAW,wCAAX,CAAf;AACA,SAAO,MAAM,CAAC,GAAP,CAAW,UAAC,CAAD,EAAU;AAAK,WAAA,CAAC,CAAD,WAAA,EAAA;AAAe,GAAzC,EAA2C,IAA3C,CAAgD,GAAhD,CAAP;AACD","sourcesContent":["/**\n * @desc simple kebabCase like lodash\n *\n * kebabCase('fooBar'); => 'foo-bar'\n */\nexport function kebabCase(word: string) {\n  if (!word) {\n    return word;\n  }\n  const result = word.match(/(([A-Z]{0,1}[a-z]*[^A-Z])|([A-Z]{1}))/g);\n  return result.map((s: string) => s.toLowerCase()).join('-');\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}