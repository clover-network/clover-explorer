{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\nimport { __extends } from \"tslib\";\nimport * as echarts from '../echarts';\nimport * as zrUtil from 'zrender/esm/core/util';\nimport * as graphic from '../util/graphic';\nimport './axis';\nimport '../coord/cartesian/defaultAxisExtentFromData';\nimport ComponentView from '../view/Component';\nimport GridModel from '../coord/cartesian/GridModel';\nimport ComponentModel from '../model/Component';\n\nvar GridView = function (_super) {\n  __extends(GridView, _super);\n\n  function GridView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'grid';\n    return _this;\n  }\n\n  GridView.prototype.render = function (gridModel, ecModel) {\n    this.group.removeAll();\n\n    if (gridModel.get('show')) {\n      this.group.add(new graphic.Rect({\n        shape: gridModel.coordinateSystem.getRect(),\n        style: zrUtil.defaults({\n          fill: gridModel.get('backgroundColor')\n        }, gridModel.getItemStyle()),\n        silent: true,\n        z2: -1\n      }));\n    }\n  };\n\n  GridView.type = 'grid';\n  return GridView;\n}(ComponentView);\n\nComponentView.registerClass(GridView);\nComponentModel.registerClass(GridModel);\necharts.registerPreprocessor(function (option) {\n  if (option.xAxis && option.yAxis && !option.grid) {\n    option.grid = {};\n  }\n});","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/echarts/esm/component/gridSimple.js"],"names":["__extends","echarts","zrUtil","graphic","ComponentView","GridModel","ComponentModel","GridView","_super","_this","apply","arguments","type","prototype","render","gridModel","ecModel","group","removeAll","get","add","Rect","shape","coordinateSystem","getRect","style","defaults","fill","getItemStyle","silent","z2","registerClass","registerPreprocessor","option","xAxis","yAxis","grid"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AAEA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAO,KAAKC,OAAZ,MAAyB,YAAzB;AACA,OAAO,KAAKC,MAAZ,MAAwB,uBAAxB;AACA,OAAO,KAAKC,OAAZ,MAAyB,iBAAzB;AACA,OAAO,QAAP;AACA,OAAO,8CAAP;AACA,OAAOC,aAAP,MAA0B,mBAA1B;AACA,OAAOC,SAAP,MAAsB,8BAAtB;AACA,OAAOC,cAAP,MAA2B,oBAA3B;;AAEA,IAAIC,QAAQ,GAAG,UAAUC,MAAV,EAAkB;AAC/BR,EAAAA,SAAS,CAACO,QAAD,EAAWC,MAAX,CAAT;;AAEA,WAASD,QAAT,GAAoB;AAClB,QAAIE,KAAK,GAAGD,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACE,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAnB,IAAoD,IAAhE;;AAEAF,IAAAA,KAAK,CAACG,IAAN,GAAa,MAAb;AACA,WAAOH,KAAP;AACD;;AAEDF,EAAAA,QAAQ,CAACM,SAAT,CAAmBC,MAAnB,GAA4B,UAAUC,SAAV,EAAqBC,OAArB,EAA8B;AACxD,SAAKC,KAAL,CAAWC,SAAX;;AAEA,QAAIH,SAAS,CAACI,GAAV,CAAc,MAAd,CAAJ,EAA2B;AACzB,WAAKF,KAAL,CAAWG,GAAX,CAAe,IAAIjB,OAAO,CAACkB,IAAZ,CAAiB;AAC9BC,QAAAA,KAAK,EAAEP,SAAS,CAACQ,gBAAV,CAA2BC,OAA3B,EADuB;AAE9BC,QAAAA,KAAK,EAAEvB,MAAM,CAACwB,QAAP,CAAgB;AACrBC,UAAAA,IAAI,EAAEZ,SAAS,CAACI,GAAV,CAAc,iBAAd;AADe,SAAhB,EAEJJ,SAAS,CAACa,YAAV,EAFI,CAFuB;AAK9BC,QAAAA,MAAM,EAAE,IALsB;AAM9BC,QAAAA,EAAE,EAAE,CAAC;AANyB,OAAjB,CAAf;AAQD;AACF,GAbD;;AAeAvB,EAAAA,QAAQ,CAACK,IAAT,GAAgB,MAAhB;AACA,SAAOL,QAAP;AACD,CA3Bc,CA2BbH,aA3Ba,CAAf;;AA6BAA,aAAa,CAAC2B,aAAd,CAA4BxB,QAA5B;AACAD,cAAc,CAACyB,aAAf,CAA6B1B,SAA7B;AACAJ,OAAO,CAAC+B,oBAAR,CAA6B,UAAUC,MAAV,EAAkB;AAC7C,MAAIA,MAAM,CAACC,KAAP,IAAgBD,MAAM,CAACE,KAAvB,IAAgC,CAACF,MAAM,CAACG,IAA5C,EAAkD;AAChDH,IAAAA,MAAM,CAACG,IAAP,GAAc,EAAd;AACD;AACF,CAJD","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\nimport { __extends } from \"tslib\";\nimport * as echarts from '../echarts';\nimport * as zrUtil from 'zrender/esm/core/util';\nimport * as graphic from '../util/graphic';\nimport './axis';\nimport '../coord/cartesian/defaultAxisExtentFromData';\nimport ComponentView from '../view/Component';\nimport GridModel from '../coord/cartesian/GridModel';\nimport ComponentModel from '../model/Component';\n\nvar GridView = function (_super) {\n  __extends(GridView, _super);\n\n  function GridView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'grid';\n    return _this;\n  }\n\n  GridView.prototype.render = function (gridModel, ecModel) {\n    this.group.removeAll();\n\n    if (gridModel.get('show')) {\n      this.group.add(new graphic.Rect({\n        shape: gridModel.coordinateSystem.getRect(),\n        style: zrUtil.defaults({\n          fill: gridModel.get('backgroundColor')\n        }, gridModel.getItemStyle()),\n        silent: true,\n        z2: -1\n      }));\n    }\n  };\n\n  GridView.type = 'grid';\n  return GridView;\n}(ComponentView);\n\nComponentView.registerClass(GridView);\nComponentModel.registerClass(GridModel);\necharts.registerPreprocessor(function (option) {\n  if (option.xAxis && option.yAxis && !option.grid) {\n    option.grid = {};\n  }\n});"]},"metadata":{},"sourceType":"module"}