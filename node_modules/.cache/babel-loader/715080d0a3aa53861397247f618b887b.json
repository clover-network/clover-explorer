{"ast":null,"code":"import { isArray, isNil } from '@antv/util';\n/**\n * @ignore\n * 根据数据点生成矩形的四个关键点\n * @param pointInfo 数据点信息\n * @param [isPyramid] 是否为尖底漏斗图\n * @returns rect points 返回矩形四个顶点信息\n */\n\nexport function getRectPoints(pointInfo, isPyramid) {\n  if (isPyramid === void 0) {\n    isPyramid = false;\n  }\n\n  var x = pointInfo.x,\n      y = pointInfo.y,\n      y0 = pointInfo.y0,\n      size = pointInfo.size; // 有 4 种情况，\n  // 1. x, y 都不是数组\n  // 2. y是数组，x不是\n  // 3. x是数组，y不是\n  // 4. x, y 都是数组\n\n  var yMin;\n  var yMax;\n\n  if (isArray(y)) {\n    yMin = y[0], yMax = y[1];\n  } else {\n    yMin = y0;\n    yMax = y;\n  }\n\n  var xMin;\n  var xMax;\n\n  if (isArray(x)) {\n    xMin = x[0], xMax = x[1];\n  } else {\n    xMin = x - size / 2;\n    xMax = x + size / 2;\n  }\n\n  var points = [{\n    x: xMin,\n    y: yMin\n  }, {\n    x: xMin,\n    y: yMax\n  }];\n\n  if (isPyramid) {\n    // 绘制尖底漏斗图\n    // 金字塔漏斗图的关键点\n    // 1\n    // |   2\n    // 0\n    points.push({\n      x: xMax,\n      y: (yMax + yMin) / 2\n    });\n  } else {\n    // 矩形的四个关键点，结构如下（左下角顺时针连接）\n    // 1 ---- 2\n    // |      |\n    // 0 ---- 3\n    points.push({\n      x: xMax,\n      y: yMax\n    }, {\n      x: xMax,\n      y: yMin\n    });\n  }\n\n  return points;\n}\n/**\n * @ignore\n * 根据矩形关键点绘制 path\n * @param points 关键点数组\n * @param isClosed path 是否需要闭合\n * @returns 返回矩形的 path\n */\n\nexport function getRectPath(points, isClosed) {\n  if (isClosed === void 0) {\n    isClosed = true;\n  }\n\n  var path = [];\n  var firstPoint = points[0];\n  path.push(['M', firstPoint.x, firstPoint.y]);\n\n  for (var i = 1, len = points.length; i < len; i++) {\n    path.push(['L', points[i].x, points[i].y]);\n  } // 对于 shape=\"line\" path 不应该闭合，否则会造成 lineCap 绘图属性失效\n\n\n  if (isClosed) {\n    path.push(['L', firstPoint.x, firstPoint.y]); // 需要闭合\n\n    path.push(['z']);\n  }\n\n  return path;\n}\n/**\n * @ignore\n * 根据矩形关键点绘制 path\n * @param points 关键点数组\n * @param lineCap 'round'圆角样式\n * @param coor 坐标\n * @returns 返回矩形的 path\n */\n\nexport function getIntervalRectPath(points, lineCap, coor) {\n  var width = coor.getWidth();\n  var height = coor.getHeight();\n  var isRect = coor.type === 'rect';\n  var path = [];\n  var r = (points[2].x - points[1].x) / 2;\n  var ry = coor.isTransposed ? r * height / width : r * width / height;\n\n  if (lineCap === 'round') {\n    if (isRect) {\n      path.push(['M', points[0].x, points[0].y + ry]);\n      path.push(['L', points[1].x, points[1].y - ry]);\n      path.push(['A', r, r, 0, 0, 1, points[2].x, points[2].y - ry]);\n      path.push(['L', points[3].x, points[3].y + ry]);\n      path.push(['A', r, r, 0, 0, 1, points[0].x, points[0].y + ry]);\n    } else {\n      path.push(['M', points[0].x, points[0].y]);\n      path.push(['L', points[1].x, points[1].y]);\n      path.push(['A', r, r, 0, 0, 1, points[2].x, points[2].y]);\n      path.push(['L', points[3].x, points[3].y]);\n      path.push(['A', r, r, 0, 0, 1, points[0].x, points[0].y]);\n    }\n\n    path.push(['z']);\n  } else {\n    path = getRectPath(points);\n  }\n\n  return path;\n}\n/**\n * @ignore\n * 根据 funnel 关键点绘制漏斗图的 path\n * @param points 图形关键点信息\n * @param nextPoints 下一个数据的图形关键点信息\n * @param isPyramid 是否为尖底漏斗图\n * @returns 返回漏斗图的图形 path\n */\n\nexport function getFunnelPath(points, nextPoints, isPyramid) {\n  var path = [];\n\n  if (!isNil(nextPoints)) {\n    path.push(['M', points[0].x, points[0].y], ['L', points[1].x, points[1].y], ['L', nextPoints[1].x, nextPoints[1].y], ['L', nextPoints[0].x, nextPoints[0].y], ['Z']);\n  } else if (isPyramid) {\n    // 金字塔最底部\n    path.push(['M', points[0].x, points[0].y], ['L', points[1].x, points[1].y], ['L', points[2].x, points[2].y], ['L', points[2].x, points[2].y], ['Z']);\n  } else {\n    // 漏斗图最底部\n    path.push(['M', points[0].x, points[0].y], ['L', points[1].x, points[1].y], ['L', points[2].x, points[2].y], ['L', points[3].x, points[3].y], ['Z']);\n  }\n\n  return path;\n}","map":{"version":3,"sources":["../../../../src/geometry/shape/interval/util.ts"],"names":[],"mappings":"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","sourcesContent":["import { Coordinate } from '@antv/coord';\nimport { isArray, isNil } from '@antv/util';\nimport { PathCommand } from '../../../dependents';\nimport { Point, ShapePoint } from '../../../interface';\n\n/**\n * @ignore\n * 根据数据点生成矩形的四个关键点\n * @param pointInfo 数据点信息\n * @param [isPyramid] 是否为尖底漏斗图\n * @returns rect points 返回矩形四个顶点信息\n */\nexport function getRectPoints(pointInfo: ShapePoint, isPyramid = false): Point[] {\n  const { x, y, y0, size } = pointInfo;\n  // 有 4 种情况，\n  // 1. x, y 都不是数组\n  // 2. y是数组，x不是\n  // 3. x是数组，y不是\n  // 4. x, y 都是数组\n  let yMin;\n  let yMax;\n  if (isArray(y)) {\n    [yMin, yMax] = y;\n  } else {\n    yMin = y0;\n    yMax = y;\n  }\n\n  let xMin;\n  let xMax;\n  if (isArray(x)) {\n    [xMin, xMax] = x;\n  } else {\n    xMin = x - size / 2;\n    xMax = x + size / 2;\n  }\n\n  const points = [\n    { x: xMin, y: yMin },\n    { x: xMin, y: yMax },\n  ];\n\n  if (isPyramid) {\n    // 绘制尖底漏斗图\n    // 金字塔漏斗图的关键点\n    // 1\n    // |   2\n    // 0\n    points.push({\n      x: xMax,\n      y: (yMax + yMin) / 2,\n    });\n  } else {\n    // 矩形的四个关键点，结构如下（左下角顺时针连接）\n    // 1 ---- 2\n    // |      |\n    // 0 ---- 3\n    points.push({ x: xMax, y: yMax }, { x: xMax, y: yMin });\n  }\n\n  return points;\n}\n\n/**\n * @ignore\n * 根据矩形关键点绘制 path\n * @param points 关键点数组\n * @param isClosed path 是否需要闭合\n * @returns 返回矩形的 path\n */\nexport function getRectPath(points: Point[], isClosed: boolean = true): PathCommand[] {\n  const path = [];\n  const firstPoint = points[0];\n  path.push(['M', firstPoint.x, firstPoint.y]);\n  for (let i = 1, len = points.length; i < len; i++) {\n    path.push(['L', points[i].x, points[i].y]);\n  }\n  // 对于 shape=\"line\" path 不应该闭合，否则会造成 lineCap 绘图属性失效\n  if (isClosed) {\n    path.push(['L', firstPoint.x, firstPoint.y]); // 需要闭合\n    path.push(['z']);\n  }\n  return path;\n}\n\n/**\n * @ignore\n * 根据矩形关键点绘制 path\n * @param points 关键点数组\n * @param lineCap 'round'圆角样式\n * @param coor 坐标\n * @returns 返回矩形的 path\n */\nexport function getIntervalRectPath(points: Point[], lineCap: CanvasLineCap, coor: Coordinate): PathCommand[] {\n  const width = coor.getWidth();\n  const height = coor.getHeight();\n  const isRect = coor.type === 'rect';\n  let path = [];\n  const r = (points[2].x - points[1].x) / 2;\n  const ry = coor.isTransposed ? (r * height) / width : (r * width) / height;\n  if (lineCap === 'round') {\n    if (isRect) {\n      path.push(['M', points[0].x, points[0].y + ry]);\n      path.push(['L', points[1].x, points[1].y - ry]);\n      path.push(['A', r, r, 0, 0, 1, points[2].x, points[2].y - ry]);\n      path.push(['L', points[3].x, points[3].y + ry]);\n      path.push(['A', r, r, 0, 0, 1, points[0].x, points[0].y + ry]);\n    } else {\n      path.push(['M', points[0].x, points[0].y]);\n      path.push(['L', points[1].x, points[1].y]);\n      path.push(['A', r, r, 0, 0, 1, points[2].x, points[2].y]);\n      path.push(['L', points[3].x, points[3].y]);\n      path.push(['A', r, r, 0, 0, 1, points[0].x, points[0].y]);\n    }\n    path.push(['z']);\n  } else {\n    path = getRectPath(points);\n  }\n  return path;\n}\n\n/**\n * @ignore\n * 根据 funnel 关键点绘制漏斗图的 path\n * @param points 图形关键点信息\n * @param nextPoints 下一个数据的图形关键点信息\n * @param isPyramid 是否为尖底漏斗图\n * @returns 返回漏斗图的图形 path\n */\nexport function getFunnelPath(points: Point[], nextPoints: Point[], isPyramid: boolean) {\n  const path = [];\n  if (!isNil(nextPoints)) {\n    path.push(\n      ['M', points[0].x, points[0].y],\n      ['L', points[1].x, points[1].y],\n      ['L', nextPoints[1].x, nextPoints[1].y],\n      ['L', nextPoints[0].x, nextPoints[0].y],\n      ['Z']\n    );\n  } else if (isPyramid) {\n    // 金字塔最底部\n    path.push(\n      ['M', points[0].x, points[0].y],\n      ['L', points[1].x, points[1].y],\n      ['L', points[2].x, points[2].y],\n      ['L', points[2].x, points[2].y],\n      ['Z']\n    );\n  } else {\n    // 漏斗图最底部\n    path.push(\n      ['M', points[0].x, points[0].y],\n      ['L', points[1].x, points[1].y],\n      ['L', points[2].x, points[2].y],\n      ['L', points[3].x, points[3].y],\n      ['Z']\n    );\n  }\n\n  return path;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}