{"ast":null,"code":"import { __assign, __extends, __rest } from \"tslib\";\n/**\n * 基于 G 的时间轴组件\n */\n\nimport GCanvas from '@antv/g-canvas/lib/canvas';\nimport GSVGCanvas from '@antv/g-svg/lib/canvas';\nimport createDOM from '@antv/dom-util/lib/create-dom';\nimport modifyCSS from '@antv/dom-util/lib/modify-css';\nimport Base from '../base';\nimport TrendTimeBar from './trendTimeBar';\nimport TimeBarSlice from './timeBarSlice';\nimport { VALUE_CHANGE } from './constant'; // simple 版本默认高度\n\nvar DEFAULT_SIMPLE_HEIGHT = 8; // trend 版本默认高度\n\nvar DEFAULT_TREND_HEIGHT = 26;\n\nvar TimeBar =\n/** @class */\nfunction (_super) {\n  __extends(TimeBar, _super);\n\n  function TimeBar() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  TimeBar.prototype.getDefaultCfgs = function () {\n    return {\n      container: null,\n      className: 'g6-component-timebar',\n      padding: 10,\n      type: 'trend',\n      trend: {\n        data: [],\n        isArea: false,\n        smooth: true\n      },\n      controllerCfg: {\n        speed: 2,\n        loop: false\n      },\n      slider: {\n        start: 0.1,\n        end: 0.9,\n        minText: 'min',\n        maxText: 'max'\n      },\n      tick: {\n        start: 0.1,\n        end: 0.9,\n        data: []\n      }\n    };\n  };\n  /**\n   * 初始化 TimeBar 的容器\n   */\n\n\n  TimeBar.prototype.initContainer = function () {\n    var graph = this.get('graph');\n    var _a = this._cfgs,\n        width = _a.width,\n        height = _a.height;\n    var className = this.get('className') || 'g6-component-timebar';\n    var container = this.get('container');\n    var graphContainer = this.get('graph').get('container');\n    var timeBarContainer;\n\n    if (!container) {\n      timeBarContainer = createDOM(\"<div class='\" + className + \"'></div>\");\n      modifyCSS(timeBarContainer, {\n        position: 'relative'\n      });\n    } else {\n      timeBarContainer = container;\n    }\n\n    graphContainer.appendChild(timeBarContainer);\n    this.set('timeBarContainer', timeBarContainer);\n    var canvas;\n    var renderer = graph.get('renderer');\n\n    if (renderer === 'SVG') {\n      canvas = new GSVGCanvas({\n        container: timeBarContainer,\n        width: width,\n        height: height\n      });\n    } else {\n      canvas = new GCanvas({\n        container: timeBarContainer,\n        width: width,\n        height: height\n      });\n    }\n\n    this.set('canvas', canvas);\n  };\n\n  TimeBar.prototype.init = function () {\n    this.initContainer();\n    var canvas = this.get('canvas');\n    var timeBarGroup = canvas.addGroup({\n      name: 'timebar-group'\n    });\n    this.set('timeBarGroup', timeBarGroup);\n    this.renderTrend();\n    this.initEvent();\n  };\n\n  TimeBar.prototype.renderTrend = function () {\n    var _a = this._cfgs,\n        width = _a.width,\n        x = _a.x,\n        y = _a.y,\n        padding = _a.padding,\n        type = _a.type,\n        trend = _a.trend,\n        slider = _a.slider,\n        controllerCfg = _a.controllerCfg;\n\n    var data = trend.data,\n        other = __rest(trend, [\"data\"]);\n\n    var realWidth = width - 2 * padding;\n    var defaultHeight = type === 'trend' ? DEFAULT_TREND_HEIGHT : DEFAULT_SIMPLE_HEIGHT;\n    var graph = this.get('graph');\n    var group = this.get('timeBarGroup');\n    var canvas = this.get('canvas');\n    var timebar = null;\n\n    if (type === 'trend' || type === 'simple') {\n      timebar = new TrendTimeBar(__assign(__assign({\n        graph: graph,\n        canvas: canvas,\n        group: group,\n        type: type,\n        x: x + padding,\n        y: type === 'trend' ? y + padding : y + padding + 15,\n        width: realWidth,\n        height: defaultHeight,\n        padding: padding,\n        trendCfg: __assign(__assign({}, other), {\n          data: data.map(function (d) {\n            return d.value;\n          })\n        })\n      }, slider), {\n        ticks: data.map(function (d) {\n          return d.date;\n        }),\n        handlerStyle: __assign(__assign({}, slider.handlerStyle), {\n          height: slider.height || defaultHeight\n        }),\n        controllerCfg: controllerCfg\n      }));\n    } else if (type === 'tick') {\n      var tick = this._cfgs.tick; // 刻度时间轴\n\n      timebar = new TimeBarSlice(__assign({\n        graph: graph,\n        canvas: canvas,\n        group: group,\n        x: x + padding,\n        y: y + padding\n      }, tick));\n    }\n\n    this.set('timebar', timebar);\n  };\n\n  TimeBar.prototype.filterData = function (evt) {\n    var value = evt.value;\n    var trendData = null;\n    var type = this._cfgs.type;\n\n    if (type === 'trend' || type === 'simple') {\n      trendData = this._cfgs.trend.data;\n    } else if (type === 'tick') {\n      trendData = this._cfgs.tick.data;\n    }\n\n    if (!trendData || trendData.length === 0) {\n      console.warn('请配置 TimeBar 组件的数据');\n      return;\n    }\n\n    var rangeChange = this.get('rangeChange');\n    var graph = this.get('graph');\n    var min = Math.round(trendData.length * value[0]);\n    var max = Math.round(trendData.length * value[1]);\n    max = max >= trendData.length ? trendData.length - 1 : max;\n    var minText = trendData[min].date;\n    var maxText = trendData[max].date;\n\n    if (type !== 'tick') {\n      var timebar = this.get('timebar');\n      timebar.setText(minText, maxText);\n    }\n\n    if (rangeChange) {\n      rangeChange(graph, minText, maxText);\n    } else {\n      // 自动过滤数据，并渲染 graph\n      var graphData = graph.save();\n\n      if (!this.cacheGraphData || this.cacheGraphData.nodes && this.cacheGraphData.nodes.length === 0) {\n        this.cacheGraphData = graphData;\n      } // 过滤不在 min 和 max 范围内的节点\n\n\n      var filterData = this.cacheGraphData.nodes.filter(function (d) {\n        return d.date >= minText && d.date <= maxText;\n      });\n      var nodeIds_1 = filterData.map(function (node) {\n        return node.id;\n      }); // 过滤 source 或 target 不在 min 和 max 范围内的边\n\n      var fileterEdges = this.cacheGraphData.edges.filter(function (edge) {\n        return nodeIds_1.includes(edge.source) && nodeIds_1.includes(edge.target);\n      });\n      graph.changeData({\n        nodes: filterData,\n        edges: fileterEdges\n      });\n    }\n  };\n\n  TimeBar.prototype.initEvent = function () {\n    var _this = this;\n\n    var start = 0;\n    var end = 0;\n    var type = this._cfgs.type;\n\n    if (!type || type === 'trend' || type === 'simple') {\n      start = this._cfgs.slider.start;\n      end = this._cfgs.slider.end;\n    } else if (type === 'tick') {\n      start = this._cfgs.tick.start;\n      end = this._cfgs.tick.end;\n    }\n\n    var graph = this.get('graph');\n    graph.on('afterrender', function () {\n      _this.filterData({\n        value: [start, end]\n      });\n    }); // 时间轴的值发生改变的事件\n\n    graph.on(VALUE_CHANGE, function (evt) {\n      // 范围变化\n      _this.filterData(evt);\n    });\n  };\n\n  TimeBar.prototype.destroy = function () {\n    var timebar = this.get('timebar');\n\n    if (timebar && timebar.destory) {\n      timebar.destory();\n    }\n\n    _super.prototype.destroy.call(this);\n\n    var timeBarContainer = this.get('timeBarContainer');\n\n    if (timeBarContainer) {\n      var container = this.get('container');\n\n      if (!container) {\n        container = this.get('graph').get('container');\n      }\n\n      container.removeChild(timeBarContainer);\n    }\n  };\n\n  return TimeBar;\n}(Base);\n\nexport default TimeBar;","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/@antv/g6/es/plugins/timeBar/index.js"],"names":["__assign","__extends","__rest","GCanvas","GSVGCanvas","createDOM","modifyCSS","Base","TrendTimeBar","TimeBarSlice","VALUE_CHANGE","DEFAULT_SIMPLE_HEIGHT","DEFAULT_TREND_HEIGHT","TimeBar","_super","apply","arguments","prototype","getDefaultCfgs","container","className","padding","type","trend","data","isArea","smooth","controllerCfg","speed","loop","slider","start","end","minText","maxText","tick","initContainer","graph","get","_a","_cfgs","width","height","graphContainer","timeBarContainer","position","appendChild","set","canvas","renderer","init","timeBarGroup","addGroup","name","renderTrend","initEvent","x","y","other","realWidth","defaultHeight","group","timebar","trendCfg","map","d","value","ticks","date","handlerStyle","filterData","evt","trendData","length","console","warn","rangeChange","min","Math","round","max","setText","graphData","save","cacheGraphData","nodes","filter","nodeIds_1","node","id","fileterEdges","edges","edge","includes","source","target","changeData","_this","on","destroy","destory","call","removeChild"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,OAA5C;AACA;AACA;AACA;;AAEA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAOC,SAAP,MAAsB,+BAAtB;AACA,OAAOC,SAAP,MAAsB,+BAAtB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,SAASC,YAAT,QAA6B,YAA7B,C,CAA2C;;AAE3C,IAAIC,qBAAqB,GAAG,CAA5B,C,CAA+B;;AAE/B,IAAIC,oBAAoB,GAAG,EAA3B;;AAEA,IAAIC,OAAO;AACX;AACA,UAAUC,MAAV,EAAkB;AAChBb,EAAAA,SAAS,CAACY,OAAD,EAAUC,MAAV,CAAT;;AAEA,WAASD,OAAT,GAAmB;AACjB,WAAOC,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACC,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAnB,IAAoD,IAA3D;AACD;;AAEDH,EAAAA,OAAO,CAACI,SAAR,CAAkBC,cAAlB,GAAmC,YAAY;AAC7C,WAAO;AACLC,MAAAA,SAAS,EAAE,IADN;AAELC,MAAAA,SAAS,EAAE,sBAFN;AAGLC,MAAAA,OAAO,EAAE,EAHJ;AAILC,MAAAA,IAAI,EAAE,OAJD;AAKLC,MAAAA,KAAK,EAAE;AACLC,QAAAA,IAAI,EAAE,EADD;AAELC,QAAAA,MAAM,EAAE,KAFH;AAGLC,QAAAA,MAAM,EAAE;AAHH,OALF;AAULC,MAAAA,aAAa,EAAE;AACbC,QAAAA,KAAK,EAAE,CADM;AAEbC,QAAAA,IAAI,EAAE;AAFO,OAVV;AAcLC,MAAAA,MAAM,EAAE;AACNC,QAAAA,KAAK,EAAE,GADD;AAENC,QAAAA,GAAG,EAAE,GAFC;AAGNC,QAAAA,OAAO,EAAE,KAHH;AAINC,QAAAA,OAAO,EAAE;AAJH,OAdH;AAoBLC,MAAAA,IAAI,EAAE;AACJJ,QAAAA,KAAK,EAAE,GADH;AAEJC,QAAAA,GAAG,EAAE,GAFD;AAGJR,QAAAA,IAAI,EAAE;AAHF;AApBD,KAAP;AA0BD,GA3BD;AA4BA;AACF;AACA;;;AAGEX,EAAAA,OAAO,CAACI,SAAR,CAAkBmB,aAAlB,GAAkC,YAAY;AAC5C,QAAIC,KAAK,GAAG,KAAKC,GAAL,CAAS,OAAT,CAAZ;AACA,QAAIC,EAAE,GAAG,KAAKC,KAAd;AAAA,QACIC,KAAK,GAAGF,EAAE,CAACE,KADf;AAAA,QAEIC,MAAM,GAAGH,EAAE,CAACG,MAFhB;AAGA,QAAItB,SAAS,GAAG,KAAKkB,GAAL,CAAS,WAAT,KAAyB,sBAAzC;AACA,QAAInB,SAAS,GAAG,KAAKmB,GAAL,CAAS,WAAT,CAAhB;AACA,QAAIK,cAAc,GAAG,KAAKL,GAAL,CAAS,OAAT,EAAkBA,GAAlB,CAAsB,WAAtB,CAArB;AACA,QAAIM,gBAAJ;;AAEA,QAAI,CAACzB,SAAL,EAAgB;AACdyB,MAAAA,gBAAgB,GAAGvC,SAAS,CAAC,iBAAiBe,SAAjB,GAA6B,UAA9B,CAA5B;AACAd,MAAAA,SAAS,CAACsC,gBAAD,EAAmB;AAC1BC,QAAAA,QAAQ,EAAE;AADgB,OAAnB,CAAT;AAGD,KALD,MAKO;AACLD,MAAAA,gBAAgB,GAAGzB,SAAnB;AACD;;AAEDwB,IAAAA,cAAc,CAACG,WAAf,CAA2BF,gBAA3B;AACA,SAAKG,GAAL,CAAS,kBAAT,EAA6BH,gBAA7B;AACA,QAAII,MAAJ;AACA,QAAIC,QAAQ,GAAGZ,KAAK,CAACC,GAAN,CAAU,UAAV,CAAf;;AAEA,QAAIW,QAAQ,KAAK,KAAjB,EAAwB;AACtBD,MAAAA,MAAM,GAAG,IAAI5C,UAAJ,CAAe;AACtBe,QAAAA,SAAS,EAAEyB,gBADW;AAEtBH,QAAAA,KAAK,EAAEA,KAFe;AAGtBC,QAAAA,MAAM,EAAEA;AAHc,OAAf,CAAT;AAKD,KAND,MAMO;AACLM,MAAAA,MAAM,GAAG,IAAI7C,OAAJ,CAAY;AACnBgB,QAAAA,SAAS,EAAEyB,gBADQ;AAEnBH,QAAAA,KAAK,EAAEA,KAFY;AAGnBC,QAAAA,MAAM,EAAEA;AAHW,OAAZ,CAAT;AAKD;;AAED,SAAKK,GAAL,CAAS,QAAT,EAAmBC,MAAnB;AACD,GAvCD;;AAyCAnC,EAAAA,OAAO,CAACI,SAAR,CAAkBiC,IAAlB,GAAyB,YAAY;AACnC,SAAKd,aAAL;AACA,QAAIY,MAAM,GAAG,KAAKV,GAAL,CAAS,QAAT,CAAb;AACA,QAAIa,YAAY,GAAGH,MAAM,CAACI,QAAP,CAAgB;AACjCC,MAAAA,IAAI,EAAE;AAD2B,KAAhB,CAAnB;AAGA,SAAKN,GAAL,CAAS,cAAT,EAAyBI,YAAzB;AACA,SAAKG,WAAL;AACA,SAAKC,SAAL;AACD,GATD;;AAWA1C,EAAAA,OAAO,CAACI,SAAR,CAAkBqC,WAAlB,GAAgC,YAAY;AAC1C,QAAIf,EAAE,GAAG,KAAKC,KAAd;AAAA,QACIC,KAAK,GAAGF,EAAE,CAACE,KADf;AAAA,QAEIe,CAAC,GAAGjB,EAAE,CAACiB,CAFX;AAAA,QAGIC,CAAC,GAAGlB,EAAE,CAACkB,CAHX;AAAA,QAIIpC,OAAO,GAAGkB,EAAE,CAAClB,OAJjB;AAAA,QAKIC,IAAI,GAAGiB,EAAE,CAACjB,IALd;AAAA,QAMIC,KAAK,GAAGgB,EAAE,CAAChB,KANf;AAAA,QAOIO,MAAM,GAAGS,EAAE,CAACT,MAPhB;AAAA,QAQIH,aAAa,GAAGY,EAAE,CAACZ,aARvB;;AAUA,QAAIH,IAAI,GAAGD,KAAK,CAACC,IAAjB;AAAA,QACIkC,KAAK,GAAGxD,MAAM,CAACqB,KAAD,EAAQ,CAAC,MAAD,CAAR,CADlB;;AAGA,QAAIoC,SAAS,GAAGlB,KAAK,GAAG,IAAIpB,OAA5B;AACA,QAAIuC,aAAa,GAAGtC,IAAI,KAAK,OAAT,GAAmBV,oBAAnB,GAA0CD,qBAA9D;AACA,QAAI0B,KAAK,GAAG,KAAKC,GAAL,CAAS,OAAT,CAAZ;AACA,QAAIuB,KAAK,GAAG,KAAKvB,GAAL,CAAS,cAAT,CAAZ;AACA,QAAIU,MAAM,GAAG,KAAKV,GAAL,CAAS,QAAT,CAAb;AACA,QAAIwB,OAAO,GAAG,IAAd;;AAEA,QAAIxC,IAAI,KAAK,OAAT,IAAoBA,IAAI,KAAK,QAAjC,EAA2C;AACzCwC,MAAAA,OAAO,GAAG,IAAItD,YAAJ,CAAiBR,QAAQ,CAACA,QAAQ,CAAC;AAC3CqC,QAAAA,KAAK,EAAEA,KADoC;AAE3CW,QAAAA,MAAM,EAAEA,MAFmC;AAG3Ca,QAAAA,KAAK,EAAEA,KAHoC;AAI3CvC,QAAAA,IAAI,EAAEA,IAJqC;AAK3CkC,QAAAA,CAAC,EAAEA,CAAC,GAAGnC,OALoC;AAM3CoC,QAAAA,CAAC,EAAEnC,IAAI,KAAK,OAAT,GAAmBmC,CAAC,GAAGpC,OAAvB,GAAiCoC,CAAC,GAAGpC,OAAJ,GAAc,EANP;AAO3CoB,QAAAA,KAAK,EAAEkB,SAPoC;AAQ3CjB,QAAAA,MAAM,EAAEkB,aARmC;AAS3CvC,QAAAA,OAAO,EAAEA,OATkC;AAU3C0C,QAAAA,QAAQ,EAAE/D,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAK0D,KAAL,CAAT,EAAsB;AACtClC,UAAAA,IAAI,EAAEA,IAAI,CAACwC,GAAL,CAAS,UAAUC,CAAV,EAAa;AAC1B,mBAAOA,CAAC,CAACC,KAAT;AACD,WAFK;AADgC,SAAtB;AAVyB,OAAD,EAezCpC,MAfyC,CAAT,EAevB;AACVqC,QAAAA,KAAK,EAAE3C,IAAI,CAACwC,GAAL,CAAS,UAAUC,CAAV,EAAa;AAC3B,iBAAOA,CAAC,CAACG,IAAT;AACD,SAFM,CADG;AAIVC,QAAAA,YAAY,EAAErE,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAK8B,MAAM,CAACuC,YAAZ,CAAT,EAAoC;AACxD3B,UAAAA,MAAM,EAAEZ,MAAM,CAACY,MAAP,IAAiBkB;AAD+B,SAApC,CAJZ;AAOVjC,QAAAA,aAAa,EAAEA;AAPL,OAfuB,CAAzB,CAAV;AAwBD,KAzBD,MAyBO,IAAIL,IAAI,KAAK,MAAb,EAAqB;AAC1B,UAAIa,IAAI,GAAG,KAAKK,KAAL,CAAWL,IAAtB,CAD0B,CACE;;AAE5B2B,MAAAA,OAAO,GAAG,IAAIrD,YAAJ,CAAiBT,QAAQ,CAAC;AAClCqC,QAAAA,KAAK,EAAEA,KAD2B;AAElCW,QAAAA,MAAM,EAAEA,MAF0B;AAGlCa,QAAAA,KAAK,EAAEA,KAH2B;AAIlCL,QAAAA,CAAC,EAAEA,CAAC,GAAGnC,OAJ2B;AAKlCoC,QAAAA,CAAC,EAAEA,CAAC,GAAGpC;AAL2B,OAAD,EAMhCc,IANgC,CAAzB,CAAV;AAOD;;AAED,SAAKY,GAAL,CAAS,SAAT,EAAoBe,OAApB;AACD,GA3DD;;AA6DAjD,EAAAA,OAAO,CAACI,SAAR,CAAkBqD,UAAlB,GAA+B,UAAUC,GAAV,EAAe;AAC5C,QAAIL,KAAK,GAAGK,GAAG,CAACL,KAAhB;AACA,QAAIM,SAAS,GAAG,IAAhB;AACA,QAAIlD,IAAI,GAAG,KAAKkB,KAAL,CAAWlB,IAAtB;;AAEA,QAAIA,IAAI,KAAK,OAAT,IAAoBA,IAAI,KAAK,QAAjC,EAA2C;AACzCkD,MAAAA,SAAS,GAAG,KAAKhC,KAAL,CAAWjB,KAAX,CAAiBC,IAA7B;AACD,KAFD,MAEO,IAAIF,IAAI,KAAK,MAAb,EAAqB;AAC1BkD,MAAAA,SAAS,GAAG,KAAKhC,KAAL,CAAWL,IAAX,CAAgBX,IAA5B;AACD;;AAED,QAAI,CAACgD,SAAD,IAAcA,SAAS,CAACC,MAAV,KAAqB,CAAvC,EAA0C;AACxCC,MAAAA,OAAO,CAACC,IAAR,CAAa,mBAAb;AACA;AACD;;AAED,QAAIC,WAAW,GAAG,KAAKtC,GAAL,CAAS,aAAT,CAAlB;AACA,QAAID,KAAK,GAAG,KAAKC,GAAL,CAAS,OAAT,CAAZ;AACA,QAAIuC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWP,SAAS,CAACC,MAAV,GAAmBP,KAAK,CAAC,CAAD,CAAnC,CAAV;AACA,QAAIc,GAAG,GAAGF,IAAI,CAACC,KAAL,CAAWP,SAAS,CAACC,MAAV,GAAmBP,KAAK,CAAC,CAAD,CAAnC,CAAV;AACAc,IAAAA,GAAG,GAAGA,GAAG,IAAIR,SAAS,CAACC,MAAjB,GAA0BD,SAAS,CAACC,MAAV,GAAmB,CAA7C,GAAiDO,GAAvD;AACA,QAAI/C,OAAO,GAAGuC,SAAS,CAACK,GAAD,CAAT,CAAeT,IAA7B;AACA,QAAIlC,OAAO,GAAGsC,SAAS,CAACQ,GAAD,CAAT,CAAeZ,IAA7B;;AAEA,QAAI9C,IAAI,KAAK,MAAb,EAAqB;AACnB,UAAIwC,OAAO,GAAG,KAAKxB,GAAL,CAAS,SAAT,CAAd;AACAwB,MAAAA,OAAO,CAACmB,OAAR,CAAgBhD,OAAhB,EAAyBC,OAAzB;AACD;;AAED,QAAI0C,WAAJ,EAAiB;AACfA,MAAAA,WAAW,CAACvC,KAAD,EAAQJ,OAAR,EAAiBC,OAAjB,CAAX;AACD,KAFD,MAEO;AACL;AACA,UAAIgD,SAAS,GAAG7C,KAAK,CAAC8C,IAAN,EAAhB;;AAEA,UAAI,CAAC,KAAKC,cAAN,IAAwB,KAAKA,cAAL,CAAoBC,KAApB,IAA6B,KAAKD,cAAL,CAAoBC,KAApB,CAA0BZ,MAA1B,KAAqC,CAA9F,EAAiG;AAC/F,aAAKW,cAAL,GAAsBF,SAAtB;AACD,OANI,CAMH;;;AAGF,UAAIZ,UAAU,GAAG,KAAKc,cAAL,CAAoBC,KAApB,CAA0BC,MAA1B,CAAiC,UAAUrB,CAAV,EAAa;AAC7D,eAAOA,CAAC,CAACG,IAAF,IAAUnC,OAAV,IAAqBgC,CAAC,CAACG,IAAF,IAAUlC,OAAtC;AACD,OAFgB,CAAjB;AAGA,UAAIqD,SAAS,GAAGjB,UAAU,CAACN,GAAX,CAAe,UAAUwB,IAAV,EAAgB;AAC7C,eAAOA,IAAI,CAACC,EAAZ;AACD,OAFe,CAAhB,CAZK,CAcD;;AAEJ,UAAIC,YAAY,GAAG,KAAKN,cAAL,CAAoBO,KAApB,CAA0BL,MAA1B,CAAiC,UAAUM,IAAV,EAAgB;AAClE,eAAOL,SAAS,CAACM,QAAV,CAAmBD,IAAI,CAACE,MAAxB,KAAmCP,SAAS,CAACM,QAAV,CAAmBD,IAAI,CAACG,MAAxB,CAA1C;AACD,OAFkB,CAAnB;AAGA1D,MAAAA,KAAK,CAAC2D,UAAN,CAAiB;AACfX,QAAAA,KAAK,EAAEf,UADQ;AAEfqB,QAAAA,KAAK,EAAED;AAFQ,OAAjB;AAID;AACF,GAvDD;;AAyDA7E,EAAAA,OAAO,CAACI,SAAR,CAAkBsC,SAAlB,GAA8B,YAAY;AACxC,QAAI0C,KAAK,GAAG,IAAZ;;AAEA,QAAIlE,KAAK,GAAG,CAAZ;AACA,QAAIC,GAAG,GAAG,CAAV;AACA,QAAIV,IAAI,GAAG,KAAKkB,KAAL,CAAWlB,IAAtB;;AAEA,QAAI,CAACA,IAAD,IAASA,IAAI,KAAK,OAAlB,IAA6BA,IAAI,KAAK,QAA1C,EAAoD;AAClDS,MAAAA,KAAK,GAAG,KAAKS,KAAL,CAAWV,MAAX,CAAkBC,KAA1B;AACAC,MAAAA,GAAG,GAAG,KAAKQ,KAAL,CAAWV,MAAX,CAAkBE,GAAxB;AACD,KAHD,MAGO,IAAIV,IAAI,KAAK,MAAb,EAAqB;AAC1BS,MAAAA,KAAK,GAAG,KAAKS,KAAL,CAAWL,IAAX,CAAgBJ,KAAxB;AACAC,MAAAA,GAAG,GAAG,KAAKQ,KAAL,CAAWL,IAAX,CAAgBH,GAAtB;AACD;;AAED,QAAIK,KAAK,GAAG,KAAKC,GAAL,CAAS,OAAT,CAAZ;AACAD,IAAAA,KAAK,CAAC6D,EAAN,CAAS,aAAT,EAAwB,YAAY;AAClCD,MAAAA,KAAK,CAAC3B,UAAN,CAAiB;AACfJ,QAAAA,KAAK,EAAE,CAACnC,KAAD,EAAQC,GAAR;AADQ,OAAjB;AAGD,KAJD,EAhBwC,CAoBpC;;AAEJK,IAAAA,KAAK,CAAC6D,EAAN,CAASxF,YAAT,EAAuB,UAAU6D,GAAV,EAAe;AACpC;AACA0B,MAAAA,KAAK,CAAC3B,UAAN,CAAiBC,GAAjB;AACD,KAHD;AAID,GA1BD;;AA4BA1D,EAAAA,OAAO,CAACI,SAAR,CAAkBkF,OAAlB,GAA4B,YAAY;AACtC,QAAIrC,OAAO,GAAG,KAAKxB,GAAL,CAAS,SAAT,CAAd;;AAEA,QAAIwB,OAAO,IAAIA,OAAO,CAACsC,OAAvB,EAAgC;AAC9BtC,MAAAA,OAAO,CAACsC,OAAR;AACD;;AAEDtF,IAAAA,MAAM,CAACG,SAAP,CAAiBkF,OAAjB,CAAyBE,IAAzB,CAA8B,IAA9B;;AAEA,QAAIzD,gBAAgB,GAAG,KAAKN,GAAL,CAAS,kBAAT,CAAvB;;AAEA,QAAIM,gBAAJ,EAAsB;AACpB,UAAIzB,SAAS,GAAG,KAAKmB,GAAL,CAAS,WAAT,CAAhB;;AAEA,UAAI,CAACnB,SAAL,EAAgB;AACdA,QAAAA,SAAS,GAAG,KAAKmB,GAAL,CAAS,OAAT,EAAkBA,GAAlB,CAAsB,WAAtB,CAAZ;AACD;;AAEDnB,MAAAA,SAAS,CAACmF,WAAV,CAAsB1D,gBAAtB;AACD;AACF,GApBD;;AAsBA,SAAO/B,OAAP;AACD,CArQD,CAqQEN,IArQF,CAFA;;AAyQA,eAAeM,OAAf","sourcesContent":["import { __assign, __extends, __rest } from \"tslib\";\n/**\n * 基于 G 的时间轴组件\n */\n\nimport GCanvas from '@antv/g-canvas/lib/canvas';\nimport GSVGCanvas from '@antv/g-svg/lib/canvas';\nimport createDOM from '@antv/dom-util/lib/create-dom';\nimport modifyCSS from '@antv/dom-util/lib/modify-css';\nimport Base from '../base';\nimport TrendTimeBar from './trendTimeBar';\nimport TimeBarSlice from './timeBarSlice';\nimport { VALUE_CHANGE } from './constant'; // simple 版本默认高度\n\nvar DEFAULT_SIMPLE_HEIGHT = 8; // trend 版本默认高度\n\nvar DEFAULT_TREND_HEIGHT = 26;\n\nvar TimeBar =\n/** @class */\nfunction (_super) {\n  __extends(TimeBar, _super);\n\n  function TimeBar() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  TimeBar.prototype.getDefaultCfgs = function () {\n    return {\n      container: null,\n      className: 'g6-component-timebar',\n      padding: 10,\n      type: 'trend',\n      trend: {\n        data: [],\n        isArea: false,\n        smooth: true\n      },\n      controllerCfg: {\n        speed: 2,\n        loop: false\n      },\n      slider: {\n        start: 0.1,\n        end: 0.9,\n        minText: 'min',\n        maxText: 'max'\n      },\n      tick: {\n        start: 0.1,\n        end: 0.9,\n        data: []\n      }\n    };\n  };\n  /**\n   * 初始化 TimeBar 的容器\n   */\n\n\n  TimeBar.prototype.initContainer = function () {\n    var graph = this.get('graph');\n    var _a = this._cfgs,\n        width = _a.width,\n        height = _a.height;\n    var className = this.get('className') || 'g6-component-timebar';\n    var container = this.get('container');\n    var graphContainer = this.get('graph').get('container');\n    var timeBarContainer;\n\n    if (!container) {\n      timeBarContainer = createDOM(\"<div class='\" + className + \"'></div>\");\n      modifyCSS(timeBarContainer, {\n        position: 'relative'\n      });\n    } else {\n      timeBarContainer = container;\n    }\n\n    graphContainer.appendChild(timeBarContainer);\n    this.set('timeBarContainer', timeBarContainer);\n    var canvas;\n    var renderer = graph.get('renderer');\n\n    if (renderer === 'SVG') {\n      canvas = new GSVGCanvas({\n        container: timeBarContainer,\n        width: width,\n        height: height\n      });\n    } else {\n      canvas = new GCanvas({\n        container: timeBarContainer,\n        width: width,\n        height: height\n      });\n    }\n\n    this.set('canvas', canvas);\n  };\n\n  TimeBar.prototype.init = function () {\n    this.initContainer();\n    var canvas = this.get('canvas');\n    var timeBarGroup = canvas.addGroup({\n      name: 'timebar-group'\n    });\n    this.set('timeBarGroup', timeBarGroup);\n    this.renderTrend();\n    this.initEvent();\n  };\n\n  TimeBar.prototype.renderTrend = function () {\n    var _a = this._cfgs,\n        width = _a.width,\n        x = _a.x,\n        y = _a.y,\n        padding = _a.padding,\n        type = _a.type,\n        trend = _a.trend,\n        slider = _a.slider,\n        controllerCfg = _a.controllerCfg;\n\n    var data = trend.data,\n        other = __rest(trend, [\"data\"]);\n\n    var realWidth = width - 2 * padding;\n    var defaultHeight = type === 'trend' ? DEFAULT_TREND_HEIGHT : DEFAULT_SIMPLE_HEIGHT;\n    var graph = this.get('graph');\n    var group = this.get('timeBarGroup');\n    var canvas = this.get('canvas');\n    var timebar = null;\n\n    if (type === 'trend' || type === 'simple') {\n      timebar = new TrendTimeBar(__assign(__assign({\n        graph: graph,\n        canvas: canvas,\n        group: group,\n        type: type,\n        x: x + padding,\n        y: type === 'trend' ? y + padding : y + padding + 15,\n        width: realWidth,\n        height: defaultHeight,\n        padding: padding,\n        trendCfg: __assign(__assign({}, other), {\n          data: data.map(function (d) {\n            return d.value;\n          })\n        })\n      }, slider), {\n        ticks: data.map(function (d) {\n          return d.date;\n        }),\n        handlerStyle: __assign(__assign({}, slider.handlerStyle), {\n          height: slider.height || defaultHeight\n        }),\n        controllerCfg: controllerCfg\n      }));\n    } else if (type === 'tick') {\n      var tick = this._cfgs.tick; // 刻度时间轴\n\n      timebar = new TimeBarSlice(__assign({\n        graph: graph,\n        canvas: canvas,\n        group: group,\n        x: x + padding,\n        y: y + padding\n      }, tick));\n    }\n\n    this.set('timebar', timebar);\n  };\n\n  TimeBar.prototype.filterData = function (evt) {\n    var value = evt.value;\n    var trendData = null;\n    var type = this._cfgs.type;\n\n    if (type === 'trend' || type === 'simple') {\n      trendData = this._cfgs.trend.data;\n    } else if (type === 'tick') {\n      trendData = this._cfgs.tick.data;\n    }\n\n    if (!trendData || trendData.length === 0) {\n      console.warn('请配置 TimeBar 组件的数据');\n      return;\n    }\n\n    var rangeChange = this.get('rangeChange');\n    var graph = this.get('graph');\n    var min = Math.round(trendData.length * value[0]);\n    var max = Math.round(trendData.length * value[1]);\n    max = max >= trendData.length ? trendData.length - 1 : max;\n    var minText = trendData[min].date;\n    var maxText = trendData[max].date;\n\n    if (type !== 'tick') {\n      var timebar = this.get('timebar');\n      timebar.setText(minText, maxText);\n    }\n\n    if (rangeChange) {\n      rangeChange(graph, minText, maxText);\n    } else {\n      // 自动过滤数据，并渲染 graph\n      var graphData = graph.save();\n\n      if (!this.cacheGraphData || this.cacheGraphData.nodes && this.cacheGraphData.nodes.length === 0) {\n        this.cacheGraphData = graphData;\n      } // 过滤不在 min 和 max 范围内的节点\n\n\n      var filterData = this.cacheGraphData.nodes.filter(function (d) {\n        return d.date >= minText && d.date <= maxText;\n      });\n      var nodeIds_1 = filterData.map(function (node) {\n        return node.id;\n      }); // 过滤 source 或 target 不在 min 和 max 范围内的边\n\n      var fileterEdges = this.cacheGraphData.edges.filter(function (edge) {\n        return nodeIds_1.includes(edge.source) && nodeIds_1.includes(edge.target);\n      });\n      graph.changeData({\n        nodes: filterData,\n        edges: fileterEdges\n      });\n    }\n  };\n\n  TimeBar.prototype.initEvent = function () {\n    var _this = this;\n\n    var start = 0;\n    var end = 0;\n    var type = this._cfgs.type;\n\n    if (!type || type === 'trend' || type === 'simple') {\n      start = this._cfgs.slider.start;\n      end = this._cfgs.slider.end;\n    } else if (type === 'tick') {\n      start = this._cfgs.tick.start;\n      end = this._cfgs.tick.end;\n    }\n\n    var graph = this.get('graph');\n    graph.on('afterrender', function () {\n      _this.filterData({\n        value: [start, end]\n      });\n    }); // 时间轴的值发生改变的事件\n\n    graph.on(VALUE_CHANGE, function (evt) {\n      // 范围变化\n      _this.filterData(evt);\n    });\n  };\n\n  TimeBar.prototype.destroy = function () {\n    var timebar = this.get('timebar');\n\n    if (timebar && timebar.destory) {\n      timebar.destory();\n    }\n\n    _super.prototype.destroy.call(this);\n\n    var timeBarContainer = this.get('timeBarContainer');\n\n    if (timeBarContainer) {\n      var container = this.get('container');\n\n      if (!container) {\n        container = this.get('graph').get('container');\n      }\n\n      container.removeChild(timeBarContainer);\n    }\n  };\n\n  return TimeBar;\n}(Base);\n\nexport default TimeBar;"]},"metadata":{},"sourceType":"module"}