{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\nimport { createHashMap, each } from 'zrender/esm/core/util';\nexport default function dataStack(ecModel) {\n  var stackInfoMap = createHashMap();\n  ecModel.eachSeries(function (seriesModel) {\n    var stack = seriesModel.get('stack');\n\n    if (stack) {\n      var stackInfoList = stackInfoMap.get(stack) || stackInfoMap.set(stack, []);\n      var data = seriesModel.getData();\n      var stackInfo = {\n        stackResultDimension: data.getCalculationInfo('stackResultDimension'),\n        stackedOverDimension: data.getCalculationInfo('stackedOverDimension'),\n        stackedDimension: data.getCalculationInfo('stackedDimension'),\n        stackedByDimension: data.getCalculationInfo('stackedByDimension'),\n        isStackedByIndex: data.getCalculationInfo('isStackedByIndex'),\n        data: data,\n        seriesModel: seriesModel\n      };\n\n      if (!stackInfo.stackedDimension || !(stackInfo.isStackedByIndex || stackInfo.stackedByDimension)) {\n        return;\n      }\n\n      stackInfoList.length && data.setCalculationInfo('stackedOnSeries', stackInfoList[stackInfoList.length - 1].seriesModel);\n      stackInfoList.push(stackInfo);\n    }\n  });\n  stackInfoMap.each(calculateStack);\n}\n\nfunction calculateStack(stackInfoList) {\n  each(stackInfoList, function (targetStackInfo, idxInStack) {\n    var resultVal = [];\n    var resultNaN = [NaN, NaN];\n    var dims = [targetStackInfo.stackResultDimension, targetStackInfo.stackedOverDimension];\n    var targetData = targetStackInfo.data;\n    var isStackedByIndex = targetStackInfo.isStackedByIndex;\n    var newData = targetData.map(dims, function (v0, v1, dataIndex) {\n      var sum = targetData.get(targetStackInfo.stackedDimension, dataIndex);\n\n      if (isNaN(sum)) {\n        return resultNaN;\n      }\n\n      var byValue;\n      var stackedDataRawIndex;\n\n      if (isStackedByIndex) {\n        stackedDataRawIndex = targetData.getRawIndex(dataIndex);\n      } else {\n        byValue = targetData.get(targetStackInfo.stackedByDimension, dataIndex);\n      }\n\n      var stackedOver = NaN;\n\n      for (var j = idxInStack - 1; j >= 0; j--) {\n        var stackInfo = stackInfoList[j];\n\n        if (!isStackedByIndex) {\n          stackedDataRawIndex = stackInfo.data.rawIndexOf(stackInfo.stackedByDimension, byValue);\n        }\n\n        if (stackedDataRawIndex >= 0) {\n          var val = stackInfo.data.getByRawIndex(stackInfo.stackResultDimension, stackedDataRawIndex);\n\n          if (sum >= 0 && val > 0 || sum <= 0 && val < 0) {\n            sum += val;\n            stackedOver = val;\n            break;\n          }\n        }\n      }\n\n      resultVal[0] = sum;\n      resultVal[1] = stackedOver;\n      return resultVal;\n    });\n    targetData.hostModel.setData(newData);\n    targetStackInfo.data = newData;\n  });\n}","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/echarts/esm/processor/dataStack.js"],"names":["createHashMap","each","dataStack","ecModel","stackInfoMap","eachSeries","seriesModel","stack","get","stackInfoList","set","data","getData","stackInfo","stackResultDimension","getCalculationInfo","stackedOverDimension","stackedDimension","stackedByDimension","isStackedByIndex","length","setCalculationInfo","push","calculateStack","targetStackInfo","idxInStack","resultVal","resultNaN","NaN","dims","targetData","newData","map","v0","v1","dataIndex","sum","isNaN","byValue","stackedDataRawIndex","getRawIndex","stackedOver","j","rawIndexOf","val","getByRawIndex","hostModel","setData"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\nimport { createHashMap, each } from 'zrender/esm/core/util';\nexport default function dataStack(ecModel) {\n  var stackInfoMap = createHashMap();\n  ecModel.eachSeries(function (seriesModel) {\n    var stack = seriesModel.get('stack');\n\n    if (stack) {\n      var stackInfoList = stackInfoMap.get(stack) || stackInfoMap.set(stack, []);\n      var data = seriesModel.getData();\n      var stackInfo = {\n        stackResultDimension: data.getCalculationInfo('stackResultDimension'),\n        stackedOverDimension: data.getCalculationInfo('stackedOverDimension'),\n        stackedDimension: data.getCalculationInfo('stackedDimension'),\n        stackedByDimension: data.getCalculationInfo('stackedByDimension'),\n        isStackedByIndex: data.getCalculationInfo('isStackedByIndex'),\n        data: data,\n        seriesModel: seriesModel\n      };\n\n      if (!stackInfo.stackedDimension || !(stackInfo.isStackedByIndex || stackInfo.stackedByDimension)) {\n        return;\n      }\n\n      stackInfoList.length && data.setCalculationInfo('stackedOnSeries', stackInfoList[stackInfoList.length - 1].seriesModel);\n      stackInfoList.push(stackInfo);\n    }\n  });\n  stackInfoMap.each(calculateStack);\n}\n\nfunction calculateStack(stackInfoList) {\n  each(stackInfoList, function (targetStackInfo, idxInStack) {\n    var resultVal = [];\n    var resultNaN = [NaN, NaN];\n    var dims = [targetStackInfo.stackResultDimension, targetStackInfo.stackedOverDimension];\n    var targetData = targetStackInfo.data;\n    var isStackedByIndex = targetStackInfo.isStackedByIndex;\n    var newData = targetData.map(dims, function (v0, v1, dataIndex) {\n      var sum = targetData.get(targetStackInfo.stackedDimension, dataIndex);\n\n      if (isNaN(sum)) {\n        return resultNaN;\n      }\n\n      var byValue;\n      var stackedDataRawIndex;\n\n      if (isStackedByIndex) {\n        stackedDataRawIndex = targetData.getRawIndex(dataIndex);\n      } else {\n        byValue = targetData.get(targetStackInfo.stackedByDimension, dataIndex);\n      }\n\n      var stackedOver = NaN;\n\n      for (var j = idxInStack - 1; j >= 0; j--) {\n        var stackInfo = stackInfoList[j];\n\n        if (!isStackedByIndex) {\n          stackedDataRawIndex = stackInfo.data.rawIndexOf(stackInfo.stackedByDimension, byValue);\n        }\n\n        if (stackedDataRawIndex >= 0) {\n          var val = stackInfo.data.getByRawIndex(stackInfo.stackResultDimension, stackedDataRawIndex);\n\n          if (sum >= 0 && val > 0 || sum <= 0 && val < 0) {\n            sum += val;\n            stackedOver = val;\n            break;\n          }\n        }\n      }\n\n      resultVal[0] = sum;\n      resultVal[1] = stackedOver;\n      return resultVal;\n    });\n    targetData.hostModel.setData(newData);\n    targetStackInfo.data = newData;\n  });\n}"]},"metadata":{},"sourceType":"module"}