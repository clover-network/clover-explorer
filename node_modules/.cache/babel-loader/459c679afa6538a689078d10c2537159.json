{"ast":null,"code":"import { AbstractMatrix } from '../matrix';\nexport default class WrapperMatrix1D extends AbstractMatrix {\n  constructor(data, options = {}) {\n    const {\n      rows = 1\n    } = options;\n\n    if (data.length % rows !== 0) {\n      throw new Error('the data length is not divisible by the number of rows');\n    }\n\n    super();\n    this.rows = rows;\n    this.columns = data.length / rows;\n    this.data = data;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    let index = this._calculateIndex(rowIndex, columnIndex);\n\n    this.data[index] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    let index = this._calculateIndex(rowIndex, columnIndex);\n\n    return this.data[index];\n  }\n\n  _calculateIndex(row, column) {\n    return row * this.columns + column;\n  }\n\n}","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/ml-matrix/src/wrap/WrapperMatrix1D.js"],"names":["AbstractMatrix","WrapperMatrix1D","constructor","data","options","rows","length","Error","columns","set","rowIndex","columnIndex","value","index","_calculateIndex","get","row","column"],"mappings":"AAAA,SAASA,cAAT,QAA+B,WAA/B;AAEA,eAAe,MAAMC,eAAN,SAA8BD,cAA9B,CAA6C;AAC1DE,EAAAA,WAAW,CAACC,IAAD,EAAOC,OAAO,GAAG,EAAjB,EAAqB;AAC9B,UAAM;AAAEC,MAAAA,IAAI,GAAG;AAAT,QAAeD,OAArB;;AAEA,QAAID,IAAI,CAACG,MAAL,GAAcD,IAAd,KAAuB,CAA3B,EAA8B;AAC5B,YAAM,IAAIE,KAAJ,CAAU,wDAAV,CAAN;AACD;;AACD;AACA,SAAKF,IAAL,GAAYA,IAAZ;AACA,SAAKG,OAAL,GAAeL,IAAI,CAACG,MAAL,GAAcD,IAA7B;AACA,SAAKF,IAAL,GAAYA,IAAZ;AACD;;AAEDM,EAAAA,GAAG,CAACC,QAAD,EAAWC,WAAX,EAAwBC,KAAxB,EAA+B;AAChC,QAAIC,KAAK,GAAG,KAAKC,eAAL,CAAqBJ,QAArB,EAA+BC,WAA/B,CAAZ;;AACA,SAAKR,IAAL,CAAUU,KAAV,IAAmBD,KAAnB;AACA,WAAO,IAAP;AACD;;AAEDG,EAAAA,GAAG,CAACL,QAAD,EAAWC,WAAX,EAAwB;AACzB,QAAIE,KAAK,GAAG,KAAKC,eAAL,CAAqBJ,QAArB,EAA+BC,WAA/B,CAAZ;;AACA,WAAO,KAAKR,IAAL,CAAUU,KAAV,CAAP;AACD;;AAEDC,EAAAA,eAAe,CAACE,GAAD,EAAMC,MAAN,EAAc;AAC3B,WAAOD,GAAG,GAAG,KAAKR,OAAX,GAAqBS,MAA5B;AACD;;AA1ByD","sourcesContent":["import { AbstractMatrix } from '../matrix';\n\nexport default class WrapperMatrix1D extends AbstractMatrix {\n  constructor(data, options = {}) {\n    const { rows = 1 } = options;\n\n    if (data.length % rows !== 0) {\n      throw new Error('the data length is not divisible by the number of rows');\n    }\n    super();\n    this.rows = rows;\n    this.columns = data.length / rows;\n    this.data = data;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    let index = this._calculateIndex(rowIndex, columnIndex);\n    this.data[index] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    let index = this._calculateIndex(rowIndex, columnIndex);\n    return this.data[index];\n  }\n\n  _calculateIndex(row, column) {\n    return row * this.columns + column;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}