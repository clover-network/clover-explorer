{"ast":null,"code":"import * as vec2 from '@antv/gl-matrix/lib/gl-matrix/vec2';\nimport { clamp } from '@antv/util';\n\nvec2.angle = function (v1, v2) {\n  var theta = vec2.dot(v1, v2) / (vec2.length(v1) * vec2.length(v2));\n  return Math.acos(clamp(theta, -1, 1));\n};\n/**\n * 向量 v1 到 向量 v2 夹角的方向\n * @param  {Array} v1 向量\n * @param  {Array} v2 向量\n * @return {Boolean} >= 0 顺时针 < 0 逆时针\n */\n\n\nvec2.direction = function (v1, v2) {\n  return v1[0] * v2[1] - v2[0] * v1[1];\n};\n\nvec2.angleTo = function (v1, v2, direct) {\n  var angle = vec2.angle(v1, v2);\n  var angleLargeThanPI = vec2.direction(v1, v2) >= 0;\n\n  if (direct) {\n    if (angleLargeThanPI) {\n      return Math.PI * 2 - angle;\n    }\n\n    return angle;\n  }\n\n  if (angleLargeThanPI) {\n    return angle;\n  }\n\n  return Math.PI * 2 - angle;\n};\n\nvec2.vertical = function (out, v, flag) {\n  if (flag) {\n    out[0] = v[1];\n    out[1] = -1 * v[0];\n  } else {\n    out[0] = -1 * v[1];\n    out[1] = v[0];\n  }\n\n  return out;\n};\n\nexport default vec2;","map":{"version":3,"sources":["../src/vec2.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,IAAZ,MAAsB,oCAAtB;AACA,SAAS,KAAT,QAAsB,YAAtB;;AAEA,IAAI,CAAC,KAAL,GAAa,UAAU,EAAV,EAAc,EAAd,EAAgB;AAC3B,MAAM,KAAK,GAAG,IAAI,CAAC,GAAL,CAAS,EAAT,EAAa,EAAb,KAAoB,IAAI,CAAC,MAAL,CAAY,EAAZ,IAAkB,IAAI,CAAC,MAAL,CAAY,EAAZ,CAAtC,CAAd;AACA,SAAO,IAAI,CAAC,IAAL,CAAU,KAAK,CAAC,KAAD,EAAQ,CAAC,CAAT,EAAY,CAAZ,CAAf,CAAP;AACD,CAHD;AAKA;;;;;AAKG;;;AACH,IAAI,CAAC,SAAL,GAAiB,UAAU,EAAV,EAAwB,EAAxB,EAAoC;AACnD,SAAO,EAAE,CAAC,CAAD,CAAF,GAAQ,EAAE,CAAC,CAAD,CAAV,GAAgB,EAAE,CAAC,CAAD,CAAF,GAAQ,EAAE,CAAC,CAAD,CAAjC;AACD,CAFD;;AAIA,IAAI,CAAC,OAAL,GAAe,UAAU,EAAV,EAAsB,EAAtB,EAAkC,MAAlC,EAAiD;AAC9D,MAAM,KAAK,GAAG,IAAI,CAAC,KAAL,CAAW,EAAX,EAAe,EAAf,CAAd;AACA,MAAM,gBAAgB,GAAG,IAAI,CAAC,SAAL,CAAe,EAAf,EAAmB,EAAnB,KAA0B,CAAnD;;AACA,MAAI,MAAJ,EAAY;AACV,QAAI,gBAAJ,EAAsB;AACpB,aAAO,IAAI,CAAC,EAAL,GAAU,CAAV,GAAc,KAArB;AACD;;AAED,WAAO,KAAP;AACD;;AAED,MAAI,gBAAJ,EAAsB;AACpB,WAAO,KAAP;AACD;;AACD,SAAO,IAAI,CAAC,EAAL,GAAU,CAAV,GAAc,KAArB;AACD,CAfD;;AAiBA,IAAI,CAAC,QAAL,GAAgB,UAAU,GAAV,EAAyB,CAAzB,EAAsC,IAAtC,EAAmD;AACjE,MAAI,IAAJ,EAAU;AACR,IAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAC,CAAC,CAAD,CAAV;AACA,IAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAC,CAAD,GAAK,CAAC,CAAC,CAAD,CAAf;AACD,GAHD,MAGO;AACL,IAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAC,CAAD,GAAK,CAAC,CAAC,CAAD,CAAf;AACA,IAAA,GAAG,CAAC,CAAD,CAAH,GAAS,CAAC,CAAC,CAAD,CAAV;AACD;;AAED,SAAO,GAAP;AACD,CAVD;;AAYA,eAAe,IAAf","sourceRoot":"","sourcesContent":["import * as vec2 from '@antv/gl-matrix/lib/gl-matrix/vec2';\nimport { clamp } from '@antv/util';\nvec2.angle = function (v1, v2) {\n    var theta = vec2.dot(v1, v2) / (vec2.length(v1) * vec2.length(v2));\n    return Math.acos(clamp(theta, -1, 1));\n};\n/**\n * 向量 v1 到 向量 v2 夹角的方向\n * @param  {Array} v1 向量\n * @param  {Array} v2 向量\n * @return {Boolean} >= 0 顺时针 < 0 逆时针\n */\nvec2.direction = function (v1, v2) {\n    return v1[0] * v2[1] - v2[0] * v1[1];\n};\nvec2.angleTo = function (v1, v2, direct) {\n    var angle = vec2.angle(v1, v2);\n    var angleLargeThanPI = vec2.direction(v1, v2) >= 0;\n    if (direct) {\n        if (angleLargeThanPI) {\n            return Math.PI * 2 - angle;\n        }\n        return angle;\n    }\n    if (angleLargeThanPI) {\n        return angle;\n    }\n    return Math.PI * 2 - angle;\n};\nvec2.vertical = function (out, v, flag) {\n    if (flag) {\n        out[0] = v[1];\n        out[1] = -1 * v[0];\n    }\n    else {\n        out[0] = -1 * v[1];\n        out[1] = v[0];\n    }\n    return out;\n};\nexport default vec2;\n//# sourceMappingURL=vec2.js.map"]},"metadata":{},"sourceType":"module"}