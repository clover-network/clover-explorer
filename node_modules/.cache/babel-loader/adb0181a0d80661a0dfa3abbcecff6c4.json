{"ast":null,"code":"import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport normalizeColor from 'normalize-css-color';\nimport React from 'react';\nimport { Text, TouchableHighlight, View } from 'react-native';\nimport { WithTheme } from '../style';\nimport AndroidStyles from './style/index';\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * number should be a color processed by `normalizeColor`\n * alpha should be number between 0 and 1\n */\n\nfunction setNormalizedColorAlpha(input, alpha) {\n  if (alpha < 0) {\n    alpha = 0;\n  } else if (alpha > 1) {\n    alpha = 1;\n  }\n\n  alpha = Math.round(alpha * 255); // magic bitshift guarantees we return an unsigned int\n  // tslint:disable-next-line:no-bitwise\n\n  return (input & 0xffffff00 | alpha) >>> 0;\n}\n\nvar SegmentedControl = function (_React$Component) {\n  _inherits(SegmentedControl, _React$Component);\n\n  function SegmentedControl(props) {\n    _classCallCheck(this, SegmentedControl);\n\n    var _this = _possibleConstructorReturn(this, (SegmentedControl.__proto__ || Object.getPrototypeOf(SegmentedControl)).call(this, props));\n\n    _this.state = {\n      selectedIndex: props.selectedIndex\n    };\n    return _this;\n  }\n\n  _createClass(SegmentedControl, [{\n    key: 'UNSAFE_componentWillReceiveProps',\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      if (nextProps.selectedIndex !== this.props.selectedIndex) {\n        this.setState({\n          selectedIndex: nextProps.selectedIndex\n        });\n      }\n    }\n  }, {\n    key: 'onPress',\n    value: function onPress(e, index, value) {\n      var _props = this.props,\n          disabled = _props.disabled,\n          onChange = _props.onChange,\n          onValueChange = _props.onValueChange;\n\n      if (!disabled) {\n        e.nativeEvent.selectedSegmentIndex = index;\n        e.nativeEvent.value = value;\n\n        if (onChange) {\n          onChange(e);\n        }\n\n        if (onValueChange) {\n          onValueChange(value);\n        }\n\n        this.setState({\n          selectedIndex: index\n        });\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props2 = this.props,\n          style = _props2.style,\n          disabled = _props2.disabled,\n          _props2$values = _props2.values,\n          values = _props2$values === undefined ? [] : _props2$values,\n          selectedTextColor = _props2.selectedTextColor;\n      var tintColor = this.props.tintColor;\n      return React.createElement(WithTheme, {\n        styles: this.props.styles,\n        themeStyles: AndroidStyles\n      }, function (styles, theme) {\n        var selectedIndex = _this2.state.selectedIndex;\n        tintColor = tintColor || theme.segmented_control_color;\n        var items = values.map(function (value, idx) {\n          var itemRadius = null;\n\n          if (idx === 0) {\n            itemRadius = styles.itemLeftRadius;\n          } else if (idx === values.length - 1) {\n            itemRadius = styles.itemRightRadius;\n          }\n\n          var itemStyle = [styles.item, itemRadius, {\n            backgroundColor: idx === selectedIndex ? tintColor : 'transparent',\n            borderColor: tintColor\n          }];\n          var underlayColor = idx === selectedIndex ? tintColor : '#' + setNormalizedColorAlpha(normalizeColor(tintColor), 0.3).toString(16);\n          return React.createElement(TouchableHighlight, {\n            disabled: disabled,\n            key: idx,\n            onPress: function onPress(e) {\n              return _this2.onPress(e, idx, value);\n            },\n            underlayColor: underlayColor,\n            style: itemStyle,\n            activeOpacity: 1\n          }, React.createElement(Text // tslint:disable-next-line:jsx-no-multiline-js\n          , {\n            style: [styles.itemText, {\n              color: idx === selectedIndex ? selectedTextColor : tintColor\n            }]\n          }, value));\n        });\n        var enabledOpacity = !disabled ? 1 : 0.5;\n        var segmentedStyle = {\n          opacity: enabledOpacity,\n          borderColor: tintColor\n        };\n        return React.createElement(View, {\n          style: [styles.segment, segmentedStyle, style]\n        }, items);\n      });\n    }\n  }]);\n\n  return SegmentedControl;\n}(React.Component);\n\nexport default SegmentedControl;\nSegmentedControl.defaultProps = {\n  selectedIndex: 0,\n  disabled: false,\n  values: [],\n  onChange: function onChange() {},\n  onValueChange: function onValueChange() {},\n  style: {},\n  selectedTextColor: '#fff'\n};","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/@ant-design/react-native/es/segmented-control/segmented.android.js"],"names":["_classCallCheck","_createClass","_possibleConstructorReturn","_inherits","normalizeColor","React","Text","TouchableHighlight","View","WithTheme","AndroidStyles","setNormalizedColorAlpha","input","alpha","Math","round","SegmentedControl","_React$Component","props","_this","__proto__","Object","getPrototypeOf","call","state","selectedIndex","key","value","UNSAFE_componentWillReceiveProps","nextProps","setState","onPress","e","index","_props","disabled","onChange","onValueChange","nativeEvent","selectedSegmentIndex","render","_this2","_props2","style","_props2$values","values","undefined","selectedTextColor","tintColor","createElement","styles","themeStyles","theme","segmented_control_color","items","map","idx","itemRadius","itemLeftRadius","length","itemRightRadius","itemStyle","item","backgroundColor","borderColor","underlayColor","toString","activeOpacity","itemText","color","enabledOpacity","segmentedStyle","opacity","segment","Component","defaultProps"],"mappings":"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","sourcesContent":["import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport normalizeColor from 'normalize-css-color';\nimport React from 'react';\nimport { Text, TouchableHighlight, View } from 'react-native';\nimport { WithTheme } from '../style';\nimport AndroidStyles from './style/index';\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n/**\n * number should be a color processed by `normalizeColor`\n * alpha should be number between 0 and 1\n */\nfunction setNormalizedColorAlpha(input, alpha) {\n    if (alpha < 0) {\n        alpha = 0;\n    } else if (alpha > 1) {\n        alpha = 1;\n    }\n    alpha = Math.round(alpha * 255);\n    // magic bitshift guarantees we return an unsigned int\n    // tslint:disable-next-line:no-bitwise\n    return (input & 0xffffff00 | alpha) >>> 0;\n}\n\nvar SegmentedControl = function (_React$Component) {\n    _inherits(SegmentedControl, _React$Component);\n\n    function SegmentedControl(props) {\n        _classCallCheck(this, SegmentedControl);\n\n        var _this = _possibleConstructorReturn(this, (SegmentedControl.__proto__ || Object.getPrototypeOf(SegmentedControl)).call(this, props));\n\n        _this.state = {\n            selectedIndex: props.selectedIndex\n        };\n        return _this;\n    }\n\n    _createClass(SegmentedControl, [{\n        key: 'UNSAFE_componentWillReceiveProps',\n        value: function UNSAFE_componentWillReceiveProps(nextProps) {\n            if (nextProps.selectedIndex !== this.props.selectedIndex) {\n                this.setState({\n                    selectedIndex: nextProps.selectedIndex\n                });\n            }\n        }\n    }, {\n        key: 'onPress',\n        value: function onPress(e, index, value) {\n            var _props = this.props,\n                disabled = _props.disabled,\n                onChange = _props.onChange,\n                onValueChange = _props.onValueChange;\n\n            if (!disabled) {\n                e.nativeEvent.selectedSegmentIndex = index;\n                e.nativeEvent.value = value;\n                if (onChange) {\n                    onChange(e);\n                }\n                if (onValueChange) {\n                    onValueChange(value);\n                }\n                this.setState({\n                    selectedIndex: index\n                });\n            }\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var _this2 = this;\n\n            var _props2 = this.props,\n                style = _props2.style,\n                disabled = _props2.disabled,\n                _props2$values = _props2.values,\n                values = _props2$values === undefined ? [] : _props2$values,\n                selectedTextColor = _props2.selectedTextColor;\n            var tintColor = this.props.tintColor;\n\n            return React.createElement(\n                WithTheme,\n                { styles: this.props.styles, themeStyles: AndroidStyles },\n                function (styles, theme) {\n                    var selectedIndex = _this2.state.selectedIndex;\n                    tintColor = tintColor || theme.segmented_control_color;\n                    var items = values.map(function (value, idx) {\n                        var itemRadius = null;\n                        if (idx === 0) {\n                            itemRadius = styles.itemLeftRadius;\n                        } else if (idx === values.length - 1) {\n                            itemRadius = styles.itemRightRadius;\n                        }\n                        var itemStyle = [styles.item, itemRadius, {\n                            backgroundColor: idx === selectedIndex ? tintColor : 'transparent',\n                            borderColor: tintColor\n                        }];\n                        var underlayColor = idx === selectedIndex ? tintColor : '#' + setNormalizedColorAlpha(normalizeColor(tintColor), 0.3).toString(16);\n                        return React.createElement(\n                            TouchableHighlight,\n                            { disabled: disabled, key: idx, onPress: function onPress(e) {\n                                    return _this2.onPress(e, idx, value);\n                                }, underlayColor: underlayColor, style: itemStyle, activeOpacity: 1 },\n                            React.createElement(\n                                Text\n                                // tslint:disable-next-line:jsx-no-multiline-js\n                                ,\n                                { style: [styles.itemText, { color: idx === selectedIndex ? selectedTextColor : tintColor }] },\n                                value\n                            )\n                        );\n                    });\n                    var enabledOpacity = !disabled ? 1 : 0.5;\n                    var segmentedStyle = {\n                        opacity: enabledOpacity,\n                        borderColor: tintColor\n                    };\n                    return React.createElement(\n                        View,\n                        { style: [styles.segment, segmentedStyle, style] },\n                        items\n                    );\n                }\n            );\n        }\n    }]);\n\n    return SegmentedControl;\n}(React.Component);\n\nexport default SegmentedControl;\n\nSegmentedControl.defaultProps = {\n    selectedIndex: 0,\n    disabled: false,\n    values: [],\n    onChange: function onChange() {},\n    onValueChange: function onValueChange() {},\n\n    style: {},\n    selectedTextColor: '#fff'\n};"]},"metadata":{},"sourceType":"module"}