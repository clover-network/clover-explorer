{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\n\nvar tslib_1 = require(\"tslib\");\n\nvar Path_1 = require(\"../Path\");\n\nvar subPixelOptimize_1 = require(\"../helper/subPixelOptimize\");\n\nvar subPixelOptimizeOutputShape = {};\n\nvar LineShape = function () {\n  function LineShape() {\n    this.x1 = 0;\n    this.y1 = 0;\n    this.x2 = 0;\n    this.y2 = 0;\n    this.percent = 1;\n  }\n\n  return LineShape;\n}();\n\nvar Line = function (_super) {\n  tslib_1.__extends(Line, _super);\n\n  function Line(opts) {\n    return _super.call(this, opts) || this;\n  }\n\n  Line.prototype.getDefaultStyle = function () {\n    return {\n      stroke: '#000',\n      fill: null\n    };\n  };\n\n  Line.prototype.getDefaultShape = function () {\n    return new LineShape();\n  };\n\n  Line.prototype.buildPath = function (ctx, shape) {\n    var x1;\n    var y1;\n    var x2;\n    var y2;\n\n    if (this.subPixelOptimize) {\n      var optimizedShape = subPixelOptimize_1.subPixelOptimizeLine(subPixelOptimizeOutputShape, shape, this.style);\n      x1 = optimizedShape.x1;\n      y1 = optimizedShape.y1;\n      x2 = optimizedShape.x2;\n      y2 = optimizedShape.y2;\n    } else {\n      x1 = shape.x1;\n      y1 = shape.y1;\n      x2 = shape.x2;\n      y2 = shape.y2;\n    }\n\n    var percent = shape.percent;\n\n    if (percent === 0) {\n      return;\n    }\n\n    ctx.moveTo(x1, y1);\n\n    if (percent < 1) {\n      x2 = x1 * (1 - percent) + x2 * percent;\n      y2 = y1 * (1 - percent) + y2 * percent;\n    }\n\n    ctx.lineTo(x2, y2);\n  };\n\n  Line.prototype.pointAt = function (p) {\n    var shape = this.shape;\n    return [shape.x1 * (1 - p) + shape.x2 * p, shape.y1 * (1 - p) + shape.y2 * p];\n  };\n\n  return Line;\n}(Path_1[\"default\"]);\n\nLine.prototype.type = 'line';\nexports[\"default\"] = Line;","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/zrender/lib/graphic/shape/Line.js"],"names":["exports","__esModule","tslib_1","require","Path_1","subPixelOptimize_1","subPixelOptimizeOutputShape","LineShape","x1","y1","x2","y2","percent","Line","_super","__extends","opts","call","prototype","getDefaultStyle","stroke","fill","getDefaultShape","buildPath","ctx","shape","subPixelOptimize","optimizedShape","subPixelOptimizeLine","style","moveTo","lineTo","pointAt","p","type"],"mappings":"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","sourcesContent":["\"use strict\";\nexports.__esModule = true;\nvar tslib_1 = require(\"tslib\");\nvar Path_1 = require(\"../Path\");\nvar subPixelOptimize_1 = require(\"../helper/subPixelOptimize\");\nvar subPixelOptimizeOutputShape = {};\nvar LineShape = (function () {\n    function LineShape() {\n        this.x1 = 0;\n        this.y1 = 0;\n        this.x2 = 0;\n        this.y2 = 0;\n        this.percent = 1;\n    }\n    return LineShape;\n}());\nvar Line = (function (_super) {\n    tslib_1.__extends(Line, _super);\n    function Line(opts) {\n        return _super.call(this, opts) || this;\n    }\n    Line.prototype.getDefaultStyle = function () {\n        return {\n            stroke: '#000',\n            fill: null\n        };\n    };\n    Line.prototype.getDefaultShape = function () {\n        return new LineShape();\n    };\n    Line.prototype.buildPath = function (ctx, shape) {\n        var x1;\n        var y1;\n        var x2;\n        var y2;\n        if (this.subPixelOptimize) {\n            var optimizedShape = subPixelOptimize_1.subPixelOptimizeLine(subPixelOptimizeOutputShape, shape, this.style);\n            x1 = optimizedShape.x1;\n            y1 = optimizedShape.y1;\n            x2 = optimizedShape.x2;\n            y2 = optimizedShape.y2;\n        }\n        else {\n            x1 = shape.x1;\n            y1 = shape.y1;\n            x2 = shape.x2;\n            y2 = shape.y2;\n        }\n        var percent = shape.percent;\n        if (percent === 0) {\n            return;\n        }\n        ctx.moveTo(x1, y1);\n        if (percent < 1) {\n            x2 = x1 * (1 - percent) + x2 * percent;\n            y2 = y1 * (1 - percent) + y2 * percent;\n        }\n        ctx.lineTo(x2, y2);\n    };\n    Line.prototype.pointAt = function (p) {\n        var shape = this.shape;\n        return [\n            shape.x1 * (1 - p) + shape.x2 * p,\n            shape.y1 * (1 - p) + shape.y2 * p\n        ];\n    };\n    return Line;\n}(Path_1[\"default\"]));\nLine.prototype.type = 'line';\nexports[\"default\"] = Line;\n"]},"metadata":{},"sourceType":"script"}