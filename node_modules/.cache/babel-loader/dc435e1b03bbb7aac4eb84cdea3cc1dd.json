{"ast":null,"code":"var separateTree = require('./separate-root');\n\nvar VALID_DIRECTIONS = ['LR', // left to right\n'RL', // right to left\n'TB', // top to bottom\n'BT', // bottom to top\n'H', // horizontal\n'V' // vertical\n];\nvar HORIZONTAL_DIRECTIONS = ['LR', 'RL', 'H'];\n\nvar isHorizontal = function isHorizontal(direction) {\n  return HORIZONTAL_DIRECTIONS.indexOf(direction) > -1;\n};\n\nvar DEFAULT_DIRECTION = VALID_DIRECTIONS[0];\n\nmodule.exports = function (root, options, layoutAlgrithm) {\n  var direction = options.direction || DEFAULT_DIRECTION;\n  options.isHorizontal = isHorizontal(direction);\n\n  if (direction && VALID_DIRECTIONS.indexOf(direction) === -1) {\n    throw new TypeError(\"Invalid direction: \" + direction);\n  }\n\n  if (direction === VALID_DIRECTIONS[0]) {\n    // LR\n    layoutAlgrithm(root, options);\n  } else if (direction === VALID_DIRECTIONS[1]) {\n    // RL\n    layoutAlgrithm(root, options);\n    root.right2left();\n  } else if (direction === VALID_DIRECTIONS[2]) {\n    // TB\n    layoutAlgrithm(root, options);\n  } else if (direction === VALID_DIRECTIONS[3]) {\n    // BT\n    layoutAlgrithm(root, options);\n    root.bottom2top();\n  } else if (direction === VALID_DIRECTIONS[4] || direction === VALID_DIRECTIONS[5]) {\n    // H or V\n    // separate into left and right trees\n    var _separateTree = separateTree(root, options),\n        left = _separateTree.left,\n        right = _separateTree.right; // do layout for left and right trees\n\n\n    layoutAlgrithm(left, options);\n    layoutAlgrithm(right, options);\n    options.isHorizontal ? left.right2left() : left.bottom2top(); // combine left and right trees\n\n    right.translate(left.x - right.x, left.y - right.y); // translate root\n\n    root.x = left.x;\n    root.y = right.y;\n    var bb = root.getBoundingBox();\n\n    if (options.isHorizontal) {\n      if (bb.top < 0) {\n        root.translate(0, -bb.top);\n      }\n    } else {\n      if (bb.left < 0) {\n        root.translate(-bb.left, 0);\n      }\n    }\n  } // fixed root position, default value is true\n\n\n  var fixedRoot = options.fixedRoot;\n  if (fixedRoot === undefined) fixedRoot = true;\n\n  if (fixedRoot) {\n    root.translate(-(root.x + root.width / 2 + root.hgap), -(root.y + root.height / 2 + root.vgap));\n  }\n\n  return root;\n};","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/@antv/hierarchy/lib/layout/do-layout.js"],"names":["separateTree","require","VALID_DIRECTIONS","HORIZONTAL_DIRECTIONS","isHorizontal","direction","indexOf","DEFAULT_DIRECTION","module","exports","root","options","layoutAlgrithm","TypeError","right2left","bottom2top","_separateTree","left","right","translate","x","y","bb","getBoundingBox","top","fixedRoot","undefined","width","hgap","height","vgap"],"mappings":"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","sourcesContent":["var separateTree = require('./separate-root');\n\nvar VALID_DIRECTIONS = ['LR', // left to right\n'RL', // right to left\n'TB', // top to bottom\n'BT', // bottom to top\n'H', // horizontal\n'V' // vertical\n];\nvar HORIZONTAL_DIRECTIONS = ['LR', 'RL', 'H'];\n\nvar isHorizontal = function isHorizontal(direction) {\n  return HORIZONTAL_DIRECTIONS.indexOf(direction) > -1;\n};\n\nvar DEFAULT_DIRECTION = VALID_DIRECTIONS[0];\n\nmodule.exports = function (root, options, layoutAlgrithm) {\n  var direction = options.direction || DEFAULT_DIRECTION;\n  options.isHorizontal = isHorizontal(direction);\n\n  if (direction && VALID_DIRECTIONS.indexOf(direction) === -1) {\n    throw new TypeError(\"Invalid direction: \" + direction);\n  }\n\n  if (direction === VALID_DIRECTIONS[0]) {\n    // LR\n    layoutAlgrithm(root, options);\n  } else if (direction === VALID_DIRECTIONS[1]) {\n    // RL\n    layoutAlgrithm(root, options);\n    root.right2left();\n  } else if (direction === VALID_DIRECTIONS[2]) {\n    // TB\n    layoutAlgrithm(root, options);\n  } else if (direction === VALID_DIRECTIONS[3]) {\n    // BT\n    layoutAlgrithm(root, options);\n    root.bottom2top();\n  } else if (direction === VALID_DIRECTIONS[4] || direction === VALID_DIRECTIONS[5]) {\n    // H or V\n    // separate into left and right trees\n    var _separateTree = separateTree(root, options),\n        left = _separateTree.left,\n        right = _separateTree.right; // do layout for left and right trees\n\n\n    layoutAlgrithm(left, options);\n    layoutAlgrithm(right, options);\n    options.isHorizontal ? left.right2left() : left.bottom2top(); // combine left and right trees\n\n    right.translate(left.x - right.x, left.y - right.y); // translate root\n\n    root.x = left.x;\n    root.y = right.y;\n    var bb = root.getBoundingBox();\n\n    if (options.isHorizontal) {\n      if (bb.top < 0) {\n        root.translate(0, -bb.top);\n      }\n    } else {\n      if (bb.left < 0) {\n        root.translate(-bb.left, 0);\n      }\n    }\n  } // fixed root position, default value is true\n\n\n  var fixedRoot = options.fixedRoot;\n  if (fixedRoot === undefined) fixedRoot = true;\n\n  if (fixedRoot) {\n    root.translate(-(root.x + root.width / 2 + root.hgap), -(root.y + root.height / 2 + root.vgap));\n  }\n\n  return root;\n};"]},"metadata":{},"sourceType":"script"}