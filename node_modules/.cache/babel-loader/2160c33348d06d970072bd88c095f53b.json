{"ast":null,"code":"/**\n * Simplified from https://github.com/zertosh/invariant.\n */\nimport { __spreadArrays } from \"tslib\";\nexport var LEVEL;\n\n(function (LEVEL) {\n  LEVEL[\"ERROR\"] = \"error\";\n  LEVEL[\"WARN\"] = \"warn\";\n  LEVEL[\"INFO\"] = \"log\";\n})(LEVEL || (LEVEL = {}));\n\nvar BRAND = 'AntV/G2Plot';\n/**\n * 获取错误消息\n * @param format\n * @param args\n */\n\nfunction getMessage(format) {\n  var args = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    args[_i - 1] = arguments[_i];\n  }\n\n  var argIndex = 0;\n  return BRAND + \": \" + format.replace(/%s/g, function () {\n    return \"\" + args[argIndex++];\n  });\n}\n/**\n * invariant error\n * @param condition\n * @param format\n * @param args\n */\n\n\nexport function invariant(condition, format) {\n  var args = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    args[_i - 2] = arguments[_i];\n  }\n\n  if (!condition) {\n    var error = new Error(getMessage.apply(void 0, __spreadArrays([format], args)));\n    error.name = BRAND; // error.framesToPop = 1; // we don't care about invariant's own frame\n\n    throw error;\n  }\n}\n/**\n * 打印语句\n * @param level\n * @param condition\n * @param format\n * @param args\n */\n\nexport function log(level, condition, format) {\n  var args = [];\n\n  for (var _i = 3; _i < arguments.length; _i++) {\n    args[_i - 3] = arguments[_i];\n  }\n\n  if (!condition) {\n    console[level](getMessage.apply(void 0, __spreadArrays([format], args)));\n  }\n}","map":{"version":3,"sources":["../../src/utils/invariant.ts"],"names":[],"mappings":"AAAA;;AAEG;;AAEH,OAAA,IAAY,KAAZ;;AAAA,CAAA,UAAY,KAAZ,EAAiB;AACf,EAAA,KAAA,CAAA,OAAA,CAAA,GAAA,OAAA;AACA,EAAA,KAAA,CAAA,MAAA,CAAA,GAAA,MAAA;AACA,EAAA,KAAA,CAAA,MAAA,CAAA,GAAA,KAAA;AACD,CAJD,EAAY,KAAK,KAAL,KAAK,GAAA,EAAA,CAAjB;;AAMA,IAAM,KAAK,GAAG,aAAd;AAEA;;;;AAIG;;AACH,SAAS,UAAT,CAAoB,MAApB,EAAkC;AAAE,MAAA,IAAA,GAAA,EAAA;;OAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAc;AAAd,IAAA,IAAA,CAAA,EAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AAClC,MAAI,QAAQ,GAAG,CAAf;AACA,SAAU,KAAK,GAAA,IAAL,GAAU,MAAM,CAAC,OAAP,CAAe,KAAf,EAAsB,YAAA;AAAc,WAAA,KAAG,IAAI,CAAC,QAAR,EAAO,CAAP;AAAqB,GAAzD,CAApB;AACD;AAED;;;;;AAKG;;;AACH,OAAM,SAAU,SAAV,CAAoB,SAApB,EAAwC,MAAxC,EAAsD;AAAE,MAAA,IAAA,GAAA,EAAA;;OAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAc;AAAd,IAAA,IAAA,CAAA,EAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AAC5D,MAAI,CAAC,SAAL,EAAgB;AACd,QAAM,KAAK,GAAG,IAAI,KAAJ,CAAU,UAAU,CAAA,KAAV,CAAU,KAAA,CAAV,EAAU,cAAA,CAAA,CAAC,MAAD,CAAA,EAAY,IAAZ,CAAV,CAAV,CAAd;AACA,IAAA,KAAK,CAAC,IAAN,GAAa,KAAb,CAFc,CAGd;;AACA,UAAM,KAAN;AACD;AACF;AAED;;;;;;AAMG;;AACH,OAAM,SAAU,GAAV,CAAc,KAAd,EAA4B,SAA5B,EAAgD,MAAhD,EAAsD;AAAE,MAAA,IAAA,GAAA,EAAA;;OAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAc;AAAd,IAAA,IAAA,CAAA,EAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AAC5D,MAAI,CAAC,SAAL,EAAgB;AACd,IAAA,OAAO,CAAC,KAAD,CAAP,CAAe,UAAU,CAAA,KAAV,CAAU,KAAA,CAAV,EAAU,cAAA,CAAA,CAAC,MAAD,CAAA,EAAY,IAAZ,CAAV,CAAf;AACD;AACF","sourcesContent":["/**\n * Simplified from https://github.com/zertosh/invariant.\n */\n\nexport enum LEVEL {\n  ERROR = 'error',\n  WARN = 'warn',\n  INFO = 'log',\n}\n\nconst BRAND = 'AntV/G2Plot';\n\n/**\n * 获取错误消息\n * @param format\n * @param args\n */\nfunction getMessage(format: string, ...args: any[]): string {\n  let argIndex = 0;\n  return `${BRAND}: ${format.replace(/%s/g, (): string => `${args[argIndex++]}`)}`;\n}\n\n/**\n * invariant error\n * @param condition\n * @param format\n * @param args\n */\nexport function invariant(condition: boolean, format: string, ...args: any[]): void {\n  if (!condition) {\n    const error = new Error(getMessage(format, ...args));\n    error.name = BRAND;\n    // error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n\n/**\n * 打印语句\n * @param level\n * @param condition\n * @param format\n * @param args\n */\nexport function log(level: LEVEL, condition: boolean, format, ...args: any[]): void {\n  if (!condition) {\n    console[level](getMessage(format, ...args));\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}