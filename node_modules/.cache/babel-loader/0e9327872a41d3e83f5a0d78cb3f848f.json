{"ast":null,"code":"var Path = require(\"../Path\");\n/**\n * 内外旋轮曲线\n * @module zrender/graphic/shape/Trochold\n */\n\n\nvar cos = Math.cos;\nvar sin = Math.sin;\n\nvar _default = Path.extend({\n  type: 'trochoid',\n  shape: {\n    cx: 0,\n    cy: 0,\n    r: 0,\n    r0: 0,\n    d: 0,\n    location: 'out'\n  },\n  style: {\n    stroke: '#000',\n    fill: null\n  },\n  buildPath: function (ctx, shape) {\n    var x1;\n    var y1;\n    var x2;\n    var y2;\n    var R = shape.r;\n    var r = shape.r0;\n    var d = shape.d;\n    var offsetX = shape.cx;\n    var offsetY = shape.cy;\n    var delta = shape.location === 'out' ? 1 : -1;\n\n    if (shape.location && R <= r) {\n      return;\n    }\n\n    var num = 0;\n    var i = 1;\n    var theta;\n    x1 = (R + delta * r) * cos(0) - delta * d * cos(0) + offsetX;\n    y1 = (R + delta * r) * sin(0) - d * sin(0) + offsetY;\n    ctx.moveTo(x1, y1); // 计算结束时的i\n\n    do {\n      num++;\n    } while (r * num % (R + delta * r) !== 0);\n\n    do {\n      theta = Math.PI / 180 * i;\n      x2 = (R + delta * r) * cos(theta) - delta * d * cos((R / r + delta) * theta) + offsetX;\n      y2 = (R + delta * r) * sin(theta) - d * sin((R / r + delta) * theta) + offsetY;\n      ctx.lineTo(x2, y2);\n      i++;\n    } while (i <= r * num / (R + delta * r) * 360);\n  }\n});\n\nmodule.exports = _default;","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/zrender/lib/graphic/shape/Trochoid.js"],"names":["Path","require","cos","Math","sin","_default","extend","type","shape","cx","cy","r","r0","d","location","style","stroke","fill","buildPath","ctx","x1","y1","x2","y2","R","offsetX","offsetY","delta","num","i","theta","moveTo","PI","lineTo","module","exports"],"mappings":"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","sourcesContent":["var Path = require(\"../Path\");\n\n/**\n * 内外旋轮曲线\n * @module zrender/graphic/shape/Trochold\n */\nvar cos = Math.cos;\nvar sin = Math.sin;\n\nvar _default = Path.extend({\n  type: 'trochoid',\n  shape: {\n    cx: 0,\n    cy: 0,\n    r: 0,\n    r0: 0,\n    d: 0,\n    location: 'out'\n  },\n  style: {\n    stroke: '#000',\n    fill: null\n  },\n  buildPath: function (ctx, shape) {\n    var x1;\n    var y1;\n    var x2;\n    var y2;\n    var R = shape.r;\n    var r = shape.r0;\n    var d = shape.d;\n    var offsetX = shape.cx;\n    var offsetY = shape.cy;\n    var delta = shape.location === 'out' ? 1 : -1;\n\n    if (shape.location && R <= r) {\n      return;\n    }\n\n    var num = 0;\n    var i = 1;\n    var theta;\n    x1 = (R + delta * r) * cos(0) - delta * d * cos(0) + offsetX;\n    y1 = (R + delta * r) * sin(0) - d * sin(0) + offsetY;\n    ctx.moveTo(x1, y1); // 计算结束时的i\n\n    do {\n      num++;\n    } while (r * num % (R + delta * r) !== 0);\n\n    do {\n      theta = Math.PI / 180 * i;\n      x2 = (R + delta * r) * cos(theta) - delta * d * cos((R / r + delta) * theta) + offsetX;\n      y2 = (R + delta * r) * sin(theta) - d * sin((R / r + delta) * theta) + offsetY;\n      ctx.lineTo(x2, y2);\n      i++;\n    } while (i <= r * num / (R + delta * r) * 360);\n  }\n});\n\nmodule.exports = _default;"]},"metadata":{},"sourceType":"script"}