{"ast":null,"code":"import adjMatrix from './adjacent-matrix';\n\nvar floydWarshall = function floydWarshall(graph, directed) {\n  var adjacentMatrix = graph.get('adjMatrix');\n\n  if (!adjacentMatrix) {\n    adjacentMatrix = adjMatrix(graph, directed);\n  }\n\n  var dist = [];\n  var size = adjacentMatrix.length;\n\n  for (var i = 0; i < size; i += 1) {\n    dist[i] = [];\n\n    for (var j = 0; j < size; j += 1) {\n      if (i === j) {\n        dist[i][j] = 0;\n      } else if (adjacentMatrix[i][j] === 0 || !adjacentMatrix[i][j]) {\n        dist[i][j] = Infinity;\n      } else {\n        dist[i][j] = adjacentMatrix[i][j];\n      }\n    }\n  } // floyd\n\n\n  for (var k = 0; k < size; k += 1) {\n    for (var i = 0; i < size; i += 1) {\n      for (var j = 0; j < size; j += 1) {\n        if (dist[i][j] > dist[i][k] + dist[k][j]) {\n          dist[i][j] = dist[i][k] + dist[k][j];\n        }\n      }\n    }\n  }\n\n  return dist;\n};\n\nexport default floydWarshall;","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/@antv/g6/es/algorithm/floydWarshall.js"],"names":["adjMatrix","floydWarshall","graph","directed","adjacentMatrix","get","dist","size","length","i","j","Infinity","k"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,mBAAtB;;AAEA,IAAIC,aAAa,GAAG,SAASA,aAAT,CAAuBC,KAAvB,EAA8BC,QAA9B,EAAwC;AAC1D,MAAIC,cAAc,GAAGF,KAAK,CAACG,GAAN,CAAU,WAAV,CAArB;;AAEA,MAAI,CAACD,cAAL,EAAqB;AACnBA,IAAAA,cAAc,GAAGJ,SAAS,CAACE,KAAD,EAAQC,QAAR,CAA1B;AACD;;AAED,MAAIG,IAAI,GAAG,EAAX;AACA,MAAIC,IAAI,GAAGH,cAAc,CAACI,MAA1B;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAApB,EAA0BE,CAAC,IAAI,CAA/B,EAAkC;AAChCH,IAAAA,IAAI,CAACG,CAAD,CAAJ,GAAU,EAAV;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAApB,EAA0BG,CAAC,IAAI,CAA/B,EAAkC;AAChC,UAAID,CAAC,KAAKC,CAAV,EAAa;AACXJ,QAAAA,IAAI,CAACG,CAAD,CAAJ,CAAQC,CAAR,IAAa,CAAb;AACD,OAFD,MAEO,IAAIN,cAAc,CAACK,CAAD,CAAd,CAAkBC,CAAlB,MAAyB,CAAzB,IAA8B,CAACN,cAAc,CAACK,CAAD,CAAd,CAAkBC,CAAlB,CAAnC,EAAyD;AAC9DJ,QAAAA,IAAI,CAACG,CAAD,CAAJ,CAAQC,CAAR,IAAaC,QAAb;AACD,OAFM,MAEA;AACLL,QAAAA,IAAI,CAACG,CAAD,CAAJ,CAAQC,CAAR,IAAaN,cAAc,CAACK,CAAD,CAAd,CAAkBC,CAAlB,CAAb;AACD;AACF;AACF,GAtByD,CAsBxD;;;AAGF,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,IAApB,EAA0BK,CAAC,IAAI,CAA/B,EAAkC;AAChC,SAAK,IAAIH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAApB,EAA0BE,CAAC,IAAI,CAA/B,EAAkC;AAChC,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAApB,EAA0BG,CAAC,IAAI,CAA/B,EAAkC;AAChC,YAAIJ,IAAI,CAACG,CAAD,CAAJ,CAAQC,CAAR,IAAaJ,IAAI,CAACG,CAAD,CAAJ,CAAQG,CAAR,IAAaN,IAAI,CAACM,CAAD,CAAJ,CAAQF,CAAR,CAA9B,EAA0C;AACxCJ,UAAAA,IAAI,CAACG,CAAD,CAAJ,CAAQC,CAAR,IAAaJ,IAAI,CAACG,CAAD,CAAJ,CAAQG,CAAR,IAAaN,IAAI,CAACM,CAAD,CAAJ,CAAQF,CAAR,CAA1B;AACD;AACF;AACF;AACF;;AAED,SAAOJ,IAAP;AACD,CApCD;;AAsCA,eAAeL,aAAf","sourcesContent":["import adjMatrix from './adjacent-matrix';\n\nvar floydWarshall = function floydWarshall(graph, directed) {\n  var adjacentMatrix = graph.get('adjMatrix');\n\n  if (!adjacentMatrix) {\n    adjacentMatrix = adjMatrix(graph, directed);\n  }\n\n  var dist = [];\n  var size = adjacentMatrix.length;\n\n  for (var i = 0; i < size; i += 1) {\n    dist[i] = [];\n\n    for (var j = 0; j < size; j += 1) {\n      if (i === j) {\n        dist[i][j] = 0;\n      } else if (adjacentMatrix[i][j] === 0 || !adjacentMatrix[i][j]) {\n        dist[i][j] = Infinity;\n      } else {\n        dist[i][j] = adjacentMatrix[i][j];\n      }\n    }\n  } // floyd\n\n\n  for (var k = 0; k < size; k += 1) {\n    for (var i = 0; i < size; i += 1) {\n      for (var j = 0; j < size; j += 1) {\n        if (dist[i][j] > dist[i][k] + dist[k][j]) {\n          dist[i][j] = dist[i][k] + dist[k][j];\n        }\n      }\n    }\n  }\n\n  return dist;\n};\n\nexport default floydWarshall;"]},"metadata":{},"sourceType":"module"}