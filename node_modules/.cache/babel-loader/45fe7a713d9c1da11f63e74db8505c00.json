{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport deepMix from '@antv/util/lib/deep-mix';\nimport isString from '@antv/util/lib/is-string';\nimport { traverseTree } from '../../util/graphic';\nvar treeGroup = null;\n\nvar CustomGroup =\n/** @class */\nfunction () {\n  function CustomGroup(graph) {\n    this.graph = graph;\n    var groupStyle = graph.get('groupStyle');\n    this.styles = deepMix({}, CustomGroup.getDefaultCfg(), groupStyle); // 创建的群组集合\n\n    this.customGroup = {};\n    this.delegateInGroup = {};\n    this.nodePoint = [];\n    this.destroyed = false;\n  }\n\n  CustomGroup.getDefaultCfg = function () {\n    return {\n      default: {\n        lineWidth: 1,\n        stroke: '#A3B1BF',\n        // lineDash: [ 5, 5 ],\n        strokeOpacity: 0.9,\n        fill: '#F3F9FF',\n        fillOpacity: 0.8,\n        opacity: 0.8,\n        disCoefficient: 0.6,\n        minDis: 30,\n        maxDis: 30\n      },\n      hover: {\n        stroke: '#faad14',\n        fill: '#ffe58f',\n        fillOpacity: 0.3,\n        opacity: 0.3,\n        lineWidth: 3\n      },\n      // 收起状态样式\n      collapse: {\n        r: 30,\n        width: 80,\n        height: 40,\n        // lineDash: [ 5, 5 ],\n        stroke: '#A3B1BF',\n        lineWidth: 3,\n        fill: '#F3F9FF',\n        offsetX: -15,\n        offsetY: 5\n      },\n      icon: 'https://gw.alipayobjects.com/zos/rmsportal/MXXetJAxlqrbisIuZxDO.svg',\n      operatorBtn: {\n        collapse: {\n          img: 'https://gw.alipayobjects.com/zos/rmsportal/uZVdwjJGqDooqKLKtvGA.svg',\n          width: 16,\n          height: 16\n        },\n        expand: {\n          width: 16,\n          height: 16,\n          img: 'https://gw.alipayobjects.com/zos/rmsportal/MXXetJAxlqrbisIuZxDO.svg'\n        }\n      },\n      visible: false\n    };\n  };\n  /**\n   * 生成群组\n   * @param {string} groupId 群组ID\n   * @param {array} nodes 群组中的节点集合\n   * @param {string} type 群组类型，默认为circle，支持rect\n   * @param {number} zIndex 群组层级，默认为0\n   * @param {boolean} updateDataModel 是否更新节点数据，默认为false，只有当手动创建group时才为true\n   * @param {object} title 分组标题配置\n   * @memberof ItemGroup\n   * @return {object} null\n   */\n\n\n  CustomGroup.prototype.create = function (groupId, nodes, type, zIndex, updateDataModel, title) {\n    if (type === void 0) {\n      type = 'circle';\n    }\n\n    if (zIndex === void 0) {\n      zIndex = 0;\n    }\n\n    if (updateDataModel === void 0) {\n      updateDataModel = false;\n    }\n\n    if (title === void 0) {\n      title = {};\n    }\n\n    var graph = this.graph;\n    var customGroup = graph.get('customGroup');\n    var hasGroupIds = customGroup.get('children').map(function (data) {\n      return data.get('id');\n    });\n\n    if (hasGroupIds.indexOf(groupId) > -1) {\n      // eslint-disable-next-line no-console\n      console.warn(\"\\u5DF2\\u7ECF\\u5B58\\u5728ID\\u4E3A \" + groupId + \" \\u7684\\u5206\\u7EC4\\uFF0C\\u8BF7\\u91CD\\u65B0\\u8BBE\\u7F6E\\u5206\\u7EC4ID\\uFF01\");\n      return;\n    }\n\n    var nodeGroup = customGroup.addGroup({\n      id: groupId,\n      zIndex: zIndex\n    });\n    var defaultStyle = this.styles.default; // 计算群组左上角左边、宽度、高度及x轴方向上的最大值\n\n    var _a = this.calculationGroupPosition(nodes),\n        x = _a.x,\n        y = _a.y,\n        width = _a.width,\n        height = _a.height,\n        maxX = _a.maxX;\n\n    var paddingValue = this.getGroupPadding(groupId);\n    var groupBBox = graph.get('groupBBoxs');\n    groupBBox[groupId] = {\n      x: x,\n      y: y,\n      width: width,\n      height: height,\n      maxX: maxX\n    }; // 根据groupId获取group数据，判断是否需要添加title\n\n    var groupTitle = null; // 只有手动创建group时执行以下逻辑\n\n    if (updateDataModel) {\n      var groups = graph.get('groups'); // 如果是手动创建group，则原始数据中是没有groupId信息的，需要将groupId添加到node中\n\n      nodes.forEach(function (nodeId) {\n        var node = graph.findById(nodeId);\n        var model = node.getModel();\n\n        if (!model.groupId) {\n          model.groupId = groupId;\n        }\n      }); // 如果是手动创建 group，则将 group 也添加到 groups 中\n\n      if (!groups.find(function (data) {\n        return data.id === groupId;\n      })) {\n        groups.push({\n          id: groupId,\n          title: title\n        });\n        graph.set({\n          groups: groups\n        });\n      }\n    }\n\n    var groupData = graph.get('groups').filter(function (data) {\n      return data.id === groupId;\n    });\n\n    if (groupData && groupData.length > 0) {\n      groupTitle = groupData[0].title;\n    } // group title 坐标\n\n\n    var titleX = 0;\n    var titleY = 0; // step 1：绘制群组外框\n\n    var keyShape = null;\n\n    if (type === 'circle') {\n      var r = width > height ? width / 2 : height / 2;\n      var cx = (width + 2 * x) / 2;\n      var cy = (height + 2 * y) / 2;\n      var lastR = r + paddingValue;\n      keyShape = nodeGroup.addShape('circle', {\n        attrs: __assign(__assign({}, defaultStyle), {\n          x: cx,\n          y: cy,\n          r: lastR\n        }),\n        draggable: true,\n        capture: true,\n        zIndex: zIndex,\n        groupId: groupId,\n        name: 'circle-group-shape'\n      });\n      titleX = cx;\n      titleY = cy - lastR; // 更新群组及属性样式\n\n      this.setDeletageGroupByStyle(groupId, nodeGroup, {\n        width: width,\n        height: height,\n        x: cx,\n        y: cy,\n        r: lastR\n      });\n    } else {\n      var rectPadding = paddingValue * defaultStyle.disCoefficient;\n      keyShape = nodeGroup.addShape('rect', {\n        attrs: __assign(__assign({}, defaultStyle), {\n          x: x - rectPadding,\n          y: y - rectPadding,\n          width: width + rectPadding * 2,\n          height: height + rectPadding * 2\n        }),\n        draggable: true,\n        capture: true,\n        zIndex: zIndex,\n        groupId: groupId,\n        name: 'rect-group-shape'\n      });\n      titleX = x - rectPadding + 15;\n      titleY = y - rectPadding + 15; // 更新群组及属性样式\n\n      this.setDeletageGroupByStyle(groupId, nodeGroup, {\n        x: x - rectPadding,\n        y: y - rectPadding,\n        width: width + rectPadding,\n        height: height + rectPadding,\n        btnOffset: maxX - 3\n      });\n    } // 添加group标题\n\n\n    if (groupTitle) {\n      var _b = groupTitle.offsetX,\n          offsetX = _b === void 0 ? 0 : _b,\n          _c = groupTitle.offsetY,\n          offsetY = _c === void 0 ? 0 : _c,\n          _d = groupTitle.text,\n          text = _d === void 0 ? groupTitle : _d,\n          titleStyle = __rest(groupTitle, [\"offsetX\", \"offsetY\", \"text\"]);\n\n      var textShape = nodeGroup.addShape('text', {\n        attrs: __assign({\n          text: text,\n          stroke: '#444',\n          x: titleX + offsetX,\n          y: titleY + offsetY\n        }, titleStyle),\n        className: 'group-title',\n        name: 'group-title-shape'\n      });\n      textShape.set('capture', false);\n    }\n\n    nodeGroup.set('keyShape', keyShape); // 设置graph中groupNodes的值\n\n    graph.get('groupNodes')[groupId] = nodes;\n  };\n  /**\n   * 修改Group样式\n   * @param {Item} keyShape 群组的keyShape\n   * @param {Object | String} style 样式\n   */\n\n\n  CustomGroup.prototype.setGroupStyle = function (keyShape, style) {\n    if (!keyShape || keyShape.get('destroyed')) {\n      return;\n    }\n\n    var styles = {};\n    var _a = this.styles,\n        hoverStyle = _a.hover,\n        defaultStyle = _a.default;\n\n    if (isString(style)) {\n      if (style === 'default') {\n        styles = deepMix({}, defaultStyle);\n      } else if (style === 'hover') {\n        styles = deepMix({}, hoverStyle);\n      }\n    } else {\n      styles = deepMix({}, defaultStyle, style);\n    }\n\n    Object.keys(styles).forEach(function (s) {\n      keyShape.attr(s, styles[s]);\n    });\n  };\n  /**\n   * 根据GroupID计算群组位置，包括左上角左边及宽度和高度\n   *\n   * @param {object} nodes 符合条件的node集合：选中的node或具有同一个groupID的node\n   * @param {object} position delegate的坐标位置\n   * @return {object} 根据节点计算出来的包围盒坐标\n   * @memberof ItemGroup\n   */\n\n\n  CustomGroup.prototype.calculationGroupPosition = function (nodes, position) {\n    if (position === void 0) {\n      position = {\n        x: 100,\n        y: 100\n      };\n    } // hxy 可新增无节点group，适用于图编辑场景\n\n\n    if (nodes.length === 0) {\n      // 防止空group 无法计算大小\n      return {\n        x: position.x,\n        y: position.y,\n        width: 100,\n        height: 100\n      };\n    }\n\n    var graph = this.graph;\n    var minx = Infinity;\n    var maxx = -Infinity;\n    var miny = Infinity;\n    var maxy = -Infinity; // 获取已节点的所有最大最小x y值\n\n    nodes.forEach(function (id) {\n      var element = isString(id) ? graph.findById(id) : id;\n      var bbox = element.getBBox();\n      var minX = bbox.minX,\n          minY = bbox.minY,\n          maxX = bbox.maxX,\n          maxY = bbox.maxY;\n\n      if (minX < minx) {\n        minx = minX;\n      }\n\n      if (minY < miny) {\n        miny = minY;\n      }\n\n      if (maxX > maxx) {\n        maxx = maxX;\n      }\n\n      if (maxY > maxy) {\n        maxy = maxY;\n      }\n    });\n    var x = Math.floor(minx);\n    var y = Math.floor(miny);\n    var width = Math.ceil(maxx) - x;\n    var height = Math.ceil(maxy) - y;\n    return {\n      x: x,\n      y: y,\n      width: width,\n      height: height,\n      maxX: Math.ceil(maxx)\n    };\n  };\n  /**\n   * 扁平的数据格式转成树形\n   * @param {array} data 扁平结构的数据\n   * @param {string} value 树状结构的唯一标识\n   * @param {string} parentId 父节点的键值\n   * @return {array} 转成的树形结构数据\n   */\n\n\n  CustomGroup.prototype.flatToTree = function (data, value, parentId) {\n    if (value === void 0) {\n      value = 'id';\n    }\n\n    if (parentId === void 0) {\n      parentId = 'parentId';\n    }\n\n    var children = 'children';\n    var valueMap = [];\n    var tree = [];\n    data.forEach(function (v) {\n      valueMap[v[value]] = v;\n    });\n    data.forEach(function (v) {\n      var parent = valueMap[v[parentId]];\n\n      if (parent) {\n        parent[children] = parent[children] || [];\n        parent[children].push(v);\n      } else {\n        tree.push(v);\n      }\n    });\n    return tree;\n  };\n  /**\n   * 当group中含有group时，获取padding值\n   * @param {string} groupId 节点分组ID\n   * @return {number} 在x和y方向上的偏移值\n   */\n\n\n  CustomGroup.prototype.getGroupPadding = function (groupId) {\n    var graph = this.graph;\n    var defaultStyle = this.styles.default; // 检测操作的群组中是否包括子群组\n\n    var groups = graph.get('groups'); // 计算每个 groupId 包含的组的数量\n\n    var currentGroups = groups.filter(function (g) {\n      return g.parentId === groupId;\n    });\n    var count = 1;\n\n    if (currentGroups.length > 0) {\n      if (!treeGroup) {\n        treeGroup = this.flatToTree(groups);\n      }\n\n      traverseTree(treeGroup[0], function (param) {\n        if (param.parentId === groupId && param.children) {\n          count += param.children.length;\n          return true;\n        }\n      });\n    }\n\n    var big = groups.filter(function (g) {\n      return g.id === groupId && !g.parentId;\n    });\n\n    if (big.length > 0) {\n      count += 1;\n    }\n\n    var hasSubGroup = !!(groups.filter(function (g) {\n      return g.parentId === groupId;\n    }).length > 0);\n    var paddingValue = hasSubGroup ? defaultStyle.maxDis + (count > 1 ? count / 2 : 1) * 30 : defaultStyle.minDis;\n    return paddingValue;\n  };\n  /**\n   * 设置群组对象及属性值\n   *\n   * @param {string} groupId 群组ID\n   * @param {Group} deletage 群组元素\n   * @param {object} property 属性值，里面包括width、height和maxX\n   * @memberof ItemGroup\n   */\n\n\n  CustomGroup.prototype.setDeletageGroupByStyle = function (groupId, deletage, property) {\n    var width = property.width,\n        height = property.height,\n        x = property.x,\n        y = property.y,\n        r = property.r,\n        btnOffset = property.btnOffset;\n    var customGroupStyle = this.customGroup[groupId];\n\n    if (!customGroupStyle) {\n      // 首次赋值\n      this.customGroup[groupId] = {\n        nodeGroup: deletage,\n        groupStyle: {\n          width: width,\n          height: height,\n          x: x,\n          y: y,\n          r: r,\n          btnOffset: btnOffset\n        }\n      };\n    } else {\n      // 更新时候merge配置项\n      var groupStyle = customGroupStyle.groupStyle;\n      var styles = deepMix({}, groupStyle, property);\n      this.customGroup[groupId] = {\n        nodeGroup: deletage,\n        groupStyle: styles\n      };\n    }\n  };\n  /**\n   * 根据群组ID获取群组及属性对象\n   *\n   * @param {string} groupId 群组ID\n   * @return {Item} 群组\n   * @memberof ItemGroup\n   */\n\n\n  CustomGroup.prototype.getDeletageGroupById = function (groupId) {\n    return this.customGroup[groupId];\n  };\n  /**\n   * 收起和展开群组\n   * @param {string} groupId 群组ID\n   */\n\n\n  CustomGroup.prototype.collapseExpandGroup = function (groupId) {\n    var customGroup = this.getDeletageGroupById(groupId);\n    var nodeGroup = customGroup.nodeGroup;\n    var hasHidden = nodeGroup.get('hasHidden'); // 该群组已经处于收起状态，需要展开\n\n    if (hasHidden) {\n      nodeGroup.set('hasHidden', false);\n      this.expandGroup(groupId);\n    } else {\n      nodeGroup.set('hasHidden', true);\n      this.collapseGroup(groupId);\n    }\n  };\n  /**\n   * 将临时节点递归地设置到groupId及父节点上\n   * @param {string} groupId 群组ID\n   * @param {string} tmpNodeId 临时节点ID\n   */\n\n\n  CustomGroup.prototype.setGroupTmpNode = function (groupId, tmpNodeId) {\n    var graph = this.graph;\n    var graphNodes = graph.get('groupNodes');\n    var groups = graph.get('groups');\n\n    if (graphNodes[groupId].indexOf(tmpNodeId) < 0) {\n      graphNodes[groupId].push(tmpNodeId);\n    } // 获取groupId的父群组\n\n\n    var parentGroup = groups.filter(function (g) {\n      return g.id === groupId;\n    });\n    var parentId = null;\n\n    if (parentGroup.length > 0) {\n      // eslint-disable-next-line prefer-destructuring\n      parentId = parentGroup[0].parentId;\n    } // 如果存在父群组，则把临时元素也添加到父群组中\n\n\n    if (parentId) {\n      this.setGroupTmpNode(parentId, tmpNodeId);\n    }\n  };\n  /**\n   * 收起群组，隐藏群组中的节点及边，群组外部相邻的边都连接到群组上\n   *\n   * @param {string} id 群组ID\n   * @memberof ItemGroup\n   */\n\n\n  CustomGroup.prototype.collapseGroup = function (id) {\n    var _this = this;\n\n    var customGroup = this.getDeletageGroupById(id);\n    var nodeGroup = customGroup.nodeGroup; // 收起群组后的默认样式\n\n    var collapse = this.styles.collapse;\n    var graph = this.graph;\n    var groupType = graph.get('groupType');\n    var nodesInGroup = graph.get('groupNodes')[id]; // 更新Group的大小\n\n    var keyShape = nodeGroup.get('keyShape');\n\n    var r = collapse.r,\n        width = collapse.width,\n        height = collapse.height,\n        offsetX = collapse.offsetX,\n        offsetY = collapse.offsetY,\n        otherStyle = __rest(collapse, [\"r\", \"width\", \"height\", \"offsetX\", \"offsetY\"]);\n\n    Object.keys(otherStyle).forEach(function (style) {\n      keyShape.attr(style, otherStyle[style]);\n    });\n    var options = {\n      groupId: id,\n      id: id + \"-custom-node\",\n      x: keyShape.attr('x'),\n      y: keyShape.attr('y'),\n      style: {\n        r: r\n      },\n      type: 'circle'\n    };\n    var titleShape = nodeGroup.find(function (element) {\n      return element.get('className') === 'group-title';\n    }); // 收起群组时候动画\n\n    if (groupType === 'circle') {\n      keyShape.animate({\n        r: r\n      }, {\n        duration: 500,\n        easing: 'easeCubic'\n      });\n\n      if (titleShape) {\n        titleShape.attr({\n          x: keyShape.attr('x') + offsetX,\n          y: keyShape.attr('y') + offsetY\n        });\n      }\n    } else if (groupType === 'rect') {\n      keyShape.animate({\n        width: width,\n        height: height\n      }, {\n        duration: 500,\n        easing: 'easeCubic'\n      });\n\n      if (titleShape) {\n        titleShape.attr({\n          x: keyShape.attr('x') + 10,\n          y: keyShape.attr('y') + height / 2 + 5\n        });\n      }\n\n      options = {\n        groupId: id,\n        id: id + \"-custom-node\",\n        x: keyShape.attr('x') + width / 2,\n        y: keyShape.attr('y') + height / 2,\n        size: [width, height],\n        type: 'rect'\n      };\n    }\n\n    var edges = graph.getEdges(); // 获取所有source在群组外，target在群组内的边\n\n    var sourceOutTargetInEdges = edges.filter(function (edge) {\n      var model = edge.getModel();\n      return !nodesInGroup.includes(model.source) && nodesInGroup.includes(model.target);\n    }); // 获取所有source在群组外，target在群组内的边\n\n    var sourceInTargetOutEdges = edges.filter(function (edge) {\n      var model = edge.getModel();\n      return nodesInGroup.includes(model.source) && !nodesInGroup.includes(model.target);\n    }); // 获取群组中节点之间的所有边\n\n    var edgeAllInGroup = edges.filter(function (edge) {\n      var model = edge.getModel();\n      return nodesInGroup.includes(model.source) && nodesInGroup.includes(model.target);\n    }); // 隐藏群组中的所有节点\n\n    nodesInGroup.forEach(function (nodeId) {\n      var node = graph.findById(nodeId);\n      var model = node.getModel();\n      var groupId = model.groupId;\n\n      if (groupId && groupId !== id) {\n        // 存在群组，则隐藏\n        var currentGroup = _this.getDeletageGroupById(groupId);\n\n        var currentNodeGroup = currentGroup.nodeGroup;\n        currentNodeGroup.hide();\n      }\n\n      node.hide();\n    });\n    edgeAllInGroup.forEach(function (edge) {\n      var source = edge.getSource();\n      var target = edge.getTarget();\n\n      if (source.isVisible() && target.isVisible()) {\n        edge.show();\n      } else {\n        edge.hide();\n      }\n    }); // 群组中存在source和target其中有一个在群组内，一个在群组外的情况\n\n    if (sourceOutTargetInEdges.length > 0 || sourceInTargetOutEdges.length > 0) {\n      var delegateNode = graph.add('node', options);\n      delegateNode.set('capture', false);\n      delegateNode.hide();\n      this.delegateInGroup[id] = {\n        delegateNode: delegateNode\n      }; // 将临时添加的节点加入到群组中，以便拖动节点时候线跟着拖动\n\n      this.setGroupTmpNode(id, id + \"-custom-node\");\n      this.updateEdgeInGroupLinks(id, sourceOutTargetInEdges, sourceInTargetOutEdges);\n    }\n  };\n  /**\n   * 收起群组时生成临时的节点，用于连接群组外的节点\n   *\n   * @param {string} groupId 群组ID\n   * @param {array} sourceOutTargetInEdges 出度的边\n   * @param {array} sourceInTargetOutEdges 入度的边\n   * @memberof ItemGroup\n   */\n\n\n  CustomGroup.prototype.updateEdgeInGroupLinks = function (groupId, sourceOutTargetInEdges, sourceInTargetOutEdges) {\n    var graph = this.graph; // 更新source在外的节点\n\n    var edgesOuts = {};\n    sourceOutTargetInEdges.map(function (edge) {\n      var model = edge.getModel();\n      var id = edge.get('id');\n      var target = model.target;\n      edgesOuts[id] = target;\n      graph.updateItem(edge, {\n        target: groupId + \"-custom-node\"\n      });\n      return true;\n    }); // 更新target在外的节点\n\n    var edgesIn = {};\n    sourceInTargetOutEdges.map(function (edge) {\n      var model = edge.getModel();\n      var id = edge.get('id');\n      var source = model.source;\n      edgesIn[id] = source;\n      graph.updateItem(edge, {\n        source: groupId + \"-custom-node\"\n      });\n      return true;\n    }); // 缓存群组groupId下的edge和临时生成的node节点\n\n    this.delegateInGroup[groupId] = deepMix({\n      sourceOutTargetInEdges: sourceOutTargetInEdges,\n      sourceInTargetOutEdges: sourceInTargetOutEdges,\n      edgesOuts: edgesOuts,\n      edgesIn: edgesIn\n    }, this.delegateInGroup[groupId]);\n  };\n  /**\n   * 展开群组，恢复群组中的节点及边\n   *\n   * @param {string} id 群组ID\n   * @memberof ItemGroup\n   */\n\n\n  CustomGroup.prototype.expandGroup = function (id) {\n    var _this = this;\n\n    var graph = this.graph;\n    var groupType = graph.get('groupType'); // 显示之前隐藏的节点和群组\n\n    var nodesInGroup = graph.get('groupNodes')[id];\n    var noCustomNodes = nodesInGroup.filter(function (node) {\n      return node.indexOf('custom-node') === -1;\n    });\n\n    var _a = this.calculationGroupPosition(noCustomNodes),\n        width = _a.width,\n        height = _a.height;\n\n    var nodeGroup = this.getDeletageGroupById(id).nodeGroup;\n    var keyShape = nodeGroup.get('keyShape');\n    var _b = this.styles,\n        defaultStyle = _b.default,\n        collapse = _b.collapse;\n    Object.keys(defaultStyle).forEach(function (style) {\n      keyShape.attr(style, defaultStyle[style]);\n    });\n    var titleShape = nodeGroup.find(function (element) {\n      return element.get('className') === 'group-title';\n    }); // 检测操作的群组中是否包括子群组\n\n    var paddingValue = this.getGroupPadding(id);\n\n    if (groupType === 'circle') {\n      var r = width > height ? width / 2 : height / 2;\n      keyShape.animate({\n        r: r + paddingValue\n      }, {\n        duration: 500,\n        easing: 'easeCubic'\n      });\n    } else if (groupType === 'rect') {\n      var w = collapse.width,\n          h = collapse.height;\n      keyShape.animate({\n        width: w + width + paddingValue * defaultStyle.disCoefficient * 2,\n        height: h + height + paddingValue * defaultStyle.disCoefficient * 2\n      }, {\n        duration: 500,\n        easing: 'easeCubic'\n      });\n    }\n\n    if (titleShape) {\n      // 根据groupId获取group数据，判断是否需要添加title\n      var groupTitle = null;\n      var groupData = graph.get('groups').filter(function (data) {\n        return data.id === id;\n      });\n\n      if (groupData && groupData.length > 0) {\n        groupTitle = groupData[0].title;\n      }\n\n      var _c = groupTitle.offsetX,\n          offsetX = _c === void 0 ? 0 : _c,\n          _d = groupTitle.offsetY,\n          offsetY = _d === void 0 ? 0 : _d;\n\n      if (groupType === 'circle') {\n        titleShape.animate({\n          x: keyShape.attr('x') + offsetX,\n          y: keyShape.attr('y') - keyShape.attr('r') + offsetY\n        }, {\n          duration: 600,\n          easing: 'easeCubic'\n        });\n      } else if (groupType === 'rect') {\n        titleShape.animate({\n          x: keyShape.attr('x') + (15 + offsetX),\n          y: keyShape.attr('y') + (15 + offsetY)\n        }, {\n          duration: 600,\n          easing: 'easeCubic'\n        });\n      }\n    } // 群组动画一会后再显示节点和边\n\n\n    setTimeout(function () {\n      nodesInGroup.forEach(function (nodeId) {\n        var node = graph.findById(nodeId);\n        var model = node.getModel();\n        var groupId = model.groupId;\n\n        if (groupId && groupId !== id) {\n          // 存在群组，则显示\n          var currentGroup = _this.getDeletageGroupById(groupId);\n\n          var currentNodeGroup = currentGroup.nodeGroup;\n          currentNodeGroup.show();\n          var hasHidden = currentNodeGroup.get('hasHidden');\n\n          if (!hasHidden) {\n            node.show();\n          }\n        } else {\n          node.show();\n        }\n      });\n      var edges = graph.getEdges(); // 获取群组中节点之间的所有边\n\n      var edgeAllInGroup = edges.filter(function (edge) {\n        var model = edge.getModel();\n        return nodesInGroup.includes(model.source) || nodesInGroup.includes(model.target);\n      });\n      edgeAllInGroup.forEach(function (edge) {\n        var source = edge.getSource();\n        var target = edge.getTarget();\n\n        if (source.isVisible() && target.isVisible()) {\n          edge.show();\n        }\n      });\n    }, 300);\n    var delegates = this.delegateInGroup[id];\n\n    if (delegates) {\n      var sourceOutTargetInEdges = delegates.sourceOutTargetInEdges,\n          sourceInTargetOutEdges = delegates.sourceInTargetOutEdges,\n          edgesOuts_1 = delegates.edgesOuts,\n          edgesIn_1 = delegates.edgesIn,\n          delegateNode = delegates.delegateNode; // 恢复source在外的节点\n\n      sourceOutTargetInEdges.map(function (edge) {\n        var edgeId = edge.get('id');\n        var sourceOuts = edgesOuts_1[edgeId];\n        graph.updateItem(edge, {\n          target: sourceOuts\n        });\n        return true;\n      }); // 恢复target在外的节点\n\n      sourceInTargetOutEdges.map(function (edge) {\n        var edgeId = edge.get('id');\n        var sourceIn = edgesIn_1[edgeId];\n        graph.updateItem(edge, {\n          source: sourceIn\n        });\n        return true;\n      }); // 删除群组中的临时节点ID\n\n      var tmpNodeModel = delegateNode.getModel();\n      this.deleteTmpNode(id, tmpNodeModel.id);\n      graph.remove(delegateNode);\n      delete this.delegateInGroup[id];\n    }\n  };\n\n  CustomGroup.prototype.deleteTmpNode = function (groupId, tmpNodeId) {\n    var graph = this.graph;\n    var groups = graph.get('groups');\n    var nodesInGroup = graph.get('groupNodes')[groupId];\n    var index = nodesInGroup.indexOf(tmpNodeId);\n    nodesInGroup.splice(index, 1); // 获取groupId的父群组\n\n    var parentGroup = groups.filter(function (g) {\n      return g.id === groupId;\n    });\n    var parentId = null;\n\n    if (parentGroup.length > 0) {\n      // eslint-disable-next-line prefer-destructuring\n      parentId = parentGroup[0].parentId;\n    } // 如果存在父群组，则把临时元素也添加到父群组中\n\n\n    if (parentId) {\n      this.deleteTmpNode(parentId, tmpNodeId);\n    }\n  };\n  /**\n   * 删除节点分组\n   * @param {string} groupId 节点分组ID\n   * @memberof ItemGroup\n   */\n\n\n  CustomGroup.prototype.remove = function (groupId) {\n    var graph = this.graph;\n    var customGroup = this.getDeletageGroupById(groupId);\n\n    if (!customGroup) {\n      // eslint-disable-next-line no-console\n      // console.warn(`请确认输入的groupId ${groupId} 是否有误！`);\n      return;\n    }\n\n    var nodeGroup = customGroup.nodeGroup;\n    var groupNodes = graph.get('groupNodes');\n    var nodes = groupNodes[groupId]; // 删除原群组中node中的groupID\n\n    nodes.forEach(function (nodeId) {\n      var node = graph.findById(nodeId);\n      var model = node.getModel();\n      var gId = model.groupId;\n\n      if (!gId) {\n        return;\n      }\n\n      if (groupId === gId) {\n        delete model.groupId; // 使用没有groupID的数据更新节点\n\n        graph.updateItem(node, model);\n      }\n    });\n    nodeGroup.destroy(); // 删除customGroup中groupId的数据\n\n    delete this.customGroup[groupId]; // 删除groups数据中的groupId\n\n    var groups = graph.get('groups');\n\n    if (groups.length > 0) {\n      var filterGroup = groups.filter(function (group) {\n        return group.id !== groupId;\n      });\n      graph.set('groups', filterGroup);\n    }\n\n    var parentGroupId = null;\n    var parentGroupData = null;\n\n    for (var i = 0; i < groups.length; i++) {\n      var group = groups[i];\n\n      if (groupId === group.id) {\n        parentGroupId = group.parentId;\n        parentGroupData = group;\n        break;\n      }\n    }\n\n    if (parentGroupData) {\n      delete parentGroupData.parentId;\n    } // 删除groupNodes中的groupId数据\n\n\n    delete groupNodes[groupId];\n\n    if (parentGroupId) {\n      groupNodes[parentGroupId] = groupNodes[parentGroupId].filter(function (node) {\n        return !nodes.includes(node);\n      });\n    }\n  };\n  /**\n   * 更新节点分组位置及里面的节点和边的位置\n   * @param {string} groupId 节点分组ID\n   * @param {object} position delegate的坐标位置\n   */\n\n\n  CustomGroup.prototype.updateGroup = function (groupId, position, originPosition) {\n    var graph = this.graph;\n    var groupType = graph.get('groupType'); // 更新群组里面节点和线的位置\n\n    this.updateItemInGroup(groupId, position, originPosition); // 判断是否拖动出了parent group外面，如果拖出了parent Group外面，则更新数据，去掉group关联\n    // 获取groupId的父Group的ID\n\n    var groups = graph.save().groups;\n    var parentGroupId = null;\n    var parentGroupData = null;\n\n    for (var i = 0; i < groups.length; i++) {\n      var group = groups[i];\n\n      if (groupId === group.id) {\n        parentGroupId = group.parentId;\n        parentGroupData = group;\n        break;\n      }\n    }\n\n    if (parentGroupId) {\n      var parentGroup = this.getDeletageGroupById(parentGroupId).nodeGroup; // const parentGroup = customGroup[parentGroupId].nodeGroup;\n\n      var parentKeyShape = parentGroup.get('keyShape');\n      this.setGroupStyle(parentKeyShape, 'default');\n      var parentGroupBBox = parentKeyShape.getBBox();\n      var minX = parentGroupBBox.minX,\n          minY = parentGroupBBox.minY,\n          maxX = parentGroupBBox.maxX,\n          maxY = parentGroupBBox.maxY; // 检查是否拖出了父Group\n\n      var currentGroup = this.getDeletageGroupById(groupId).nodeGroup; // const currentGroup = customGroup[groupId].nodeGroup;\n\n      var currentKeyShape = currentGroup.get('keyShape');\n      var currentKeyShapeBBox = currentKeyShape.getBBox();\n      var x = currentKeyShapeBBox.x,\n          y = currentKeyShapeBBox.y;\n\n      if (!(x < maxX && x > minX && y < maxY && y > minY)) {\n        // 拖出了parent group，则取消parent group ID\n        delete parentGroupData.parentId; // 同时删除groupID中的节点\n\n        var groupNodes = graph.get('groupNodes');\n        var currentGroupNodes_1 = groupNodes[groupId];\n        var parentGroupNodes = groupNodes[parentGroupId];\n        groupNodes[parentGroupId] = parentGroupNodes.filter(function (node) {\n          return currentGroupNodes_1.indexOf(node) === -1;\n        });\n\n        var _a = this.calculationGroupPosition(groupNodes[parentGroupId]),\n            x1 = _a.x,\n            y1 = _a.y,\n            width = _a.width,\n            height = _a.height; // x: x1, y: y1,\n        // const { x: x1, y: y1 } = originPosition;\n\n\n        var paddingValue = this.getGroupPadding(parentGroupId);\n        var groupTitleShape = parentGroup.find(function (element) {\n          return element.get('className') === 'group-title';\n        });\n        var titleX = 0;\n        var titleY = 0;\n\n        if (groupType === 'circle') {\n          var r = width > height ? width / 2 : height / 2;\n          var cx = x1;\n          var cy = y1;\n          parentKeyShape.attr({\n            r: r + paddingValue,\n            x: cx,\n            y: cy\n          });\n          titleX = cx;\n          titleY = cy - parentKeyShape.attr('r');\n        } else if (groupType === 'rect') {\n          var defaultStyle = this.styles.default;\n          var rectPadding = paddingValue * defaultStyle.disCoefficient;\n          parentKeyShape.attr({\n            x: x1 - rectPadding,\n            y: y1 - rectPadding\n          });\n          titleX = x1 - rectPadding + 15;\n          titleY = y1 - rectPadding + 15;\n        }\n\n        if (groupTitleShape) {\n          var titleConfig = parentGroupData.title;\n          var offsetX = 0;\n          var offsetY = 0;\n\n          if (titleConfig) {\n            offsetX = titleConfig.offsetX; // eslint-disable-line prefer-destructuring\n\n            offsetY = titleConfig.offsetY; // eslint-disable-line prefer-destructuring\n          }\n\n          groupTitleShape.attr({\n            x: titleX + offsetX,\n            y: titleY + offsetY\n          });\n        }\n      }\n    }\n  };\n  /**\n   * 更新节点分组中节点和边的位置\n   * @param {string} groupId 节点分组ID\n   * @param {object} position delegate的坐标位置\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  CustomGroup.prototype.updateItemInGroup = function (groupId, position, originPosition) {\n    var _this = this;\n\n    var graph = this.graph;\n    var groupType = graph.get('groupType');\n    var groupNodes = graph.get('groupNodes'); // step 1：先修改groupId中的节点位置\n\n    var nodeInGroup = groupNodes[groupId];\n    var nodeGroup = this.getDeletageGroupById(groupId).nodeGroup;\n    var originBBox = nodeGroup.getBBox();\n    var otherGroupId = [];\n    nodeInGroup.forEach(function (nodeId, index) {\n      var node = graph.findById(nodeId);\n      var model = node.getModel();\n      var nodeGroupId = model.groupId;\n\n      if (nodeGroupId && !otherGroupId.includes(nodeGroupId)) {\n        otherGroupId.push(nodeGroupId);\n      }\n\n      if (!_this.nodePoint[index]) {\n        _this.nodePoint[index] = {\n          x: model.x,\n          y: model.y\n        };\n      } // 群组拖动后节点的位置：deletateShape的最终位置-群组起始位置+节点位置\n\n\n      var x = position.x - originBBox.x + _this.nodePoint[index].x;\n      var y = position.y - originBBox.y + _this.nodePoint[index].y;\n      _this.nodePoint[index] = {\n        x: x,\n        y: y\n      };\n      graph.updateItem(node, {\n        x: x,\n        y: y\n      });\n    }); // step 2：修改父group中其他节点的位置\n    // otherGroupId中是否包括当前groupId，如果不包括，则添加进去\n\n    if (!otherGroupId.includes(groupId)) {\n      otherGroupId.push(groupId);\n    } // 更新完群组位置后，重新设置群组起始位置\n\n\n    otherGroupId.forEach(function (id) {\n      // 更新群组位置\n      var othergroup = _this.getDeletageGroupById(id).nodeGroup;\n\n      var groupKeyShape = othergroup.get('keyShape');\n      var noCustomNodes = groupNodes[id].filter(function (node) {\n        return node.indexOf('custom-node') === -1;\n      });\n\n      var _a = _this.calculationGroupPosition(noCustomNodes, position),\n          x = _a.x,\n          y = _a.y,\n          width = _a.width,\n          height = _a.height;\n\n      var titleX = 0;\n      var titleY = 0;\n\n      if (groupType === 'circle') {\n        var cx = (width + 2 * x) / 2;\n        var cy = (height + 2 * y) / 2;\n        groupKeyShape.attr({\n          x: cx,\n          y: cy\n        });\n        titleX = cx;\n        titleY = cy - groupKeyShape.attr('r');\n      } else if (groupType === 'rect') {\n        // 节点分组状态\n        var hasHidden = othergroup.get('hasHidden');\n\n        var paddingValue = _this.getGroupPadding(id);\n\n        var keyshapePosition = {};\n        var defaultStyle = _this.styles.default;\n        var rectPadding = paddingValue * defaultStyle.disCoefficient;\n        titleX = x - rectPadding + 15;\n        titleY = y - rectPadding + 15;\n\n        if (hasHidden) {\n          // 无标题，或节点分组是展开的情况\n          keyshapePosition = {\n            x: x - rectPadding,\n            y: y - rectPadding\n          };\n          titleY = titleY + 10;\n        } else {\n          keyshapePosition = {\n            x: x - rectPadding,\n            y: y - rectPadding,\n            width: width + rectPadding * 2,\n            height: height + rectPadding * 2\n          };\n        }\n\n        groupKeyShape.attr(keyshapePosition);\n      } // 如果存在标题，则更新标题位置\n\n\n      _this.updateGroupTitle(othergroup, id, titleX, titleY);\n    });\n  };\n  /**\n   * 更新节点分组的 Title\n   * @param {Group} group 当前 Group 实例\n   * @param {string} groupId 分组ID\n   * @param {number} x x坐标\n   * @param {number} y y坐标\n   */\n\n\n  CustomGroup.prototype.updateGroupTitle = function (group, groupId, x, y) {\n    var graph = this.graph;\n    var groupTitleShape = group.find(function (element) {\n      return element.get('className') === 'group-title';\n    });\n\n    if (groupTitleShape) {\n      var titleConfig = null;\n      var groupData = graph.get('groups').filter(function (data) {\n        return data.id === groupId;\n      });\n\n      if (groupData && groupData.length > 0) {\n        titleConfig = groupData[0].title;\n      }\n\n      var offsetX = 0;\n      var offsetY = 0;\n\n      if (titleConfig) {\n        offsetX = titleConfig.offsetX || 0;\n        offsetY = titleConfig.offsetY || 0;\n      }\n\n      groupTitleShape.attr({\n        x: x + offsetX,\n        y: y + offsetY\n      });\n    }\n  };\n  /**\n   * 拖动节点时候动态改变节点分组大小\n   * @param {Event} evt 事件句柄\n   * @param {Group} currentGroup 当前操作的群组\n   * @param {Item} keyShape 当前操作的keyShape\n   * @description 节点拖入拖出后动态改变群组大小\n   */\n\n\n  CustomGroup.prototype.dynamicChangeGroupSize = function (evt, currentGroup, keyShape) {\n    var item = evt.item;\n    var model = item.getModel(); // 节点所在的GroupId\n\n    var groupId = model.groupId;\n    var graph = this.graph;\n    var groupType = graph.get('groupType');\n    var groupNodes = graph.get('groupNodes');\n    var nodes = groupNodes[groupId]; // 拖出节点后，根据最新的节点数量，重新计算群组大小\n    // 如果只有一个节点，拖出后，则删除该组\n\n    if (nodes.length === 0) {\n      // step 1: 从groupNodes中删除\n      delete groupNodes[groupId]; // step 2: 从groups数据中删除\n\n      var groupsData = graph.get('groups');\n      graph.set('groups', groupsData.filter(function (gdata) {\n        return gdata.id !== groupId;\n      })); // step 3: 删除原来的群组\n\n      currentGroup.remove();\n    } else {\n      var _a = this.calculationGroupPosition(nodes),\n          x = _a.x,\n          y = _a.y,\n          width = _a.width,\n          height = _a.height; // 检测操作的群组中是否包括子群组\n\n\n      var paddingValue = this.getGroupPadding(groupId);\n      var titleX = 0;\n      var titleY = 0;\n\n      if (groupType === 'circle') {\n        var r = width > height ? width / 2 : height / 2;\n        var cx = (width + 2 * x) / 2;\n        var cy = (height + 2 * y) / 2;\n        keyShape.attr({\n          r: r + paddingValue,\n          x: cx,\n          y: cy\n        });\n        titleX = cx;\n        titleY = cy - keyShape.attr('r');\n      } else if (groupType === 'rect') {\n        var defaultStyle = this.styles.default;\n        var rectPadding = paddingValue * defaultStyle.disCoefficient;\n        keyShape.attr({\n          x: x - rectPadding,\n          y: y - rectPadding,\n          width: width + rectPadding * 2,\n          height: height + rectPadding * 2\n        });\n        titleX = x - rectPadding + 15;\n        titleY = y - rectPadding + 15;\n      } // 如果存在标题，则更新标题位置\n\n\n      this.updateGroupTitle(currentGroup, groupId, titleX, titleY);\n    }\n\n    this.setGroupStyle(keyShape, 'default');\n  };\n\n  CustomGroup.prototype.resetNodePoint = function () {\n    this.nodePoint.length = 0;\n  };\n\n  CustomGroup.prototype.destroy = function () {\n    this.graph = null;\n    this.styles = {};\n    this.customGroup = {};\n    this.delegateInGroup = {};\n    this.resetNodePoint();\n    this.destroyed = true;\n  };\n\n  return CustomGroup;\n}();\n\nexport default CustomGroup;","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/@antv/g6/es/graph/controller/customGroup.js"],"names":["__assign","__rest","deepMix","isString","traverseTree","treeGroup","CustomGroup","graph","groupStyle","get","styles","getDefaultCfg","customGroup","delegateInGroup","nodePoint","destroyed","default","lineWidth","stroke","strokeOpacity","fill","fillOpacity","opacity","disCoefficient","minDis","maxDis","hover","collapse","r","width","height","offsetX","offsetY","icon","operatorBtn","img","expand","visible","prototype","create","groupId","nodes","type","zIndex","updateDataModel","title","hasGroupIds","map","data","indexOf","console","warn","nodeGroup","addGroup","id","defaultStyle","_a","calculationGroupPosition","x","y","maxX","paddingValue","getGroupPadding","groupBBox","groupTitle","groups","forEach","nodeId","node","findById","model","getModel","find","push","set","groupData","filter","length","titleX","titleY","keyShape","cx","cy","lastR","addShape","attrs","draggable","capture","name","setDeletageGroupByStyle","rectPadding","btnOffset","_b","_c","_d","text","titleStyle","textShape","className","setGroupStyle","style","hoverStyle","Object","keys","s","attr","position","minx","Infinity","maxx","miny","maxy","element","bbox","getBBox","minX","minY","maxY","Math","floor","ceil","flatToTree","value","parentId","children","valueMap","tree","v","parent","currentGroups","g","count","param","big","hasSubGroup","deletage","property","customGroupStyle","getDeletageGroupById","collapseExpandGroup","hasHidden","expandGroup","collapseGroup","setGroupTmpNode","tmpNodeId","graphNodes","parentGroup","_this","groupType","nodesInGroup","otherStyle","options","titleShape","animate","duration","easing","size","edges","getEdges","sourceOutTargetInEdges","edge","includes","source","target","sourceInTargetOutEdges","edgeAllInGroup","currentGroup","currentNodeGroup","hide","getSource","getTarget","isVisible","show","delegateNode","add","updateEdgeInGroupLinks","edgesOuts","updateItem","edgesIn","noCustomNodes","w","h","setTimeout","delegates","edgesOuts_1","edgesIn_1","edgeId","sourceOuts","sourceIn","tmpNodeModel","deleteTmpNode","remove","index","splice","groupNodes","gId","destroy","filterGroup","group","parentGroupId","parentGroupData","i","updateGroup","originPosition","updateItemInGroup","save","parentKeyShape","parentGroupBBox","currentKeyShape","currentKeyShapeBBox","currentGroupNodes_1","parentGroupNodes","x1","y1","groupTitleShape","titleConfig","nodeInGroup","originBBox","otherGroupId","nodeGroupId","othergroup","groupKeyShape","keyshapePosition","updateGroupTitle","dynamicChangeGroupSize","evt","item","groupsData","gdata","resetNodePoint"],"mappings":"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","sourcesContent":["import { __assign, __rest } from \"tslib\";\nimport deepMix from '@antv/util/lib/deep-mix';\nimport isString from '@antv/util/lib/is-string';\nimport { traverseTree } from '../../util/graphic';\nvar treeGroup = null;\n\nvar CustomGroup =\n/** @class */\nfunction () {\n  function CustomGroup(graph) {\n    this.graph = graph;\n    var groupStyle = graph.get('groupStyle');\n    this.styles = deepMix({}, CustomGroup.getDefaultCfg(), groupStyle); // 创建的群组集合\n\n    this.customGroup = {};\n    this.delegateInGroup = {};\n    this.nodePoint = [];\n    this.destroyed = false;\n  }\n\n  CustomGroup.getDefaultCfg = function () {\n    return {\n      default: {\n        lineWidth: 1,\n        stroke: '#A3B1BF',\n        // lineDash: [ 5, 5 ],\n        strokeOpacity: 0.9,\n        fill: '#F3F9FF',\n        fillOpacity: 0.8,\n        opacity: 0.8,\n        disCoefficient: 0.6,\n        minDis: 30,\n        maxDis: 30\n      },\n      hover: {\n        stroke: '#faad14',\n        fill: '#ffe58f',\n        fillOpacity: 0.3,\n        opacity: 0.3,\n        lineWidth: 3\n      },\n      // 收起状态样式\n      collapse: {\n        r: 30,\n        width: 80,\n        height: 40,\n        // lineDash: [ 5, 5 ],\n        stroke: '#A3B1BF',\n        lineWidth: 3,\n        fill: '#F3F9FF',\n        offsetX: -15,\n        offsetY: 5\n      },\n      icon: 'https://gw.alipayobjects.com/zos/rmsportal/MXXetJAxlqrbisIuZxDO.svg',\n      operatorBtn: {\n        collapse: {\n          img: 'https://gw.alipayobjects.com/zos/rmsportal/uZVdwjJGqDooqKLKtvGA.svg',\n          width: 16,\n          height: 16\n        },\n        expand: {\n          width: 16,\n          height: 16,\n          img: 'https://gw.alipayobjects.com/zos/rmsportal/MXXetJAxlqrbisIuZxDO.svg'\n        }\n      },\n      visible: false\n    };\n  };\n  /**\n   * 生成群组\n   * @param {string} groupId 群组ID\n   * @param {array} nodes 群组中的节点集合\n   * @param {string} type 群组类型，默认为circle，支持rect\n   * @param {number} zIndex 群组层级，默认为0\n   * @param {boolean} updateDataModel 是否更新节点数据，默认为false，只有当手动创建group时才为true\n   * @param {object} title 分组标题配置\n   * @memberof ItemGroup\n   * @return {object} null\n   */\n\n\n  CustomGroup.prototype.create = function (groupId, nodes, type, zIndex, updateDataModel, title) {\n    if (type === void 0) {\n      type = 'circle';\n    }\n\n    if (zIndex === void 0) {\n      zIndex = 0;\n    }\n\n    if (updateDataModel === void 0) {\n      updateDataModel = false;\n    }\n\n    if (title === void 0) {\n      title = {};\n    }\n\n    var graph = this.graph;\n    var customGroup = graph.get('customGroup');\n    var hasGroupIds = customGroup.get('children').map(function (data) {\n      return data.get('id');\n    });\n\n    if (hasGroupIds.indexOf(groupId) > -1) {\n      // eslint-disable-next-line no-console\n      console.warn(\"\\u5DF2\\u7ECF\\u5B58\\u5728ID\\u4E3A \" + groupId + \" \\u7684\\u5206\\u7EC4\\uFF0C\\u8BF7\\u91CD\\u65B0\\u8BBE\\u7F6E\\u5206\\u7EC4ID\\uFF01\");\n      return;\n    }\n\n    var nodeGroup = customGroup.addGroup({\n      id: groupId,\n      zIndex: zIndex\n    });\n    var defaultStyle = this.styles.default; // 计算群组左上角左边、宽度、高度及x轴方向上的最大值\n\n    var _a = this.calculationGroupPosition(nodes),\n        x = _a.x,\n        y = _a.y,\n        width = _a.width,\n        height = _a.height,\n        maxX = _a.maxX;\n\n    var paddingValue = this.getGroupPadding(groupId);\n    var groupBBox = graph.get('groupBBoxs');\n    groupBBox[groupId] = {\n      x: x,\n      y: y,\n      width: width,\n      height: height,\n      maxX: maxX\n    }; // 根据groupId获取group数据，判断是否需要添加title\n\n    var groupTitle = null; // 只有手动创建group时执行以下逻辑\n\n    if (updateDataModel) {\n      var groups = graph.get('groups'); // 如果是手动创建group，则原始数据中是没有groupId信息的，需要将groupId添加到node中\n\n      nodes.forEach(function (nodeId) {\n        var node = graph.findById(nodeId);\n        var model = node.getModel();\n\n        if (!model.groupId) {\n          model.groupId = groupId;\n        }\n      }); // 如果是手动创建 group，则将 group 也添加到 groups 中\n\n      if (!groups.find(function (data) {\n        return data.id === groupId;\n      })) {\n        groups.push({\n          id: groupId,\n          title: title\n        });\n        graph.set({\n          groups: groups\n        });\n      }\n    }\n\n    var groupData = graph.get('groups').filter(function (data) {\n      return data.id === groupId;\n    });\n\n    if (groupData && groupData.length > 0) {\n      groupTitle = groupData[0].title;\n    } // group title 坐标\n\n\n    var titleX = 0;\n    var titleY = 0; // step 1：绘制群组外框\n\n    var keyShape = null;\n\n    if (type === 'circle') {\n      var r = width > height ? width / 2 : height / 2;\n      var cx = (width + 2 * x) / 2;\n      var cy = (height + 2 * y) / 2;\n      var lastR = r + paddingValue;\n      keyShape = nodeGroup.addShape('circle', {\n        attrs: __assign(__assign({}, defaultStyle), {\n          x: cx,\n          y: cy,\n          r: lastR\n        }),\n        draggable: true,\n        capture: true,\n        zIndex: zIndex,\n        groupId: groupId,\n        name: 'circle-group-shape'\n      });\n      titleX = cx;\n      titleY = cy - lastR; // 更新群组及属性样式\n\n      this.setDeletageGroupByStyle(groupId, nodeGroup, {\n        width: width,\n        height: height,\n        x: cx,\n        y: cy,\n        r: lastR\n      });\n    } else {\n      var rectPadding = paddingValue * defaultStyle.disCoefficient;\n      keyShape = nodeGroup.addShape('rect', {\n        attrs: __assign(__assign({}, defaultStyle), {\n          x: x - rectPadding,\n          y: y - rectPadding,\n          width: width + rectPadding * 2,\n          height: height + rectPadding * 2\n        }),\n        draggable: true,\n        capture: true,\n        zIndex: zIndex,\n        groupId: groupId,\n        name: 'rect-group-shape'\n      });\n      titleX = x - rectPadding + 15;\n      titleY = y - rectPadding + 15; // 更新群组及属性样式\n\n      this.setDeletageGroupByStyle(groupId, nodeGroup, {\n        x: x - rectPadding,\n        y: y - rectPadding,\n        width: width + rectPadding,\n        height: height + rectPadding,\n        btnOffset: maxX - 3\n      });\n    } // 添加group标题\n\n\n    if (groupTitle) {\n      var _b = groupTitle.offsetX,\n          offsetX = _b === void 0 ? 0 : _b,\n          _c = groupTitle.offsetY,\n          offsetY = _c === void 0 ? 0 : _c,\n          _d = groupTitle.text,\n          text = _d === void 0 ? groupTitle : _d,\n          titleStyle = __rest(groupTitle, [\"offsetX\", \"offsetY\", \"text\"]);\n\n      var textShape = nodeGroup.addShape('text', {\n        attrs: __assign({\n          text: text,\n          stroke: '#444',\n          x: titleX + offsetX,\n          y: titleY + offsetY\n        }, titleStyle),\n        className: 'group-title',\n        name: 'group-title-shape'\n      });\n      textShape.set('capture', false);\n    }\n\n    nodeGroup.set('keyShape', keyShape); // 设置graph中groupNodes的值\n\n    graph.get('groupNodes')[groupId] = nodes;\n  };\n  /**\n   * 修改Group样式\n   * @param {Item} keyShape 群组的keyShape\n   * @param {Object | String} style 样式\n   */\n\n\n  CustomGroup.prototype.setGroupStyle = function (keyShape, style) {\n    if (!keyShape || keyShape.get('destroyed')) {\n      return;\n    }\n\n    var styles = {};\n    var _a = this.styles,\n        hoverStyle = _a.hover,\n        defaultStyle = _a.default;\n\n    if (isString(style)) {\n      if (style === 'default') {\n        styles = deepMix({}, defaultStyle);\n      } else if (style === 'hover') {\n        styles = deepMix({}, hoverStyle);\n      }\n    } else {\n      styles = deepMix({}, defaultStyle, style);\n    }\n\n    Object.keys(styles).forEach(function (s) {\n      keyShape.attr(s, styles[s]);\n    });\n  };\n  /**\n   * 根据GroupID计算群组位置，包括左上角左边及宽度和高度\n   *\n   * @param {object} nodes 符合条件的node集合：选中的node或具有同一个groupID的node\n   * @param {object} position delegate的坐标位置\n   * @return {object} 根据节点计算出来的包围盒坐标\n   * @memberof ItemGroup\n   */\n\n\n  CustomGroup.prototype.calculationGroupPosition = function (nodes, position) {\n    if (position === void 0) {\n      position = {\n        x: 100,\n        y: 100\n      };\n    } // hxy 可新增无节点group，适用于图编辑场景\n\n\n    if (nodes.length === 0) {\n      // 防止空group 无法计算大小\n      return {\n        x: position.x,\n        y: position.y,\n        width: 100,\n        height: 100\n      };\n    }\n\n    var graph = this.graph;\n    var minx = Infinity;\n    var maxx = -Infinity;\n    var miny = Infinity;\n    var maxy = -Infinity; // 获取已节点的所有最大最小x y值\n\n    nodes.forEach(function (id) {\n      var element = isString(id) ? graph.findById(id) : id;\n      var bbox = element.getBBox();\n      var minX = bbox.minX,\n          minY = bbox.minY,\n          maxX = bbox.maxX,\n          maxY = bbox.maxY;\n\n      if (minX < minx) {\n        minx = minX;\n      }\n\n      if (minY < miny) {\n        miny = minY;\n      }\n\n      if (maxX > maxx) {\n        maxx = maxX;\n      }\n\n      if (maxY > maxy) {\n        maxy = maxY;\n      }\n    });\n    var x = Math.floor(minx);\n    var y = Math.floor(miny);\n    var width = Math.ceil(maxx) - x;\n    var height = Math.ceil(maxy) - y;\n    return {\n      x: x,\n      y: y,\n      width: width,\n      height: height,\n      maxX: Math.ceil(maxx)\n    };\n  };\n  /**\n   * 扁平的数据格式转成树形\n   * @param {array} data 扁平结构的数据\n   * @param {string} value 树状结构的唯一标识\n   * @param {string} parentId 父节点的键值\n   * @return {array} 转成的树形结构数据\n   */\n\n\n  CustomGroup.prototype.flatToTree = function (data, value, parentId) {\n    if (value === void 0) {\n      value = 'id';\n    }\n\n    if (parentId === void 0) {\n      parentId = 'parentId';\n    }\n\n    var children = 'children';\n    var valueMap = [];\n    var tree = [];\n    data.forEach(function (v) {\n      valueMap[v[value]] = v;\n    });\n    data.forEach(function (v) {\n      var parent = valueMap[v[parentId]];\n\n      if (parent) {\n        parent[children] = parent[children] || [];\n        parent[children].push(v);\n      } else {\n        tree.push(v);\n      }\n    });\n    return tree;\n  };\n  /**\n   * 当group中含有group时，获取padding值\n   * @param {string} groupId 节点分组ID\n   * @return {number} 在x和y方向上的偏移值\n   */\n\n\n  CustomGroup.prototype.getGroupPadding = function (groupId) {\n    var graph = this.graph;\n    var defaultStyle = this.styles.default; // 检测操作的群组中是否包括子群组\n\n    var groups = graph.get('groups'); // 计算每个 groupId 包含的组的数量\n\n    var currentGroups = groups.filter(function (g) {\n      return g.parentId === groupId;\n    });\n    var count = 1;\n\n    if (currentGroups.length > 0) {\n      if (!treeGroup) {\n        treeGroup = this.flatToTree(groups);\n      }\n\n      traverseTree(treeGroup[0], function (param) {\n        if (param.parentId === groupId && param.children) {\n          count += param.children.length;\n          return true;\n        }\n      });\n    }\n\n    var big = groups.filter(function (g) {\n      return g.id === groupId && !g.parentId;\n    });\n\n    if (big.length > 0) {\n      count += 1;\n    }\n\n    var hasSubGroup = !!(groups.filter(function (g) {\n      return g.parentId === groupId;\n    }).length > 0);\n    var paddingValue = hasSubGroup ? defaultStyle.maxDis + (count > 1 ? count / 2 : 1) * 30 : defaultStyle.minDis;\n    return paddingValue;\n  };\n  /**\n   * 设置群组对象及属性值\n   *\n   * @param {string} groupId 群组ID\n   * @param {Group} deletage 群组元素\n   * @param {object} property 属性值，里面包括width、height和maxX\n   * @memberof ItemGroup\n   */\n\n\n  CustomGroup.prototype.setDeletageGroupByStyle = function (groupId, deletage, property) {\n    var width = property.width,\n        height = property.height,\n        x = property.x,\n        y = property.y,\n        r = property.r,\n        btnOffset = property.btnOffset;\n    var customGroupStyle = this.customGroup[groupId];\n\n    if (!customGroupStyle) {\n      // 首次赋值\n      this.customGroup[groupId] = {\n        nodeGroup: deletage,\n        groupStyle: {\n          width: width,\n          height: height,\n          x: x,\n          y: y,\n          r: r,\n          btnOffset: btnOffset\n        }\n      };\n    } else {\n      // 更新时候merge配置项\n      var groupStyle = customGroupStyle.groupStyle;\n      var styles = deepMix({}, groupStyle, property);\n      this.customGroup[groupId] = {\n        nodeGroup: deletage,\n        groupStyle: styles\n      };\n    }\n  };\n  /**\n   * 根据群组ID获取群组及属性对象\n   *\n   * @param {string} groupId 群组ID\n   * @return {Item} 群组\n   * @memberof ItemGroup\n   */\n\n\n  CustomGroup.prototype.getDeletageGroupById = function (groupId) {\n    return this.customGroup[groupId];\n  };\n  /**\n   * 收起和展开群组\n   * @param {string} groupId 群组ID\n   */\n\n\n  CustomGroup.prototype.collapseExpandGroup = function (groupId) {\n    var customGroup = this.getDeletageGroupById(groupId);\n    var nodeGroup = customGroup.nodeGroup;\n    var hasHidden = nodeGroup.get('hasHidden'); // 该群组已经处于收起状态，需要展开\n\n    if (hasHidden) {\n      nodeGroup.set('hasHidden', false);\n      this.expandGroup(groupId);\n    } else {\n      nodeGroup.set('hasHidden', true);\n      this.collapseGroup(groupId);\n    }\n  };\n  /**\n   * 将临时节点递归地设置到groupId及父节点上\n   * @param {string} groupId 群组ID\n   * @param {string} tmpNodeId 临时节点ID\n   */\n\n\n  CustomGroup.prototype.setGroupTmpNode = function (groupId, tmpNodeId) {\n    var graph = this.graph;\n    var graphNodes = graph.get('groupNodes');\n    var groups = graph.get('groups');\n\n    if (graphNodes[groupId].indexOf(tmpNodeId) < 0) {\n      graphNodes[groupId].push(tmpNodeId);\n    } // 获取groupId的父群组\n\n\n    var parentGroup = groups.filter(function (g) {\n      return g.id === groupId;\n    });\n    var parentId = null;\n\n    if (parentGroup.length > 0) {\n      // eslint-disable-next-line prefer-destructuring\n      parentId = parentGroup[0].parentId;\n    } // 如果存在父群组，则把临时元素也添加到父群组中\n\n\n    if (parentId) {\n      this.setGroupTmpNode(parentId, tmpNodeId);\n    }\n  };\n  /**\n   * 收起群组，隐藏群组中的节点及边，群组外部相邻的边都连接到群组上\n   *\n   * @param {string} id 群组ID\n   * @memberof ItemGroup\n   */\n\n\n  CustomGroup.prototype.collapseGroup = function (id) {\n    var _this = this;\n\n    var customGroup = this.getDeletageGroupById(id);\n    var nodeGroup = customGroup.nodeGroup; // 收起群组后的默认样式\n\n    var collapse = this.styles.collapse;\n    var graph = this.graph;\n    var groupType = graph.get('groupType');\n    var nodesInGroup = graph.get('groupNodes')[id]; // 更新Group的大小\n\n    var keyShape = nodeGroup.get('keyShape');\n\n    var r = collapse.r,\n        width = collapse.width,\n        height = collapse.height,\n        offsetX = collapse.offsetX,\n        offsetY = collapse.offsetY,\n        otherStyle = __rest(collapse, [\"r\", \"width\", \"height\", \"offsetX\", \"offsetY\"]);\n\n    Object.keys(otherStyle).forEach(function (style) {\n      keyShape.attr(style, otherStyle[style]);\n    });\n    var options = {\n      groupId: id,\n      id: id + \"-custom-node\",\n      x: keyShape.attr('x'),\n      y: keyShape.attr('y'),\n      style: {\n        r: r\n      },\n      type: 'circle'\n    };\n    var titleShape = nodeGroup.find(function (element) {\n      return element.get('className') === 'group-title';\n    }); // 收起群组时候动画\n\n    if (groupType === 'circle') {\n      keyShape.animate({\n        r: r\n      }, {\n        duration: 500,\n        easing: 'easeCubic'\n      });\n\n      if (titleShape) {\n        titleShape.attr({\n          x: keyShape.attr('x') + offsetX,\n          y: keyShape.attr('y') + offsetY\n        });\n      }\n    } else if (groupType === 'rect') {\n      keyShape.animate({\n        width: width,\n        height: height\n      }, {\n        duration: 500,\n        easing: 'easeCubic'\n      });\n\n      if (titleShape) {\n        titleShape.attr({\n          x: keyShape.attr('x') + 10,\n          y: keyShape.attr('y') + height / 2 + 5\n        });\n      }\n\n      options = {\n        groupId: id,\n        id: id + \"-custom-node\",\n        x: keyShape.attr('x') + width / 2,\n        y: keyShape.attr('y') + height / 2,\n        size: [width, height],\n        type: 'rect'\n      };\n    }\n\n    var edges = graph.getEdges(); // 获取所有source在群组外，target在群组内的边\n\n    var sourceOutTargetInEdges = edges.filter(function (edge) {\n      var model = edge.getModel();\n      return !nodesInGroup.includes(model.source) && nodesInGroup.includes(model.target);\n    }); // 获取所有source在群组外，target在群组内的边\n\n    var sourceInTargetOutEdges = edges.filter(function (edge) {\n      var model = edge.getModel();\n      return nodesInGroup.includes(model.source) && !nodesInGroup.includes(model.target);\n    }); // 获取群组中节点之间的所有边\n\n    var edgeAllInGroup = edges.filter(function (edge) {\n      var model = edge.getModel();\n      return nodesInGroup.includes(model.source) && nodesInGroup.includes(model.target);\n    }); // 隐藏群组中的所有节点\n\n    nodesInGroup.forEach(function (nodeId) {\n      var node = graph.findById(nodeId);\n      var model = node.getModel();\n      var groupId = model.groupId;\n\n      if (groupId && groupId !== id) {\n        // 存在群组，则隐藏\n        var currentGroup = _this.getDeletageGroupById(groupId);\n\n        var currentNodeGroup = currentGroup.nodeGroup;\n        currentNodeGroup.hide();\n      }\n\n      node.hide();\n    });\n    edgeAllInGroup.forEach(function (edge) {\n      var source = edge.getSource();\n      var target = edge.getTarget();\n\n      if (source.isVisible() && target.isVisible()) {\n        edge.show();\n      } else {\n        edge.hide();\n      }\n    }); // 群组中存在source和target其中有一个在群组内，一个在群组外的情况\n\n    if (sourceOutTargetInEdges.length > 0 || sourceInTargetOutEdges.length > 0) {\n      var delegateNode = graph.add('node', options);\n      delegateNode.set('capture', false);\n      delegateNode.hide();\n      this.delegateInGroup[id] = {\n        delegateNode: delegateNode\n      }; // 将临时添加的节点加入到群组中，以便拖动节点时候线跟着拖动\n\n      this.setGroupTmpNode(id, id + \"-custom-node\");\n      this.updateEdgeInGroupLinks(id, sourceOutTargetInEdges, sourceInTargetOutEdges);\n    }\n  };\n  /**\n   * 收起群组时生成临时的节点，用于连接群组外的节点\n   *\n   * @param {string} groupId 群组ID\n   * @param {array} sourceOutTargetInEdges 出度的边\n   * @param {array} sourceInTargetOutEdges 入度的边\n   * @memberof ItemGroup\n   */\n\n\n  CustomGroup.prototype.updateEdgeInGroupLinks = function (groupId, sourceOutTargetInEdges, sourceInTargetOutEdges) {\n    var graph = this.graph; // 更新source在外的节点\n\n    var edgesOuts = {};\n    sourceOutTargetInEdges.map(function (edge) {\n      var model = edge.getModel();\n      var id = edge.get('id');\n      var target = model.target;\n      edgesOuts[id] = target;\n      graph.updateItem(edge, {\n        target: groupId + \"-custom-node\"\n      });\n      return true;\n    }); // 更新target在外的节点\n\n    var edgesIn = {};\n    sourceInTargetOutEdges.map(function (edge) {\n      var model = edge.getModel();\n      var id = edge.get('id');\n      var source = model.source;\n      edgesIn[id] = source;\n      graph.updateItem(edge, {\n        source: groupId + \"-custom-node\"\n      });\n      return true;\n    }); // 缓存群组groupId下的edge和临时生成的node节点\n\n    this.delegateInGroup[groupId] = deepMix({\n      sourceOutTargetInEdges: sourceOutTargetInEdges,\n      sourceInTargetOutEdges: sourceInTargetOutEdges,\n      edgesOuts: edgesOuts,\n      edgesIn: edgesIn\n    }, this.delegateInGroup[groupId]);\n  };\n  /**\n   * 展开群组，恢复群组中的节点及边\n   *\n   * @param {string} id 群组ID\n   * @memberof ItemGroup\n   */\n\n\n  CustomGroup.prototype.expandGroup = function (id) {\n    var _this = this;\n\n    var graph = this.graph;\n    var groupType = graph.get('groupType'); // 显示之前隐藏的节点和群组\n\n    var nodesInGroup = graph.get('groupNodes')[id];\n    var noCustomNodes = nodesInGroup.filter(function (node) {\n      return node.indexOf('custom-node') === -1;\n    });\n\n    var _a = this.calculationGroupPosition(noCustomNodes),\n        width = _a.width,\n        height = _a.height;\n\n    var nodeGroup = this.getDeletageGroupById(id).nodeGroup;\n    var keyShape = nodeGroup.get('keyShape');\n    var _b = this.styles,\n        defaultStyle = _b.default,\n        collapse = _b.collapse;\n    Object.keys(defaultStyle).forEach(function (style) {\n      keyShape.attr(style, defaultStyle[style]);\n    });\n    var titleShape = nodeGroup.find(function (element) {\n      return element.get('className') === 'group-title';\n    }); // 检测操作的群组中是否包括子群组\n\n    var paddingValue = this.getGroupPadding(id);\n\n    if (groupType === 'circle') {\n      var r = width > height ? width / 2 : height / 2;\n      keyShape.animate({\n        r: r + paddingValue\n      }, {\n        duration: 500,\n        easing: 'easeCubic'\n      });\n    } else if (groupType === 'rect') {\n      var w = collapse.width,\n          h = collapse.height;\n      keyShape.animate({\n        width: w + width + paddingValue * defaultStyle.disCoefficient * 2,\n        height: h + height + paddingValue * defaultStyle.disCoefficient * 2\n      }, {\n        duration: 500,\n        easing: 'easeCubic'\n      });\n    }\n\n    if (titleShape) {\n      // 根据groupId获取group数据，判断是否需要添加title\n      var groupTitle = null;\n      var groupData = graph.get('groups').filter(function (data) {\n        return data.id === id;\n      });\n\n      if (groupData && groupData.length > 0) {\n        groupTitle = groupData[0].title;\n      }\n\n      var _c = groupTitle.offsetX,\n          offsetX = _c === void 0 ? 0 : _c,\n          _d = groupTitle.offsetY,\n          offsetY = _d === void 0 ? 0 : _d;\n\n      if (groupType === 'circle') {\n        titleShape.animate({\n          x: keyShape.attr('x') + offsetX,\n          y: keyShape.attr('y') - keyShape.attr('r') + offsetY\n        }, {\n          duration: 600,\n          easing: 'easeCubic'\n        });\n      } else if (groupType === 'rect') {\n        titleShape.animate({\n          x: keyShape.attr('x') + (15 + offsetX),\n          y: keyShape.attr('y') + (15 + offsetY)\n        }, {\n          duration: 600,\n          easing: 'easeCubic'\n        });\n      }\n    } // 群组动画一会后再显示节点和边\n\n\n    setTimeout(function () {\n      nodesInGroup.forEach(function (nodeId) {\n        var node = graph.findById(nodeId);\n        var model = node.getModel();\n        var groupId = model.groupId;\n\n        if (groupId && groupId !== id) {\n          // 存在群组，则显示\n          var currentGroup = _this.getDeletageGroupById(groupId);\n\n          var currentNodeGroup = currentGroup.nodeGroup;\n          currentNodeGroup.show();\n          var hasHidden = currentNodeGroup.get('hasHidden');\n\n          if (!hasHidden) {\n            node.show();\n          }\n        } else {\n          node.show();\n        }\n      });\n      var edges = graph.getEdges(); // 获取群组中节点之间的所有边\n\n      var edgeAllInGroup = edges.filter(function (edge) {\n        var model = edge.getModel();\n        return nodesInGroup.includes(model.source) || nodesInGroup.includes(model.target);\n      });\n      edgeAllInGroup.forEach(function (edge) {\n        var source = edge.getSource();\n        var target = edge.getTarget();\n\n        if (source.isVisible() && target.isVisible()) {\n          edge.show();\n        }\n      });\n    }, 300);\n    var delegates = this.delegateInGroup[id];\n\n    if (delegates) {\n      var sourceOutTargetInEdges = delegates.sourceOutTargetInEdges,\n          sourceInTargetOutEdges = delegates.sourceInTargetOutEdges,\n          edgesOuts_1 = delegates.edgesOuts,\n          edgesIn_1 = delegates.edgesIn,\n          delegateNode = delegates.delegateNode; // 恢复source在外的节点\n\n      sourceOutTargetInEdges.map(function (edge) {\n        var edgeId = edge.get('id');\n        var sourceOuts = edgesOuts_1[edgeId];\n        graph.updateItem(edge, {\n          target: sourceOuts\n        });\n        return true;\n      }); // 恢复target在外的节点\n\n      sourceInTargetOutEdges.map(function (edge) {\n        var edgeId = edge.get('id');\n        var sourceIn = edgesIn_1[edgeId];\n        graph.updateItem(edge, {\n          source: sourceIn\n        });\n        return true;\n      }); // 删除群组中的临时节点ID\n\n      var tmpNodeModel = delegateNode.getModel();\n      this.deleteTmpNode(id, tmpNodeModel.id);\n      graph.remove(delegateNode);\n      delete this.delegateInGroup[id];\n    }\n  };\n\n  CustomGroup.prototype.deleteTmpNode = function (groupId, tmpNodeId) {\n    var graph = this.graph;\n    var groups = graph.get('groups');\n    var nodesInGroup = graph.get('groupNodes')[groupId];\n    var index = nodesInGroup.indexOf(tmpNodeId);\n    nodesInGroup.splice(index, 1); // 获取groupId的父群组\n\n    var parentGroup = groups.filter(function (g) {\n      return g.id === groupId;\n    });\n    var parentId = null;\n\n    if (parentGroup.length > 0) {\n      // eslint-disable-next-line prefer-destructuring\n      parentId = parentGroup[0].parentId;\n    } // 如果存在父群组，则把临时元素也添加到父群组中\n\n\n    if (parentId) {\n      this.deleteTmpNode(parentId, tmpNodeId);\n    }\n  };\n  /**\n   * 删除节点分组\n   * @param {string} groupId 节点分组ID\n   * @memberof ItemGroup\n   */\n\n\n  CustomGroup.prototype.remove = function (groupId) {\n    var graph = this.graph;\n    var customGroup = this.getDeletageGroupById(groupId);\n\n    if (!customGroup) {\n      // eslint-disable-next-line no-console\n      // console.warn(`请确认输入的groupId ${groupId} 是否有误！`);\n      return;\n    }\n\n    var nodeGroup = customGroup.nodeGroup;\n    var groupNodes = graph.get('groupNodes');\n    var nodes = groupNodes[groupId]; // 删除原群组中node中的groupID\n\n    nodes.forEach(function (nodeId) {\n      var node = graph.findById(nodeId);\n      var model = node.getModel();\n      var gId = model.groupId;\n\n      if (!gId) {\n        return;\n      }\n\n      if (groupId === gId) {\n        delete model.groupId; // 使用没有groupID的数据更新节点\n\n        graph.updateItem(node, model);\n      }\n    });\n    nodeGroup.destroy(); // 删除customGroup中groupId的数据\n\n    delete this.customGroup[groupId]; // 删除groups数据中的groupId\n\n    var groups = graph.get('groups');\n\n    if (groups.length > 0) {\n      var filterGroup = groups.filter(function (group) {\n        return group.id !== groupId;\n      });\n      graph.set('groups', filterGroup);\n    }\n\n    var parentGroupId = null;\n    var parentGroupData = null;\n\n    for (var i = 0; i < groups.length; i++) {\n      var group = groups[i];\n\n      if (groupId === group.id) {\n        parentGroupId = group.parentId;\n        parentGroupData = group;\n        break;\n      }\n    }\n\n    if (parentGroupData) {\n      delete parentGroupData.parentId;\n    } // 删除groupNodes中的groupId数据\n\n\n    delete groupNodes[groupId];\n\n    if (parentGroupId) {\n      groupNodes[parentGroupId] = groupNodes[parentGroupId].filter(function (node) {\n        return !nodes.includes(node);\n      });\n    }\n  };\n  /**\n   * 更新节点分组位置及里面的节点和边的位置\n   * @param {string} groupId 节点分组ID\n   * @param {object} position delegate的坐标位置\n   */\n\n\n  CustomGroup.prototype.updateGroup = function (groupId, position, originPosition) {\n    var graph = this.graph;\n    var groupType = graph.get('groupType'); // 更新群组里面节点和线的位置\n\n    this.updateItemInGroup(groupId, position, originPosition); // 判断是否拖动出了parent group外面，如果拖出了parent Group外面，则更新数据，去掉group关联\n    // 获取groupId的父Group的ID\n\n    var groups = graph.save().groups;\n    var parentGroupId = null;\n    var parentGroupData = null;\n\n    for (var i = 0; i < groups.length; i++) {\n      var group = groups[i];\n\n      if (groupId === group.id) {\n        parentGroupId = group.parentId;\n        parentGroupData = group;\n        break;\n      }\n    }\n\n    if (parentGroupId) {\n      var parentGroup = this.getDeletageGroupById(parentGroupId).nodeGroup; // const parentGroup = customGroup[parentGroupId].nodeGroup;\n\n      var parentKeyShape = parentGroup.get('keyShape');\n      this.setGroupStyle(parentKeyShape, 'default');\n      var parentGroupBBox = parentKeyShape.getBBox();\n      var minX = parentGroupBBox.minX,\n          minY = parentGroupBBox.minY,\n          maxX = parentGroupBBox.maxX,\n          maxY = parentGroupBBox.maxY; // 检查是否拖出了父Group\n\n      var currentGroup = this.getDeletageGroupById(groupId).nodeGroup; // const currentGroup = customGroup[groupId].nodeGroup;\n\n      var currentKeyShape = currentGroup.get('keyShape');\n      var currentKeyShapeBBox = currentKeyShape.getBBox();\n      var x = currentKeyShapeBBox.x,\n          y = currentKeyShapeBBox.y;\n\n      if (!(x < maxX && x > minX && y < maxY && y > minY)) {\n        // 拖出了parent group，则取消parent group ID\n        delete parentGroupData.parentId; // 同时删除groupID中的节点\n\n        var groupNodes = graph.get('groupNodes');\n        var currentGroupNodes_1 = groupNodes[groupId];\n        var parentGroupNodes = groupNodes[parentGroupId];\n        groupNodes[parentGroupId] = parentGroupNodes.filter(function (node) {\n          return currentGroupNodes_1.indexOf(node) === -1;\n        });\n\n        var _a = this.calculationGroupPosition(groupNodes[parentGroupId]),\n            x1 = _a.x,\n            y1 = _a.y,\n            width = _a.width,\n            height = _a.height; // x: x1, y: y1,\n        // const { x: x1, y: y1 } = originPosition;\n\n\n        var paddingValue = this.getGroupPadding(parentGroupId);\n        var groupTitleShape = parentGroup.find(function (element) {\n          return element.get('className') === 'group-title';\n        });\n        var titleX = 0;\n        var titleY = 0;\n\n        if (groupType === 'circle') {\n          var r = width > height ? width / 2 : height / 2;\n          var cx = x1;\n          var cy = y1;\n          parentKeyShape.attr({\n            r: r + paddingValue,\n            x: cx,\n            y: cy\n          });\n          titleX = cx;\n          titleY = cy - parentKeyShape.attr('r');\n        } else if (groupType === 'rect') {\n          var defaultStyle = this.styles.default;\n          var rectPadding = paddingValue * defaultStyle.disCoefficient;\n          parentKeyShape.attr({\n            x: x1 - rectPadding,\n            y: y1 - rectPadding\n          });\n          titleX = x1 - rectPadding + 15;\n          titleY = y1 - rectPadding + 15;\n        }\n\n        if (groupTitleShape) {\n          var titleConfig = parentGroupData.title;\n          var offsetX = 0;\n          var offsetY = 0;\n\n          if (titleConfig) {\n            offsetX = titleConfig.offsetX; // eslint-disable-line prefer-destructuring\n\n            offsetY = titleConfig.offsetY; // eslint-disable-line prefer-destructuring\n          }\n\n          groupTitleShape.attr({\n            x: titleX + offsetX,\n            y: titleY + offsetY\n          });\n        }\n      }\n    }\n  };\n  /**\n   * 更新节点分组中节点和边的位置\n   * @param {string} groupId 节点分组ID\n   * @param {object} position delegate的坐标位置\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  CustomGroup.prototype.updateItemInGroup = function (groupId, position, originPosition) {\n    var _this = this;\n\n    var graph = this.graph;\n    var groupType = graph.get('groupType');\n    var groupNodes = graph.get('groupNodes'); // step 1：先修改groupId中的节点位置\n\n    var nodeInGroup = groupNodes[groupId];\n    var nodeGroup = this.getDeletageGroupById(groupId).nodeGroup;\n    var originBBox = nodeGroup.getBBox();\n    var otherGroupId = [];\n    nodeInGroup.forEach(function (nodeId, index) {\n      var node = graph.findById(nodeId);\n      var model = node.getModel();\n      var nodeGroupId = model.groupId;\n\n      if (nodeGroupId && !otherGroupId.includes(nodeGroupId)) {\n        otherGroupId.push(nodeGroupId);\n      }\n\n      if (!_this.nodePoint[index]) {\n        _this.nodePoint[index] = {\n          x: model.x,\n          y: model.y\n        };\n      } // 群组拖动后节点的位置：deletateShape的最终位置-群组起始位置+节点位置\n\n\n      var x = position.x - originBBox.x + _this.nodePoint[index].x;\n      var y = position.y - originBBox.y + _this.nodePoint[index].y;\n      _this.nodePoint[index] = {\n        x: x,\n        y: y\n      };\n      graph.updateItem(node, {\n        x: x,\n        y: y\n      });\n    }); // step 2：修改父group中其他节点的位置\n    // otherGroupId中是否包括当前groupId，如果不包括，则添加进去\n\n    if (!otherGroupId.includes(groupId)) {\n      otherGroupId.push(groupId);\n    } // 更新完群组位置后，重新设置群组起始位置\n\n\n    otherGroupId.forEach(function (id) {\n      // 更新群组位置\n      var othergroup = _this.getDeletageGroupById(id).nodeGroup;\n\n      var groupKeyShape = othergroup.get('keyShape');\n      var noCustomNodes = groupNodes[id].filter(function (node) {\n        return node.indexOf('custom-node') === -1;\n      });\n\n      var _a = _this.calculationGroupPosition(noCustomNodes, position),\n          x = _a.x,\n          y = _a.y,\n          width = _a.width,\n          height = _a.height;\n\n      var titleX = 0;\n      var titleY = 0;\n\n      if (groupType === 'circle') {\n        var cx = (width + 2 * x) / 2;\n        var cy = (height + 2 * y) / 2;\n        groupKeyShape.attr({\n          x: cx,\n          y: cy\n        });\n        titleX = cx;\n        titleY = cy - groupKeyShape.attr('r');\n      } else if (groupType === 'rect') {\n        // 节点分组状态\n        var hasHidden = othergroup.get('hasHidden');\n\n        var paddingValue = _this.getGroupPadding(id);\n\n        var keyshapePosition = {};\n        var defaultStyle = _this.styles.default;\n        var rectPadding = paddingValue * defaultStyle.disCoefficient;\n        titleX = x - rectPadding + 15;\n        titleY = y - rectPadding + 15;\n\n        if (hasHidden) {\n          // 无标题，或节点分组是展开的情况\n          keyshapePosition = {\n            x: x - rectPadding,\n            y: y - rectPadding\n          };\n          titleY = titleY + 10;\n        } else {\n          keyshapePosition = {\n            x: x - rectPadding,\n            y: y - rectPadding,\n            width: width + rectPadding * 2,\n            height: height + rectPadding * 2\n          };\n        }\n\n        groupKeyShape.attr(keyshapePosition);\n      } // 如果存在标题，则更新标题位置\n\n\n      _this.updateGroupTitle(othergroup, id, titleX, titleY);\n    });\n  };\n  /**\n   * 更新节点分组的 Title\n   * @param {Group} group 当前 Group 实例\n   * @param {string} groupId 分组ID\n   * @param {number} x x坐标\n   * @param {number} y y坐标\n   */\n\n\n  CustomGroup.prototype.updateGroupTitle = function (group, groupId, x, y) {\n    var graph = this.graph;\n    var groupTitleShape = group.find(function (element) {\n      return element.get('className') === 'group-title';\n    });\n\n    if (groupTitleShape) {\n      var titleConfig = null;\n      var groupData = graph.get('groups').filter(function (data) {\n        return data.id === groupId;\n      });\n\n      if (groupData && groupData.length > 0) {\n        titleConfig = groupData[0].title;\n      }\n\n      var offsetX = 0;\n      var offsetY = 0;\n\n      if (titleConfig) {\n        offsetX = titleConfig.offsetX || 0;\n        offsetY = titleConfig.offsetY || 0;\n      }\n\n      groupTitleShape.attr({\n        x: x + offsetX,\n        y: y + offsetY\n      });\n    }\n  };\n  /**\n   * 拖动节点时候动态改变节点分组大小\n   * @param {Event} evt 事件句柄\n   * @param {Group} currentGroup 当前操作的群组\n   * @param {Item} keyShape 当前操作的keyShape\n   * @description 节点拖入拖出后动态改变群组大小\n   */\n\n\n  CustomGroup.prototype.dynamicChangeGroupSize = function (evt, currentGroup, keyShape) {\n    var item = evt.item;\n    var model = item.getModel(); // 节点所在的GroupId\n\n    var groupId = model.groupId;\n    var graph = this.graph;\n    var groupType = graph.get('groupType');\n    var groupNodes = graph.get('groupNodes');\n    var nodes = groupNodes[groupId]; // 拖出节点后，根据最新的节点数量，重新计算群组大小\n    // 如果只有一个节点，拖出后，则删除该组\n\n    if (nodes.length === 0) {\n      // step 1: 从groupNodes中删除\n      delete groupNodes[groupId]; // step 2: 从groups数据中删除\n\n      var groupsData = graph.get('groups');\n      graph.set('groups', groupsData.filter(function (gdata) {\n        return gdata.id !== groupId;\n      })); // step 3: 删除原来的群组\n\n      currentGroup.remove();\n    } else {\n      var _a = this.calculationGroupPosition(nodes),\n          x = _a.x,\n          y = _a.y,\n          width = _a.width,\n          height = _a.height; // 检测操作的群组中是否包括子群组\n\n\n      var paddingValue = this.getGroupPadding(groupId);\n      var titleX = 0;\n      var titleY = 0;\n\n      if (groupType === 'circle') {\n        var r = width > height ? width / 2 : height / 2;\n        var cx = (width + 2 * x) / 2;\n        var cy = (height + 2 * y) / 2;\n        keyShape.attr({\n          r: r + paddingValue,\n          x: cx,\n          y: cy\n        });\n        titleX = cx;\n        titleY = cy - keyShape.attr('r');\n      } else if (groupType === 'rect') {\n        var defaultStyle = this.styles.default;\n        var rectPadding = paddingValue * defaultStyle.disCoefficient;\n        keyShape.attr({\n          x: x - rectPadding,\n          y: y - rectPadding,\n          width: width + rectPadding * 2,\n          height: height + rectPadding * 2\n        });\n        titleX = x - rectPadding + 15;\n        titleY = y - rectPadding + 15;\n      } // 如果存在标题，则更新标题位置\n\n\n      this.updateGroupTitle(currentGroup, groupId, titleX, titleY);\n    }\n\n    this.setGroupStyle(keyShape, 'default');\n  };\n\n  CustomGroup.prototype.resetNodePoint = function () {\n    this.nodePoint.length = 0;\n  };\n\n  CustomGroup.prototype.destroy = function () {\n    this.graph = null;\n    this.styles = {};\n    this.customGroup = {};\n    this.delegateInGroup = {};\n    this.resetNodePoint();\n    this.destroyed = true;\n  };\n\n  return CustomGroup;\n}();\n\nexport default CustomGroup;"]},"metadata":{},"sourceType":"module"}