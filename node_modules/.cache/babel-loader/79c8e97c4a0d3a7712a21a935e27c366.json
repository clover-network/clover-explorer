{"ast":null,"code":"import each from '@antv/util/lib/each';\nimport isArray from '@antv/util/lib/is-array';\nimport isString from '@antv/util/lib/is-string';\nimport Behavior from '../../behavior/behavior';\n\nvar ModeController =\n/** @class */\nfunction () {\n  function ModeController(graph) {\n    this.graph = graph;\n    this.destroyed = false;\n    this.modes = graph.get('modes') || {\n      default: []\n    };\n    this.formatModes();\n    this.mode = graph.get('defaultMode') || 'default';\n    this.currentBehaves = [];\n    this.setMode(this.mode);\n  }\n\n  ModeController.prototype.formatModes = function () {\n    var modes = this.modes;\n    each(modes, function (mode) {\n      each(mode, function (behavior, i) {\n        if (isString(behavior)) {\n          mode[i] = {\n            type: behavior\n          };\n        }\n      });\n    });\n  };\n\n  ModeController.prototype.setBehaviors = function (mode) {\n    var graph = this.graph;\n    var behaviors = this.modes[mode];\n    var behaves = [];\n    var behave;\n    each(behaviors || [], function (behavior) {\n      var BehaviorInstance = Behavior.getBehavior(behavior.type);\n\n      if (!BehaviorInstance) {\n        return;\n      }\n\n      behave = new BehaviorInstance(behavior);\n\n      if (behave) {\n        behave.bind(graph);\n        behaves.push(behave);\n      }\n    });\n    this.currentBehaves = behaves;\n  };\n\n  ModeController.mergeBehaviors = function (modeBehaviors, behaviors) {\n    each(behaviors, function (behavior) {\n      if (modeBehaviors.indexOf(behavior) < 0) {\n        if (isString(behavior)) {\n          behavior = {\n            type: behavior\n          };\n        }\n\n        modeBehaviors.push(behavior);\n      }\n    });\n    return modeBehaviors;\n  };\n\n  ModeController.filterBehaviors = function (modeBehaviors, behaviors) {\n    var result = [];\n    modeBehaviors.forEach(function (behavior) {\n      var type = '';\n\n      if (isString(behavior)) {\n        type = behavior;\n      } else {\n        // eslint-disable-next-line prefer-destructuring\n        type = behavior.type;\n      }\n\n      if (behaviors.indexOf(type) < 0) {\n        result.push(behavior);\n      }\n    });\n    return result;\n  };\n\n  ModeController.prototype.setMode = function (mode) {\n    var _a = this,\n        modes = _a.modes,\n        graph = _a.graph;\n\n    var current = mode;\n    var behaviors = modes[current];\n\n    if (!behaviors) {\n      return;\n    }\n\n    graph.emit('beforemodechange', {\n      mode: mode\n    });\n    each(this.currentBehaves, function (behave) {\n      behave.unbind(graph);\n    });\n    this.setBehaviors(current);\n    graph.emit('aftermodechange', {\n      mode: mode\n    });\n    this.mode = mode;\n  };\n\n  ModeController.prototype.getMode = function () {\n    return this.mode;\n  };\n  /**\n   * 动态增加或删除 Behavior\n   *\n   * @param {ModeType[]} behaviors\n   * @param {(ModeType[] | ModeType)} modes\n   * @param {boolean} isAdd\n   * @returns {Mode}\n   * @memberof Mode\n   */\n\n\n  ModeController.prototype.manipulateBehaviors = function (behaviors, modes, isAdd) {\n    var _this = this;\n\n    var behaves;\n\n    if (!isArray(behaviors)) {\n      behaves = [behaviors];\n    } else {\n      behaves = behaviors;\n    }\n\n    if (isArray(modes)) {\n      each(modes, function (mode) {\n        if (!_this.modes[mode]) {\n          if (isAdd) {\n            _this.modes[mode] = behaves;\n          }\n        } else if (isAdd) {\n          _this.modes[mode] = ModeController.mergeBehaviors(_this.modes[mode] || [], behaves);\n        } else {\n          _this.modes[mode] = ModeController.filterBehaviors(_this.modes[mode] || [], behaves);\n        }\n      });\n      return this;\n    }\n\n    var currentMode = modes;\n\n    if (!modes) {\n      currentMode = this.mode; // isString(this.mode) ? this.mode : this.mode.type\n    }\n\n    if (!this.modes[currentMode]) {\n      if (isAdd) {\n        this.modes[currentMode] = behaves;\n      }\n    }\n\n    if (isAdd) {\n      this.modes[currentMode] = ModeController.mergeBehaviors(this.modes[currentMode] || [], behaves);\n    } else {\n      this.modes[currentMode] = ModeController.filterBehaviors(this.modes[currentMode] || [], behaves);\n    }\n\n    this.setMode(this.mode);\n    return this;\n  };\n\n  ModeController.prototype.destroy = function () {\n    this.graph = null;\n    this.modes = null;\n    this.currentBehaves = null;\n    this.destroyed = true;\n  };\n\n  return ModeController;\n}();\n\nexport default ModeController;","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/@antv/g6/es/graph/controller/mode.js"],"names":["each","isArray","isString","Behavior","ModeController","graph","destroyed","modes","get","default","formatModes","mode","currentBehaves","setMode","prototype","behavior","i","type","setBehaviors","behaviors","behaves","behave","BehaviorInstance","getBehavior","bind","push","mergeBehaviors","modeBehaviors","indexOf","filterBehaviors","result","forEach","_a","current","emit","unbind","getMode","manipulateBehaviors","isAdd","_this","currentMode","destroy"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,qBAAjB;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAOC,QAAP,MAAqB,0BAArB;AACA,OAAOC,QAAP,MAAqB,yBAArB;;AAEA,IAAIC,cAAc;AAClB;AACA,YAAY;AACV,WAASA,cAAT,CAAwBC,KAAxB,EAA+B;AAC7B,SAAKA,KAAL,GAAaA,KAAb;AACA,SAAKC,SAAL,GAAiB,KAAjB;AACA,SAAKC,KAAL,GAAaF,KAAK,CAACG,GAAN,CAAU,OAAV,KAAsB;AACjCC,MAAAA,OAAO,EAAE;AADwB,KAAnC;AAGA,SAAKC,WAAL;AACA,SAAKC,IAAL,GAAYN,KAAK,CAACG,GAAN,CAAU,aAAV,KAA4B,SAAxC;AACA,SAAKI,cAAL,GAAsB,EAAtB;AACA,SAAKC,OAAL,CAAa,KAAKF,IAAlB;AACD;;AAEDP,EAAAA,cAAc,CAACU,SAAf,CAAyBJ,WAAzB,GAAuC,YAAY;AACjD,QAAIH,KAAK,GAAG,KAAKA,KAAjB;AACAP,IAAAA,IAAI,CAACO,KAAD,EAAQ,UAAUI,IAAV,EAAgB;AAC1BX,MAAAA,IAAI,CAACW,IAAD,EAAO,UAAUI,QAAV,EAAoBC,CAApB,EAAuB;AAChC,YAAId,QAAQ,CAACa,QAAD,CAAZ,EAAwB;AACtBJ,UAAAA,IAAI,CAACK,CAAD,CAAJ,GAAU;AACRC,YAAAA,IAAI,EAAEF;AADE,WAAV;AAGD;AACF,OANG,CAAJ;AAOD,KARG,CAAJ;AASD,GAXD;;AAaAX,EAAAA,cAAc,CAACU,SAAf,CAAyBI,YAAzB,GAAwC,UAAUP,IAAV,EAAgB;AACtD,QAAIN,KAAK,GAAG,KAAKA,KAAjB;AACA,QAAIc,SAAS,GAAG,KAAKZ,KAAL,CAAWI,IAAX,CAAhB;AACA,QAAIS,OAAO,GAAG,EAAd;AACA,QAAIC,MAAJ;AACArB,IAAAA,IAAI,CAACmB,SAAS,IAAI,EAAd,EAAkB,UAAUJ,QAAV,EAAoB;AACxC,UAAIO,gBAAgB,GAAGnB,QAAQ,CAACoB,WAAT,CAAqBR,QAAQ,CAACE,IAA9B,CAAvB;;AAEA,UAAI,CAACK,gBAAL,EAAuB;AACrB;AACD;;AAEDD,MAAAA,MAAM,GAAG,IAAIC,gBAAJ,CAAqBP,QAArB,CAAT;;AAEA,UAAIM,MAAJ,EAAY;AACVA,QAAAA,MAAM,CAACG,IAAP,CAAYnB,KAAZ;AACAe,QAAAA,OAAO,CAACK,IAAR,CAAaJ,MAAb;AACD;AACF,KAbG,CAAJ;AAcA,SAAKT,cAAL,GAAsBQ,OAAtB;AACD,GApBD;;AAsBAhB,EAAAA,cAAc,CAACsB,cAAf,GAAgC,UAAUC,aAAV,EAAyBR,SAAzB,EAAoC;AAClEnB,IAAAA,IAAI,CAACmB,SAAD,EAAY,UAAUJ,QAAV,EAAoB;AAClC,UAAIY,aAAa,CAACC,OAAd,CAAsBb,QAAtB,IAAkC,CAAtC,EAAyC;AACvC,YAAIb,QAAQ,CAACa,QAAD,CAAZ,EAAwB;AACtBA,UAAAA,QAAQ,GAAG;AACTE,YAAAA,IAAI,EAAEF;AADG,WAAX;AAGD;;AAEDY,QAAAA,aAAa,CAACF,IAAd,CAAmBV,QAAnB;AACD;AACF,KAVG,CAAJ;AAWA,WAAOY,aAAP;AACD,GAbD;;AAeAvB,EAAAA,cAAc,CAACyB,eAAf,GAAiC,UAAUF,aAAV,EAAyBR,SAAzB,EAAoC;AACnE,QAAIW,MAAM,GAAG,EAAb;AACAH,IAAAA,aAAa,CAACI,OAAd,CAAsB,UAAUhB,QAAV,EAAoB;AACxC,UAAIE,IAAI,GAAG,EAAX;;AAEA,UAAIf,QAAQ,CAACa,QAAD,CAAZ,EAAwB;AACtBE,QAAAA,IAAI,GAAGF,QAAP;AACD,OAFD,MAEO;AACL;AACAE,QAAAA,IAAI,GAAGF,QAAQ,CAACE,IAAhB;AACD;;AAED,UAAIE,SAAS,CAACS,OAAV,CAAkBX,IAAlB,IAA0B,CAA9B,EAAiC;AAC/Ba,QAAAA,MAAM,CAACL,IAAP,CAAYV,QAAZ;AACD;AACF,KAbD;AAcA,WAAOe,MAAP;AACD,GAjBD;;AAmBA1B,EAAAA,cAAc,CAACU,SAAf,CAAyBD,OAAzB,GAAmC,UAAUF,IAAV,EAAgB;AACjD,QAAIqB,EAAE,GAAG,IAAT;AAAA,QACIzB,KAAK,GAAGyB,EAAE,CAACzB,KADf;AAAA,QAEIF,KAAK,GAAG2B,EAAE,CAAC3B,KAFf;;AAIA,QAAI4B,OAAO,GAAGtB,IAAd;AACA,QAAIQ,SAAS,GAAGZ,KAAK,CAAC0B,OAAD,CAArB;;AAEA,QAAI,CAACd,SAAL,EAAgB;AACd;AACD;;AAEDd,IAAAA,KAAK,CAAC6B,IAAN,CAAW,kBAAX,EAA+B;AAC7BvB,MAAAA,IAAI,EAAEA;AADuB,KAA/B;AAGAX,IAAAA,IAAI,CAAC,KAAKY,cAAN,EAAsB,UAAUS,MAAV,EAAkB;AAC1CA,MAAAA,MAAM,CAACc,MAAP,CAAc9B,KAAd;AACD,KAFG,CAAJ;AAGA,SAAKa,YAAL,CAAkBe,OAAlB;AACA5B,IAAAA,KAAK,CAAC6B,IAAN,CAAW,iBAAX,EAA8B;AAC5BvB,MAAAA,IAAI,EAAEA;AADsB,KAA9B;AAGA,SAAKA,IAAL,GAAYA,IAAZ;AACD,GAvBD;;AAyBAP,EAAAA,cAAc,CAACU,SAAf,CAAyBsB,OAAzB,GAAmC,YAAY;AAC7C,WAAO,KAAKzB,IAAZ;AACD,GAFD;AAGA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGEP,EAAAA,cAAc,CAACU,SAAf,CAAyBuB,mBAAzB,GAA+C,UAAUlB,SAAV,EAAqBZ,KAArB,EAA4B+B,KAA5B,EAAmC;AAChF,QAAIC,KAAK,GAAG,IAAZ;;AAEA,QAAInB,OAAJ;;AAEA,QAAI,CAACnB,OAAO,CAACkB,SAAD,CAAZ,EAAyB;AACvBC,MAAAA,OAAO,GAAG,CAACD,SAAD,CAAV;AACD,KAFD,MAEO;AACLC,MAAAA,OAAO,GAAGD,SAAV;AACD;;AAED,QAAIlB,OAAO,CAACM,KAAD,CAAX,EAAoB;AAClBP,MAAAA,IAAI,CAACO,KAAD,EAAQ,UAAUI,IAAV,EAAgB;AAC1B,YAAI,CAAC4B,KAAK,CAAChC,KAAN,CAAYI,IAAZ,CAAL,EAAwB;AACtB,cAAI2B,KAAJ,EAAW;AACTC,YAAAA,KAAK,CAAChC,KAAN,CAAYI,IAAZ,IAAoBS,OAApB;AACD;AACF,SAJD,MAIO,IAAIkB,KAAJ,EAAW;AAChBC,UAAAA,KAAK,CAAChC,KAAN,CAAYI,IAAZ,IAAoBP,cAAc,CAACsB,cAAf,CAA8Ba,KAAK,CAAChC,KAAN,CAAYI,IAAZ,KAAqB,EAAnD,EAAuDS,OAAvD,CAApB;AACD,SAFM,MAEA;AACLmB,UAAAA,KAAK,CAAChC,KAAN,CAAYI,IAAZ,IAAoBP,cAAc,CAACyB,eAAf,CAA+BU,KAAK,CAAChC,KAAN,CAAYI,IAAZ,KAAqB,EAApD,EAAwDS,OAAxD,CAApB;AACD;AACF,OAVG,CAAJ;AAWA,aAAO,IAAP;AACD;;AAED,QAAIoB,WAAW,GAAGjC,KAAlB;;AAEA,QAAI,CAACA,KAAL,EAAY;AACViC,MAAAA,WAAW,GAAG,KAAK7B,IAAnB,CADU,CACe;AAC1B;;AAED,QAAI,CAAC,KAAKJ,KAAL,CAAWiC,WAAX,CAAL,EAA8B;AAC5B,UAAIF,KAAJ,EAAW;AACT,aAAK/B,KAAL,CAAWiC,WAAX,IAA0BpB,OAA1B;AACD;AACF;;AAED,QAAIkB,KAAJ,EAAW;AACT,WAAK/B,KAAL,CAAWiC,WAAX,IAA0BpC,cAAc,CAACsB,cAAf,CAA8B,KAAKnB,KAAL,CAAWiC,WAAX,KAA2B,EAAzD,EAA6DpB,OAA7D,CAA1B;AACD,KAFD,MAEO;AACL,WAAKb,KAAL,CAAWiC,WAAX,IAA0BpC,cAAc,CAACyB,eAAf,CAA+B,KAAKtB,KAAL,CAAWiC,WAAX,KAA2B,EAA1D,EAA8DpB,OAA9D,CAA1B;AACD;;AAED,SAAKP,OAAL,CAAa,KAAKF,IAAlB;AACA,WAAO,IAAP;AACD,GA9CD;;AAgDAP,EAAAA,cAAc,CAACU,SAAf,CAAyB2B,OAAzB,GAAmC,YAAY;AAC7C,SAAKpC,KAAL,GAAa,IAAb;AACA,SAAKE,KAAL,GAAa,IAAb;AACA,SAAKK,cAAL,GAAsB,IAAtB;AACA,SAAKN,SAAL,GAAiB,IAAjB;AACD,GALD;;AAOA,SAAOF,cAAP;AACD,CAjLD,EAFA;;AAqLA,eAAeA,cAAf","sourcesContent":["import each from '@antv/util/lib/each';\nimport isArray from '@antv/util/lib/is-array';\nimport isString from '@antv/util/lib/is-string';\nimport Behavior from '../../behavior/behavior';\n\nvar ModeController =\n/** @class */\nfunction () {\n  function ModeController(graph) {\n    this.graph = graph;\n    this.destroyed = false;\n    this.modes = graph.get('modes') || {\n      default: []\n    };\n    this.formatModes();\n    this.mode = graph.get('defaultMode') || 'default';\n    this.currentBehaves = [];\n    this.setMode(this.mode);\n  }\n\n  ModeController.prototype.formatModes = function () {\n    var modes = this.modes;\n    each(modes, function (mode) {\n      each(mode, function (behavior, i) {\n        if (isString(behavior)) {\n          mode[i] = {\n            type: behavior\n          };\n        }\n      });\n    });\n  };\n\n  ModeController.prototype.setBehaviors = function (mode) {\n    var graph = this.graph;\n    var behaviors = this.modes[mode];\n    var behaves = [];\n    var behave;\n    each(behaviors || [], function (behavior) {\n      var BehaviorInstance = Behavior.getBehavior(behavior.type);\n\n      if (!BehaviorInstance) {\n        return;\n      }\n\n      behave = new BehaviorInstance(behavior);\n\n      if (behave) {\n        behave.bind(graph);\n        behaves.push(behave);\n      }\n    });\n    this.currentBehaves = behaves;\n  };\n\n  ModeController.mergeBehaviors = function (modeBehaviors, behaviors) {\n    each(behaviors, function (behavior) {\n      if (modeBehaviors.indexOf(behavior) < 0) {\n        if (isString(behavior)) {\n          behavior = {\n            type: behavior\n          };\n        }\n\n        modeBehaviors.push(behavior);\n      }\n    });\n    return modeBehaviors;\n  };\n\n  ModeController.filterBehaviors = function (modeBehaviors, behaviors) {\n    var result = [];\n    modeBehaviors.forEach(function (behavior) {\n      var type = '';\n\n      if (isString(behavior)) {\n        type = behavior;\n      } else {\n        // eslint-disable-next-line prefer-destructuring\n        type = behavior.type;\n      }\n\n      if (behaviors.indexOf(type) < 0) {\n        result.push(behavior);\n      }\n    });\n    return result;\n  };\n\n  ModeController.prototype.setMode = function (mode) {\n    var _a = this,\n        modes = _a.modes,\n        graph = _a.graph;\n\n    var current = mode;\n    var behaviors = modes[current];\n\n    if (!behaviors) {\n      return;\n    }\n\n    graph.emit('beforemodechange', {\n      mode: mode\n    });\n    each(this.currentBehaves, function (behave) {\n      behave.unbind(graph);\n    });\n    this.setBehaviors(current);\n    graph.emit('aftermodechange', {\n      mode: mode\n    });\n    this.mode = mode;\n  };\n\n  ModeController.prototype.getMode = function () {\n    return this.mode;\n  };\n  /**\n   * 动态增加或删除 Behavior\n   *\n   * @param {ModeType[]} behaviors\n   * @param {(ModeType[] | ModeType)} modes\n   * @param {boolean} isAdd\n   * @returns {Mode}\n   * @memberof Mode\n   */\n\n\n  ModeController.prototype.manipulateBehaviors = function (behaviors, modes, isAdd) {\n    var _this = this;\n\n    var behaves;\n\n    if (!isArray(behaviors)) {\n      behaves = [behaviors];\n    } else {\n      behaves = behaviors;\n    }\n\n    if (isArray(modes)) {\n      each(modes, function (mode) {\n        if (!_this.modes[mode]) {\n          if (isAdd) {\n            _this.modes[mode] = behaves;\n          }\n        } else if (isAdd) {\n          _this.modes[mode] = ModeController.mergeBehaviors(_this.modes[mode] || [], behaves);\n        } else {\n          _this.modes[mode] = ModeController.filterBehaviors(_this.modes[mode] || [], behaves);\n        }\n      });\n      return this;\n    }\n\n    var currentMode = modes;\n\n    if (!modes) {\n      currentMode = this.mode; // isString(this.mode) ? this.mode : this.mode.type\n    }\n\n    if (!this.modes[currentMode]) {\n      if (isAdd) {\n        this.modes[currentMode] = behaves;\n      }\n    }\n\n    if (isAdd) {\n      this.modes[currentMode] = ModeController.mergeBehaviors(this.modes[currentMode] || [], behaves);\n    } else {\n      this.modes[currentMode] = ModeController.filterBehaviors(this.modes[currentMode] || [], behaves);\n    }\n\n    this.setMode(this.mode);\n    return this;\n  };\n\n  ModeController.prototype.destroy = function () {\n    this.graph = null;\n    this.modes = null;\n    this.currentBehaves = null;\n    this.destroyed = true;\n  };\n\n  return ModeController;\n}();\n\nexport default ModeController;"]},"metadata":{},"sourceType":"module"}