{"ast":null,"code":"import LuDecomposition from './dc/lu';\nimport Matrix from './matrix';\nimport MatrixSelectionView from './views/selection';\nexport function determinant(matrix) {\n  matrix = Matrix.checkMatrix(matrix);\n\n  if (matrix.isSquare()) {\n    let a, b, c, d;\n\n    if (matrix.columns === 2) {\n      // 2 x 2 matrix\n      a = matrix.get(0, 0);\n      b = matrix.get(0, 1);\n      c = matrix.get(1, 0);\n      d = matrix.get(1, 1);\n      return a * d - b * c;\n    } else if (matrix.columns === 3) {\n      // 3 x 3 matrix\n      let subMatrix0, subMatrix1, subMatrix2;\n      subMatrix0 = new MatrixSelectionView(matrix, [1, 2], [1, 2]);\n      subMatrix1 = new MatrixSelectionView(matrix, [1, 2], [0, 2]);\n      subMatrix2 = new MatrixSelectionView(matrix, [1, 2], [0, 1]);\n      a = matrix.get(0, 0);\n      b = matrix.get(0, 1);\n      c = matrix.get(0, 2);\n      return a * determinant(subMatrix0) - b * determinant(subMatrix1) + c * determinant(subMatrix2);\n    } else {\n      // general purpose determinant using the LU decomposition\n      return new LuDecomposition(matrix).determinant;\n    }\n  } else {\n    throw Error('determinant can only be calculated for a square matrix');\n  }\n}","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/ml-matrix/src/determinant.js"],"names":["LuDecomposition","Matrix","MatrixSelectionView","determinant","matrix","checkMatrix","isSquare","a","b","c","d","columns","get","subMatrix0","subMatrix1","subMatrix2","Error"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,SAA5B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,mBAAP,MAAgC,mBAAhC;AAEA,OAAO,SAASC,WAAT,CAAqBC,MAArB,EAA6B;AAClCA,EAAAA,MAAM,GAAGH,MAAM,CAACI,WAAP,CAAmBD,MAAnB,CAAT;;AACA,MAAIA,MAAM,CAACE,QAAP,EAAJ,EAAuB;AACrB,QAAIC,CAAJ,EAAOC,CAAP,EAAUC,CAAV,EAAaC,CAAb;;AACA,QAAIN,MAAM,CAACO,OAAP,KAAmB,CAAvB,EAA0B;AACxB;AACAJ,MAAAA,CAAC,GAAGH,MAAM,CAACQ,GAAP,CAAW,CAAX,EAAc,CAAd,CAAJ;AACAJ,MAAAA,CAAC,GAAGJ,MAAM,CAACQ,GAAP,CAAW,CAAX,EAAc,CAAd,CAAJ;AACAH,MAAAA,CAAC,GAAGL,MAAM,CAACQ,GAAP,CAAW,CAAX,EAAc,CAAd,CAAJ;AACAF,MAAAA,CAAC,GAAGN,MAAM,CAACQ,GAAP,CAAW,CAAX,EAAc,CAAd,CAAJ;AAEA,aAAOL,CAAC,GAAGG,CAAJ,GAAQF,CAAC,GAAGC,CAAnB;AACD,KARD,MAQO,IAAIL,MAAM,CAACO,OAAP,KAAmB,CAAvB,EAA0B;AAC/B;AACA,UAAIE,UAAJ,EAAgBC,UAAhB,EAA4BC,UAA5B;AACAF,MAAAA,UAAU,GAAG,IAAIX,mBAAJ,CAAwBE,MAAxB,EAAgC,CAAC,CAAD,EAAI,CAAJ,CAAhC,EAAwC,CAAC,CAAD,EAAI,CAAJ,CAAxC,CAAb;AACAU,MAAAA,UAAU,GAAG,IAAIZ,mBAAJ,CAAwBE,MAAxB,EAAgC,CAAC,CAAD,EAAI,CAAJ,CAAhC,EAAwC,CAAC,CAAD,EAAI,CAAJ,CAAxC,CAAb;AACAW,MAAAA,UAAU,GAAG,IAAIb,mBAAJ,CAAwBE,MAAxB,EAAgC,CAAC,CAAD,EAAI,CAAJ,CAAhC,EAAwC,CAAC,CAAD,EAAI,CAAJ,CAAxC,CAAb;AACAG,MAAAA,CAAC,GAAGH,MAAM,CAACQ,GAAP,CAAW,CAAX,EAAc,CAAd,CAAJ;AACAJ,MAAAA,CAAC,GAAGJ,MAAM,CAACQ,GAAP,CAAW,CAAX,EAAc,CAAd,CAAJ;AACAH,MAAAA,CAAC,GAAGL,MAAM,CAACQ,GAAP,CAAW,CAAX,EAAc,CAAd,CAAJ;AAEA,aACEL,CAAC,GAAGJ,WAAW,CAACU,UAAD,CAAf,GACAL,CAAC,GAAGL,WAAW,CAACW,UAAD,CADf,GAEAL,CAAC,GAAGN,WAAW,CAACY,UAAD,CAHjB;AAKD,KAfM,MAeA;AACL;AACA,aAAO,IAAIf,eAAJ,CAAoBI,MAApB,EAA4BD,WAAnC;AACD;AACF,GA7BD,MA6BO;AACL,UAAMa,KAAK,CAAC,wDAAD,CAAX;AACD;AACF","sourcesContent":["import LuDecomposition from './dc/lu';\nimport Matrix from './matrix';\nimport MatrixSelectionView from './views/selection';\n\nexport function determinant(matrix) {\n  matrix = Matrix.checkMatrix(matrix);\n  if (matrix.isSquare()) {\n    let a, b, c, d;\n    if (matrix.columns === 2) {\n      // 2 x 2 matrix\n      a = matrix.get(0, 0);\n      b = matrix.get(0, 1);\n      c = matrix.get(1, 0);\n      d = matrix.get(1, 1);\n\n      return a * d - b * c;\n    } else if (matrix.columns === 3) {\n      // 3 x 3 matrix\n      let subMatrix0, subMatrix1, subMatrix2;\n      subMatrix0 = new MatrixSelectionView(matrix, [1, 2], [1, 2]);\n      subMatrix1 = new MatrixSelectionView(matrix, [1, 2], [0, 2]);\n      subMatrix2 = new MatrixSelectionView(matrix, [1, 2], [0, 1]);\n      a = matrix.get(0, 0);\n      b = matrix.get(0, 1);\n      c = matrix.get(0, 2);\n\n      return (\n        a * determinant(subMatrix0) -\n        b * determinant(subMatrix1) +\n        c * determinant(subMatrix2)\n      );\n    } else {\n      // general purpose determinant using the LU decomposition\n      return new LuDecomposition(matrix).determinant;\n    }\n  } else {\n    throw Error('determinant can only be calculated for a square matrix');\n  }\n}\n"]},"metadata":{},"sourceType":"module"}