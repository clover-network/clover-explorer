{"ast":null,"code":"/**\n * @fileOverview random layout\n * @author shiwu.wyy@antfin.com\n */\nimport { __extends } from \"tslib\";\nimport * as d3Force from 'd3-force';\nimport forceInABox from './force-in-a-box';\nimport isArray from '@antv/util/lib/is-array';\nimport isFunction from '@antv/util/lib/is-function';\nimport isNumber from '@antv/util/lib/is-number';\nimport mix from '@antv/util/lib/mix';\nimport { BaseLayout } from '../layout';\nimport { LAYOUT_MESSAGE } from '../worker/layoutConst';\n/**\n * 经典力导布局 force-directed\n */\n\nvar ForceLayout =\n/** @class */\nfunction (_super) {\n  __extends(ForceLayout, _super);\n\n  function ForceLayout() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /** 向心力作用点 */\n\n\n    _this.center = [0, 0];\n    /** 节点作用力 */\n\n    _this.nodeStrength = null;\n    /** 边的作用力, 默认为根据节点的入度出度自适应 */\n\n    _this.edgeStrength = null;\n    /** 是否防止节点相互覆盖 */\n\n    _this.preventOverlap = false;\n    /** 聚类节点作用力 */\n\n    _this.clusterNodeStrength = null;\n    /** 聚类边作用力 */\n\n    _this.clusterEdgeStrength = null;\n    /** 聚类边长度 */\n\n    _this.clusterEdgeDistance = null;\n    /** 聚类节点大小 / 直径，直径越大，越分散 */\n\n    _this.clusterNodeSize = null;\n    /** 用于 foci 的力 */\n\n    _this.clusterFociStrength = null;\n    /** 默认边长度 */\n\n    _this.linkDistance = 50;\n    /** 迭代阈值的衰减率 [0, 1]，0.028 对应最大迭代数为 300 */\n\n    _this.alphaDecay = 0.028;\n    /** 停止迭代的阈值 */\n\n    _this.alphaMin = 0.001;\n    /** 当前阈值 */\n\n    _this.alpha = 0.3;\n    /** 防止重叠的力强度 */\n\n    _this.collideStrength = 1;\n    /** 是否启用web worker。前提是在web worker里执行布局，否则无效\t*/\n\n    _this.workerEnabled = false;\n\n    _this.tick = function () {};\n    /** 布局完成回调 */\n\n\n    _this.onLayoutEnd = function () {};\n    /** 布局每一次迭代完成的回调 */\n\n\n    _this.onTick = function () {};\n    /** 是否正在布局 */\n\n\n    _this.ticking = undefined;\n    return _this;\n  }\n\n  ForceLayout.prototype.getDefaultCfg = function () {\n    return {\n      center: [0, 0],\n      nodeStrength: null,\n      edgeStrength: null,\n      preventOverlap: false,\n      nodeSize: undefined,\n      nodeSpacing: undefined,\n      linkDistance: 50,\n      forceSimulation: null,\n      alphaDecay: 0.028,\n      alphaMin: 0.001,\n      alpha: 0.3,\n      collideStrength: 1,\n      clustering: false,\n      clusterNodeStrength: -1,\n      clusterEdgeStrength: 0.1,\n      clusterEdgeDistance: 100,\n      clusterFociStrength: 0.8,\n      clusterNodeSize: 10,\n      tick: function tick() {},\n      onLayoutEnd: function onLayoutEnd() {},\n      onTick: function onTick() {},\n      // 是否启用web worker。前提是在web worker里执行布局，否则无效\n      workerEnabled: false\n    };\n  };\n  /**\n   * 初始化\n   * @param {object} data 数据\n   */\n\n\n  ForceLayout.prototype.init = function (data) {\n    var self = this;\n    self.nodes = data.nodes || [];\n    var edges = data.edges || [];\n    self.edges = edges.map(function (edge) {\n      var res = {};\n      var expectKeys = ['targetNode', 'sourceNode', 'startPoint', 'endPoint'];\n      Object.keys(edge).forEach(function (key) {\n        if (!(expectKeys.indexOf(key) > -1)) {\n          res[key] = edge[key];\n        }\n      });\n      return res;\n    });\n    self.ticking = false;\n  };\n  /**\n   * 执行布局\n   */\n\n\n  ForceLayout.prototype.execute = function (reloadData) {\n    var self = this;\n    var nodes = self.nodes;\n    var edges = self.edges; // 如果正在布局，忽略布局请求\n\n    if (self.ticking) {\n      return;\n    }\n\n    var simulation = self.forceSimulation;\n    var alphaMin = self.alphaMin;\n    var alphaDecay = self.alphaDecay;\n    var alpha = self.alpha;\n\n    if (!simulation) {\n      try {\n        // 定义节点的力\n        var nodeForce = d3Force.forceManyBody();\n\n        if (self.nodeStrength) {\n          nodeForce.strength(self.nodeStrength);\n        }\n\n        simulation = d3Force.forceSimulation().nodes(nodes);\n\n        if (self.clustering) {\n          var clusterForce = forceInABox();\n          clusterForce.centerX(self.center[0]).centerY(self.center[1]).template('force').strength(self.clusterFociStrength);\n\n          if (edges) {\n            clusterForce.links(edges);\n          }\n\n          if (nodes) {\n            clusterForce.nodes(nodes);\n          }\n\n          clusterForce.forceLinkDistance(self.clusterEdgeDistance).forceLinkStrength(self.clusterEdgeStrength).forceCharge(self.clusterNodeStrength).forceNodeSize(self.clusterNodeSize);\n          self.clusterForce = clusterForce;\n          simulation.force('group', clusterForce);\n        }\n\n        simulation.force('center', d3Force.forceCenter(self.center[0], self.center[1])).force('charge', nodeForce).alpha(alpha).alphaDecay(alphaDecay).alphaMin(alphaMin);\n\n        if (self.preventOverlap) {\n          self.overlapProcess(simulation);\n        } // 如果有边，定义边的力\n\n\n        if (edges) {\n          // d3 的 forceLayout 会重新生成边的数据模型，为了避免污染源数据\n          var edgeForce = d3Force.forceLink().id(function (d) {\n            return d.id;\n          }).links(edges);\n\n          if (self.edgeStrength) {\n            edgeForce.strength(self.edgeStrength);\n          }\n\n          if (self.linkDistance) {\n            edgeForce.distance(self.linkDistance);\n          }\n\n          self.edgeForce = edgeForce;\n          simulation.force('link', edgeForce);\n        }\n\n        if (self.workerEnabled && !isInWorker()) {\n          // 如果不是运行在web worker里，不用web worker布局\n          self.workerEnabled = false;\n          console.warn('workerEnabled option is only supported when running in web worker.');\n        }\n\n        if (!self.workerEnabled) {\n          simulation.on('tick', function () {\n            self.tick();\n          }).on('end', function () {\n            self.ticking = false;\n\n            if (self.onLayoutEnd) {\n              self.onLayoutEnd();\n            }\n          });\n          self.ticking = true;\n        } else {\n          // worker is enabled\n          simulation.stop();\n          var totalTicks = getSimulationTicks(simulation);\n\n          for (var currentTick = 1; currentTick <= totalTicks; currentTick++) {\n            simulation.tick(); // currentTick starts from 1.\n\n            postMessage({\n              type: LAYOUT_MESSAGE.TICK,\n              currentTick: currentTick,\n              totalTicks: totalTicks,\n              nodes: nodes\n            }, undefined);\n          }\n\n          self.ticking = false;\n        }\n\n        self.forceSimulation = simulation;\n        self.ticking = true;\n      } catch (e) {\n        self.ticking = false;\n        console.warn(e);\n      }\n    } else {\n      if (reloadData) {\n        if (self.clustering && self.clusterForce) {\n          self.clusterForce.nodes(nodes);\n          self.clusterForce.links(edges);\n        }\n\n        simulation.nodes(nodes);\n        self.edgeForce.links(edges);\n      }\n\n      if (self.preventOverlap) {\n        self.overlapProcess(simulation);\n      }\n\n      simulation.alpha(alpha).restart();\n      this.ticking = true;\n    }\n  };\n  /**\n   * 防止重叠\n   * @param {object} simulation 力模拟模型\n   */\n\n\n  ForceLayout.prototype.overlapProcess = function (simulation) {\n    var self = this;\n    var nodeSize = self.nodeSize;\n    var nodeSpacing = self.nodeSpacing;\n    var nodeSizeFunc;\n    var nodeSpacingFunc;\n    var collideStrength = self.collideStrength;\n\n    if (isNumber(nodeSpacing)) {\n      nodeSpacingFunc = function nodeSpacingFunc() {\n        return nodeSpacing;\n      };\n    } else if (isFunction(nodeSpacing)) {\n      nodeSpacingFunc = nodeSpacing;\n    } else {\n      nodeSpacingFunc = function nodeSpacingFunc() {\n        return 0;\n      };\n    }\n\n    if (!nodeSize) {\n      nodeSizeFunc = function nodeSizeFunc(d) {\n        if (d.size) {\n          if (isArray(d.size)) {\n            var res = d.size[0] > d.size[1] ? d.size[0] : d.size[1];\n            return res / 2 + nodeSpacingFunc(d);\n          }\n\n          return d.size / 2 + nodeSpacingFunc(d);\n        }\n\n        return 10 + nodeSpacingFunc(d);\n      };\n    } else if (isFunction(nodeSize)) {\n      nodeSizeFunc = function nodeSizeFunc(d) {\n        var size = nodeSize(d);\n        return size + nodeSpacingFunc(d);\n      };\n    } else if (isArray(nodeSize)) {\n      var larger = nodeSize[0] > nodeSize[1] ? nodeSize[0] : nodeSize[1];\n      var radius_1 = larger / 2;\n\n      nodeSizeFunc = function nodeSizeFunc(d) {\n        return radius_1 + nodeSpacingFunc(d);\n      };\n    } else if (isNumber(nodeSize)) {\n      var radius_2 = nodeSize / 2;\n\n      nodeSizeFunc = function nodeSizeFunc(d) {\n        return radius_2 + nodeSpacingFunc(d);\n      };\n    } else {\n      nodeSizeFunc = function nodeSizeFunc() {\n        return 10;\n      };\n    } // forceCollide's parameter is a radius\n\n\n    simulation.force('collisionForce', d3Force.forceCollide(nodeSizeFunc).strength(collideStrength));\n  };\n  /**\n   * 更新布局配置，但不执行布局\n   * @param {object} cfg 需要更新的配置项\n   */\n\n\n  ForceLayout.prototype.updateCfg = function (cfg) {\n    var self = this;\n\n    if (self.ticking) {\n      self.forceSimulation.stop();\n      self.ticking = false;\n    }\n\n    self.forceSimulation = null;\n    mix(self, cfg);\n  };\n\n  ForceLayout.prototype.destroy = function () {\n    var self = this;\n\n    if (self.ticking) {\n      self.forceSimulation.stop();\n      self.ticking = false;\n    }\n\n    self.nodes = null;\n    self.edges = null;\n    self.destroyed = true;\n  };\n\n  return ForceLayout;\n}(BaseLayout);\n\nexport default ForceLayout; // Return total ticks of d3-force simulation\n\nfunction getSimulationTicks(simulation) {\n  var alphaMin = simulation.alphaMin();\n  var alphaTarget = simulation.alphaTarget();\n  var alpha = simulation.alpha();\n  var totalTicksFloat = Math.log((alphaMin - alphaTarget) / (alpha - alphaTarget)) / Math.log(1 - simulation.alphaDecay());\n  var totalTicks = Math.ceil(totalTicksFloat);\n  return totalTicks;\n} // 判断是否运行在web worker里\n\n\nfunction isInWorker() {\n  // eslint-disable-next-line no-undef\n  return typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope;\n}","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/@antv/g6/es/layout/force/force.js"],"names":["__extends","d3Force","forceInABox","isArray","isFunction","isNumber","mix","BaseLayout","LAYOUT_MESSAGE","ForceLayout","_super","_this","apply","arguments","center","nodeStrength","edgeStrength","preventOverlap","clusterNodeStrength","clusterEdgeStrength","clusterEdgeDistance","clusterNodeSize","clusterFociStrength","linkDistance","alphaDecay","alphaMin","alpha","collideStrength","workerEnabled","tick","onLayoutEnd","onTick","ticking","undefined","prototype","getDefaultCfg","nodeSize","nodeSpacing","forceSimulation","clustering","init","data","self","nodes","edges","map","edge","res","expectKeys","Object","keys","forEach","key","indexOf","execute","reloadData","simulation","nodeForce","forceManyBody","strength","clusterForce","centerX","centerY","template","links","forceLinkDistance","forceLinkStrength","forceCharge","forceNodeSize","force","forceCenter","overlapProcess","edgeForce","forceLink","id","d","distance","isInWorker","console","warn","on","stop","totalTicks","getSimulationTicks","currentTick","postMessage","type","TICK","e","restart","nodeSizeFunc","nodeSpacingFunc","size","larger","radius_1","radius_2","forceCollide","updateCfg","cfg","destroy","destroyed","alphaTarget","totalTicksFloat","Math","log","ceil","WorkerGlobalScope"],"mappings":"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","sourcesContent":["/**\n * @fileOverview random layout\n * @author shiwu.wyy@antfin.com\n */\nimport { __extends } from \"tslib\";\nimport * as d3Force from 'd3-force';\nimport forceInABox from './force-in-a-box';\nimport isArray from '@antv/util/lib/is-array';\nimport isFunction from '@antv/util/lib/is-function';\nimport isNumber from '@antv/util/lib/is-number';\nimport mix from '@antv/util/lib/mix';\nimport { BaseLayout } from '../layout';\nimport { LAYOUT_MESSAGE } from '../worker/layoutConst';\n/**\n * 经典力导布局 force-directed\n */\n\nvar ForceLayout =\n/** @class */\nfunction (_super) {\n  __extends(ForceLayout, _super);\n\n  function ForceLayout() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /** 向心力作用点 */\n\n\n    _this.center = [0, 0];\n    /** 节点作用力 */\n\n    _this.nodeStrength = null;\n    /** 边的作用力, 默认为根据节点的入度出度自适应 */\n\n    _this.edgeStrength = null;\n    /** 是否防止节点相互覆盖 */\n\n    _this.preventOverlap = false;\n    /** 聚类节点作用力 */\n\n    _this.clusterNodeStrength = null;\n    /** 聚类边作用力 */\n\n    _this.clusterEdgeStrength = null;\n    /** 聚类边长度 */\n\n    _this.clusterEdgeDistance = null;\n    /** 聚类节点大小 / 直径，直径越大，越分散 */\n\n    _this.clusterNodeSize = null;\n    /** 用于 foci 的力 */\n\n    _this.clusterFociStrength = null;\n    /** 默认边长度 */\n\n    _this.linkDistance = 50;\n    /** 迭代阈值的衰减率 [0, 1]，0.028 对应最大迭代数为 300 */\n\n    _this.alphaDecay = 0.028;\n    /** 停止迭代的阈值 */\n\n    _this.alphaMin = 0.001;\n    /** 当前阈值 */\n\n    _this.alpha = 0.3;\n    /** 防止重叠的力强度 */\n\n    _this.collideStrength = 1;\n    /** 是否启用web worker。前提是在web worker里执行布局，否则无效\t*/\n\n    _this.workerEnabled = false;\n\n    _this.tick = function () {};\n    /** 布局完成回调 */\n\n\n    _this.onLayoutEnd = function () {};\n    /** 布局每一次迭代完成的回调 */\n\n\n    _this.onTick = function () {};\n    /** 是否正在布局 */\n\n\n    _this.ticking = undefined;\n    return _this;\n  }\n\n  ForceLayout.prototype.getDefaultCfg = function () {\n    return {\n      center: [0, 0],\n      nodeStrength: null,\n      edgeStrength: null,\n      preventOverlap: false,\n      nodeSize: undefined,\n      nodeSpacing: undefined,\n      linkDistance: 50,\n      forceSimulation: null,\n      alphaDecay: 0.028,\n      alphaMin: 0.001,\n      alpha: 0.3,\n      collideStrength: 1,\n      clustering: false,\n      clusterNodeStrength: -1,\n      clusterEdgeStrength: 0.1,\n      clusterEdgeDistance: 100,\n      clusterFociStrength: 0.8,\n      clusterNodeSize: 10,\n      tick: function tick() {},\n      onLayoutEnd: function onLayoutEnd() {},\n      onTick: function onTick() {},\n      // 是否启用web worker。前提是在web worker里执行布局，否则无效\n      workerEnabled: false\n    };\n  };\n  /**\n   * 初始化\n   * @param {object} data 数据\n   */\n\n\n  ForceLayout.prototype.init = function (data) {\n    var self = this;\n    self.nodes = data.nodes || [];\n    var edges = data.edges || [];\n    self.edges = edges.map(function (edge) {\n      var res = {};\n      var expectKeys = ['targetNode', 'sourceNode', 'startPoint', 'endPoint'];\n      Object.keys(edge).forEach(function (key) {\n        if (!(expectKeys.indexOf(key) > -1)) {\n          res[key] = edge[key];\n        }\n      });\n      return res;\n    });\n    self.ticking = false;\n  };\n  /**\n   * 执行布局\n   */\n\n\n  ForceLayout.prototype.execute = function (reloadData) {\n    var self = this;\n    var nodes = self.nodes;\n    var edges = self.edges; // 如果正在布局，忽略布局请求\n\n    if (self.ticking) {\n      return;\n    }\n\n    var simulation = self.forceSimulation;\n    var alphaMin = self.alphaMin;\n    var alphaDecay = self.alphaDecay;\n    var alpha = self.alpha;\n\n    if (!simulation) {\n      try {\n        // 定义节点的力\n        var nodeForce = d3Force.forceManyBody();\n\n        if (self.nodeStrength) {\n          nodeForce.strength(self.nodeStrength);\n        }\n\n        simulation = d3Force.forceSimulation().nodes(nodes);\n\n        if (self.clustering) {\n          var clusterForce = forceInABox();\n          clusterForce.centerX(self.center[0]).centerY(self.center[1]).template('force').strength(self.clusterFociStrength);\n\n          if (edges) {\n            clusterForce.links(edges);\n          }\n\n          if (nodes) {\n            clusterForce.nodes(nodes);\n          }\n\n          clusterForce.forceLinkDistance(self.clusterEdgeDistance).forceLinkStrength(self.clusterEdgeStrength).forceCharge(self.clusterNodeStrength).forceNodeSize(self.clusterNodeSize);\n          self.clusterForce = clusterForce;\n          simulation.force('group', clusterForce);\n        }\n\n        simulation.force('center', d3Force.forceCenter(self.center[0], self.center[1])).force('charge', nodeForce).alpha(alpha).alphaDecay(alphaDecay).alphaMin(alphaMin);\n\n        if (self.preventOverlap) {\n          self.overlapProcess(simulation);\n        } // 如果有边，定义边的力\n\n\n        if (edges) {\n          // d3 的 forceLayout 会重新生成边的数据模型，为了避免污染源数据\n          var edgeForce = d3Force.forceLink().id(function (d) {\n            return d.id;\n          }).links(edges);\n\n          if (self.edgeStrength) {\n            edgeForce.strength(self.edgeStrength);\n          }\n\n          if (self.linkDistance) {\n            edgeForce.distance(self.linkDistance);\n          }\n\n          self.edgeForce = edgeForce;\n          simulation.force('link', edgeForce);\n        }\n\n        if (self.workerEnabled && !isInWorker()) {\n          // 如果不是运行在web worker里，不用web worker布局\n          self.workerEnabled = false;\n          console.warn('workerEnabled option is only supported when running in web worker.');\n        }\n\n        if (!self.workerEnabled) {\n          simulation.on('tick', function () {\n            self.tick();\n          }).on('end', function () {\n            self.ticking = false;\n\n            if (self.onLayoutEnd) {\n              self.onLayoutEnd();\n            }\n          });\n          self.ticking = true;\n        } else {\n          // worker is enabled\n          simulation.stop();\n          var totalTicks = getSimulationTicks(simulation);\n\n          for (var currentTick = 1; currentTick <= totalTicks; currentTick++) {\n            simulation.tick(); // currentTick starts from 1.\n\n            postMessage({\n              type: LAYOUT_MESSAGE.TICK,\n              currentTick: currentTick,\n              totalTicks: totalTicks,\n              nodes: nodes\n            }, undefined);\n          }\n\n          self.ticking = false;\n        }\n\n        self.forceSimulation = simulation;\n        self.ticking = true;\n      } catch (e) {\n        self.ticking = false;\n        console.warn(e);\n      }\n    } else {\n      if (reloadData) {\n        if (self.clustering && self.clusterForce) {\n          self.clusterForce.nodes(nodes);\n          self.clusterForce.links(edges);\n        }\n\n        simulation.nodes(nodes);\n        self.edgeForce.links(edges);\n      }\n\n      if (self.preventOverlap) {\n        self.overlapProcess(simulation);\n      }\n\n      simulation.alpha(alpha).restart();\n      this.ticking = true;\n    }\n  };\n  /**\n   * 防止重叠\n   * @param {object} simulation 力模拟模型\n   */\n\n\n  ForceLayout.prototype.overlapProcess = function (simulation) {\n    var self = this;\n    var nodeSize = self.nodeSize;\n    var nodeSpacing = self.nodeSpacing;\n    var nodeSizeFunc;\n    var nodeSpacingFunc;\n    var collideStrength = self.collideStrength;\n\n    if (isNumber(nodeSpacing)) {\n      nodeSpacingFunc = function nodeSpacingFunc() {\n        return nodeSpacing;\n      };\n    } else if (isFunction(nodeSpacing)) {\n      nodeSpacingFunc = nodeSpacing;\n    } else {\n      nodeSpacingFunc = function nodeSpacingFunc() {\n        return 0;\n      };\n    }\n\n    if (!nodeSize) {\n      nodeSizeFunc = function nodeSizeFunc(d) {\n        if (d.size) {\n          if (isArray(d.size)) {\n            var res = d.size[0] > d.size[1] ? d.size[0] : d.size[1];\n            return res / 2 + nodeSpacingFunc(d);\n          }\n\n          return d.size / 2 + nodeSpacingFunc(d);\n        }\n\n        return 10 + nodeSpacingFunc(d);\n      };\n    } else if (isFunction(nodeSize)) {\n      nodeSizeFunc = function nodeSizeFunc(d) {\n        var size = nodeSize(d);\n        return size + nodeSpacingFunc(d);\n      };\n    } else if (isArray(nodeSize)) {\n      var larger = nodeSize[0] > nodeSize[1] ? nodeSize[0] : nodeSize[1];\n      var radius_1 = larger / 2;\n\n      nodeSizeFunc = function nodeSizeFunc(d) {\n        return radius_1 + nodeSpacingFunc(d);\n      };\n    } else if (isNumber(nodeSize)) {\n      var radius_2 = nodeSize / 2;\n\n      nodeSizeFunc = function nodeSizeFunc(d) {\n        return radius_2 + nodeSpacingFunc(d);\n      };\n    } else {\n      nodeSizeFunc = function nodeSizeFunc() {\n        return 10;\n      };\n    } // forceCollide's parameter is a radius\n\n\n    simulation.force('collisionForce', d3Force.forceCollide(nodeSizeFunc).strength(collideStrength));\n  };\n  /**\n   * 更新布局配置，但不执行布局\n   * @param {object} cfg 需要更新的配置项\n   */\n\n\n  ForceLayout.prototype.updateCfg = function (cfg) {\n    var self = this;\n\n    if (self.ticking) {\n      self.forceSimulation.stop();\n      self.ticking = false;\n    }\n\n    self.forceSimulation = null;\n    mix(self, cfg);\n  };\n\n  ForceLayout.prototype.destroy = function () {\n    var self = this;\n\n    if (self.ticking) {\n      self.forceSimulation.stop();\n      self.ticking = false;\n    }\n\n    self.nodes = null;\n    self.edges = null;\n    self.destroyed = true;\n  };\n\n  return ForceLayout;\n}(BaseLayout);\n\nexport default ForceLayout; // Return total ticks of d3-force simulation\n\nfunction getSimulationTicks(simulation) {\n  var alphaMin = simulation.alphaMin();\n  var alphaTarget = simulation.alphaTarget();\n  var alpha = simulation.alpha();\n  var totalTicksFloat = Math.log((alphaMin - alphaTarget) / (alpha - alphaTarget)) / Math.log(1 - simulation.alphaDecay());\n  var totalTicks = Math.ceil(totalTicksFloat);\n  return totalTicks;\n} // 判断是否运行在web worker里\n\n\nfunction isInWorker() {\n  // eslint-disable-next-line no-undef\n  return typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope;\n}"]},"metadata":{},"sourceType":"module"}