{"ast":null,"code":"/**\n * bullet 处理数据\n * @param options\n */\nexport function transformData(options) {\n  var data = options.data,\n      xField = options.xField,\n      measureField = options.measureField,\n      rangeField = options.rangeField,\n      targetField = options.targetField,\n      layout = options.layout;\n  var ds = [];\n  var scales = [];\n  data.forEach(function (item, index) {\n    var _a; // 构建 title * range\n\n\n    item[rangeField].sort(function (a, b) {\n      return a - b;\n    });\n    item[rangeField].forEach(function (d, i) {\n      var _a;\n\n      var range = i === 0 ? d : item[rangeField][i] - item[rangeField][i - 1];\n      ds.push((_a = {\n        rKey: rangeField + \"_\" + i\n      }, _a[xField] = xField ? item[xField] : String(index), _a[rangeField] = range, _a));\n    }); // 构建 title * measure\n\n    item[measureField].forEach(function (d, i) {\n      var _a;\n\n      ds.push((_a = {\n        mKey: item[measureField].length > 1 ? measureField + \"_\" + i : \"\" + measureField\n      }, _a[xField] = xField ? item[xField] : String(index), _a[measureField] = d, _a));\n    }); // 构建 title * target\n\n    ds.push((_a = {\n      tKey: \"\" + targetField\n    }, _a[xField] = xField ? item[xField] : String(index), _a[targetField] = item[targetField], _a)); // 为了取最大值和最小值，先存储\n\n    scales.push(item[rangeField], item[measureField], item[targetField]);\n  }); // scales 是嵌套的需要拍平\n\n  var min = Math.min.apply(Math, scales.flat(Infinity));\n  var max = Math.max.apply(Math, scales.flat(Infinity)); // min 大于 0 从 0 开始\n\n  min = min > 0 ? 0 : min; // 垂直情况，需要反转数据\n\n  if (layout === 'vertical') {\n    ds.reverse();\n  }\n\n  return {\n    min: min,\n    max: max,\n    ds: ds\n  };\n}","map":{"version":3,"sources":["../../../src/plots/bullet/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { BulletOptions } from './types';\n\ntype TransformData = {\n  min: number;\n  max: number;\n  ds: any[];\n};\n/**\n * bullet 处理数据\n * @param options\n */\nexport function transformData(options: BulletOptions): TransformData {\n  const { data, xField, measureField, rangeField, targetField, layout } = options;\n  const ds: any[] = [];\n  const scales: number[] = [];\n  data.forEach((item: any, index: number) => {\n    // 构建 title * range\n    item[rangeField].sort((a: number, b: number) => a - b);\n    item[rangeField].forEach((d: number, i: number) => {\n      const range = i === 0 ? d : item[rangeField][i] - item[rangeField][i - 1];\n      ds.push({\n        rKey: `${rangeField}_${i}`,\n        [xField]: xField ? item[xField] : String(index), // 没有xField就用索引\n        [rangeField]: range,\n      });\n    });\n    // 构建 title * measure\n    item[measureField].forEach((d: number, i: number) => {\n      ds.push({\n        mKey: item[measureField].length > 1 ? `${measureField}_${i}` : `${measureField}`, // 一个数据就不带索引了\n        [xField]: xField ? item[xField] : String(index),\n        [measureField]: d,\n      });\n    });\n    // 构建 title * target\n    ds.push({\n      tKey: `${targetField}`,\n      [xField]: xField ? item[xField] : String(index),\n      [targetField]: item[targetField],\n    });\n    // 为了取最大值和最小值，先存储\n    scales.push(item[rangeField], item[measureField], item[targetField]);\n  });\n  // scales 是嵌套的需要拍平\n  let min = Math.min(...scales.flat(Infinity));\n  const max = Math.max(...scales.flat(Infinity));\n  // min 大于 0 从 0 开始\n  min = min > 0 ? 0 : min;\n\n  // 垂直情况，需要反转数据\n  if (layout === 'vertical') {\n    ds.reverse();\n  }\n  return { min, max, ds };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}