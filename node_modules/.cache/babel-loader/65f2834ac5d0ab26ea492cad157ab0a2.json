{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar g_base_1 = require(\"@antv/g-base\");\n\nvar util_1 = require(\"@antv/util\");\n\nvar Shape = require(\"./shape\");\n\nvar draw_1 = require(\"./util/draw\");\n\nvar svg_1 = require(\"./util/svg\");\n\nvar constant_1 = require(\"./constant\");\n\nvar dom_1 = require(\"./util/dom\");\n\nvar Group =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Group, _super);\n\n  function Group() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  } // SVG 中分组对应实体标签 <g>\n\n\n  Group.prototype.isEntityGroup = function () {\n    return true;\n  };\n\n  Group.prototype.createDom = function () {\n    var element = dom_1.createSVGElement('g');\n    this.set('el', element);\n    var parent = this.getParent();\n\n    if (parent) {\n      var parentNode = parent.get('el');\n\n      if (parentNode) {\n        parentNode.appendChild(element);\n      } else {\n        // parentNode maybe null for group\n        parentNode = parent.createDom();\n        parent.set('el', parentNode);\n        parentNode.appendChild(element);\n      }\n    }\n\n    return element;\n  }; // 覆盖基类的 afterAttrsChange 方法\n\n\n  Group.prototype.afterAttrsChange = function (targetAttrs) {\n    _super.prototype.afterAttrsChange.call(this, targetAttrs);\n\n    var canvas = this.get('canvas'); // 只有挂载到画布下，才对元素进行实际渲染\n\n    if (canvas && canvas.get('autoDraw')) {\n      var context = canvas.get('context');\n      this.createPath(context, targetAttrs);\n    }\n  };\n  /**\n   * 一些方法调用会引起画布变化\n   * @param {ChangeType} changeType 改变的类型\n   */\n\n\n  Group.prototype.onCanvasChange = function (changeType) {\n    draw_1.refreshElement(this, changeType);\n  };\n\n  Group.prototype.getShapeBase = function () {\n    return Shape;\n  };\n\n  Group.prototype.getGroupBase = function () {\n    return Group;\n  };\n\n  Group.prototype.draw = function (context) {\n    var children = this.getChildren();\n    var el = this.get('el');\n\n    if (this.get('destroyed')) {\n      if (el) {\n        el.parentNode.removeChild(el);\n      }\n    } else {\n      if (!el) {\n        this.createDom();\n      }\n\n      svg_1.setClip(this, context);\n      this.createPath(context);\n\n      if (children.length) {\n        draw_1.drawChildren(context, children);\n      }\n    }\n  };\n  /**\n   * 绘制分组的路径\n   * @param {Defs} context 上下文\n   * @param {ShapeAttrs} targetAttrs 渲染的目标属性\n   */\n\n\n  Group.prototype.createPath = function (context, targetAttrs) {\n    var attrs = this.attr();\n    var el = this.get('el');\n    util_1.each(targetAttrs || attrs, function (value, attr) {\n      if (constant_1.SVG_ATTR_MAP[attr]) {\n        el.setAttribute(constant_1.SVG_ATTR_MAP[attr], value);\n      }\n    });\n    svg_1.setTransform(this);\n  };\n\n  return Group;\n}(g_base_1.AbstractGroup);\n\nexports.default = Group;","map":{"version":3,"sources":["../src/group.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar g_base_1 = require(\"@antv/g-base\");\nvar util_1 = require(\"@antv/util\");\nvar Shape = require(\"./shape\");\nvar draw_1 = require(\"./util/draw\");\nvar svg_1 = require(\"./util/svg\");\nvar constant_1 = require(\"./constant\");\nvar dom_1 = require(\"./util/dom\");\nvar Group = /** @class */ (function (_super) {\n    tslib_1.__extends(Group, _super);\n    function Group() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    // SVG 中分组对应实体标签 <g>\n    Group.prototype.isEntityGroup = function () {\n        return true;\n    };\n    Group.prototype.createDom = function () {\n        var element = dom_1.createSVGElement('g');\n        this.set('el', element);\n        var parent = this.getParent();\n        if (parent) {\n            var parentNode = parent.get('el');\n            if (parentNode) {\n                parentNode.appendChild(element);\n            }\n            else {\n                // parentNode maybe null for group\n                parentNode = parent.createDom();\n                parent.set('el', parentNode);\n                parentNode.appendChild(element);\n            }\n        }\n        return element;\n    };\n    // 覆盖基类的 afterAttrsChange 方法\n    Group.prototype.afterAttrsChange = function (targetAttrs) {\n        _super.prototype.afterAttrsChange.call(this, targetAttrs);\n        var canvas = this.get('canvas');\n        // 只有挂载到画布下，才对元素进行实际渲染\n        if (canvas && canvas.get('autoDraw')) {\n            var context = canvas.get('context');\n            this.createPath(context, targetAttrs);\n        }\n    };\n    /**\n     * 一些方法调用会引起画布变化\n     * @param {ChangeType} changeType 改变的类型\n     */\n    Group.prototype.onCanvasChange = function (changeType) {\n        draw_1.refreshElement(this, changeType);\n    };\n    Group.prototype.getShapeBase = function () {\n        return Shape;\n    };\n    Group.prototype.getGroupBase = function () {\n        return Group;\n    };\n    Group.prototype.draw = function (context) {\n        var children = this.getChildren();\n        var el = this.get('el');\n        if (this.get('destroyed')) {\n            if (el) {\n                el.parentNode.removeChild(el);\n            }\n        }\n        else {\n            if (!el) {\n                this.createDom();\n            }\n            svg_1.setClip(this, context);\n            this.createPath(context);\n            if (children.length) {\n                draw_1.drawChildren(context, children);\n            }\n        }\n    };\n    /**\n     * 绘制分组的路径\n     * @param {Defs} context 上下文\n     * @param {ShapeAttrs} targetAttrs 渲染的目标属性\n     */\n    Group.prototype.createPath = function (context, targetAttrs) {\n        var attrs = this.attr();\n        var el = this.get('el');\n        util_1.each(targetAttrs || attrs, function (value, attr) {\n            if (constant_1.SVG_ATTR_MAP[attr]) {\n                el.setAttribute(constant_1.SVG_ATTR_MAP[attr], value);\n            }\n        });\n        svg_1.setTransform(this);\n    };\n    return Group;\n}(g_base_1.AbstractGroup));\nexports.default = Group;\n//# sourceMappingURL=group.js.map"]},"metadata":{},"sourceType":"script"}