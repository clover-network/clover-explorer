{"ast":null,"code":"import addEventListener from '@antv/dom-util/lib/add-event-listener';\nimport each from '@antv/util/lib/each';\nimport isNil from '@antv/util/lib/is-nil';\nimport wrapBehavior from '@antv/util/lib/wrap-behavior';\nimport { cloneEvent, isViewportChanged } from '../../util/base'; // const EVENTS = [\n//   'click',\n//   'mousedown',\n//   'mouseup',\n//   'dblclick',\n//   'contextmenu',\n//   'mouseenter',\n//   'mouseout',\n//   'mouseover',\n//   'mousemove',\n//   'mouseleave',\n//   'dragstart',\n//   'dragend',\n//   'drag',\n//   'dragenter',\n//   'dragleave',\n//   'dragover',\n//   'dragout', // no this event\n//   'drop',\n//   'touchstart',\n//   'touchmove',\n//   'touchend',\n// ];\n\nvar EventController =\n/** @class */\nfunction () {\n  function EventController(graph) {\n    this.preItem = null;\n    this.graph = graph;\n    this.extendEvents = [];\n    this.dragging = false;\n    this.destroyed = false;\n    this.initEvents();\n  } // 初始化 G6 中的事件\n\n\n  EventController.prototype.initEvents = function () {\n    var _a = this,\n        graph = _a.graph,\n        extendEvents = _a.extendEvents;\n\n    var canvas = graph.get('canvas'); // canvas.set('draggable', true);\n\n    var el = canvas.get('el');\n    var canvasHandler = wrapBehavior(this, 'onCanvasEvents');\n    var originHandler = wrapBehavior(this, 'onExtendEvents');\n    var wheelHandler = wrapBehavior(this, 'onWheelEvent'); // each(EVENTS, event => {\n    //   canvas.on(event, canvasHandler);\n    // });\n\n    canvas.on('*', canvasHandler);\n    this.canvasHandler = canvasHandler;\n    extendEvents.push(addEventListener(el, 'DOMMouseScroll', wheelHandler));\n    extendEvents.push(addEventListener(el, 'mousewheel', wheelHandler));\n\n    if (typeof window !== 'undefined') {\n      extendEvents.push(addEventListener(window, 'keydown', originHandler));\n      extendEvents.push(addEventListener(window, 'keyup', originHandler));\n      extendEvents.push(addEventListener(window, 'focus', originHandler));\n    }\n  }; // 获取 shape 的 item 对象\n\n\n  EventController.getItemRoot = function (shape) {\n    while (shape && !shape.get('item')) {\n      shape = shape.get('parent');\n    }\n\n    return shape;\n  };\n  /**\n   * 处理 canvas 事件\n   * @param evt 事件句柄\n   */\n\n\n  EventController.prototype.onCanvasEvents = function (evt) {\n    var graph = this.graph;\n    var canvas = graph.get('canvas');\n    var target = evt.target;\n    var eventType = evt.type;\n    /**\n     * (clientX, clientY): 相对于页面的坐标；\n     * (canvasX, canvasY): 相对于 <canvas> 左上角的坐标；\n     * (x, y): 相对于整个画布的坐标, 与 model 的 x, y 是同一维度的。\n     */\n\n    evt.canvasX = evt.x;\n    evt.canvasY = evt.y;\n    var point = {\n      x: evt.canvasX,\n      y: evt.canvasY\n    };\n    var group = graph.get('group');\n    var matrix = group.getMatrix();\n\n    if (!matrix) {\n      matrix = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n    }\n\n    if (isViewportChanged(matrix)) {\n      point = graph.getPointByClient(evt.clientX, evt.clientY);\n    }\n\n    evt.x = point.x;\n    evt.y = point.y;\n    evt.currentTarget = graph;\n\n    if (target === canvas) {\n      if (eventType === 'mousemove') {\n        this.handleMouseMove(evt, 'canvas');\n      }\n\n      evt.target = canvas;\n      evt.item = null;\n      graph.emit(eventType, evt);\n      graph.emit(\"canvas:\" + eventType, evt);\n      return;\n    }\n\n    var itemShape = EventController.getItemRoot(target);\n\n    if (!itemShape) {\n      graph.emit(eventType, evt);\n      return;\n    }\n\n    var item = itemShape.get('item');\n\n    if (item.destroyed) {\n      return;\n    }\n\n    var type = item.getType(); // 事件target是触发事件的Shape实例，item是触发事件的item实例\n\n    evt.target = target;\n    evt.item = item;\n\n    if (evt.canvasX === evt.x && evt.canvasY === evt.y) {\n      var canvasPoint = graph.getCanvasByPoint(evt.x, evt.y);\n      evt.canvasX = canvasPoint.x;\n      evt.canvasY = canvasPoint.y;\n    } // emit('click', evt);\n\n\n    graph.emit(eventType, evt);\n    if (evt.name && !evt.name.includes(':')) graph.emit(type + \":\" + eventType, evt); // emit('node:click', evt)\n    else graph.emit(evt.name, evt); // emit('text-shape:click', evt)\n\n    if (eventType === 'dragstart') {\n      this.dragging = true;\n    }\n\n    if (eventType === 'dragend') {\n      this.dragging = false;\n    }\n\n    if (eventType === 'mousemove') {\n      this.handleMouseMove(evt, type);\n    }\n  };\n  /**\n   * 处理扩展事件\n   * @param evt 事件句柄\n   */\n\n\n  EventController.prototype.onExtendEvents = function (evt) {\n    this.graph.emit(evt.type, evt);\n  };\n  /**\n   * 处理滚轮事件\n   * @param evt 事件句柄\n   */\n\n\n  EventController.prototype.onWheelEvent = function (evt) {\n    if (isNil(evt.wheelDelta)) {\n      evt.wheelDelta = -evt.detail;\n    }\n\n    this.graph.emit('wheel', evt);\n  };\n  /**\n   * 处理鼠标移动的事件\n   * @param evt 事件句柄\n   * @param type item 类型\n   */\n\n\n  EventController.prototype.handleMouseMove = function (evt, type) {\n    var _a = this,\n        graph = _a.graph,\n        preItem = _a.preItem;\n\n    var canvas = graph.get('canvas');\n    var item = evt.target === canvas ? null : evt.item;\n    evt = cloneEvent(evt); // 从前一个item直接移动到当前item，触发前一个item的leave事件\n\n    if (preItem && preItem !== item && !preItem.destroyed) {\n      evt.item = preItem;\n      this.emitCustomEvent(preItem.getType(), 'mouseleave', evt);\n\n      if (this.dragging) {\n        this.emitCustomEvent(preItem.getType(), 'dragleave', evt);\n      }\n    } // 从一个item或canvas移动到当前item，触发当前item的enter事件\n\n\n    if (item && preItem !== item) {\n      evt.item = item;\n      this.emitCustomEvent(type, 'mouseenter', evt);\n\n      if (this.dragging) {\n        this.emitCustomEvent(type, 'dragenter', evt);\n      }\n    }\n\n    this.preItem = item;\n  };\n  /**\n   * 在 graph 上面 emit 事件\n   * @param itemType item 类型\n   * @param eventType 事件类型\n   * @param evt 事件句柄\n   */\n\n\n  EventController.prototype.emitCustomEvent = function (itemType, eventType, evt) {\n    evt.type = eventType;\n    this.graph.emit(itemType + \":\" + eventType, evt);\n  };\n\n  EventController.prototype.destroy = function () {\n    var _a = this,\n        graph = _a.graph,\n        canvasHandler = _a.canvasHandler,\n        extendEvents = _a.extendEvents;\n\n    var canvas = graph.get('canvas'); // each(EVENTS, event => {\n    //   canvas.off(event, canvasHandler);\n    // });\n\n    canvas.off('*', canvasHandler);\n    each(extendEvents, function (event) {\n      event.remove();\n    });\n    this.dragging = false;\n    this.preItem = null;\n    this.extendEvents.length = 0;\n    this.canvasHandler = null;\n    this.destroyed = true;\n  };\n\n  return EventController;\n}();\n\nexport default EventController;","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/@antv/g6/es/graph/controller/event.js"],"names":["addEventListener","each","isNil","wrapBehavior","cloneEvent","isViewportChanged","EventController","graph","preItem","extendEvents","dragging","destroyed","initEvents","prototype","_a","canvas","get","el","canvasHandler","originHandler","wheelHandler","on","push","window","getItemRoot","shape","onCanvasEvents","evt","target","eventType","type","canvasX","x","canvasY","y","point","group","matrix","getMatrix","getPointByClient","clientX","clientY","currentTarget","handleMouseMove","item","emit","itemShape","getType","canvasPoint","getCanvasByPoint","name","includes","onExtendEvents","onWheelEvent","wheelDelta","detail","emitCustomEvent","itemType","destroy","off","event","remove","length"],"mappings":"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","sourcesContent":["import addEventListener from '@antv/dom-util/lib/add-event-listener';\nimport each from '@antv/util/lib/each';\nimport isNil from '@antv/util/lib/is-nil';\nimport wrapBehavior from '@antv/util/lib/wrap-behavior';\nimport { cloneEvent, isViewportChanged } from '../../util/base'; // const EVENTS = [\n//   'click',\n//   'mousedown',\n//   'mouseup',\n//   'dblclick',\n//   'contextmenu',\n//   'mouseenter',\n//   'mouseout',\n//   'mouseover',\n//   'mousemove',\n//   'mouseleave',\n//   'dragstart',\n//   'dragend',\n//   'drag',\n//   'dragenter',\n//   'dragleave',\n//   'dragover',\n//   'dragout', // no this event\n//   'drop',\n//   'touchstart',\n//   'touchmove',\n//   'touchend',\n// ];\n\nvar EventController =\n/** @class */\nfunction () {\n  function EventController(graph) {\n    this.preItem = null;\n    this.graph = graph;\n    this.extendEvents = [];\n    this.dragging = false;\n    this.destroyed = false;\n    this.initEvents();\n  } // 初始化 G6 中的事件\n\n\n  EventController.prototype.initEvents = function () {\n    var _a = this,\n        graph = _a.graph,\n        extendEvents = _a.extendEvents;\n\n    var canvas = graph.get('canvas'); // canvas.set('draggable', true);\n\n    var el = canvas.get('el');\n    var canvasHandler = wrapBehavior(this, 'onCanvasEvents');\n    var originHandler = wrapBehavior(this, 'onExtendEvents');\n    var wheelHandler = wrapBehavior(this, 'onWheelEvent'); // each(EVENTS, event => {\n    //   canvas.on(event, canvasHandler);\n    // });\n\n    canvas.on('*', canvasHandler);\n    this.canvasHandler = canvasHandler;\n    extendEvents.push(addEventListener(el, 'DOMMouseScroll', wheelHandler));\n    extendEvents.push(addEventListener(el, 'mousewheel', wheelHandler));\n\n    if (typeof window !== 'undefined') {\n      extendEvents.push(addEventListener(window, 'keydown', originHandler));\n      extendEvents.push(addEventListener(window, 'keyup', originHandler));\n      extendEvents.push(addEventListener(window, 'focus', originHandler));\n    }\n  }; // 获取 shape 的 item 对象\n\n\n  EventController.getItemRoot = function (shape) {\n    while (shape && !shape.get('item')) {\n      shape = shape.get('parent');\n    }\n\n    return shape;\n  };\n  /**\n   * 处理 canvas 事件\n   * @param evt 事件句柄\n   */\n\n\n  EventController.prototype.onCanvasEvents = function (evt) {\n    var graph = this.graph;\n    var canvas = graph.get('canvas');\n    var target = evt.target;\n    var eventType = evt.type;\n    /**\n     * (clientX, clientY): 相对于页面的坐标；\n     * (canvasX, canvasY): 相对于 <canvas> 左上角的坐标；\n     * (x, y): 相对于整个画布的坐标, 与 model 的 x, y 是同一维度的。\n     */\n\n    evt.canvasX = evt.x;\n    evt.canvasY = evt.y;\n    var point = {\n      x: evt.canvasX,\n      y: evt.canvasY\n    };\n    var group = graph.get('group');\n    var matrix = group.getMatrix();\n\n    if (!matrix) {\n      matrix = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n    }\n\n    if (isViewportChanged(matrix)) {\n      point = graph.getPointByClient(evt.clientX, evt.clientY);\n    }\n\n    evt.x = point.x;\n    evt.y = point.y;\n    evt.currentTarget = graph;\n\n    if (target === canvas) {\n      if (eventType === 'mousemove') {\n        this.handleMouseMove(evt, 'canvas');\n      }\n\n      evt.target = canvas;\n      evt.item = null;\n      graph.emit(eventType, evt);\n      graph.emit(\"canvas:\" + eventType, evt);\n      return;\n    }\n\n    var itemShape = EventController.getItemRoot(target);\n\n    if (!itemShape) {\n      graph.emit(eventType, evt);\n      return;\n    }\n\n    var item = itemShape.get('item');\n\n    if (item.destroyed) {\n      return;\n    }\n\n    var type = item.getType(); // 事件target是触发事件的Shape实例，item是触发事件的item实例\n\n    evt.target = target;\n    evt.item = item;\n\n    if (evt.canvasX === evt.x && evt.canvasY === evt.y) {\n      var canvasPoint = graph.getCanvasByPoint(evt.x, evt.y);\n      evt.canvasX = canvasPoint.x;\n      evt.canvasY = canvasPoint.y;\n    } // emit('click', evt);\n\n\n    graph.emit(eventType, evt);\n    if (evt.name && !evt.name.includes(':')) graph.emit(type + \":\" + eventType, evt); // emit('node:click', evt)\n    else graph.emit(evt.name, evt); // emit('text-shape:click', evt)\n\n    if (eventType === 'dragstart') {\n      this.dragging = true;\n    }\n\n    if (eventType === 'dragend') {\n      this.dragging = false;\n    }\n\n    if (eventType === 'mousemove') {\n      this.handleMouseMove(evt, type);\n    }\n  };\n  /**\n   * 处理扩展事件\n   * @param evt 事件句柄\n   */\n\n\n  EventController.prototype.onExtendEvents = function (evt) {\n    this.graph.emit(evt.type, evt);\n  };\n  /**\n   * 处理滚轮事件\n   * @param evt 事件句柄\n   */\n\n\n  EventController.prototype.onWheelEvent = function (evt) {\n    if (isNil(evt.wheelDelta)) {\n      evt.wheelDelta = -evt.detail;\n    }\n\n    this.graph.emit('wheel', evt);\n  };\n  /**\n   * 处理鼠标移动的事件\n   * @param evt 事件句柄\n   * @param type item 类型\n   */\n\n\n  EventController.prototype.handleMouseMove = function (evt, type) {\n    var _a = this,\n        graph = _a.graph,\n        preItem = _a.preItem;\n\n    var canvas = graph.get('canvas');\n    var item = evt.target === canvas ? null : evt.item;\n    evt = cloneEvent(evt); // 从前一个item直接移动到当前item，触发前一个item的leave事件\n\n    if (preItem && preItem !== item && !preItem.destroyed) {\n      evt.item = preItem;\n      this.emitCustomEvent(preItem.getType(), 'mouseleave', evt);\n\n      if (this.dragging) {\n        this.emitCustomEvent(preItem.getType(), 'dragleave', evt);\n      }\n    } // 从一个item或canvas移动到当前item，触发当前item的enter事件\n\n\n    if (item && preItem !== item) {\n      evt.item = item;\n      this.emitCustomEvent(type, 'mouseenter', evt);\n\n      if (this.dragging) {\n        this.emitCustomEvent(type, 'dragenter', evt);\n      }\n    }\n\n    this.preItem = item;\n  };\n  /**\n   * 在 graph 上面 emit 事件\n   * @param itemType item 类型\n   * @param eventType 事件类型\n   * @param evt 事件句柄\n   */\n\n\n  EventController.prototype.emitCustomEvent = function (itemType, eventType, evt) {\n    evt.type = eventType;\n    this.graph.emit(itemType + \":\" + eventType, evt);\n  };\n\n  EventController.prototype.destroy = function () {\n    var _a = this,\n        graph = _a.graph,\n        canvasHandler = _a.canvasHandler,\n        extendEvents = _a.extendEvents;\n\n    var canvas = graph.get('canvas'); // each(EVENTS, event => {\n    //   canvas.off(event, canvasHandler);\n    // });\n\n    canvas.off('*', canvasHandler);\n    each(extendEvents, function (event) {\n      event.remove();\n    });\n    this.dragging = false;\n    this.preItem = null;\n    this.extendEvents.length = 0;\n    this.canvasHandler = null;\n    this.destroyed = true;\n  };\n\n  return EventController;\n}();\n\nexport default EventController;"]},"metadata":{},"sourceType":"module"}