{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\"use strict\";\n\nexports.__esModule = true;\n\nvar util_1 = require(\"zrender/lib/core/util\");\n\n;\n\nfunction createTask(define) {\n  return new Task(define);\n}\n\nexports.createTask = createTask;\n\nvar Task = function () {\n  function Task(define) {\n    define = define || {};\n    this._reset = define.reset;\n    this._plan = define.plan;\n    this._count = define.count;\n    this._onDirty = define.onDirty;\n    this._dirty = true;\n  }\n\n  Task.prototype.perform = function (performArgs) {\n    var upTask = this._upstream;\n    var skip = performArgs && performArgs.skip;\n\n    if (this._dirty && upTask) {\n      var context = this.context;\n      context.data = context.outputData = upTask.context.outputData;\n    }\n\n    if (this.__pipeline) {\n      this.__pipeline.currentTask = this;\n    }\n\n    var planResult;\n\n    if (this._plan && !skip) {\n      planResult = this._plan(this.context);\n    }\n\n    var lastModBy = normalizeModBy(this._modBy);\n    var lastModDataCount = this._modDataCount || 0;\n    var modBy = normalizeModBy(performArgs && performArgs.modBy);\n    var modDataCount = performArgs && performArgs.modDataCount || 0;\n\n    if (lastModBy !== modBy || lastModDataCount !== modDataCount) {\n      planResult = 'reset';\n    }\n\n    function normalizeModBy(val) {\n      !(val >= 1) && (val = 1);\n      return val;\n    }\n\n    var forceFirstProgress;\n\n    if (this._dirty || planResult === 'reset') {\n      this._dirty = false;\n      forceFirstProgress = this._doReset(skip);\n    }\n\n    this._modBy = modBy;\n    this._modDataCount = modDataCount;\n    var step = performArgs && performArgs.step;\n\n    if (upTask) {\n      if (process.env.NODE_ENV !== 'production') {\n        util_1.assert(upTask._outputDueEnd != null);\n      }\n\n      this._dueEnd = upTask._outputDueEnd;\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        util_1.assert(!this._progress || this._count);\n      }\n\n      this._dueEnd = this._count ? this._count(this.context) : Infinity;\n    }\n\n    if (this._progress) {\n      var start = this._dueIndex;\n      var end = Math.min(step != null ? this._dueIndex + step : Infinity, this._dueEnd);\n\n      if (!skip && (forceFirstProgress || start < end)) {\n        var progress = this._progress;\n\n        if (util_1.isArray(progress)) {\n          for (var i = 0; i < progress.length; i++) {\n            this._doProgress(progress[i], start, end, modBy, modDataCount);\n          }\n        } else {\n          this._doProgress(progress, start, end, modBy, modDataCount);\n        }\n      }\n\n      this._dueIndex = end;\n      var outputDueEnd = this._settedOutputEnd != null ? this._settedOutputEnd : end;\n\n      if (process.env.NODE_ENV !== 'production') {\n        util_1.assert(outputDueEnd >= this._outputDueEnd);\n      }\n\n      this._outputDueEnd = outputDueEnd;\n    } else {\n      this._dueIndex = this._outputDueEnd = this._settedOutputEnd != null ? this._settedOutputEnd : this._dueEnd;\n    }\n\n    return this.unfinished();\n  };\n\n  Task.prototype.dirty = function () {\n    this._dirty = true;\n    this._onDirty && this._onDirty(this.context);\n  };\n\n  Task.prototype._doProgress = function (progress, start, end, modBy, modDataCount) {\n    iterator.reset(start, end, modBy, modDataCount);\n    this._callingProgress = progress;\n\n    this._callingProgress({\n      start: start,\n      end: end,\n      count: end - start,\n      next: iterator.next\n    }, this.context);\n  };\n\n  Task.prototype._doReset = function (skip) {\n    this._dueIndex = this._outputDueEnd = this._dueEnd = 0;\n    this._settedOutputEnd = null;\n    var progress;\n    var forceFirstProgress;\n\n    if (!skip && this._reset) {\n      progress = this._reset(this.context);\n\n      if (progress && progress.progress) {\n        forceFirstProgress = progress.forceFirstProgress;\n        progress = progress.progress;\n      }\n\n      if (util_1.isArray(progress) && !progress.length) {\n        progress = null;\n      }\n    }\n\n    this._progress = progress;\n    this._modBy = this._modDataCount = null;\n    var downstream = this._downstream;\n    downstream && downstream.dirty();\n    return forceFirstProgress;\n  };\n\n  Task.prototype.unfinished = function () {\n    return this._progress && this._dueIndex < this._dueEnd;\n  };\n\n  Task.prototype.pipe = function (downTask) {\n    if (process.env.NODE_ENV !== 'production') {\n      util_1.assert(downTask && !downTask._disposed && downTask !== this);\n    }\n\n    if (this._downstream !== downTask || this._dirty) {\n      this._downstream = downTask;\n      downTask._upstream = this;\n      downTask.dirty();\n    }\n  };\n\n  Task.prototype.dispose = function () {\n    if (this._disposed) {\n      return;\n    }\n\n    this._upstream && (this._upstream._downstream = null);\n    this._downstream && (this._downstream._upstream = null);\n    this._dirty = false;\n    this._disposed = true;\n  };\n\n  Task.prototype.getUpstream = function () {\n    return this._upstream;\n  };\n\n  Task.prototype.getDownstream = function () {\n    return this._downstream;\n  };\n\n  Task.prototype.setOutputEnd = function (end) {\n    this._outputDueEnd = this._settedOutputEnd = end;\n  };\n\n  return Task;\n}();\n\nexports.Task = Task;\n\nvar iterator = function () {\n  var end;\n  var current;\n  var modBy;\n  var modDataCount;\n  var winCount;\n  var it = {\n    reset: function (s, e, sStep, sCount) {\n      current = s;\n      end = e;\n      modBy = sStep;\n      modDataCount = sCount;\n      winCount = Math.ceil(modDataCount / modBy);\n      it.next = modBy > 1 && modDataCount > 0 ? modNext : sequentialNext;\n    }\n  };\n  return it;\n\n  function sequentialNext() {\n    return current < end ? current++ : null;\n  }\n\n  function modNext() {\n    var dataIndex = current % winCount * modBy + Math.ceil(current / winCount);\n    var result = current >= end ? null : dataIndex < modDataCount ? dataIndex : current;\n    current++;\n    return result;\n  }\n}();","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/echarts/lib/stream/task.js"],"names":["exports","__esModule","util_1","require","createTask","define","Task","_reset","reset","_plan","plan","_count","count","_onDirty","onDirty","_dirty","prototype","perform","performArgs","upTask","_upstream","skip","context","data","outputData","__pipeline","currentTask","planResult","lastModBy","normalizeModBy","_modBy","lastModDataCount","_modDataCount","modBy","modDataCount","val","forceFirstProgress","_doReset","step","process","env","NODE_ENV","assert","_outputDueEnd","_dueEnd","_progress","Infinity","start","_dueIndex","end","Math","min","progress","isArray","i","length","_doProgress","outputDueEnd","_settedOutputEnd","unfinished","dirty","iterator","_callingProgress","next","downstream","_downstream","pipe","downTask","_disposed","dispose","getUpstream","getDownstream","setOutputEnd","current","winCount","it","s","e","sStep","sCount","ceil","modNext","sequentialNext","dataIndex","result"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n\"use strict\";\n\nexports.__esModule = true;\n\nvar util_1 = require(\"zrender/lib/core/util\");\n\n;\n\nfunction createTask(define) {\n  return new Task(define);\n}\n\nexports.createTask = createTask;\n\nvar Task = function () {\n  function Task(define) {\n    define = define || {};\n    this._reset = define.reset;\n    this._plan = define.plan;\n    this._count = define.count;\n    this._onDirty = define.onDirty;\n    this._dirty = true;\n  }\n\n  Task.prototype.perform = function (performArgs) {\n    var upTask = this._upstream;\n    var skip = performArgs && performArgs.skip;\n\n    if (this._dirty && upTask) {\n      var context = this.context;\n      context.data = context.outputData = upTask.context.outputData;\n    }\n\n    if (this.__pipeline) {\n      this.__pipeline.currentTask = this;\n    }\n\n    var planResult;\n\n    if (this._plan && !skip) {\n      planResult = this._plan(this.context);\n    }\n\n    var lastModBy = normalizeModBy(this._modBy);\n    var lastModDataCount = this._modDataCount || 0;\n    var modBy = normalizeModBy(performArgs && performArgs.modBy);\n    var modDataCount = performArgs && performArgs.modDataCount || 0;\n\n    if (lastModBy !== modBy || lastModDataCount !== modDataCount) {\n      planResult = 'reset';\n    }\n\n    function normalizeModBy(val) {\n      !(val >= 1) && (val = 1);\n      return val;\n    }\n\n    var forceFirstProgress;\n\n    if (this._dirty || planResult === 'reset') {\n      this._dirty = false;\n      forceFirstProgress = this._doReset(skip);\n    }\n\n    this._modBy = modBy;\n    this._modDataCount = modDataCount;\n    var step = performArgs && performArgs.step;\n\n    if (upTask) {\n      if (process.env.NODE_ENV !== 'production') {\n        util_1.assert(upTask._outputDueEnd != null);\n      }\n\n      this._dueEnd = upTask._outputDueEnd;\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        util_1.assert(!this._progress || this._count);\n      }\n\n      this._dueEnd = this._count ? this._count(this.context) : Infinity;\n    }\n\n    if (this._progress) {\n      var start = this._dueIndex;\n      var end = Math.min(step != null ? this._dueIndex + step : Infinity, this._dueEnd);\n\n      if (!skip && (forceFirstProgress || start < end)) {\n        var progress = this._progress;\n\n        if (util_1.isArray(progress)) {\n          for (var i = 0; i < progress.length; i++) {\n            this._doProgress(progress[i], start, end, modBy, modDataCount);\n          }\n        } else {\n          this._doProgress(progress, start, end, modBy, modDataCount);\n        }\n      }\n\n      this._dueIndex = end;\n      var outputDueEnd = this._settedOutputEnd != null ? this._settedOutputEnd : end;\n\n      if (process.env.NODE_ENV !== 'production') {\n        util_1.assert(outputDueEnd >= this._outputDueEnd);\n      }\n\n      this._outputDueEnd = outputDueEnd;\n    } else {\n      this._dueIndex = this._outputDueEnd = this._settedOutputEnd != null ? this._settedOutputEnd : this._dueEnd;\n    }\n\n    return this.unfinished();\n  };\n\n  Task.prototype.dirty = function () {\n    this._dirty = true;\n    this._onDirty && this._onDirty(this.context);\n  };\n\n  Task.prototype._doProgress = function (progress, start, end, modBy, modDataCount) {\n    iterator.reset(start, end, modBy, modDataCount);\n    this._callingProgress = progress;\n\n    this._callingProgress({\n      start: start,\n      end: end,\n      count: end - start,\n      next: iterator.next\n    }, this.context);\n  };\n\n  Task.prototype._doReset = function (skip) {\n    this._dueIndex = this._outputDueEnd = this._dueEnd = 0;\n    this._settedOutputEnd = null;\n    var progress;\n    var forceFirstProgress;\n\n    if (!skip && this._reset) {\n      progress = this._reset(this.context);\n\n      if (progress && progress.progress) {\n        forceFirstProgress = progress.forceFirstProgress;\n        progress = progress.progress;\n      }\n\n      if (util_1.isArray(progress) && !progress.length) {\n        progress = null;\n      }\n    }\n\n    this._progress = progress;\n    this._modBy = this._modDataCount = null;\n    var downstream = this._downstream;\n    downstream && downstream.dirty();\n    return forceFirstProgress;\n  };\n\n  Task.prototype.unfinished = function () {\n    return this._progress && this._dueIndex < this._dueEnd;\n  };\n\n  Task.prototype.pipe = function (downTask) {\n    if (process.env.NODE_ENV !== 'production') {\n      util_1.assert(downTask && !downTask._disposed && downTask !== this);\n    }\n\n    if (this._downstream !== downTask || this._dirty) {\n      this._downstream = downTask;\n      downTask._upstream = this;\n      downTask.dirty();\n    }\n  };\n\n  Task.prototype.dispose = function () {\n    if (this._disposed) {\n      return;\n    }\n\n    this._upstream && (this._upstream._downstream = null);\n    this._downstream && (this._downstream._upstream = null);\n    this._dirty = false;\n    this._disposed = true;\n  };\n\n  Task.prototype.getUpstream = function () {\n    return this._upstream;\n  };\n\n  Task.prototype.getDownstream = function () {\n    return this._downstream;\n  };\n\n  Task.prototype.setOutputEnd = function (end) {\n    this._outputDueEnd = this._settedOutputEnd = end;\n  };\n\n  return Task;\n}();\n\nexports.Task = Task;\n\nvar iterator = function () {\n  var end;\n  var current;\n  var modBy;\n  var modDataCount;\n  var winCount;\n  var it = {\n    reset: function (s, e, sStep, sCount) {\n      current = s;\n      end = e;\n      modBy = sStep;\n      modDataCount = sCount;\n      winCount = Math.ceil(modDataCount / modBy);\n      it.next = modBy > 1 && modDataCount > 0 ? modNext : sequentialNext;\n    }\n  };\n  return it;\n\n  function sequentialNext() {\n    return current < end ? current++ : null;\n  }\n\n  function modNext() {\n    var dataIndex = current % winCount * modBy + Math.ceil(current / winCount);\n    var result = current >= end ? null : dataIndex < modDataCount ? dataIndex : current;\n    current++;\n    return result;\n  }\n}();"]},"metadata":{},"sourceType":"script"}