{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\"use strict\";\n\nexports.__esModule = true;\n\nvar util_1 = require(\"zrender/lib/core/util\");\n\nvar layout_1 = require(\"../../util/layout\");\n\nvar axisHelper_1 = require(\"../../coord/axisHelper\");\n\nvar Cartesian2D_1 = require(\"./Cartesian2D\");\n\nvar Axis2D_1 = require(\"./Axis2D\");\n\nvar CoordinateSystem_1 = require(\"../../CoordinateSystem\");\n\nvar model_1 = require(\"../../util/model\");\n\nvar cartesianAxisHelper_1 = require(\"./cartesianAxisHelper\");\n\nvar Grid = function () {\n  function Grid(gridModel, ecModel, api) {\n    this.type = 'grid';\n    this._coordsMap = {};\n    this._coordsList = [];\n    this._axesMap = {};\n    this._axesList = [];\n    this.axisPointerEnabled = true;\n    this.dimensions = Cartesian2D_1.cartesian2DDimensions;\n\n    this._initCartesian(gridModel, ecModel, api);\n\n    this.model = gridModel;\n  }\n\n  Grid.prototype.getRect = function () {\n    return this._rect;\n  };\n\n  Grid.prototype.update = function (ecModel, api) {\n    var axesMap = this._axesMap;\n\n    this._updateScale(ecModel, this.model);\n\n    util_1.each(axesMap.x, function (xAxis) {\n      axisHelper_1.niceScaleExtent(xAxis.scale, xAxis.model);\n    });\n    util_1.each(axesMap.y, function (yAxis) {\n      axisHelper_1.niceScaleExtent(yAxis.scale, yAxis.model);\n    });\n    var onZeroRecords = {};\n    util_1.each(axesMap.x, function (xAxis) {\n      fixAxisOnZero(axesMap, 'y', xAxis, onZeroRecords);\n    });\n    util_1.each(axesMap.y, function (yAxis) {\n      fixAxisOnZero(axesMap, 'x', yAxis, onZeroRecords);\n    });\n    this.resize(this.model, api);\n  };\n\n  Grid.prototype.resize = function (gridModel, api, ignoreContainLabel) {\n    var boxLayoutParams = gridModel.getBoxLayoutParams();\n    var isContainLabel = !ignoreContainLabel && gridModel.get('containLabel');\n    var gridRect = layout_1.getLayoutRect(boxLayoutParams, {\n      width: api.getWidth(),\n      height: api.getHeight()\n    });\n    this._rect = gridRect;\n    var axesList = this._axesList;\n    adjustAxes();\n\n    if (isContainLabel) {\n      util_1.each(axesList, function (axis) {\n        if (!axis.model.get(['axisLabel', 'inside'])) {\n          var labelUnionRect = axisHelper_1.estimateLabelUnionRect(axis);\n\n          if (labelUnionRect) {\n            var dim = axis.isHorizontal() ? 'height' : 'width';\n            var margin = axis.model.get(['axisLabel', 'margin']);\n            gridRect[dim] -= labelUnionRect[dim] + margin;\n\n            if (axis.position === 'top') {\n              gridRect.y += labelUnionRect.height + margin;\n            } else if (axis.position === 'left') {\n              gridRect.x += labelUnionRect.width + margin;\n            }\n          }\n        }\n      });\n      adjustAxes();\n    }\n\n    util_1.each(this._coordsList, function (coord) {\n      coord.calcAffineTransform();\n    });\n\n    function adjustAxes() {\n      util_1.each(axesList, function (axis) {\n        var isHorizontal = axis.isHorizontal();\n        var extent = isHorizontal ? [0, gridRect.width] : [0, gridRect.height];\n        var idx = axis.inverse ? 1 : 0;\n        axis.setExtent(extent[idx], extent[1 - idx]);\n        updateAxisTransform(axis, isHorizontal ? gridRect.x : gridRect.y);\n      });\n    }\n  };\n\n  Grid.prototype.getAxis = function (dim, axisIndex) {\n    var axesMapOnDim = this._axesMap[dim];\n\n    if (axesMapOnDim != null) {\n      return axesMapOnDim[axisIndex || 0];\n    }\n  };\n\n  Grid.prototype.getAxes = function () {\n    return this._axesList.slice();\n  };\n\n  Grid.prototype.getCartesian = function (xAxisIndex, yAxisIndex) {\n    if (xAxisIndex != null && yAxisIndex != null) {\n      var key = 'x' + xAxisIndex + 'y' + yAxisIndex;\n      return this._coordsMap[key];\n    }\n\n    if (util_1.isObject(xAxisIndex)) {\n      yAxisIndex = xAxisIndex.yAxisIndex;\n      xAxisIndex = xAxisIndex.xAxisIndex;\n    }\n\n    for (var i = 0, coordList = this._coordsList; i < coordList.length; i++) {\n      if (coordList[i].getAxis('x').index === xAxisIndex || coordList[i].getAxis('y').index === yAxisIndex) {\n        return coordList[i];\n      }\n    }\n  };\n\n  Grid.prototype.getCartesians = function () {\n    return this._coordsList.slice();\n  };\n\n  Grid.prototype.convertToPixel = function (ecModel, finder, value) {\n    var target = this._findConvertTarget(finder);\n\n    return target.cartesian ? target.cartesian.dataToPoint(value) : target.axis ? target.axis.toGlobalCoord(target.axis.dataToCoord(value)) : null;\n  };\n\n  Grid.prototype.convertFromPixel = function (ecModel, finder, value) {\n    var target = this._findConvertTarget(finder);\n\n    return target.cartesian ? target.cartesian.pointToData(value) : target.axis ? target.axis.coordToData(target.axis.toLocalCoord(value)) : null;\n  };\n\n  Grid.prototype._findConvertTarget = function (finder) {\n    var seriesModel = finder.seriesModel;\n    var xAxisModel = finder.xAxisModel || seriesModel && seriesModel.getReferringComponents('xAxis', model_1.SINGLE_REFERRING).models[0];\n    var yAxisModel = finder.yAxisModel || seriesModel && seriesModel.getReferringComponents('yAxis', model_1.SINGLE_REFERRING).models[0];\n    var gridModel = finder.gridModel;\n    var coordsList = this._coordsList;\n    var cartesian;\n    var axis;\n\n    if (seriesModel) {\n      cartesian = seriesModel.coordinateSystem;\n      util_1.indexOf(coordsList, cartesian) < 0 && (cartesian = null);\n    } else if (xAxisModel && yAxisModel) {\n      cartesian = this.getCartesian(xAxisModel.componentIndex, yAxisModel.componentIndex);\n    } else if (xAxisModel) {\n      axis = this.getAxis('x', xAxisModel.componentIndex);\n    } else if (yAxisModel) {\n      axis = this.getAxis('y', yAxisModel.componentIndex);\n    } else if (gridModel) {\n      var grid = gridModel.coordinateSystem;\n\n      if (grid === this) {\n        cartesian = this._coordsList[0];\n      }\n    }\n\n    return {\n      cartesian: cartesian,\n      axis: axis\n    };\n  };\n\n  Grid.prototype.containPoint = function (point) {\n    var coord = this._coordsList[0];\n\n    if (coord) {\n      return coord.containPoint(point);\n    }\n  };\n\n  Grid.prototype._initCartesian = function (gridModel, ecModel, api) {\n    var _this = this;\n\n    var grid = this;\n    var axisPositionUsed = {\n      left: false,\n      right: false,\n      top: false,\n      bottom: false\n    };\n    var axesMap = {\n      x: {},\n      y: {}\n    };\n    var axesCount = {\n      x: 0,\n      y: 0\n    };\n    ecModel.eachComponent('xAxis', createAxisCreator('x'), this);\n    ecModel.eachComponent('yAxis', createAxisCreator('y'), this);\n\n    if (!axesCount.x || !axesCount.y) {\n      this._axesMap = {};\n      this._axesList = [];\n      return;\n    }\n\n    this._axesMap = axesMap;\n    util_1.each(axesMap.x, function (xAxis, xAxisIndex) {\n      util_1.each(axesMap.y, function (yAxis, yAxisIndex) {\n        var key = 'x' + xAxisIndex + 'y' + yAxisIndex;\n        var cartesian = new Cartesian2D_1[\"default\"](key);\n        cartesian.master = _this;\n        cartesian.model = gridModel;\n        _this._coordsMap[key] = cartesian;\n\n        _this._coordsList.push(cartesian);\n\n        cartesian.addAxis(xAxis);\n        cartesian.addAxis(yAxis);\n      });\n    });\n\n    function createAxisCreator(dimName) {\n      return function (axisModel, idx) {\n        if (!isAxisUsedInTheGrid(axisModel, gridModel)) {\n          return;\n        }\n\n        var axisPosition = axisModel.get('position');\n\n        if (dimName === 'x') {\n          if (axisPosition !== 'top' && axisPosition !== 'bottom') {\n            axisPosition = axisPositionUsed.bottom ? 'top' : 'bottom';\n          }\n        } else {\n          if (axisPosition !== 'left' && axisPosition !== 'right') {\n            axisPosition = axisPositionUsed.left ? 'right' : 'left';\n          }\n        }\n\n        axisPositionUsed[axisPosition] = true;\n        var axis = new Axis2D_1[\"default\"](dimName, axisHelper_1.createScaleByModel(axisModel), [0, 0], axisModel.get('type'), axisPosition);\n        var isCategory = axis.type === 'category';\n        axis.onBand = isCategory && axisModel.get('boundaryGap');\n        axis.inverse = axisModel.get('inverse');\n        axisModel.axis = axis;\n        axis.model = axisModel;\n        axis.grid = grid;\n        axis.index = idx;\n\n        grid._axesList.push(axis);\n\n        axesMap[dimName][idx] = axis;\n        axesCount[dimName]++;\n      };\n    }\n  };\n\n  Grid.prototype._updateScale = function (ecModel, gridModel) {\n    util_1.each(this._axesList, function (axis) {\n      axis.scale.setExtent(Infinity, -Infinity);\n\n      if (axis.type === 'category') {\n        var categorySortInfo = axis.model.get('categorySortInfo');\n        axis.scale.setCategorySortInfo(categorySortInfo);\n      }\n    });\n    ecModel.eachSeries(function (seriesModel) {\n      if (cartesianAxisHelper_1.isCartesian2DSeries(seriesModel)) {\n        var axesModelMap = cartesianAxisHelper_1.findAxisModels(seriesModel);\n        var xAxisModel = axesModelMap.xAxisModel;\n        var yAxisModel = axesModelMap.yAxisModel;\n\n        if (!isAxisUsedInTheGrid(xAxisModel, gridModel) || !isAxisUsedInTheGrid(yAxisModel, gridModel)) {\n          return;\n        }\n\n        var cartesian = this.getCartesian(xAxisModel.componentIndex, yAxisModel.componentIndex);\n        var data = seriesModel.getData();\n        var xAxis = cartesian.getAxis('x');\n        var yAxis = cartesian.getAxis('y');\n\n        if (data.type === 'list') {\n          unionExtent(data, xAxis);\n          unionExtent(data, yAxis);\n        }\n      }\n    }, this);\n\n    function unionExtent(data, axis) {\n      util_1.each(axisHelper_1.getDataDimensionsOnAxis(data, axis.dim), function (dim) {\n        axis.scale.unionExtentFromData(data, dim);\n      });\n    }\n  };\n\n  Grid.prototype.getTooltipAxes = function (dim) {\n    var baseAxes = [];\n    var otherAxes = [];\n    util_1.each(this.getCartesians(), function (cartesian) {\n      var baseAxis = dim != null && dim !== 'auto' ? cartesian.getAxis(dim) : cartesian.getBaseAxis();\n      var otherAxis = cartesian.getOtherAxis(baseAxis);\n      util_1.indexOf(baseAxes, baseAxis) < 0 && baseAxes.push(baseAxis);\n      util_1.indexOf(otherAxes, otherAxis) < 0 && otherAxes.push(otherAxis);\n    });\n    return {\n      baseAxes: baseAxes,\n      otherAxes: otherAxes\n    };\n  };\n\n  Grid.create = function (ecModel, api) {\n    var grids = [];\n    ecModel.eachComponent('grid', function (gridModel, idx) {\n      var grid = new Grid(gridModel, ecModel, api);\n      grid.name = 'grid_' + idx;\n      grid.resize(gridModel, api, true);\n      gridModel.coordinateSystem = grid;\n      grids.push(grid);\n    });\n    ecModel.eachSeries(function (seriesModel) {\n      if (!cartesianAxisHelper_1.isCartesian2DSeries(seriesModel)) {\n        return;\n      }\n\n      var axesModelMap = cartesianAxisHelper_1.findAxisModels(seriesModel);\n      var xAxisModel = axesModelMap.xAxisModel;\n      var yAxisModel = axesModelMap.yAxisModel;\n      var gridModel = xAxisModel.getCoordSysModel();\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (!gridModel) {\n          throw new Error('Grid \"' + util_1.retrieve3(xAxisModel.get('gridIndex'), xAxisModel.get('gridId'), 0) + '\" not found');\n        }\n\n        if (xAxisModel.getCoordSysModel() !== yAxisModel.getCoordSysModel()) {\n          throw new Error('xAxis and yAxis must use the same grid');\n        }\n      }\n\n      var grid = gridModel.coordinateSystem;\n      seriesModel.coordinateSystem = grid.getCartesian(xAxisModel.componentIndex, yAxisModel.componentIndex);\n    });\n    return grids;\n  };\n\n  Grid.dimensions = Cartesian2D_1.cartesian2DDimensions;\n  return Grid;\n}();\n\nfunction isAxisUsedInTheGrid(axisModel, gridModel) {\n  return axisModel.getCoordSysModel() === gridModel;\n}\n\nfunction fixAxisOnZero(axesMap, otherAxisDim, axis, onZeroRecords) {\n  axis.getAxesOnZeroOf = function () {\n    return otherAxisOnZeroOf ? [otherAxisOnZeroOf] : [];\n  };\n\n  var otherAxes = axesMap[otherAxisDim];\n  var otherAxisOnZeroOf;\n  var axisModel = axis.model;\n  var onZero = axisModel.get(['axisLine', 'onZero']);\n  var onZeroAxisIndex = axisModel.get(['axisLine', 'onZeroAxisIndex']);\n\n  if (!onZero) {\n    return;\n  }\n\n  if (onZeroAxisIndex != null) {\n    if (canOnZeroToAxis(otherAxes[onZeroAxisIndex])) {\n      otherAxisOnZeroOf = otherAxes[onZeroAxisIndex];\n    }\n  } else {\n    for (var idx in otherAxes) {\n      if (otherAxes.hasOwnProperty(idx) && canOnZeroToAxis(otherAxes[idx]) && !onZeroRecords[getOnZeroRecordKey(otherAxes[idx])]) {\n        otherAxisOnZeroOf = otherAxes[idx];\n        break;\n      }\n    }\n  }\n\n  if (otherAxisOnZeroOf) {\n    onZeroRecords[getOnZeroRecordKey(otherAxisOnZeroOf)] = true;\n  }\n\n  function getOnZeroRecordKey(axis) {\n    return axis.dim + '_' + axis.index;\n  }\n}\n\nfunction canOnZeroToAxis(axis) {\n  return axis && axis.type !== 'category' && axis.type !== 'time' && axisHelper_1.ifAxisCrossZero(axis);\n}\n\nfunction updateAxisTransform(axis, coordBase) {\n  var axisExtent = axis.getExtent();\n  var axisExtentSum = axisExtent[0] + axisExtent[1];\n  axis.toGlobalCoord = axis.dim === 'x' ? function (coord) {\n    return coord + coordBase;\n  } : function (coord) {\n    return axisExtentSum - coord + coordBase;\n  };\n  axis.toLocalCoord = axis.dim === 'x' ? function (coord) {\n    return coord - coordBase;\n  } : function (coord) {\n    return axisExtentSum - coord + coordBase;\n  };\n}\n\nCoordinateSystem_1[\"default\"].register('cartesian2d', Grid);\nexports[\"default\"] = Grid;","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/echarts/lib/coord/cartesian/Grid.js"],"names":["exports","__esModule","util_1","require","layout_1","axisHelper_1","Cartesian2D_1","Axis2D_1","CoordinateSystem_1","model_1","cartesianAxisHelper_1","Grid","gridModel","ecModel","api","type","_coordsMap","_coordsList","_axesMap","_axesList","axisPointerEnabled","dimensions","cartesian2DDimensions","_initCartesian","model","prototype","getRect","_rect","update","axesMap","_updateScale","each","x","xAxis","niceScaleExtent","scale","y","yAxis","onZeroRecords","fixAxisOnZero","resize","ignoreContainLabel","boxLayoutParams","getBoxLayoutParams","isContainLabel","get","gridRect","getLayoutRect","width","getWidth","height","getHeight","axesList","adjustAxes","axis","labelUnionRect","estimateLabelUnionRect","dim","isHorizontal","margin","position","coord","calcAffineTransform","extent","idx","inverse","setExtent","updateAxisTransform","getAxis","axisIndex","axesMapOnDim","getAxes","slice","getCartesian","xAxisIndex","yAxisIndex","key","isObject","i","coordList","length","index","getCartesians","convertToPixel","finder","value","target","_findConvertTarget","cartesian","dataToPoint","toGlobalCoord","dataToCoord","convertFromPixel","pointToData","coordToData","toLocalCoord","seriesModel","xAxisModel","getReferringComponents","SINGLE_REFERRING","models","yAxisModel","coordsList","coordinateSystem","indexOf","componentIndex","grid","containPoint","point","_this","axisPositionUsed","left","right","top","bottom","axesCount","eachComponent","createAxisCreator","master","push","addAxis","dimName","axisModel","isAxisUsedInTheGrid","axisPosition","createScaleByModel","isCategory","onBand","Infinity","categorySortInfo","setCategorySortInfo","eachSeries","isCartesian2DSeries","axesModelMap","findAxisModels","data","getData","unionExtent","getDataDimensionsOnAxis","unionExtentFromData","getTooltipAxes","baseAxes","otherAxes","baseAxis","getBaseAxis","otherAxis","getOtherAxis","create","grids","name","getCoordSysModel","process","env","NODE_ENV","Error","retrieve3","otherAxisDim","getAxesOnZeroOf","otherAxisOnZeroOf","onZero","onZeroAxisIndex","canOnZeroToAxis","hasOwnProperty","getOnZeroRecordKey","ifAxisCrossZero","coordBase","axisExtent","getExtent","axisExtentSum","register"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n\"use strict\";\n\nexports.__esModule = true;\n\nvar util_1 = require(\"zrender/lib/core/util\");\n\nvar layout_1 = require(\"../../util/layout\");\n\nvar axisHelper_1 = require(\"../../coord/axisHelper\");\n\nvar Cartesian2D_1 = require(\"./Cartesian2D\");\n\nvar Axis2D_1 = require(\"./Axis2D\");\n\nvar CoordinateSystem_1 = require(\"../../CoordinateSystem\");\n\nvar model_1 = require(\"../../util/model\");\n\nvar cartesianAxisHelper_1 = require(\"./cartesianAxisHelper\");\n\nvar Grid = function () {\n  function Grid(gridModel, ecModel, api) {\n    this.type = 'grid';\n    this._coordsMap = {};\n    this._coordsList = [];\n    this._axesMap = {};\n    this._axesList = [];\n    this.axisPointerEnabled = true;\n    this.dimensions = Cartesian2D_1.cartesian2DDimensions;\n\n    this._initCartesian(gridModel, ecModel, api);\n\n    this.model = gridModel;\n  }\n\n  Grid.prototype.getRect = function () {\n    return this._rect;\n  };\n\n  Grid.prototype.update = function (ecModel, api) {\n    var axesMap = this._axesMap;\n\n    this._updateScale(ecModel, this.model);\n\n    util_1.each(axesMap.x, function (xAxis) {\n      axisHelper_1.niceScaleExtent(xAxis.scale, xAxis.model);\n    });\n    util_1.each(axesMap.y, function (yAxis) {\n      axisHelper_1.niceScaleExtent(yAxis.scale, yAxis.model);\n    });\n    var onZeroRecords = {};\n    util_1.each(axesMap.x, function (xAxis) {\n      fixAxisOnZero(axesMap, 'y', xAxis, onZeroRecords);\n    });\n    util_1.each(axesMap.y, function (yAxis) {\n      fixAxisOnZero(axesMap, 'x', yAxis, onZeroRecords);\n    });\n    this.resize(this.model, api);\n  };\n\n  Grid.prototype.resize = function (gridModel, api, ignoreContainLabel) {\n    var boxLayoutParams = gridModel.getBoxLayoutParams();\n    var isContainLabel = !ignoreContainLabel && gridModel.get('containLabel');\n    var gridRect = layout_1.getLayoutRect(boxLayoutParams, {\n      width: api.getWidth(),\n      height: api.getHeight()\n    });\n    this._rect = gridRect;\n    var axesList = this._axesList;\n    adjustAxes();\n\n    if (isContainLabel) {\n      util_1.each(axesList, function (axis) {\n        if (!axis.model.get(['axisLabel', 'inside'])) {\n          var labelUnionRect = axisHelper_1.estimateLabelUnionRect(axis);\n\n          if (labelUnionRect) {\n            var dim = axis.isHorizontal() ? 'height' : 'width';\n            var margin = axis.model.get(['axisLabel', 'margin']);\n            gridRect[dim] -= labelUnionRect[dim] + margin;\n\n            if (axis.position === 'top') {\n              gridRect.y += labelUnionRect.height + margin;\n            } else if (axis.position === 'left') {\n              gridRect.x += labelUnionRect.width + margin;\n            }\n          }\n        }\n      });\n      adjustAxes();\n    }\n\n    util_1.each(this._coordsList, function (coord) {\n      coord.calcAffineTransform();\n    });\n\n    function adjustAxes() {\n      util_1.each(axesList, function (axis) {\n        var isHorizontal = axis.isHorizontal();\n        var extent = isHorizontal ? [0, gridRect.width] : [0, gridRect.height];\n        var idx = axis.inverse ? 1 : 0;\n        axis.setExtent(extent[idx], extent[1 - idx]);\n        updateAxisTransform(axis, isHorizontal ? gridRect.x : gridRect.y);\n      });\n    }\n  };\n\n  Grid.prototype.getAxis = function (dim, axisIndex) {\n    var axesMapOnDim = this._axesMap[dim];\n\n    if (axesMapOnDim != null) {\n      return axesMapOnDim[axisIndex || 0];\n    }\n  };\n\n  Grid.prototype.getAxes = function () {\n    return this._axesList.slice();\n  };\n\n  Grid.prototype.getCartesian = function (xAxisIndex, yAxisIndex) {\n    if (xAxisIndex != null && yAxisIndex != null) {\n      var key = 'x' + xAxisIndex + 'y' + yAxisIndex;\n      return this._coordsMap[key];\n    }\n\n    if (util_1.isObject(xAxisIndex)) {\n      yAxisIndex = xAxisIndex.yAxisIndex;\n      xAxisIndex = xAxisIndex.xAxisIndex;\n    }\n\n    for (var i = 0, coordList = this._coordsList; i < coordList.length; i++) {\n      if (coordList[i].getAxis('x').index === xAxisIndex || coordList[i].getAxis('y').index === yAxisIndex) {\n        return coordList[i];\n      }\n    }\n  };\n\n  Grid.prototype.getCartesians = function () {\n    return this._coordsList.slice();\n  };\n\n  Grid.prototype.convertToPixel = function (ecModel, finder, value) {\n    var target = this._findConvertTarget(finder);\n\n    return target.cartesian ? target.cartesian.dataToPoint(value) : target.axis ? target.axis.toGlobalCoord(target.axis.dataToCoord(value)) : null;\n  };\n\n  Grid.prototype.convertFromPixel = function (ecModel, finder, value) {\n    var target = this._findConvertTarget(finder);\n\n    return target.cartesian ? target.cartesian.pointToData(value) : target.axis ? target.axis.coordToData(target.axis.toLocalCoord(value)) : null;\n  };\n\n  Grid.prototype._findConvertTarget = function (finder) {\n    var seriesModel = finder.seriesModel;\n    var xAxisModel = finder.xAxisModel || seriesModel && seriesModel.getReferringComponents('xAxis', model_1.SINGLE_REFERRING).models[0];\n    var yAxisModel = finder.yAxisModel || seriesModel && seriesModel.getReferringComponents('yAxis', model_1.SINGLE_REFERRING).models[0];\n    var gridModel = finder.gridModel;\n    var coordsList = this._coordsList;\n    var cartesian;\n    var axis;\n\n    if (seriesModel) {\n      cartesian = seriesModel.coordinateSystem;\n      util_1.indexOf(coordsList, cartesian) < 0 && (cartesian = null);\n    } else if (xAxisModel && yAxisModel) {\n      cartesian = this.getCartesian(xAxisModel.componentIndex, yAxisModel.componentIndex);\n    } else if (xAxisModel) {\n      axis = this.getAxis('x', xAxisModel.componentIndex);\n    } else if (yAxisModel) {\n      axis = this.getAxis('y', yAxisModel.componentIndex);\n    } else if (gridModel) {\n      var grid = gridModel.coordinateSystem;\n\n      if (grid === this) {\n        cartesian = this._coordsList[0];\n      }\n    }\n\n    return {\n      cartesian: cartesian,\n      axis: axis\n    };\n  };\n\n  Grid.prototype.containPoint = function (point) {\n    var coord = this._coordsList[0];\n\n    if (coord) {\n      return coord.containPoint(point);\n    }\n  };\n\n  Grid.prototype._initCartesian = function (gridModel, ecModel, api) {\n    var _this = this;\n\n    var grid = this;\n    var axisPositionUsed = {\n      left: false,\n      right: false,\n      top: false,\n      bottom: false\n    };\n    var axesMap = {\n      x: {},\n      y: {}\n    };\n    var axesCount = {\n      x: 0,\n      y: 0\n    };\n    ecModel.eachComponent('xAxis', createAxisCreator('x'), this);\n    ecModel.eachComponent('yAxis', createAxisCreator('y'), this);\n\n    if (!axesCount.x || !axesCount.y) {\n      this._axesMap = {};\n      this._axesList = [];\n      return;\n    }\n\n    this._axesMap = axesMap;\n    util_1.each(axesMap.x, function (xAxis, xAxisIndex) {\n      util_1.each(axesMap.y, function (yAxis, yAxisIndex) {\n        var key = 'x' + xAxisIndex + 'y' + yAxisIndex;\n        var cartesian = new Cartesian2D_1[\"default\"](key);\n        cartesian.master = _this;\n        cartesian.model = gridModel;\n        _this._coordsMap[key] = cartesian;\n\n        _this._coordsList.push(cartesian);\n\n        cartesian.addAxis(xAxis);\n        cartesian.addAxis(yAxis);\n      });\n    });\n\n    function createAxisCreator(dimName) {\n      return function (axisModel, idx) {\n        if (!isAxisUsedInTheGrid(axisModel, gridModel)) {\n          return;\n        }\n\n        var axisPosition = axisModel.get('position');\n\n        if (dimName === 'x') {\n          if (axisPosition !== 'top' && axisPosition !== 'bottom') {\n            axisPosition = axisPositionUsed.bottom ? 'top' : 'bottom';\n          }\n        } else {\n          if (axisPosition !== 'left' && axisPosition !== 'right') {\n            axisPosition = axisPositionUsed.left ? 'right' : 'left';\n          }\n        }\n\n        axisPositionUsed[axisPosition] = true;\n        var axis = new Axis2D_1[\"default\"](dimName, axisHelper_1.createScaleByModel(axisModel), [0, 0], axisModel.get('type'), axisPosition);\n        var isCategory = axis.type === 'category';\n        axis.onBand = isCategory && axisModel.get('boundaryGap');\n        axis.inverse = axisModel.get('inverse');\n        axisModel.axis = axis;\n        axis.model = axisModel;\n        axis.grid = grid;\n        axis.index = idx;\n\n        grid._axesList.push(axis);\n\n        axesMap[dimName][idx] = axis;\n        axesCount[dimName]++;\n      };\n    }\n  };\n\n  Grid.prototype._updateScale = function (ecModel, gridModel) {\n    util_1.each(this._axesList, function (axis) {\n      axis.scale.setExtent(Infinity, -Infinity);\n\n      if (axis.type === 'category') {\n        var categorySortInfo = axis.model.get('categorySortInfo');\n        axis.scale.setCategorySortInfo(categorySortInfo);\n      }\n    });\n    ecModel.eachSeries(function (seriesModel) {\n      if (cartesianAxisHelper_1.isCartesian2DSeries(seriesModel)) {\n        var axesModelMap = cartesianAxisHelper_1.findAxisModels(seriesModel);\n        var xAxisModel = axesModelMap.xAxisModel;\n        var yAxisModel = axesModelMap.yAxisModel;\n\n        if (!isAxisUsedInTheGrid(xAxisModel, gridModel) || !isAxisUsedInTheGrid(yAxisModel, gridModel)) {\n          return;\n        }\n\n        var cartesian = this.getCartesian(xAxisModel.componentIndex, yAxisModel.componentIndex);\n        var data = seriesModel.getData();\n        var xAxis = cartesian.getAxis('x');\n        var yAxis = cartesian.getAxis('y');\n\n        if (data.type === 'list') {\n          unionExtent(data, xAxis);\n          unionExtent(data, yAxis);\n        }\n      }\n    }, this);\n\n    function unionExtent(data, axis) {\n      util_1.each(axisHelper_1.getDataDimensionsOnAxis(data, axis.dim), function (dim) {\n        axis.scale.unionExtentFromData(data, dim);\n      });\n    }\n  };\n\n  Grid.prototype.getTooltipAxes = function (dim) {\n    var baseAxes = [];\n    var otherAxes = [];\n    util_1.each(this.getCartesians(), function (cartesian) {\n      var baseAxis = dim != null && dim !== 'auto' ? cartesian.getAxis(dim) : cartesian.getBaseAxis();\n      var otherAxis = cartesian.getOtherAxis(baseAxis);\n      util_1.indexOf(baseAxes, baseAxis) < 0 && baseAxes.push(baseAxis);\n      util_1.indexOf(otherAxes, otherAxis) < 0 && otherAxes.push(otherAxis);\n    });\n    return {\n      baseAxes: baseAxes,\n      otherAxes: otherAxes\n    };\n  };\n\n  Grid.create = function (ecModel, api) {\n    var grids = [];\n    ecModel.eachComponent('grid', function (gridModel, idx) {\n      var grid = new Grid(gridModel, ecModel, api);\n      grid.name = 'grid_' + idx;\n      grid.resize(gridModel, api, true);\n      gridModel.coordinateSystem = grid;\n      grids.push(grid);\n    });\n    ecModel.eachSeries(function (seriesModel) {\n      if (!cartesianAxisHelper_1.isCartesian2DSeries(seriesModel)) {\n        return;\n      }\n\n      var axesModelMap = cartesianAxisHelper_1.findAxisModels(seriesModel);\n      var xAxisModel = axesModelMap.xAxisModel;\n      var yAxisModel = axesModelMap.yAxisModel;\n      var gridModel = xAxisModel.getCoordSysModel();\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (!gridModel) {\n          throw new Error('Grid \"' + util_1.retrieve3(xAxisModel.get('gridIndex'), xAxisModel.get('gridId'), 0) + '\" not found');\n        }\n\n        if (xAxisModel.getCoordSysModel() !== yAxisModel.getCoordSysModel()) {\n          throw new Error('xAxis and yAxis must use the same grid');\n        }\n      }\n\n      var grid = gridModel.coordinateSystem;\n      seriesModel.coordinateSystem = grid.getCartesian(xAxisModel.componentIndex, yAxisModel.componentIndex);\n    });\n    return grids;\n  };\n\n  Grid.dimensions = Cartesian2D_1.cartesian2DDimensions;\n  return Grid;\n}();\n\nfunction isAxisUsedInTheGrid(axisModel, gridModel) {\n  return axisModel.getCoordSysModel() === gridModel;\n}\n\nfunction fixAxisOnZero(axesMap, otherAxisDim, axis, onZeroRecords) {\n  axis.getAxesOnZeroOf = function () {\n    return otherAxisOnZeroOf ? [otherAxisOnZeroOf] : [];\n  };\n\n  var otherAxes = axesMap[otherAxisDim];\n  var otherAxisOnZeroOf;\n  var axisModel = axis.model;\n  var onZero = axisModel.get(['axisLine', 'onZero']);\n  var onZeroAxisIndex = axisModel.get(['axisLine', 'onZeroAxisIndex']);\n\n  if (!onZero) {\n    return;\n  }\n\n  if (onZeroAxisIndex != null) {\n    if (canOnZeroToAxis(otherAxes[onZeroAxisIndex])) {\n      otherAxisOnZeroOf = otherAxes[onZeroAxisIndex];\n    }\n  } else {\n    for (var idx in otherAxes) {\n      if (otherAxes.hasOwnProperty(idx) && canOnZeroToAxis(otherAxes[idx]) && !onZeroRecords[getOnZeroRecordKey(otherAxes[idx])]) {\n        otherAxisOnZeroOf = otherAxes[idx];\n        break;\n      }\n    }\n  }\n\n  if (otherAxisOnZeroOf) {\n    onZeroRecords[getOnZeroRecordKey(otherAxisOnZeroOf)] = true;\n  }\n\n  function getOnZeroRecordKey(axis) {\n    return axis.dim + '_' + axis.index;\n  }\n}\n\nfunction canOnZeroToAxis(axis) {\n  return axis && axis.type !== 'category' && axis.type !== 'time' && axisHelper_1.ifAxisCrossZero(axis);\n}\n\nfunction updateAxisTransform(axis, coordBase) {\n  var axisExtent = axis.getExtent();\n  var axisExtentSum = axisExtent[0] + axisExtent[1];\n  axis.toGlobalCoord = axis.dim === 'x' ? function (coord) {\n    return coord + coordBase;\n  } : function (coord) {\n    return axisExtentSum - coord + coordBase;\n  };\n  axis.toLocalCoord = axis.dim === 'x' ? function (coord) {\n    return coord - coordBase;\n  } : function (coord) {\n    return axisExtentSum - coord + coordBase;\n  };\n}\n\nCoordinateSystem_1[\"default\"].register('cartesian2d', Grid);\nexports[\"default\"] = Grid;"]},"metadata":{},"sourceType":"script"}