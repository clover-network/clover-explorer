{"ast":null,"code":"import { isString } from '@antv/util';\nimport dijkstra from './dijkstra';\nexport var findShortestPath = function findShortestPath(graph, start, end, directed, weightPropertyName) {\n  if (isString(start)) start = graph.findById(start);\n  if (isString(end)) end = graph.findById(end);\n\n  var _a = dijkstra(graph, start.get('id'), directed, weightPropertyName),\n      length = _a.length,\n      path = _a.path;\n\n  return {\n    length: length[end.get('id')],\n    path: path[end.get('id')]\n  };\n};\nexport var findAllPath = function findAllPath(graph, start, end, directed) {\n  var _a;\n\n  if (isString(start)) start = graph.findById(start);\n  if (isString(end)) end = graph.findById(end);\n  if (directed === undefined) directed = graph.get('directed');\n  if (start === end) return [[start.get('id')]];\n  var visited = [start];\n  var isVisited = (_a = {}, _a[start.get('id')] = true, _a);\n  var stack = []; // 辅助栈，用于存储访问过的节点的邻居节点\n\n  var allPaths = [];\n  var neighbors = directed ? start.getNeighbors('target') : start.getNeighbors();\n  stack.push(neighbors);\n\n  while (visited.length > 0 && stack.length > 0) {\n    var children = stack[stack.length - 1];\n\n    if (children.length) {\n      var child = children.shift();\n\n      if (child) {\n        visited.push(child);\n        isVisited[child.get('id')] = true;\n        neighbors = directed ? child.getNeighbors('target') : child.getNeighbors();\n        stack.push(neighbors.filter(function (neighbor) {\n          return !isVisited[neighbor.get('id')];\n        }));\n      }\n    } else {\n      var node = visited.pop();\n      isVisited[node.get('id')] = false;\n      stack.pop();\n      continue;\n    }\n\n    if (visited[visited.length - 1] === end) {\n      var path = visited.map(function (node) {\n        return node.get('id');\n      });\n      allPaths.push(path);\n      var node = visited.pop();\n      isVisited[node.get('id')] = false;\n      stack.pop();\n    }\n  }\n\n  return allPaths;\n};","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/@antv/g6/es/algorithm/find-path.js"],"names":["isString","dijkstra","findShortestPath","graph","start","end","directed","weightPropertyName","findById","_a","get","length","path","findAllPath","undefined","visited","isVisited","stack","allPaths","neighbors","getNeighbors","push","children","child","shift","filter","neighbor","node","pop","map"],"mappings":"AAAA,SAASA,QAAT,QAAyB,YAAzB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAO,IAAIC,gBAAgB,GAAG,SAASA,gBAAT,CAA0BC,KAA1B,EAAiCC,KAAjC,EAAwCC,GAAxC,EAA6CC,QAA7C,EAAuDC,kBAAvD,EAA2E;AACvG,MAAIP,QAAQ,CAACI,KAAD,CAAZ,EAAqBA,KAAK,GAAGD,KAAK,CAACK,QAAN,CAAeJ,KAAf,CAAR;AACrB,MAAIJ,QAAQ,CAACK,GAAD,CAAZ,EAAmBA,GAAG,GAAGF,KAAK,CAACK,QAAN,CAAeH,GAAf,CAAN;;AAEnB,MAAII,EAAE,GAAGR,QAAQ,CAACE,KAAD,EAAQC,KAAK,CAACM,GAAN,CAAU,IAAV,CAAR,EAAyBJ,QAAzB,EAAmCC,kBAAnC,CAAjB;AAAA,MACII,MAAM,GAAGF,EAAE,CAACE,MADhB;AAAA,MAEIC,IAAI,GAAGH,EAAE,CAACG,IAFd;;AAIA,SAAO;AACLD,IAAAA,MAAM,EAAEA,MAAM,CAACN,GAAG,CAACK,GAAJ,CAAQ,IAAR,CAAD,CADT;AAELE,IAAAA,IAAI,EAAEA,IAAI,CAACP,GAAG,CAACK,GAAJ,CAAQ,IAAR,CAAD;AAFL,GAAP;AAID,CAZM;AAaP,OAAO,IAAIG,WAAW,GAAG,SAASA,WAAT,CAAqBV,KAArB,EAA4BC,KAA5B,EAAmCC,GAAnC,EAAwCC,QAAxC,EAAkD;AACzE,MAAIG,EAAJ;;AAEA,MAAIT,QAAQ,CAACI,KAAD,CAAZ,EAAqBA,KAAK,GAAGD,KAAK,CAACK,QAAN,CAAeJ,KAAf,CAAR;AACrB,MAAIJ,QAAQ,CAACK,GAAD,CAAZ,EAAmBA,GAAG,GAAGF,KAAK,CAACK,QAAN,CAAeH,GAAf,CAAN;AACnB,MAAIC,QAAQ,KAAKQ,SAAjB,EAA4BR,QAAQ,GAAGH,KAAK,CAACO,GAAN,CAAU,UAAV,CAAX;AAC5B,MAAIN,KAAK,KAAKC,GAAd,EAAmB,OAAO,CAAC,CAACD,KAAK,CAACM,GAAN,CAAU,IAAV,CAAD,CAAD,CAAP;AACnB,MAAIK,OAAO,GAAG,CAACX,KAAD,CAAd;AACA,MAAIY,SAAS,IAAIP,EAAE,GAAG,EAAL,EAASA,EAAE,CAACL,KAAK,CAACM,GAAN,CAAU,IAAV,CAAD,CAAF,GAAsB,IAA/B,EAAqCD,EAAzC,CAAb;AACA,MAAIQ,KAAK,GAAG,EAAZ,CATyE,CASzD;;AAEhB,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIC,SAAS,GAAGb,QAAQ,GAAGF,KAAK,CAACgB,YAAN,CAAmB,QAAnB,CAAH,GAAkChB,KAAK,CAACgB,YAAN,EAA1D;AACAH,EAAAA,KAAK,CAACI,IAAN,CAAWF,SAAX;;AAEA,SAAOJ,OAAO,CAACJ,MAAR,GAAiB,CAAjB,IAAsBM,KAAK,CAACN,MAAN,GAAe,CAA5C,EAA+C;AAC7C,QAAIW,QAAQ,GAAGL,KAAK,CAACA,KAAK,CAACN,MAAN,GAAe,CAAhB,CAApB;;AAEA,QAAIW,QAAQ,CAACX,MAAb,EAAqB;AACnB,UAAIY,KAAK,GAAGD,QAAQ,CAACE,KAAT,EAAZ;;AAEA,UAAID,KAAJ,EAAW;AACTR,QAAAA,OAAO,CAACM,IAAR,CAAaE,KAAb;AACAP,QAAAA,SAAS,CAACO,KAAK,CAACb,GAAN,CAAU,IAAV,CAAD,CAAT,GAA6B,IAA7B;AACAS,QAAAA,SAAS,GAAGb,QAAQ,GAAGiB,KAAK,CAACH,YAAN,CAAmB,QAAnB,CAAH,GAAkCG,KAAK,CAACH,YAAN,EAAtD;AACAH,QAAAA,KAAK,CAACI,IAAN,CAAWF,SAAS,CAACM,MAAV,CAAiB,UAAUC,QAAV,EAAoB;AAC9C,iBAAO,CAACV,SAAS,CAACU,QAAQ,CAAChB,GAAT,CAAa,IAAb,CAAD,CAAjB;AACD,SAFU,CAAX;AAGD;AACF,KAXD,MAWO;AACL,UAAIiB,IAAI,GAAGZ,OAAO,CAACa,GAAR,EAAX;AACAZ,MAAAA,SAAS,CAACW,IAAI,CAACjB,GAAL,CAAS,IAAT,CAAD,CAAT,GAA4B,KAA5B;AACAO,MAAAA,KAAK,CAACW,GAAN;AACA;AACD;;AAED,QAAIb,OAAO,CAACA,OAAO,CAACJ,MAAR,GAAiB,CAAlB,CAAP,KAAgCN,GAApC,EAAyC;AACvC,UAAIO,IAAI,GAAGG,OAAO,CAACc,GAAR,CAAY,UAAUF,IAAV,EAAgB;AACrC,eAAOA,IAAI,CAACjB,GAAL,CAAS,IAAT,CAAP;AACD,OAFU,CAAX;AAGAQ,MAAAA,QAAQ,CAACG,IAAT,CAAcT,IAAd;AACA,UAAIe,IAAI,GAAGZ,OAAO,CAACa,GAAR,EAAX;AACAZ,MAAAA,SAAS,CAACW,IAAI,CAACjB,GAAL,CAAS,IAAT,CAAD,CAAT,GAA4B,KAA5B;AACAO,MAAAA,KAAK,CAACW,GAAN;AACD;AACF;;AAED,SAAOV,QAAP;AACD,CAhDM","sourcesContent":["import { isString } from '@antv/util';\nimport dijkstra from './dijkstra';\nexport var findShortestPath = function findShortestPath(graph, start, end, directed, weightPropertyName) {\n  if (isString(start)) start = graph.findById(start);\n  if (isString(end)) end = graph.findById(end);\n\n  var _a = dijkstra(graph, start.get('id'), directed, weightPropertyName),\n      length = _a.length,\n      path = _a.path;\n\n  return {\n    length: length[end.get('id')],\n    path: path[end.get('id')]\n  };\n};\nexport var findAllPath = function findAllPath(graph, start, end, directed) {\n  var _a;\n\n  if (isString(start)) start = graph.findById(start);\n  if (isString(end)) end = graph.findById(end);\n  if (directed === undefined) directed = graph.get('directed');\n  if (start === end) return [[start.get('id')]];\n  var visited = [start];\n  var isVisited = (_a = {}, _a[start.get('id')] = true, _a);\n  var stack = []; // 辅助栈，用于存储访问过的节点的邻居节点\n\n  var allPaths = [];\n  var neighbors = directed ? start.getNeighbors('target') : start.getNeighbors();\n  stack.push(neighbors);\n\n  while (visited.length > 0 && stack.length > 0) {\n    var children = stack[stack.length - 1];\n\n    if (children.length) {\n      var child = children.shift();\n\n      if (child) {\n        visited.push(child);\n        isVisited[child.get('id')] = true;\n        neighbors = directed ? child.getNeighbors('target') : child.getNeighbors();\n        stack.push(neighbors.filter(function (neighbor) {\n          return !isVisited[neighbor.get('id')];\n        }));\n      }\n    } else {\n      var node = visited.pop();\n      isVisited[node.get('id')] = false;\n      stack.pop();\n      continue;\n    }\n\n    if (visited[visited.length - 1] === end) {\n      var path = visited.map(function (node) {\n        return node.get('id');\n      });\n      allPaths.push(path);\n      var node = visited.pop();\n      isVisited[node.get('id')] = false;\n      stack.pop();\n    }\n  }\n\n  return allPaths;\n};"]},"metadata":{},"sourceType":"module"}