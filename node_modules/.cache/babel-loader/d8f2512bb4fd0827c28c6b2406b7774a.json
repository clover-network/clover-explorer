{"ast":null,"code":"import { theme, scale, animation, annotation, tooltip } from '../../adaptor/common';\nimport { flow, deepAssign } from '../../utils';\nimport { area, line, point } from '../../adaptor/geometries';\nimport { X_FIELD, Y_FIELD } from '../tiny-line/constants';\nimport { adjustYMetaByZero } from '../../utils/data';\n/**\n * 字段\n * @param params\n */\n\nfunction geometry(params) {\n  var _a, _b;\n\n  var chart = params.chart,\n      options = params.options;\n  var data = options.data,\n      xAxis = options.xAxis,\n      yAxis = options.yAxis,\n      color = options.color,\n      areaStyle = options.areaStyle,\n      pointOptions = options.point,\n      lineOptions = options.line;\n  var seriesData = data.map(function (y, x) {\n    return {\n      x: x,\n      y: y\n    };\n  });\n  chart.data(seriesData);\n  var p = deepAssign({}, params, {\n    options: {\n      xField: X_FIELD,\n      yField: Y_FIELD,\n      area: {\n        color: color,\n        style: areaStyle\n      },\n      line: lineOptions,\n      point: pointOptions\n    }\n  }); // area geometry 处理\n\n  area(p);\n  line(p);\n  point(p);\n  chart.axis(false);\n  chart.legend(false); // scale\n\n  scale((_a = {}, _a[X_FIELD] = xAxis, _a[Y_FIELD] = yAxis, _a), (_b = {}, _b[X_FIELD] = {\n    type: 'cat'\n  }, _b[Y_FIELD] = adjustYMetaByZero(seriesData, Y_FIELD), _b))(params);\n  return params;\n}\n/**\n * 迷你面积图适配器\n * @param chart\n * @param options\n */\n\n\nexport function adaptor(params) {\n  return flow(geometry, tooltip, theme, animation, annotation())(params);\n}","map":{"version":3,"sources":["../../../src/plots/tiny-area/adaptor.ts"],"names":[],"mappings":"AAAA,SAAS,KAAT,EAAgB,KAAhB,EAAuB,SAAvB,EAAkC,UAAlC,EAA8C,OAA9C,QAA6D,sBAA7D;AAEA,SAAS,IAAT,EAAe,UAAf,QAAiC,aAAjC;AACA,SAAS,IAAT,EAAe,IAAf,EAAqB,KAArB,QAAkC,0BAAlC;AACA,SAAS,OAAT,EAAkB,OAAlB,QAAiC,wBAAjC;AACA,SAAS,iBAAT,QAAkC,kBAAlC;AAGA;;;AAGG;;AACH,SAAS,QAAT,CAAkB,MAAlB,EAAiD;;;AACvC,MAAA,KAAK,GAAc,MAAM,CAApB,KAAL;AAAA,MAAO,OAAO,GAAK,MAAM,CAAX,OAAd;AACA,MAAA,IAAI,GAA6E,OAAO,CAApF,IAAJ;AAAA,MAAM,KAAK,GAAsE,OAAO,CAA7E,KAAX;AAAA,MAAa,KAAK,GAA+D,OAAO,CAAtE,KAAlB;AAAA,MAAoB,KAAK,GAAwD,OAAO,CAA/D,KAAzB;AAAA,MAA2B,SAAS,GAA6C,OAAO,CAApD,SAApC;AAAA,MAA6C,YAAY,GAAwB,OAAO,CAA/B,KAAzD;AAAA,MAAiE,WAAW,GAAK,OAAO,CAAZ,IAA5E;AAER,MAAM,UAAU,GAAG,IAAI,CAAC,GAAL,CAAS,UAAC,CAAD,EAAY,CAAZ,EAAqB;AAC/C,WAAO;AAAE,MAAA,CAAC,EAAA,CAAH;AAAK,MAAA,CAAC,EAAA;AAAN,KAAP;AACD,GAFkB,CAAnB;AAIA,EAAA,KAAK,CAAC,IAAN,CAAW,UAAX;AAEA,MAAM,CAAC,GAAG,UAAU,CAAC,EAAD,EAAK,MAAL,EAAa;AAC/B,IAAA,OAAO,EAAE;AACP,MAAA,MAAM,EAAE,OADD;AAEP,MAAA,MAAM,EAAE,OAFD;AAGP,MAAA,IAAI,EAAE;AAAE,QAAA,KAAK,EAAA,KAAP;AAAS,QAAA,KAAK,EAAE;AAAhB,OAHC;AAIP,MAAA,IAAI,EAAE,WAJC;AAKP,MAAA,KAAK,EAAE;AALA;AADsB,GAAb,CAApB,CAV+C,CAmB/C;;AACA,EAAA,IAAI,CAAC,CAAD,CAAJ;AACA,EAAA,IAAI,CAAC,CAAD,CAAJ;AACA,EAAA,KAAK,CAAC,CAAD,CAAL;AAEA,EAAA,KAAK,CAAC,IAAN,CAAW,KAAX;AACA,EAAA,KAAK,CAAC,MAAN,CAAa,KAAb,EAzB+C,CA2B/C;;AACA,EAAA,KAAK,EAAA,EAAA,GAAA,EAAA,EAED,EAAA,CAAC,OAAD,CAAA,GAAW,KAFV,EAGD,EAAA,CAAC,OAAD,CAAA,GAAW,KAHV,E,EAAA,I,SAMD,EAAA,CAAC,OAAD,CAAA,GAAW;AACT,IAAA,IAAI,EAAE;AADG,G,EAGX,EAAA,CAAC,OAAD,CAAA,GAAW,iBAAiB,CAAC,UAAD,EAAa,OAAb,C,EAE/B,EAXI,EAAL,CAWE,MAXF;AAaA,SAAO,MAAP;AACD;AAED;;;;AAIG;;;AACH,OAAM,SAAU,OAAV,CAAkB,MAAlB,EAAiD;AACrD,SAAO,IAAI,CAAC,QAAD,EAAW,OAAX,EAAoB,KAApB,EAA2B,SAA3B,EAAsC,UAAU,EAAhD,CAAJ,CAAwD,MAAxD,CAAP;AACD","sourcesContent":["import { theme, scale, animation, annotation, tooltip } from '../../adaptor/common';\nimport { Params } from '../../core/adaptor';\nimport { flow, deepAssign } from '../../utils';\nimport { area, line, point } from '../../adaptor/geometries';\nimport { X_FIELD, Y_FIELD } from '../tiny-line/constants';\nimport { adjustYMetaByZero } from '../../utils/data';\nimport { TinyAreaOptions } from './types';\n\n/**\n * 字段\n * @param params\n */\nfunction geometry(params: Params<TinyAreaOptions>): Params<TinyAreaOptions> {\n  const { chart, options } = params;\n  const { data, xAxis, yAxis, color, areaStyle, point: pointOptions, line: lineOptions } = options;\n\n  const seriesData = data.map((y: number, x: number) => {\n    return { x, y };\n  });\n\n  chart.data(seriesData);\n\n  const p = deepAssign({}, params, {\n    options: {\n      xField: X_FIELD,\n      yField: Y_FIELD,\n      area: { color, style: areaStyle },\n      line: lineOptions,\n      point: pointOptions,\n    },\n  });\n  // area geometry 处理\n  area(p);\n  line(p);\n  point(p);\n\n  chart.axis(false);\n  chart.legend(false);\n\n  // scale\n  scale(\n    {\n      [X_FIELD]: xAxis,\n      [Y_FIELD]: yAxis,\n    },\n    {\n      [X_FIELD]: {\n        type: 'cat',\n      },\n      [Y_FIELD]: adjustYMetaByZero(seriesData, Y_FIELD),\n    }\n  )(params);\n\n  return params;\n}\n\n/**\n * 迷你面积图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<TinyAreaOptions>) {\n  return flow(geometry, tooltip, theme, animation, annotation())(params);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}