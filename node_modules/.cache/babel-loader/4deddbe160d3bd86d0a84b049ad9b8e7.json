{"ast":null,"code":"import Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\nimport { hypotenuse } from './util';\nexport default class QrDecomposition {\n  constructor(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n    let qr = value.clone();\n    let m = value.rows;\n    let n = value.columns;\n    let rdiag = new Float64Array(n);\n    let i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n      let nrm = 0;\n\n      for (i = k; i < m; i++) {\n        nrm = hypotenuse(nrm, qr.get(i, k));\n      }\n\n      if (nrm !== 0) {\n        if (qr.get(k, k) < 0) {\n          nrm = -nrm;\n        }\n\n        for (i = k; i < m; i++) {\n          qr.set(i, k, qr.get(i, k) / nrm);\n        }\n\n        qr.set(k, k, qr.get(k, k) + 1);\n\n        for (j = k + 1; j < n; j++) {\n          s = 0;\n\n          for (i = k; i < m; i++) {\n            s += qr.get(i, k) * qr.get(i, j);\n          }\n\n          s = -s / qr.get(k, k);\n\n          for (i = k; i < m; i++) {\n            qr.set(i, j, qr.get(i, j) + s * qr.get(i, k));\n          }\n        }\n      }\n\n      rdiag[k] = -nrm;\n    }\n\n    this.QR = qr;\n    this.Rdiag = rdiag;\n  }\n\n  solve(value) {\n    value = Matrix.checkMatrix(value);\n    let qr = this.QR;\n    let m = qr.rows;\n\n    if (value.rows !== m) {\n      throw new Error('Matrix row dimensions must agree');\n    }\n\n    if (!this.isFullRank()) {\n      throw new Error('Matrix is rank deficient');\n    }\n\n    let count = value.columns;\n    let X = value.clone();\n    let n = qr.columns;\n    let i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n      for (j = 0; j < count; j++) {\n        s = 0;\n\n        for (i = k; i < m; i++) {\n          s += qr.get(i, k) * X.get(i, j);\n        }\n\n        s = -s / qr.get(k, k);\n\n        for (i = k; i < m; i++) {\n          X.set(i, j, X.get(i, j) + s * qr.get(i, k));\n        }\n      }\n    }\n\n    for (k = n - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        X.set(k, j, X.get(k, j) / this.Rdiag[k]);\n      }\n\n      for (i = 0; i < k; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * qr.get(i, k));\n        }\n      }\n    }\n\n    return X.subMatrix(0, n - 1, 0, count - 1);\n  }\n\n  isFullRank() {\n    let columns = this.QR.columns;\n\n    for (let i = 0; i < columns; i++) {\n      if (this.Rdiag[i] === 0) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  get upperTriangularMatrix() {\n    let qr = this.QR;\n    let n = qr.columns;\n    let X = new Matrix(n, n);\n    let i, j;\n\n    for (i = 0; i < n; i++) {\n      for (j = 0; j < n; j++) {\n        if (i < j) {\n          X.set(i, j, qr.get(i, j));\n        } else if (i === j) {\n          X.set(i, j, this.Rdiag[i]);\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n\n    return X;\n  }\n\n  get orthogonalMatrix() {\n    let qr = this.QR;\n    let rows = qr.rows;\n    let columns = qr.columns;\n    let X = new Matrix(rows, columns);\n    let i, j, k, s;\n\n    for (k = columns - 1; k >= 0; k--) {\n      for (i = 0; i < rows; i++) {\n        X.set(i, k, 0);\n      }\n\n      X.set(k, k, 1);\n\n      for (j = k; j < columns; j++) {\n        if (qr.get(k, k) !== 0) {\n          s = 0;\n\n          for (i = k; i < rows; i++) {\n            s += qr.get(i, k) * X.get(i, j);\n          }\n\n          s = -s / qr.get(k, k);\n\n          for (i = k; i < rows; i++) {\n            X.set(i, j, X.get(i, j) + s * qr.get(i, k));\n          }\n        }\n      }\n    }\n\n    return X;\n  }\n\n}","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/ml-matrix/src/dc/qr.js"],"names":["Matrix","WrapperMatrix2D","hypotenuse","QrDecomposition","constructor","value","checkMatrix","qr","clone","m","rows","n","columns","rdiag","Float64Array","i","j","k","s","nrm","get","set","QR","Rdiag","solve","Error","isFullRank","count","X","subMatrix","upperTriangularMatrix","orthogonalMatrix"],"mappings":"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","sourcesContent":["import Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\n\nimport { hypotenuse } from './util';\n\nexport default class QrDecomposition {\n  constructor(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    let qr = value.clone();\n    let m = value.rows;\n    let n = value.columns;\n    let rdiag = new Float64Array(n);\n    let i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n      let nrm = 0;\n      for (i = k; i < m; i++) {\n        nrm = hypotenuse(nrm, qr.get(i, k));\n      }\n      if (nrm !== 0) {\n        if (qr.get(k, k) < 0) {\n          nrm = -nrm;\n        }\n        for (i = k; i < m; i++) {\n          qr.set(i, k, qr.get(i, k) / nrm);\n        }\n        qr.set(k, k, qr.get(k, k) + 1);\n        for (j = k + 1; j < n; j++) {\n          s = 0;\n          for (i = k; i < m; i++) {\n            s += qr.get(i, k) * qr.get(i, j);\n          }\n          s = -s / qr.get(k, k);\n          for (i = k; i < m; i++) {\n            qr.set(i, j, qr.get(i, j) + s * qr.get(i, k));\n          }\n        }\n      }\n      rdiag[k] = -nrm;\n    }\n\n    this.QR = qr;\n    this.Rdiag = rdiag;\n  }\n\n  solve(value) {\n    value = Matrix.checkMatrix(value);\n\n    let qr = this.QR;\n    let m = qr.rows;\n\n    if (value.rows !== m) {\n      throw new Error('Matrix row dimensions must agree');\n    }\n    if (!this.isFullRank()) {\n      throw new Error('Matrix is rank deficient');\n    }\n\n    let count = value.columns;\n    let X = value.clone();\n    let n = qr.columns;\n    let i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n      for (j = 0; j < count; j++) {\n        s = 0;\n        for (i = k; i < m; i++) {\n          s += qr.get(i, k) * X.get(i, j);\n        }\n        s = -s / qr.get(k, k);\n        for (i = k; i < m; i++) {\n          X.set(i, j, X.get(i, j) + s * qr.get(i, k));\n        }\n      }\n    }\n    for (k = n - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        X.set(k, j, X.get(k, j) / this.Rdiag[k]);\n      }\n      for (i = 0; i < k; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * qr.get(i, k));\n        }\n      }\n    }\n\n    return X.subMatrix(0, n - 1, 0, count - 1);\n  }\n\n  isFullRank() {\n    let columns = this.QR.columns;\n    for (let i = 0; i < columns; i++) {\n      if (this.Rdiag[i] === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  get upperTriangularMatrix() {\n    let qr = this.QR;\n    let n = qr.columns;\n    let X = new Matrix(n, n);\n    let i, j;\n    for (i = 0; i < n; i++) {\n      for (j = 0; j < n; j++) {\n        if (i < j) {\n          X.set(i, j, qr.get(i, j));\n        } else if (i === j) {\n          X.set(i, j, this.Rdiag[i]);\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get orthogonalMatrix() {\n    let qr = this.QR;\n    let rows = qr.rows;\n    let columns = qr.columns;\n    let X = new Matrix(rows, columns);\n    let i, j, k, s;\n\n    for (k = columns - 1; k >= 0; k--) {\n      for (i = 0; i < rows; i++) {\n        X.set(i, k, 0);\n      }\n      X.set(k, k, 1);\n      for (j = k; j < columns; j++) {\n        if (qr.get(k, k) !== 0) {\n          s = 0;\n          for (i = k; i < rows; i++) {\n            s += qr.get(i, k) * X.get(i, j);\n          }\n\n          s = -s / qr.get(k, k);\n\n          for (i = k; i < rows; i++) {\n            X.set(i, j, X.get(i, j) + s * qr.get(i, k));\n          }\n        }\n      }\n    }\n    return X;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}