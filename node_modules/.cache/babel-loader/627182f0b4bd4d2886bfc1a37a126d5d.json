{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { isPolygonsIntersect } from '../util/math';\nimport { pathToPoints } from '../util/path';\nvar DEFAULT_TRIGGER = 'shift';\nvar ALLOW_EVENTS = ['drag', 'shift', 'ctrl', 'alt', 'control'];\n\nvar isItemIntersecPolygon = function isItemIntersecPolygon(item, polyPoints) {\n  var shapePoints;\n  var shape = item.getKeyShape();\n\n  if (item.get('type') === 'path') {\n    shapePoints = pathToPoints(shape.attr('path'));\n  } else {\n    var shapeBBox = shape.getCanvasBBox();\n    shapePoints = [[shapeBBox.minX, shapeBBox.minY], [shapeBBox.maxX, shapeBBox.minY], [shapeBBox.maxX, shapeBBox.maxY], [shapeBBox.minX, shapeBBox.maxY]];\n  }\n\n  return isPolygonsIntersect(polyPoints, shapePoints);\n};\n\nexport default {\n  getDefaultCfg: function getDefaultCfg() {\n    return {\n      delegateStyle: {\n        fill: '#EEF6FF',\n        fillOpacity: 0.4,\n        stroke: '#DDEEFE',\n        lineWidth: 1\n      },\n      onSelect: function onSelect() {},\n      onDeselect: function onDeselect() {},\n      selectedState: 'selected',\n      trigger: DEFAULT_TRIGGER,\n      includeEdges: true,\n      selectedEdges: [],\n      selectedNodes: []\n    };\n  },\n  getEvents: function getEvents() {\n    // 检测输入是否合法\n    if (!(ALLOW_EVENTS.indexOf(this.trigger.toLowerCase()) > -1)) {\n      this.trigger = DEFAULT_TRIGGER;\n      console.warn(\"Behavior lasso-select 的 trigger 参数不合法，请输入 'drag'、'shift'、'ctrl' 或 'alt'\");\n    }\n\n    if (this.trigger === 'drag') {\n      return {\n        dragstart: 'onDragStart',\n        drag: 'onDragMove',\n        dragend: 'onDragEnd',\n        'canvas:click': 'clearStates'\n      };\n    }\n\n    return {\n      dragstart: 'onDragStart',\n      drag: 'onDragMove',\n      dragend: 'onDragEnd',\n      keyup: 'onKeyUp',\n      keydown: 'onKeyDown',\n      'canvas:click': 'clearStates'\n    };\n  },\n  onDragStart: function onDragStart(e) {\n    var lasso = this.lasso;\n    var item = e.item; // 排除在节点上拖动\n\n    if (item) {\n      return;\n    }\n\n    if (this.trigger !== 'drag' && !this.keydown) {\n      return;\n    }\n\n    if (this.selectedNodes && this.selectedNodes.length !== 0) {\n      this.clearStates();\n    }\n\n    if (!lasso) {\n      lasso = this.createLasso();\n    }\n\n    this.dragging = true;\n    this.originPoint = {\n      x: e.x,\n      y: e.y\n    };\n    this.points.push(this.originPoint);\n    lasso.show();\n  },\n  onDragMove: function onDragMove(e) {\n    if (!this.dragging) {\n      return;\n    }\n\n    if (this.trigger !== 'drag' && !this.keydown) {\n      return;\n    }\n\n    this.points.push({\n      x: e.x,\n      y: e.y\n    });\n    this.updateLasso(e);\n  },\n  onDragEnd: function onDragEnd(e) {\n    if (!this.lasso && !this.dragging) {\n      return;\n    }\n\n    if (this.trigger !== 'drag' && !this.keydown) {\n      return;\n    }\n\n    this.points.push(this.originPoint);\n    this.getSelectedItems();\n    this.lasso.remove(true);\n    this.lasso = null;\n    this.points = [];\n    this.dragging = false;\n  },\n  getLassoPath: function getLassoPath() {\n    var points = this.points;\n    var path = [];\n\n    if (points.length) {\n      points.forEach(function (point, index) {\n        if (index === 0) {\n          path.push(['M', point.x, point.y]);\n        } else {\n          path.push(['L', point.x, point.y]);\n        }\n      });\n      path.push(['L', points[0].x, points[0].y]);\n    }\n\n    return path;\n  },\n  clearStates: function clearStates() {\n    var _a = this,\n        graph = _a.graph,\n        selectedState = _a.selectedState;\n\n    var nodes = graph.findAllByState('node', selectedState);\n    var edges = graph.findAllByState('edge', selectedState);\n    nodes.forEach(function (node) {\n      return graph.setItemState(node, selectedState, false);\n    });\n    edges.forEach(function (edge) {\n      return graph.setItemState(edge, selectedState, false);\n    });\n\n    if (this.onDeselect) {\n      this.onDeselect(this.selectedNodes, this.selectedEdges);\n    }\n\n    this.selectedNodes = [];\n    this.selectedEdges = [];\n    graph.emit('nodeselectchange', {\n      selectedItems: {\n        nodes: [],\n        edges: []\n      },\n      select: false\n    });\n  },\n  getSelectedItems: function getSelectedItems() {\n    var _this = this;\n\n    var _a = this,\n        graph = _a.graph,\n        shouldUpdate = _a.shouldUpdate;\n\n    var lassoContour = this.points.map(function (point) {\n      return [graph.getCanvasByPoint(point.x, point.y).x, graph.getCanvasByPoint(point.x, point.y).y];\n    });\n    var state = this.selectedState;\n    var selectedNodes = [];\n    var selectedIds = [];\n    graph.getNodes().forEach(function (node) {\n      if (isItemIntersecPolygon(node, lassoContour)) {\n        if (shouldUpdate(node, 'select')) {\n          selectedNodes.push(node);\n          var model = node.getModel();\n          selectedIds.push(model.id);\n          graph.setItemState(node, state, true);\n        }\n      }\n    });\n    var selectedEdges = [];\n\n    if (this.includeEdges) {\n      // 选中边，边的source和target都在选中的节点中时才选中\n      selectedNodes.forEach(function (node) {\n        var edges = node.getOutEdges();\n        edges.forEach(function (edge) {\n          var model = edge.getModel();\n          var source = model.source,\n              target = model.target;\n\n          if (selectedIds.includes(source) && selectedIds.includes(target) && shouldUpdate(edge, 'select')) {\n            selectedEdges.push(edge);\n            graph.setItemState(edge, _this.selectedState, true);\n          }\n        });\n      });\n    }\n\n    this.selectedEdges = selectedEdges;\n    this.selectedNodes = selectedNodes;\n\n    if (this.onSelect) {\n      this.onSelect(selectedNodes, selectedEdges);\n    }\n\n    graph.emit('nodeselectchange', {\n      selectedItems: {\n        nodes: selectedNodes,\n        edges: selectedEdges\n      },\n      select: true\n    });\n  },\n  createLasso: function createLasso() {\n    var self = this;\n    var lasso = self.graph.get('delegateGroup').addShape('path', {\n      attrs: __assign({\n        path: []\n      }, self.delegateStyle),\n      capture: false,\n      name: 'lasso-shape'\n    });\n    this.lasso = lasso;\n    this.points = [];\n    return lasso;\n  },\n  updateLasso: function updateLasso(e) {\n    var self = this;\n    this.lasso.attr({\n      path: self.getLassoPath()\n    });\n  },\n  onKeyDown: function onKeyDown(e) {\n    var code = e.key;\n\n    if (!code) {\n      return;\n    } // if (this.selectedNodes && this.selectedNodes.length !== 0) {\n    //   this.clearStates();\n    // }\n\n\n    if (code.toLowerCase() === this.trigger.toLowerCase()) {\n      this.keydown = true;\n    } else {\n      this.keydown = false;\n    }\n  },\n  onKeyUp: function onKeyUp() {\n    if (this.lasso) {\n      // 清除所有选中状态后，设置拖得动状态为false，并清除框选的lasso\n      this.lasso.remove(true);\n      this.lasso = null;\n      this.points = [];\n      this.dragging = false;\n    }\n\n    this.keydown = false;\n  }\n};","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/@antv/g6/es/behavior/lasso-select.js"],"names":["__assign","isPolygonsIntersect","pathToPoints","DEFAULT_TRIGGER","ALLOW_EVENTS","isItemIntersecPolygon","item","polyPoints","shapePoints","shape","getKeyShape","get","attr","shapeBBox","getCanvasBBox","minX","minY","maxX","maxY","getDefaultCfg","delegateStyle","fill","fillOpacity","stroke","lineWidth","onSelect","onDeselect","selectedState","trigger","includeEdges","selectedEdges","selectedNodes","getEvents","indexOf","toLowerCase","console","warn","dragstart","drag","dragend","keyup","keydown","onDragStart","e","lasso","length","clearStates","createLasso","dragging","originPoint","x","y","points","push","show","onDragMove","updateLasso","onDragEnd","getSelectedItems","remove","getLassoPath","path","forEach","point","index","_a","graph","nodes","findAllByState","edges","node","setItemState","edge","emit","selectedItems","select","_this","shouldUpdate","lassoContour","map","getCanvasByPoint","state","selectedIds","getNodes","model","getModel","id","getOutEdges","source","target","includes","self","addShape","attrs","capture","name","onKeyDown","code","key","onKeyUp"],"mappings":"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","sourcesContent":["import { __assign } from \"tslib\";\nimport { isPolygonsIntersect } from '../util/math';\nimport { pathToPoints } from '../util/path';\nvar DEFAULT_TRIGGER = 'shift';\nvar ALLOW_EVENTS = ['drag', 'shift', 'ctrl', 'alt', 'control'];\n\nvar isItemIntersecPolygon = function isItemIntersecPolygon(item, polyPoints) {\n  var shapePoints;\n  var shape = item.getKeyShape();\n\n  if (item.get('type') === 'path') {\n    shapePoints = pathToPoints(shape.attr('path'));\n  } else {\n    var shapeBBox = shape.getCanvasBBox();\n    shapePoints = [[shapeBBox.minX, shapeBBox.minY], [shapeBBox.maxX, shapeBBox.minY], [shapeBBox.maxX, shapeBBox.maxY], [shapeBBox.minX, shapeBBox.maxY]];\n  }\n\n  return isPolygonsIntersect(polyPoints, shapePoints);\n};\n\nexport default {\n  getDefaultCfg: function getDefaultCfg() {\n    return {\n      delegateStyle: {\n        fill: '#EEF6FF',\n        fillOpacity: 0.4,\n        stroke: '#DDEEFE',\n        lineWidth: 1\n      },\n      onSelect: function onSelect() {},\n      onDeselect: function onDeselect() {},\n      selectedState: 'selected',\n      trigger: DEFAULT_TRIGGER,\n      includeEdges: true,\n      selectedEdges: [],\n      selectedNodes: []\n    };\n  },\n  getEvents: function getEvents() {\n    // 检测输入是否合法\n    if (!(ALLOW_EVENTS.indexOf(this.trigger.toLowerCase()) > -1)) {\n      this.trigger = DEFAULT_TRIGGER;\n      console.warn(\"Behavior lasso-select 的 trigger 参数不合法，请输入 'drag'、'shift'、'ctrl' 或 'alt'\");\n    }\n\n    if (this.trigger === 'drag') {\n      return {\n        dragstart: 'onDragStart',\n        drag: 'onDragMove',\n        dragend: 'onDragEnd',\n        'canvas:click': 'clearStates'\n      };\n    }\n\n    return {\n      dragstart: 'onDragStart',\n      drag: 'onDragMove',\n      dragend: 'onDragEnd',\n      keyup: 'onKeyUp',\n      keydown: 'onKeyDown',\n      'canvas:click': 'clearStates'\n    };\n  },\n  onDragStart: function onDragStart(e) {\n    var lasso = this.lasso;\n    var item = e.item; // 排除在节点上拖动\n\n    if (item) {\n      return;\n    }\n\n    if (this.trigger !== 'drag' && !this.keydown) {\n      return;\n    }\n\n    if (this.selectedNodes && this.selectedNodes.length !== 0) {\n      this.clearStates();\n    }\n\n    if (!lasso) {\n      lasso = this.createLasso();\n    }\n\n    this.dragging = true;\n    this.originPoint = {\n      x: e.x,\n      y: e.y\n    };\n    this.points.push(this.originPoint);\n    lasso.show();\n  },\n  onDragMove: function onDragMove(e) {\n    if (!this.dragging) {\n      return;\n    }\n\n    if (this.trigger !== 'drag' && !this.keydown) {\n      return;\n    }\n\n    this.points.push({\n      x: e.x,\n      y: e.y\n    });\n    this.updateLasso(e);\n  },\n  onDragEnd: function onDragEnd(e) {\n    if (!this.lasso && !this.dragging) {\n      return;\n    }\n\n    if (this.trigger !== 'drag' && !this.keydown) {\n      return;\n    }\n\n    this.points.push(this.originPoint);\n    this.getSelectedItems();\n    this.lasso.remove(true);\n    this.lasso = null;\n    this.points = [];\n    this.dragging = false;\n  },\n  getLassoPath: function getLassoPath() {\n    var points = this.points;\n    var path = [];\n\n    if (points.length) {\n      points.forEach(function (point, index) {\n        if (index === 0) {\n          path.push(['M', point.x, point.y]);\n        } else {\n          path.push(['L', point.x, point.y]);\n        }\n      });\n      path.push(['L', points[0].x, points[0].y]);\n    }\n\n    return path;\n  },\n  clearStates: function clearStates() {\n    var _a = this,\n        graph = _a.graph,\n        selectedState = _a.selectedState;\n\n    var nodes = graph.findAllByState('node', selectedState);\n    var edges = graph.findAllByState('edge', selectedState);\n    nodes.forEach(function (node) {\n      return graph.setItemState(node, selectedState, false);\n    });\n    edges.forEach(function (edge) {\n      return graph.setItemState(edge, selectedState, false);\n    });\n\n    if (this.onDeselect) {\n      this.onDeselect(this.selectedNodes, this.selectedEdges);\n    }\n\n    this.selectedNodes = [];\n    this.selectedEdges = [];\n    graph.emit('nodeselectchange', {\n      selectedItems: {\n        nodes: [],\n        edges: []\n      },\n      select: false\n    });\n  },\n  getSelectedItems: function getSelectedItems() {\n    var _this = this;\n\n    var _a = this,\n        graph = _a.graph,\n        shouldUpdate = _a.shouldUpdate;\n\n    var lassoContour = this.points.map(function (point) {\n      return [graph.getCanvasByPoint(point.x, point.y).x, graph.getCanvasByPoint(point.x, point.y).y];\n    });\n    var state = this.selectedState;\n    var selectedNodes = [];\n    var selectedIds = [];\n    graph.getNodes().forEach(function (node) {\n      if (isItemIntersecPolygon(node, lassoContour)) {\n        if (shouldUpdate(node, 'select')) {\n          selectedNodes.push(node);\n          var model = node.getModel();\n          selectedIds.push(model.id);\n          graph.setItemState(node, state, true);\n        }\n      }\n    });\n    var selectedEdges = [];\n\n    if (this.includeEdges) {\n      // 选中边，边的source和target都在选中的节点中时才选中\n      selectedNodes.forEach(function (node) {\n        var edges = node.getOutEdges();\n        edges.forEach(function (edge) {\n          var model = edge.getModel();\n          var source = model.source,\n              target = model.target;\n\n          if (selectedIds.includes(source) && selectedIds.includes(target) && shouldUpdate(edge, 'select')) {\n            selectedEdges.push(edge);\n            graph.setItemState(edge, _this.selectedState, true);\n          }\n        });\n      });\n    }\n\n    this.selectedEdges = selectedEdges;\n    this.selectedNodes = selectedNodes;\n\n    if (this.onSelect) {\n      this.onSelect(selectedNodes, selectedEdges);\n    }\n\n    graph.emit('nodeselectchange', {\n      selectedItems: {\n        nodes: selectedNodes,\n        edges: selectedEdges\n      },\n      select: true\n    });\n  },\n  createLasso: function createLasso() {\n    var self = this;\n    var lasso = self.graph.get('delegateGroup').addShape('path', {\n      attrs: __assign({\n        path: []\n      }, self.delegateStyle),\n      capture: false,\n      name: 'lasso-shape'\n    });\n    this.lasso = lasso;\n    this.points = [];\n    return lasso;\n  },\n  updateLasso: function updateLasso(e) {\n    var self = this;\n    this.lasso.attr({\n      path: self.getLassoPath()\n    });\n  },\n  onKeyDown: function onKeyDown(e) {\n    var code = e.key;\n\n    if (!code) {\n      return;\n    } // if (this.selectedNodes && this.selectedNodes.length !== 0) {\n    //   this.clearStates();\n    // }\n\n\n    if (code.toLowerCase() === this.trigger.toLowerCase()) {\n      this.keydown = true;\n    } else {\n      this.keydown = false;\n    }\n  },\n  onKeyUp: function onKeyUp() {\n    if (this.lasso) {\n      // 清除所有选中状态后，设置拖得动状态为false，并清除框选的lasso\n      this.lasso.remove(true);\n      this.lasso = null;\n      this.points = [];\n      this.dragging = false;\n    }\n\n    this.keydown = false;\n  }\n};"]},"metadata":{},"sourceType":"module"}