{"ast":null,"code":"var min = Math.min,\n    max = Math.max,\n    abs = Math.abs;\nvar DEFAULT_TRIGGER = 'shift';\nvar ALLOW_EVENTS = ['drag', 'shift', 'ctrl', 'alt', 'control'];\nexport default {\n  getDefaultCfg: function getDefaultCfg() {\n    return {\n      brushStyle: {\n        fill: '#EEF6FF',\n        fillOpacity: 0.4,\n        stroke: '#DDEEFE',\n        lineWidth: 1\n      },\n      onSelect: function onSelect() {},\n      onDeselect: function onDeselect() {},\n      selectedState: 'selected',\n      trigger: DEFAULT_TRIGGER,\n      includeEdges: true,\n      selectedEdges: [],\n      selectedNodes: []\n    };\n  },\n  getEvents: function getEvents() {\n    // 检测输入是否合法\n    if (!(ALLOW_EVENTS.indexOf(this.trigger.toLowerCase()) > -1)) {\n      this.trigger = DEFAULT_TRIGGER;\n      console.warn(\"Behavior brush-select 的 trigger 参数不合法，请输入 'drag'、'shift'、'ctrl' 或 'alt'\");\n    }\n\n    if (this.trigger === 'drag') {\n      return {\n        dragstart: 'onMouseDown',\n        drag: 'onMouseMove',\n        dragend: 'onMouseUp',\n        'canvas:click': 'clearStates'\n      };\n    }\n\n    return {\n      dragstart: 'onMouseDown',\n      drag: 'onMouseMove',\n      dragend: 'onMouseUp',\n      'canvas:click': 'clearStates',\n      keyup: 'onKeyUp',\n      keydown: 'onKeyDown'\n    };\n  },\n  onMouseDown: function onMouseDown(e) {\n    // 按在node上面拖动时候不应该是框选\n    var item = e.item;\n    var brush = this.brush;\n\n    if (item) {\n      return;\n    }\n\n    if (this.trigger !== 'drag' && !this.keydown) {\n      return;\n    }\n\n    if (this.selectedNodes && this.selectedNodes.length !== 0) {\n      this.clearStates();\n    }\n\n    if (!brush) {\n      brush = this.createBrush();\n    }\n\n    this.originPoint = {\n      x: e.canvasX,\n      y: e.canvasY\n    };\n    brush.attr({\n      width: 0,\n      height: 0\n    });\n    brush.show();\n    this.dragging = true;\n  },\n  onMouseMove: function onMouseMove(e) {\n    if (!this.dragging) {\n      return;\n    }\n\n    if (this.trigger !== 'drag' && !this.keydown) {\n      return;\n    }\n\n    this.updateBrush(e);\n  },\n  onMouseUp: function onMouseUp(e) {\n    var graph = this.graph; // TODO: 触发了 canvas:click 导致 clearStates\n\n    if (!this.brush && !this.dragging) {\n      return;\n    }\n\n    if (this.trigger !== 'drag' && !this.keydown) {\n      return;\n    }\n\n    this.brush.remove(true); // remove and destroy\n\n    this.brush = null;\n    this.getSelectedNodes(e);\n    this.dragging = false;\n  },\n  clearStates: function clearStates() {\n    var _a = this,\n        graph = _a.graph,\n        selectedState = _a.selectedState;\n\n    var nodes = graph.findAllByState('node', selectedState);\n    var edges = graph.findAllByState('edge', selectedState);\n    nodes.forEach(function (node) {\n      return graph.setItemState(node, selectedState, false);\n    });\n    edges.forEach(function (edge) {\n      return graph.setItemState(edge, selectedState, false);\n    });\n    this.selectedNodes = [];\n    this.selectedEdges = [];\n\n    if (this.onDeselect) {\n      this.onDeselect(this.selectedNodes, this.selectedEdges);\n    }\n\n    graph.emit('nodeselectchange', {\n      selectedItems: {\n        nodes: [],\n        edges: []\n      },\n      select: false\n    });\n  },\n  getSelectedNodes: function getSelectedNodes(e) {\n    var _this = this;\n\n    var _a = this,\n        graph = _a.graph,\n        originPoint = _a.originPoint,\n        shouldUpdate = _a.shouldUpdate;\n\n    var state = this.selectedState;\n    var p1 = {\n      x: e.x,\n      y: e.y\n    };\n    var p2 = graph.getPointByCanvas(originPoint.x, originPoint.y);\n    var left = min(p1.x, p2.x);\n    var right = max(p1.x, p2.x);\n    var top = min(p1.y, p2.y);\n    var bottom = max(p1.y, p2.y);\n    var selectedNodes = [];\n    var selectedIds = [];\n    graph.getNodes().forEach(function (node) {\n      var bbox = node.getBBox();\n\n      if (bbox.centerX >= left && bbox.centerX <= right && bbox.centerY >= top && bbox.centerY <= bottom) {\n        if (shouldUpdate(node, 'select')) {\n          selectedNodes.push(node);\n          var model = node.getModel();\n          selectedIds.push(model.id);\n          graph.setItemState(node, state, true);\n        }\n      }\n    });\n    var selectedEdges = [];\n\n    if (this.includeEdges) {\n      // 选中边，边的source和target都在选中的节点中时才选中\n      selectedNodes.forEach(function (node) {\n        var edges = node.getOutEdges();\n        edges.forEach(function (edge) {\n          var model = edge.getModel();\n          var source = model.source,\n              target = model.target;\n\n          if (selectedIds.includes(source) && selectedIds.includes(target) && shouldUpdate(edge, 'select')) {\n            selectedEdges.push(edge);\n            graph.setItemState(edge, _this.selectedState, true);\n          }\n        });\n      });\n    }\n\n    this.selectedEdges = selectedEdges;\n    this.selectedNodes = selectedNodes;\n\n    if (this.onSelect) {\n      this.onSelect(selectedNodes, selectedEdges);\n    }\n\n    graph.emit('nodeselectchange', {\n      selectedItems: {\n        nodes: selectedNodes,\n        edges: selectedEdges\n      },\n      select: true\n    });\n  },\n  createBrush: function createBrush() {\n    var self = this;\n    var brush = self.graph.get('canvas').addShape('rect', {\n      attrs: self.brushStyle,\n      capture: false,\n      name: 'brush-shape'\n    });\n    this.brush = brush;\n    return brush;\n  },\n  updateBrush: function updateBrush(e) {\n    var originPoint = this.originPoint;\n    this.brush.attr({\n      width: abs(e.canvasX - originPoint.x),\n      height: abs(e.canvasY - originPoint.y),\n      x: min(e.canvasX, originPoint.x),\n      y: min(e.canvasY, originPoint.y)\n    });\n  },\n  onKeyDown: function onKeyDown(e) {\n    var code = e.key;\n\n    if (!code) {\n      return;\n    }\n\n    var triggerLowerCase = this.trigger.toLowerCase();\n    var codeLowerCase = code.toLowerCase(); // 按住 control 键时，允许用户设置 trigger 为 ctrl\n\n    if (codeLowerCase === triggerLowerCase || codeLowerCase === 'control' && triggerLowerCase === 'ctrl' || codeLowerCase === 'ctrl' && triggerLowerCase === 'control') {\n      this.keydown = true;\n    } else {\n      this.keydown = false;\n    }\n  },\n  onKeyUp: function onKeyUp() {\n    if (this.brush) {\n      // 清除所有选中状态后，设置拖得动状态为false，并清除框选的brush\n      this.brush.remove(true);\n      this.brush = null;\n      this.dragging = false;\n    }\n\n    this.keydown = false;\n  }\n};","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/@antv/g6/es/behavior/brush-select.js"],"names":["min","Math","max","abs","DEFAULT_TRIGGER","ALLOW_EVENTS","getDefaultCfg","brushStyle","fill","fillOpacity","stroke","lineWidth","onSelect","onDeselect","selectedState","trigger","includeEdges","selectedEdges","selectedNodes","getEvents","indexOf","toLowerCase","console","warn","dragstart","drag","dragend","keyup","keydown","onMouseDown","e","item","brush","length","clearStates","createBrush","originPoint","x","canvasX","y","canvasY","attr","width","height","show","dragging","onMouseMove","updateBrush","onMouseUp","graph","remove","getSelectedNodes","_a","nodes","findAllByState","edges","forEach","node","setItemState","edge","emit","selectedItems","select","_this","shouldUpdate","state","p1","p2","getPointByCanvas","left","right","top","bottom","selectedIds","getNodes","bbox","getBBox","centerX","centerY","push","model","getModel","id","getOutEdges","source","target","includes","self","get","addShape","attrs","capture","name","onKeyDown","code","key","triggerLowerCase","codeLowerCase","onKeyUp"],"mappings":"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","sourcesContent":["var min = Math.min,\n    max = Math.max,\n    abs = Math.abs;\nvar DEFAULT_TRIGGER = 'shift';\nvar ALLOW_EVENTS = ['drag', 'shift', 'ctrl', 'alt', 'control'];\nexport default {\n  getDefaultCfg: function getDefaultCfg() {\n    return {\n      brushStyle: {\n        fill: '#EEF6FF',\n        fillOpacity: 0.4,\n        stroke: '#DDEEFE',\n        lineWidth: 1\n      },\n      onSelect: function onSelect() {},\n      onDeselect: function onDeselect() {},\n      selectedState: 'selected',\n      trigger: DEFAULT_TRIGGER,\n      includeEdges: true,\n      selectedEdges: [],\n      selectedNodes: []\n    };\n  },\n  getEvents: function getEvents() {\n    // 检测输入是否合法\n    if (!(ALLOW_EVENTS.indexOf(this.trigger.toLowerCase()) > -1)) {\n      this.trigger = DEFAULT_TRIGGER;\n      console.warn(\"Behavior brush-select 的 trigger 参数不合法，请输入 'drag'、'shift'、'ctrl' 或 'alt'\");\n    }\n\n    if (this.trigger === 'drag') {\n      return {\n        dragstart: 'onMouseDown',\n        drag: 'onMouseMove',\n        dragend: 'onMouseUp',\n        'canvas:click': 'clearStates'\n      };\n    }\n\n    return {\n      dragstart: 'onMouseDown',\n      drag: 'onMouseMove',\n      dragend: 'onMouseUp',\n      'canvas:click': 'clearStates',\n      keyup: 'onKeyUp',\n      keydown: 'onKeyDown'\n    };\n  },\n  onMouseDown: function onMouseDown(e) {\n    // 按在node上面拖动时候不应该是框选\n    var item = e.item;\n    var brush = this.brush;\n\n    if (item) {\n      return;\n    }\n\n    if (this.trigger !== 'drag' && !this.keydown) {\n      return;\n    }\n\n    if (this.selectedNodes && this.selectedNodes.length !== 0) {\n      this.clearStates();\n    }\n\n    if (!brush) {\n      brush = this.createBrush();\n    }\n\n    this.originPoint = {\n      x: e.canvasX,\n      y: e.canvasY\n    };\n    brush.attr({\n      width: 0,\n      height: 0\n    });\n    brush.show();\n    this.dragging = true;\n  },\n  onMouseMove: function onMouseMove(e) {\n    if (!this.dragging) {\n      return;\n    }\n\n    if (this.trigger !== 'drag' && !this.keydown) {\n      return;\n    }\n\n    this.updateBrush(e);\n  },\n  onMouseUp: function onMouseUp(e) {\n    var graph = this.graph; // TODO: 触发了 canvas:click 导致 clearStates\n\n    if (!this.brush && !this.dragging) {\n      return;\n    }\n\n    if (this.trigger !== 'drag' && !this.keydown) {\n      return;\n    }\n\n    this.brush.remove(true); // remove and destroy\n\n    this.brush = null;\n    this.getSelectedNodes(e);\n    this.dragging = false;\n  },\n  clearStates: function clearStates() {\n    var _a = this,\n        graph = _a.graph,\n        selectedState = _a.selectedState;\n\n    var nodes = graph.findAllByState('node', selectedState);\n    var edges = graph.findAllByState('edge', selectedState);\n    nodes.forEach(function (node) {\n      return graph.setItemState(node, selectedState, false);\n    });\n    edges.forEach(function (edge) {\n      return graph.setItemState(edge, selectedState, false);\n    });\n    this.selectedNodes = [];\n    this.selectedEdges = [];\n\n    if (this.onDeselect) {\n      this.onDeselect(this.selectedNodes, this.selectedEdges);\n    }\n\n    graph.emit('nodeselectchange', {\n      selectedItems: {\n        nodes: [],\n        edges: []\n      },\n      select: false\n    });\n  },\n  getSelectedNodes: function getSelectedNodes(e) {\n    var _this = this;\n\n    var _a = this,\n        graph = _a.graph,\n        originPoint = _a.originPoint,\n        shouldUpdate = _a.shouldUpdate;\n\n    var state = this.selectedState;\n    var p1 = {\n      x: e.x,\n      y: e.y\n    };\n    var p2 = graph.getPointByCanvas(originPoint.x, originPoint.y);\n    var left = min(p1.x, p2.x);\n    var right = max(p1.x, p2.x);\n    var top = min(p1.y, p2.y);\n    var bottom = max(p1.y, p2.y);\n    var selectedNodes = [];\n    var selectedIds = [];\n    graph.getNodes().forEach(function (node) {\n      var bbox = node.getBBox();\n\n      if (bbox.centerX >= left && bbox.centerX <= right && bbox.centerY >= top && bbox.centerY <= bottom) {\n        if (shouldUpdate(node, 'select')) {\n          selectedNodes.push(node);\n          var model = node.getModel();\n          selectedIds.push(model.id);\n          graph.setItemState(node, state, true);\n        }\n      }\n    });\n    var selectedEdges = [];\n\n    if (this.includeEdges) {\n      // 选中边，边的source和target都在选中的节点中时才选中\n      selectedNodes.forEach(function (node) {\n        var edges = node.getOutEdges();\n        edges.forEach(function (edge) {\n          var model = edge.getModel();\n          var source = model.source,\n              target = model.target;\n\n          if (selectedIds.includes(source) && selectedIds.includes(target) && shouldUpdate(edge, 'select')) {\n            selectedEdges.push(edge);\n            graph.setItemState(edge, _this.selectedState, true);\n          }\n        });\n      });\n    }\n\n    this.selectedEdges = selectedEdges;\n    this.selectedNodes = selectedNodes;\n\n    if (this.onSelect) {\n      this.onSelect(selectedNodes, selectedEdges);\n    }\n\n    graph.emit('nodeselectchange', {\n      selectedItems: {\n        nodes: selectedNodes,\n        edges: selectedEdges\n      },\n      select: true\n    });\n  },\n  createBrush: function createBrush() {\n    var self = this;\n    var brush = self.graph.get('canvas').addShape('rect', {\n      attrs: self.brushStyle,\n      capture: false,\n      name: 'brush-shape'\n    });\n    this.brush = brush;\n    return brush;\n  },\n  updateBrush: function updateBrush(e) {\n    var originPoint = this.originPoint;\n    this.brush.attr({\n      width: abs(e.canvasX - originPoint.x),\n      height: abs(e.canvasY - originPoint.y),\n      x: min(e.canvasX, originPoint.x),\n      y: min(e.canvasY, originPoint.y)\n    });\n  },\n  onKeyDown: function onKeyDown(e) {\n    var code = e.key;\n\n    if (!code) {\n      return;\n    }\n\n    var triggerLowerCase = this.trigger.toLowerCase();\n    var codeLowerCase = code.toLowerCase(); // 按住 control 键时，允许用户设置 trigger 为 ctrl\n\n    if (codeLowerCase === triggerLowerCase || codeLowerCase === 'control' && triggerLowerCase === 'ctrl' || codeLowerCase === 'ctrl' && triggerLowerCase === 'control') {\n      this.keydown = true;\n    } else {\n      this.keydown = false;\n    }\n  },\n  onKeyUp: function onKeyUp() {\n    if (this.brush) {\n      // 清除所有选中状态后，设置拖得动状态为false，并清除框选的brush\n      this.brush.remove(true);\n      this.brush = null;\n      this.dragging = false;\n    }\n\n    this.keydown = false;\n  }\n};"]},"metadata":{},"sourceType":"module"}