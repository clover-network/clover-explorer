{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\nimport * as echarts from '../../echarts';\nimport * as zrUtil from 'zrender/esm/core/util';\n\nfunction legendSelectActionHandler(methodName, payload, ecModel) {\n  var selectedMap = {};\n  var isToggleSelect = methodName === 'toggleSelected';\n  var isSelected;\n  ecModel.eachComponent('legend', function (legendModel) {\n    if (isToggleSelect && isSelected != null) {\n      legendModel[isSelected ? 'select' : 'unSelect'](payload.name);\n    } else if (methodName === 'allSelect' || methodName === 'inverseSelect') {\n      legendModel[methodName]();\n    } else {\n      legendModel[methodName](payload.name);\n      isSelected = legendModel.isSelected(payload.name);\n    }\n\n    var legendData = legendModel.getData();\n    zrUtil.each(legendData, function (model) {\n      var name = model.get('name');\n\n      if (name === '\\n' || name === '') {\n        return;\n      }\n\n      var isItemSelected = legendModel.isSelected(name);\n\n      if (selectedMap.hasOwnProperty(name)) {\n        selectedMap[name] = selectedMap[name] && isItemSelected;\n      } else {\n        selectedMap[name] = isItemSelected;\n      }\n    });\n  });\n  return methodName === 'allSelect' || methodName === 'inverseSelect' ? {\n    selected: selectedMap\n  } : {\n    name: payload.name,\n    selected: selectedMap\n  };\n}\n\necharts.registerAction('legendToggleSelect', 'legendselectchanged', zrUtil.curry(legendSelectActionHandler, 'toggleSelected'));\necharts.registerAction('legendAllSelect', 'legendselectall', zrUtil.curry(legendSelectActionHandler, 'allSelect'));\necharts.registerAction('legendInverseSelect', 'legendinverseselect', zrUtil.curry(legendSelectActionHandler, 'inverseSelect'));\necharts.registerAction('legendSelect', 'legendselected', zrUtil.curry(legendSelectActionHandler, 'select'));\necharts.registerAction('legendUnSelect', 'legendunselected', zrUtil.curry(legendSelectActionHandler, 'unSelect'));","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/echarts/esm/component/legend/legendAction.js"],"names":["echarts","zrUtil","legendSelectActionHandler","methodName","payload","ecModel","selectedMap","isToggleSelect","isSelected","eachComponent","legendModel","name","legendData","getData","each","model","get","isItemSelected","hasOwnProperty","selected","registerAction","curry"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AAEA,OAAO,KAAKA,OAAZ,MAAyB,eAAzB;AACA,OAAO,KAAKC,MAAZ,MAAwB,uBAAxB;;AAEA,SAASC,yBAAT,CAAmCC,UAAnC,EAA+CC,OAA/C,EAAwDC,OAAxD,EAAiE;AAC/D,MAAIC,WAAW,GAAG,EAAlB;AACA,MAAIC,cAAc,GAAGJ,UAAU,KAAK,gBAApC;AACA,MAAIK,UAAJ;AACAH,EAAAA,OAAO,CAACI,aAAR,CAAsB,QAAtB,EAAgC,UAAUC,WAAV,EAAuB;AACrD,QAAIH,cAAc,IAAIC,UAAU,IAAI,IAApC,EAA0C;AACxCE,MAAAA,WAAW,CAACF,UAAU,GAAG,QAAH,GAAc,UAAzB,CAAX,CAAgDJ,OAAO,CAACO,IAAxD;AACD,KAFD,MAEO,IAAIR,UAAU,KAAK,WAAf,IAA8BA,UAAU,KAAK,eAAjD,EAAkE;AACvEO,MAAAA,WAAW,CAACP,UAAD,CAAX;AACD,KAFM,MAEA;AACLO,MAAAA,WAAW,CAACP,UAAD,CAAX,CAAwBC,OAAO,CAACO,IAAhC;AACAH,MAAAA,UAAU,GAAGE,WAAW,CAACF,UAAZ,CAAuBJ,OAAO,CAACO,IAA/B,CAAb;AACD;;AAED,QAAIC,UAAU,GAAGF,WAAW,CAACG,OAAZ,EAAjB;AACAZ,IAAAA,MAAM,CAACa,IAAP,CAAYF,UAAZ,EAAwB,UAAUG,KAAV,EAAiB;AACvC,UAAIJ,IAAI,GAAGI,KAAK,CAACC,GAAN,CAAU,MAAV,CAAX;;AAEA,UAAIL,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK,EAA9B,EAAkC;AAChC;AACD;;AAED,UAAIM,cAAc,GAAGP,WAAW,CAACF,UAAZ,CAAuBG,IAAvB,CAArB;;AAEA,UAAIL,WAAW,CAACY,cAAZ,CAA2BP,IAA3B,CAAJ,EAAsC;AACpCL,QAAAA,WAAW,CAACK,IAAD,CAAX,GAAoBL,WAAW,CAACK,IAAD,CAAX,IAAqBM,cAAzC;AACD,OAFD,MAEO;AACLX,QAAAA,WAAW,CAACK,IAAD,CAAX,GAAoBM,cAApB;AACD;AACF,KAdD;AAeD,GA1BD;AA2BA,SAAOd,UAAU,KAAK,WAAf,IAA8BA,UAAU,KAAK,eAA7C,GAA+D;AACpEgB,IAAAA,QAAQ,EAAEb;AAD0D,GAA/D,GAEH;AACFK,IAAAA,IAAI,EAAEP,OAAO,CAACO,IADZ;AAEFQ,IAAAA,QAAQ,EAAEb;AAFR,GAFJ;AAMD;;AAEDN,OAAO,CAACoB,cAAR,CAAuB,oBAAvB,EAA6C,qBAA7C,EAAoEnB,MAAM,CAACoB,KAAP,CAAanB,yBAAb,EAAwC,gBAAxC,CAApE;AACAF,OAAO,CAACoB,cAAR,CAAuB,iBAAvB,EAA0C,iBAA1C,EAA6DnB,MAAM,CAACoB,KAAP,CAAanB,yBAAb,EAAwC,WAAxC,CAA7D;AACAF,OAAO,CAACoB,cAAR,CAAuB,qBAAvB,EAA8C,qBAA9C,EAAqEnB,MAAM,CAACoB,KAAP,CAAanB,yBAAb,EAAwC,eAAxC,CAArE;AACAF,OAAO,CAACoB,cAAR,CAAuB,cAAvB,EAAuC,gBAAvC,EAAyDnB,MAAM,CAACoB,KAAP,CAAanB,yBAAb,EAAwC,QAAxC,CAAzD;AACAF,OAAO,CAACoB,cAAR,CAAuB,gBAAvB,EAAyC,kBAAzC,EAA6DnB,MAAM,CAACoB,KAAP,CAAanB,yBAAb,EAAwC,UAAxC,CAA7D","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\nimport * as echarts from '../../echarts';\nimport * as zrUtil from 'zrender/esm/core/util';\n\nfunction legendSelectActionHandler(methodName, payload, ecModel) {\n  var selectedMap = {};\n  var isToggleSelect = methodName === 'toggleSelected';\n  var isSelected;\n  ecModel.eachComponent('legend', function (legendModel) {\n    if (isToggleSelect && isSelected != null) {\n      legendModel[isSelected ? 'select' : 'unSelect'](payload.name);\n    } else if (methodName === 'allSelect' || methodName === 'inverseSelect') {\n      legendModel[methodName]();\n    } else {\n      legendModel[methodName](payload.name);\n      isSelected = legendModel.isSelected(payload.name);\n    }\n\n    var legendData = legendModel.getData();\n    zrUtil.each(legendData, function (model) {\n      var name = model.get('name');\n\n      if (name === '\\n' || name === '') {\n        return;\n      }\n\n      var isItemSelected = legendModel.isSelected(name);\n\n      if (selectedMap.hasOwnProperty(name)) {\n        selectedMap[name] = selectedMap[name] && isItemSelected;\n      } else {\n        selectedMap[name] = isItemSelected;\n      }\n    });\n  });\n  return methodName === 'allSelect' || methodName === 'inverseSelect' ? {\n    selected: selectedMap\n  } : {\n    name: payload.name,\n    selected: selectedMap\n  };\n}\n\necharts.registerAction('legendToggleSelect', 'legendselectchanged', zrUtil.curry(legendSelectActionHandler, 'toggleSelected'));\necharts.registerAction('legendAllSelect', 'legendselectall', zrUtil.curry(legendSelectActionHandler, 'allSelect'));\necharts.registerAction('legendInverseSelect', 'legendinverseselect', zrUtil.curry(legendSelectActionHandler, 'inverseSelect'));\necharts.registerAction('legendSelect', 'legendselected', zrUtil.curry(legendSelectActionHandler, 'select'));\necharts.registerAction('legendUnSelect', 'legendunselected', zrUtil.curry(legendSelectActionHandler, 'unSelect'));"]},"metadata":{},"sourceType":"module"}