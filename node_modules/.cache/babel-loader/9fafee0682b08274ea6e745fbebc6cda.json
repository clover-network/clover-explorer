{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { isArray, isFunction, isNumber, isString } from '@antv/util';\nimport { log, LEVEL, getContainerSize } from '../../utils';\nimport { functor, wordCloud } from '../../utils/transform/word-cloud';\n/**\n * 用 DataSet 转换词云图数据\n * @param params\n */\n\nexport function transform(params) {\n  var rawOptions = params.options,\n      chart = params.chart;\n  var _a = chart,\n      width = _a.width,\n      height = _a.height,\n      chartPadding = _a.padding,\n      appendPadding = _a.appendPadding,\n      ele = _a.ele;\n  var data = rawOptions.data,\n      imageMask = rawOptions.imageMask,\n      wordField = rawOptions.wordField,\n      weightField = rawOptions.weightField,\n      colorField = rawOptions.colorField,\n      wordStyle = rawOptions.wordStyle,\n      timeInterval = rawOptions.timeInterval,\n      random = rawOptions.random,\n      spiral = rawOptions.spiral,\n      _b = rawOptions.autoFit,\n      autoFit = _b === void 0 ? true : _b,\n      placementStrategy = rawOptions.placementStrategy;\n\n  if (!data || !data.length) {\n    return [];\n  }\n\n  var fontFamily = wordStyle.fontFamily,\n      fontWeight = wordStyle.fontWeight,\n      padding = wordStyle.padding,\n      fontSize = wordStyle.fontSize;\n  var arr = getSingleKeyValues(data, weightField);\n  var range = [min(arr), max(arr)]; // 变换出 text 和 value 字段\n\n  var words = data.map(function (datum) {\n    return {\n      text: datum[wordField],\n      value: datum[weightField],\n      color: datum[colorField],\n      datum: datum\n    };\n  });\n  var options = {\n    imageMask: imageMask,\n    font: fontFamily,\n    fontSize: getFontSizeMapping(fontSize, range),\n    fontWeight: fontWeight,\n    // 图表宽高减去 padding 之后的宽高\n    size: getSize({\n      width: width,\n      height: height,\n      padding: chartPadding,\n      appendPadding: appendPadding,\n      autoFit: autoFit,\n      container: ele\n    }),\n    padding: padding,\n    timeInterval: timeInterval,\n    random: random,\n    spiral: spiral,\n    rotate: getRotate(rawOptions)\n  }; // 自定义布局函数\n\n  if (isFunction(placementStrategy)) {\n    var result = words.map(function (word, index, words) {\n      return __assign(__assign(__assign({}, word), {\n        hasText: !!word.text,\n        font: functor(options.font)(word, index, words),\n        weight: functor(options.fontWeight)(word, index, words),\n        rotate: functor(options.rotate)(word, index, words),\n        size: functor(options.fontSize)(word, index, words),\n        style: 'normal'\n      }), placementStrategy.call(chart, word, index, words));\n    }); // 添加两个参照数据，分别表示左上角和右下角\n\n    result.push({\n      text: '',\n      value: 0,\n      x: 0,\n      y: 0,\n      opacity: 0\n    });\n    result.push({\n      text: '',\n      value: 0,\n      x: options.size[0],\n      y: options.size[1],\n      opacity: 0\n    });\n    return result;\n  } // 数据准备在外部做，wordCloud 单纯就是做布局\n\n\n  return wordCloud(words, options);\n}\n/**\n * 获取最终的实际绘图尺寸：[width, height]\n * @param chart\n */\n\nexport function getSize(options) {\n  var width = options.width,\n      height = options.height;\n  var container = options.container,\n      autoFit = options.autoFit,\n      padding = options.padding,\n      appendPadding = options.appendPadding; // 由于词云图每个词语的坐标都是先通过 DataSet 根据图表宽高计算出来的，\n  // 也就是说，如果一开始提供给 DataSet 的宽高信息和最终显示的宽高不相同，\n  // 那么就会出现布局错乱的情况，所以这里处理的目的就是让一开始提供给 DataSet 的\n  // 宽高信息与最终显示的宽高信息相同，避免显示错乱。\n\n  if (autoFit) {\n    var containerSize = getContainerSize(container);\n    width = containerSize.width;\n    height = containerSize.height;\n  } // 宽高不能为 0，否则会造成死循环\n\n\n  width = width || 400;\n  height = height || 400;\n\n  var _a = resolvePadding({\n    padding: padding,\n    appendPadding: appendPadding\n  }),\n      top = _a[0],\n      right = _a[1],\n      bottom = _a[2],\n      left = _a[3];\n\n  var result = [width - (left + right), height - (top + bottom)];\n  return result;\n}\n/**\n * 根据图表的 padding 和 appendPadding 计算出图表的最终 padding\n * @param chart\n */\n\nfunction resolvePadding(options) {\n  var padding = normalPadding(options.padding);\n  var appendPadding = normalPadding(options.appendPadding);\n  var top = padding[0] + appendPadding[0];\n  var right = padding[1] + appendPadding[1];\n  var bottom = padding[2] + appendPadding[2];\n  var left = padding[3] + appendPadding[3];\n  return [top, right, bottom, left];\n}\n/**\n * 把 padding 转换成统一的数组写法\n * @param padding\n */\n\n\nfunction normalPadding(padding) {\n  if (isNumber(padding)) {\n    return [padding, padding, padding, padding];\n  }\n\n  if (isArray(padding)) {\n    var length_1 = padding.length;\n\n    if (length_1 === 1) {\n      return [padding[0], padding[0], padding[0], padding[0]];\n    }\n\n    if (length_1 === 2) {\n      return [padding[0], padding[1], padding[0], padding[1]];\n    }\n\n    if (length_1 === 3) {\n      return [padding[0], padding[1], padding[2], padding[1]];\n    }\n\n    if (length_1 === 4) {\n      return padding;\n    }\n  }\n\n  return [0, 0, 0, 0];\n}\n/**\n * 处理 imageMask 可能为 url 字符串的情况\n * @param  {HTMLImageElement | string} img\n * @return {Promise}\n */\n\n\nexport function processImageMask(img) {\n  return new Promise(function (res, rej) {\n    if (img instanceof HTMLImageElement) {\n      res(img);\n      return;\n    }\n\n    if (isString(img)) {\n      var image_1 = new Image();\n      image_1.crossOrigin = 'anonymous';\n      image_1.src = img;\n\n      image_1.onload = function () {\n        res(image_1);\n      };\n\n      image_1.onerror = function () {\n        log(LEVEL.ERROR, false, 'image %s load failed !!!', img);\n        rej();\n      };\n\n      return;\n    }\n\n    log(LEVEL.WARN, img === undefined, 'The type of imageMask option must be String or HTMLImageElement.');\n    rej();\n  });\n}\n/**\n * 把用户提供的 fontSize 值转换成符合 DataSet 要求的值\n * @param options\n * @param range\n */\n\nexport function getFontSizeMapping(fontSize, range) {\n  if (isFunction(fontSize)) {\n    return fontSize;\n  }\n\n  if (isArray(fontSize)) {\n    var fMin_1 = fontSize[0],\n        fMax_1 = fontSize[1];\n\n    if (!range) {\n      return function () {\n        return (fMax_1 + fMin_1) / 2;\n      };\n    }\n\n    var min_1 = range[0],\n        max_1 = range[1];\n\n    if (max_1 === min_1) {\n      return function () {\n        return (fMax_1 + fMin_1) / 2;\n      };\n    }\n\n    return function fontSize(_a) {\n      var value = _a.value;\n      return (fMax_1 - fMin_1) / (max_1 - min_1) * (value - min_1) + fMin_1;\n    };\n  }\n\n  return function () {\n    return fontSize;\n  };\n}\nexport function getSingleKeyValues(data, key) {\n  return data.map(function (v) {\n    return v[key];\n  }).filter(function (v) {\n    // 过滤非 number\n    if (typeof v === 'number' && !isNaN(v)) return true;\n    return false;\n  });\n}\n/**\n * 把用户提供的关于旋转角度的字段值转换成符合 DataSet 要求的值\n * @param options\n */\n\nfunction getRotate(options) {\n  var _a = resolveRotate(options),\n      rotation = _a.rotation,\n      rotationSteps = _a.rotationSteps;\n\n  if (!isArray(rotation)) return rotation;\n  var min = rotation[0];\n  var max = rotation[1]; // 等于 1 时不旋转，所以把每份大小设为 0\n\n  var perSize = rotationSteps === 1 ? 0 : (max - min) / (rotationSteps - 1);\n  return function rotate() {\n    if (max === min) return max;\n    return Math.floor(Math.random() * rotationSteps) * perSize;\n  };\n}\n/**\n * 确保值在要求范围内\n * @param options\n */\n\n\nfunction resolveRotate(options) {\n  var rotationSteps = options.wordStyle.rotationSteps;\n\n  if (rotationSteps < 1) {\n    log(LEVEL.WARN, false, 'The rotationSteps option must be greater than or equal to 1.');\n    rotationSteps = 1;\n  }\n\n  return {\n    rotation: options.wordStyle.rotation,\n    rotationSteps: rotationSteps\n  };\n}\n/**\n * 传入一个元素为数字的数组，\n * 返回该数组中值最小的数字。\n * @param numbers\n */\n\n\nfunction min(numbers) {\n  return Math.min.apply(Math, numbers);\n}\n/**\n * 传入一个元素为数字的数组，\n * 返回该数组中值最大的数字。\n * @param numbers\n */\n\n\nfunction max(numbers) {\n  return Math.max.apply(Math, numbers);\n}","map":{"version":3,"sources":["../../../src/plots/word-cloud/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { Chart } from '@antv/g2';\r\nimport { ViewAppendPadding, ViewPadding } from '@antv/g2/lib/interface';\r\nimport { isArray, isFunction, isNumber, isString } from '@antv/util';\r\nimport { Params } from '../../core/adaptor';\r\nimport { Datum } from '../../types';\r\nimport { log, LEVEL, getContainerSize } from '../../utils';\r\nimport { functor, wordCloud } from '../../utils/transform/word-cloud';\r\nimport { Tag, Word, WordCloudOptions, WordStyle } from './types';\r\n\r\n/**\r\n * 用 DataSet 转换词云图数据\r\n * @param params\r\n */\r\nexport function transform(params: Params<WordCloudOptions>): Tag[] {\r\n  const { options: rawOptions, chart } = params;\r\n  const { width, height, padding: chartPadding, appendPadding, ele } = chart as Chart;\r\n  const {\r\n    data,\r\n    imageMask,\r\n    wordField,\r\n    weightField,\r\n    colorField,\r\n    wordStyle,\r\n    timeInterval,\r\n    random,\r\n    spiral,\r\n    autoFit = true,\r\n    placementStrategy,\r\n  } = rawOptions;\r\n  if (!data || !data.length) {\r\n    return [];\r\n  }\r\n  const { fontFamily, fontWeight, padding, fontSize } = wordStyle;\r\n  const arr = getSingleKeyValues(data, weightField);\r\n  const range = [min(arr), max(arr)] as [number, number];\r\n\r\n  // 变换出 text 和 value 字段\r\n  const words = data.map(\r\n    (datum: Datum): Word => ({\r\n      text: datum[wordField],\r\n      value: datum[weightField],\r\n      color: datum[colorField],\r\n      datum, // 存一下原始数据\r\n    })\r\n  );\r\n\r\n  const options = {\r\n    imageMask: imageMask as HTMLImageElement,\r\n    font: fontFamily,\r\n    fontSize: getFontSizeMapping(fontSize, range),\r\n    fontWeight: fontWeight,\r\n    // 图表宽高减去 padding 之后的宽高\r\n    size: getSize({\r\n      width,\r\n      height,\r\n      padding: chartPadding,\r\n      appendPadding,\r\n      autoFit,\r\n      container: ele,\r\n    }),\r\n    padding: padding,\r\n    timeInterval,\r\n    random,\r\n    spiral,\r\n    rotate: getRotate(rawOptions),\r\n  };\r\n\r\n  // 自定义布局函数\r\n  if (isFunction(placementStrategy)) {\r\n    const result = words.map((word: Word, index: number, words: Word[]) => ({\r\n      ...word,\r\n      hasText: !!word.text,\r\n      font: functor(options.font)(word, index, words),\r\n      weight: functor(options.fontWeight)(word, index, words),\r\n      rotate: functor(options.rotate)(word, index, words),\r\n      size: functor(options.fontSize)(word, index, words),\r\n      style: 'normal',\r\n      ...placementStrategy.call(chart, word, index, words),\r\n    }));\r\n\r\n    // 添加两个参照数据，分别表示左上角和右下角\r\n    result.push({\r\n      text: '',\r\n      value: 0,\r\n      x: 0,\r\n      y: 0,\r\n      opacity: 0,\r\n    });\r\n    result.push({\r\n      text: '',\r\n      value: 0,\r\n      x: options.size[0],\r\n      y: options.size[1],\r\n      opacity: 0,\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  // 数据准备在外部做，wordCloud 单纯就是做布局\r\n  return wordCloud(words, options);\r\n}\r\n\r\n/**\r\n * 获取最终的实际绘图尺寸：[width, height]\r\n * @param chart\r\n */\r\nexport function getSize(options: {\r\n  width: number;\r\n  height: number;\r\n  padding: ViewPadding;\r\n  appendPadding: ViewAppendPadding;\r\n  autoFit: boolean;\r\n  container: HTMLElement;\r\n}): [number, number] {\r\n  let { width, height } = options;\r\n  const { container, autoFit, padding, appendPadding } = options;\r\n\r\n  // 由于词云图每个词语的坐标都是先通过 DataSet 根据图表宽高计算出来的，\r\n  // 也就是说，如果一开始提供给 DataSet 的宽高信息和最终显示的宽高不相同，\r\n  // 那么就会出现布局错乱的情况，所以这里处理的目的就是让一开始提供给 DataSet 的\r\n  // 宽高信息与最终显示的宽高信息相同，避免显示错乱。\r\n  if (autoFit) {\r\n    const containerSize = getContainerSize(container);\r\n    width = containerSize.width;\r\n    height = containerSize.height;\r\n  }\r\n\r\n  // 宽高不能为 0，否则会造成死循环\r\n  width = width || 400;\r\n  height = height || 400;\r\n\r\n  const [top, right, bottom, left] = resolvePadding({ padding, appendPadding });\r\n  const result = [width - (left + right), height - (top + bottom)];\r\n\r\n  return result as [number, number];\r\n}\r\n\r\n/**\r\n * 根据图表的 padding 和 appendPadding 计算出图表的最终 padding\r\n * @param chart\r\n */\r\nfunction resolvePadding(options: { padding: ViewPadding; appendPadding: ViewAppendPadding }) {\r\n  const padding = normalPadding(options.padding);\r\n  const appendPadding = normalPadding(options.appendPadding);\r\n  const top = padding[0] + appendPadding[0];\r\n  const right = padding[1] + appendPadding[1];\r\n  const bottom = padding[2] + appendPadding[2];\r\n  const left = padding[3] + appendPadding[3];\r\n\r\n  return [top, right, bottom, left];\r\n}\r\n\r\n/**\r\n * 把 padding 转换成统一的数组写法\r\n * @param padding\r\n */\r\nfunction normalPadding(padding: number | number[] | 'auto'): [number, number, number, number] {\r\n  if (isNumber(padding)) {\r\n    return [padding, padding, padding, padding];\r\n  }\r\n  if (isArray(padding)) {\r\n    const length = padding.length;\r\n\r\n    if (length === 1) {\r\n      return [padding[0], padding[0], padding[0], padding[0]];\r\n    }\r\n    if (length === 2) {\r\n      return [padding[0], padding[1], padding[0], padding[1]];\r\n    }\r\n    if (length === 3) {\r\n      return [padding[0], padding[1], padding[2], padding[1]];\r\n    }\r\n    if (length === 4) {\r\n      return padding as [number, number, number, number];\r\n    }\r\n  }\r\n\r\n  return [0, 0, 0, 0];\r\n}\r\n\r\n/**\r\n * 处理 imageMask 可能为 url 字符串的情况\r\n * @param  {HTMLImageElement | string} img\r\n * @return {Promise}\r\n */\r\nexport function processImageMask(img: HTMLImageElement | string): Promise<HTMLImageElement> {\r\n  return new Promise((res, rej) => {\r\n    if (img instanceof HTMLImageElement) {\r\n      res(img);\r\n      return;\r\n    }\r\n    if (isString(img)) {\r\n      const image = new Image();\r\n      image.crossOrigin = 'anonymous';\r\n      image.src = img;\r\n      image.onload = () => {\r\n        res(image);\r\n      };\r\n      image.onerror = () => {\r\n        log(LEVEL.ERROR, false, 'image %s load failed !!!', img);\r\n        rej();\r\n      };\r\n      return;\r\n    }\r\n    log(LEVEL.WARN, img === undefined, 'The type of imageMask option must be String or HTMLImageElement.');\r\n    rej();\r\n  });\r\n}\r\n\r\n/**\r\n * 把用户提供的 fontSize 值转换成符合 DataSet 要求的值\r\n * @param options\r\n * @param range\r\n */\r\nexport function getFontSizeMapping(fontSize: WordStyle['fontSize'], range?: [number, number]) {\r\n  if (isFunction(fontSize)) {\r\n    return fontSize;\r\n  }\r\n  if (isArray(fontSize)) {\r\n    const [fMin, fMax] = fontSize;\r\n    if (!range) {\r\n      return () => (fMax + fMin) / 2;\r\n    }\r\n    const [min, max] = range;\r\n    if (max === min) {\r\n      return () => (fMax + fMin) / 2;\r\n    }\r\n    return function fontSize({ value }) {\r\n      return ((fMax - fMin) / (max - min)) * (value - min) + fMin;\r\n    };\r\n  }\r\n  return () => fontSize;\r\n}\r\n\r\nexport function getSingleKeyValues(data: Datum[], key: string) {\r\n  return data\r\n    .map((v) => v[key])\r\n    .filter((v) => {\r\n      // 过滤非 number\r\n      if (typeof v === 'number' && !isNaN(v)) return true;\r\n      return false;\r\n    });\r\n}\r\n\r\n/**\r\n * 把用户提供的关于旋转角度的字段值转换成符合 DataSet 要求的值\r\n * @param options\r\n */\r\nfunction getRotate(options: WordCloudOptions) {\r\n  const { rotation, rotationSteps } = resolveRotate(options);\r\n  if (!isArray(rotation)) return rotation;\r\n  const min = rotation[0];\r\n  const max = rotation[1];\r\n  // 等于 1 时不旋转，所以把每份大小设为 0\r\n  const perSize = rotationSteps === 1 ? 0 : (max - min) / (rotationSteps - 1);\r\n  return function rotate() {\r\n    if (max === min) return max;\r\n    return Math.floor(Math.random() * rotationSteps) * perSize;\r\n  };\r\n}\r\n\r\n/**\r\n * 确保值在要求范围内\r\n * @param options\r\n */\r\nfunction resolveRotate(options: WordCloudOptions) {\r\n  let { rotationSteps } = options.wordStyle;\r\n  if (rotationSteps < 1) {\r\n    log(LEVEL.WARN, false, 'The rotationSteps option must be greater than or equal to 1.');\r\n    rotationSteps = 1;\r\n  }\r\n  return {\r\n    rotation: options.wordStyle.rotation,\r\n    rotationSteps,\r\n  };\r\n}\r\n\r\n/**\r\n * 传入一个元素为数字的数组，\r\n * 返回该数组中值最小的数字。\r\n * @param numbers\r\n */\r\nfunction min(numbers: number[]) {\r\n  return Math.min(...numbers);\r\n}\r\n\r\n/**\r\n * 传入一个元素为数字的数组，\r\n * 返回该数组中值最大的数字。\r\n * @param numbers\r\n */\r\nfunction max(numbers: number[]) {\r\n  return Math.max(...numbers);\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}