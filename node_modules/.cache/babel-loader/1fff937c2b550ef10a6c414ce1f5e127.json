{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { isString, clamp, size } from '@antv/util';\nimport { interaction, animation, theme, scale } from '../../adaptor/common';\nimport { deepAssign, flow, renderGaugeStatistic } from '../../utils';\nimport { RANGE_TYPE, RANGE_VALUE, PERCENT, DEFAULT_COLOR } from './constant';\nimport { processRangeData } from './utils';\n/**\n * geometry 处理\n * @param params\n */\n\nfunction geometry(params) {\n  var _a;\n\n  var chart = params.chart,\n      options = params.options;\n  var percent = options.percent,\n      range = options.range,\n      radius = options.radius,\n      innerRadius = options.innerRadius,\n      startAngle = options.startAngle,\n      endAngle = options.endAngle,\n      axis = options.axis,\n      indicator = options.indicator;\n  var ticks = range.ticks,\n      color = range.color;\n  var clampTicks = size(ticks) ? ticks : [0, clamp(percent, 0, 1), 1]; // 指标 & 指针\n  // 如果开启在应用\n\n  if (indicator) {\n    var indicatorData = [(_a = {}, _a[PERCENT] = clamp(percent, 0, 1), _a)];\n    var v1 = chart.createView();\n    v1.data(indicatorData);\n    v1.point().position(PERCENT + \"*1\").shape('gauge-indicator') // 传入指针的样式到自定义 shape 中\n    .customInfo({\n      defaultColor: chart.getTheme().defaultColor,\n      indicator: indicator\n    });\n    v1.coordinate('polar', {\n      startAngle: startAngle,\n      endAngle: endAngle,\n      radius: innerRadius * radius\n    });\n    v1.axis(PERCENT, axis);\n  } // 辅助 range\n  // [{ range: 1, type: '0' }]\n\n\n  var rangeData = processRangeData(clampTicks);\n  var v2 = chart.createView();\n  v2.data(rangeData);\n  var rangeColor = isString(color) ? [color, DEFAULT_COLOR] : color;\n  v2.interval().position(\"1*\" + RANGE_VALUE).color(RANGE_TYPE, rangeColor).adjust('stack');\n  v2.coordinate('polar', {\n    innerRadius: innerRadius,\n    radius: radius,\n    startAngle: startAngle,\n    endAngle: endAngle\n  }).transpose();\n  return params;\n}\n/**\n * meta 配置\n * @param params\n */\n\n\nfunction meta(params) {\n  var _a;\n\n  return flow(scale((_a = {\n    range: {\n      min: 0,\n      max: 1,\n      maxLimit: 1,\n      minLimit: 0\n    }\n  }, _a[PERCENT] = {}, _a)))(params);\n}\n/**\n * 统计指标文档\n * @param params\n */\n\n\nfunction statistic(params) {\n  var chart = params.chart,\n      options = params.options;\n  var statistic = options.statistic,\n      percent = options.percent;\n\n  if (statistic) {\n    var content = statistic.content;\n    var transformContent = void 0; // 当设置 content 的时候，设置默认样式\n\n    if (content) {\n      transformContent = deepAssign({}, {\n        formatter: function (_a) {\n          var percent = _a.percent;\n          return (percent * 100).toFixed(2) + \"%\";\n        },\n        style: {\n          opacity: 0.75,\n          fontSize: '30px',\n          lineHeight: 1,\n          textAlign: 'center',\n          color: 'rgba(44,53,66,0.85)'\n        }\n      }, content);\n    }\n\n    renderGaugeStatistic(chart, {\n      statistic: __assign(__assign({}, statistic), {\n        content: transformContent\n      })\n    }, {\n      percent: percent\n    });\n  }\n\n  return params;\n}\n/**\n * other 配置\n * @param params\n */\n\n\nfunction other(params) {\n  var chart = params.chart;\n  chart.legend(false);\n  chart.tooltip(false);\n  return params;\n}\n/**\n * 图适配器\n * @param chart\n * @param options\n */\n\n\nexport function adaptor(params) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow( // animation 配置必须在 createView 之前，不然无法让子 View 生效\n  animation, geometry, meta, statistic, interaction, theme, other // ... 其他的 adaptor flow\n  )(params);\n}","map":{"version":3,"sources":["../../../src/plots/gauge/adaptor.ts"],"names":[],"mappings":"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","sourcesContent":["import { isString, clamp, size } from '@antv/util';\nimport { interaction, animation, theme, scale } from '../../adaptor/common';\nimport { Params } from '../../core/adaptor';\nimport { Data } from '../../types';\nimport { deepAssign, flow, renderGaugeStatistic } from '../../utils';\nimport { RANGE_TYPE, RANGE_VALUE, PERCENT, DEFAULT_COLOR } from './constant';\nimport { GaugeOptions } from './types';\nimport { processRangeData } from './utils';\n\n/**\n * geometry 处理\n * @param params\n */\nfunction geometry(params: Params<GaugeOptions>): Params<GaugeOptions> {\n  const { chart, options } = params;\n  const { percent, range, radius, innerRadius, startAngle, endAngle, axis, indicator } = options;\n  const { ticks, color } = range;\n  const clampTicks = size(ticks) ? ticks : [0, clamp(percent, 0, 1), 1];\n\n  // 指标 & 指针\n  // 如果开启在应用\n  if (indicator) {\n    const indicatorData = [{ [PERCENT]: clamp(percent, 0, 1) }];\n\n    const v1 = chart.createView();\n    v1.data(indicatorData);\n\n    v1.point()\n      .position(`${PERCENT}*1`)\n      .shape('gauge-indicator')\n      // 传入指针的样式到自定义 shape 中\n      .customInfo({\n        defaultColor: chart.getTheme().defaultColor,\n        indicator,\n      });\n\n    v1.coordinate('polar', {\n      startAngle,\n      endAngle,\n      radius: innerRadius * radius, // 外部的 innerRadius * radius = 这里的 radius\n    });\n\n    v1.axis(PERCENT, axis);\n  }\n\n  // 辅助 range\n  // [{ range: 1, type: '0' }]\n  const rangeData: Data = processRangeData(clampTicks as number[]);\n  const v2 = chart.createView();\n  v2.data(rangeData);\n\n  const rangeColor = isString(color) ? [color, DEFAULT_COLOR] : color;\n\n  v2.interval().position(`1*${RANGE_VALUE}`).color(RANGE_TYPE, rangeColor).adjust('stack');\n\n  v2.coordinate('polar', {\n    innerRadius,\n    radius,\n    startAngle,\n    endAngle,\n  }).transpose();\n\n  return params;\n}\n\n/**\n * meta 配置\n * @param params\n */\nfunction meta(params: Params<GaugeOptions>): Params<GaugeOptions> {\n  return flow(\n    scale({\n      range: {\n        min: 0,\n        max: 1,\n        maxLimit: 1,\n        minLimit: 0,\n      },\n      [PERCENT]: {},\n    })\n  )(params);\n}\n\n/**\n * 统计指标文档\n * @param params\n */\nfunction statistic(params: Params<GaugeOptions>): Params<GaugeOptions> {\n  const { chart, options } = params;\n  const { statistic, percent } = options;\n\n  if (statistic) {\n    const { content } = statistic;\n    let transformContent;\n    // 当设置 content 的时候，设置默认样式\n    if (content) {\n      transformContent = deepAssign(\n        {},\n        {\n          formatter: ({ percent }) => `${(percent * 100).toFixed(2)}%`,\n          style: {\n            opacity: 0.75,\n            fontSize: '30px',\n            lineHeight: 1,\n            textAlign: 'center',\n            color: 'rgba(44,53,66,0.85)',\n          },\n        },\n        content\n      );\n    }\n    renderGaugeStatistic(chart, { statistic: { ...statistic, content: transformContent } }, { percent });\n  }\n\n  return params;\n}\n\n/**\n * other 配置\n * @param params\n */\nfunction other(params: Params<GaugeOptions>): Params<GaugeOptions> {\n  const { chart } = params;\n\n  chart.legend(false);\n  chart.tooltip(false);\n\n  return params;\n}\n\n/**\n * 图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<GaugeOptions>) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(\n    // animation 配置必须在 createView 之前，不然无法让子 View 生效\n    animation,\n    geometry,\n    meta,\n    statistic,\n    interaction,\n    theme,\n    other\n    // ... 其他的 adaptor flow\n  )(params);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}