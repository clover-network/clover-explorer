{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { isFunction } from '@antv/util';\nimport { transformLabel } from '../../../utils';\nimport { FUNNEL_PERCENT, FUNNEL_CONVERSATION } from '../constant';\n/**\n * 漏斗图通用geometry label\n * @param geometry 对应的 chart geometry\n */\n\nexport function geometryLabel(geometry) {\n  return function (params) {\n    var options = params.options;\n    var xField = options.xField,\n        yField = options.yField,\n        label = options.label;\n\n    if (!label) {\n      geometry.label(false);\n    } else {\n      var callback = label.callback,\n          cfg = __rest(label, [\"callback\"]);\n\n      geometry.label({\n        fields: [xField, yField, FUNNEL_PERCENT, FUNNEL_CONVERSATION],\n        callback: callback,\n        cfg: transformLabel(cfg)\n      });\n    }\n\n    return params;\n  };\n}\n/**\n * 漏斗图通用转化率组件\n * @param getLineCoordinate 用于获取特定的 line 的位置及配置\n */\n\nexport function conversionTagComponent(getLineCoordinate) {\n  return function (params) {\n    var chart = params.chart,\n        options = params.options;\n    var conversionTag = options.conversionTag;\n    var data = chart.getOptions().data;\n\n    if (conversionTag) {\n      var formatter_1 = conversionTag.formatter;\n      data.forEach(function (obj, index) {\n        if (index <= 0) return;\n        var lineOption = getLineCoordinate(obj, index, data, {\n          top: true,\n          text: {\n            content: isFunction(formatter_1) ? formatter_1(obj, data) : formatter_1,\n            offsetX: conversionTag.offsetX,\n            offsetY: conversionTag.offsetY,\n            position: 'end',\n            autoRotate: false,\n            style: __assign({\n              textAlign: 'start',\n              textBaseline: 'middle'\n            }, conversionTag.style)\n          }\n        });\n        chart.annotation().line(lineOption);\n      });\n    }\n\n    return params;\n  };\n}","map":{"version":3,"sources":["../../../../src/plots/funnel/geometries/common.ts"],"names":[],"mappings":";AAEA,SAAS,UAAT,QAA2B,YAA3B;AAEA,SAAS,cAAT,QAA+B,gBAA/B;AACA,SAAS,cAAT,EAAyB,mBAAzB,QAAoD,aAApD;AAIA;;;AAGG;;AACH,OAAM,SAAU,aAAV,CAAwB,QAAxB,EAA0C;AAC9C,SAAO,UAAU,MAAV,EAAuC;AACpC,QAAA,OAAO,GAAK,MAAM,CAAX,OAAP;AACA,QAAA,MAAM,GAAoB,OAAO,CAA3B,MAAN;AAAA,QAAQ,MAAM,GAAY,OAAO,CAAnB,MAAd;AAAA,QAAgB,KAAK,GAAK,OAAO,CAAZ,KAArB;;AACR,QAAI,CAAC,KAAL,EAAY;AACV,MAAA,QAAQ,CAAC,KAAT,CAAe,KAAf;AACD,KAFD,MAEO;AACG,UAAA,QAAQ,GAAa,KAAK,CAAlB,QAAR;AAAA,UAAa,GAAG,GAAA,MAAA,CAAK,KAAL,EAAlB,CAAA,UAAA,CAAkB,CAAhB;;AACR,MAAA,QAAQ,CAAC,KAAT,CAAe;AACb,QAAA,MAAM,EAAE,CAAC,MAAD,EAAS,MAAT,EAAiB,cAAjB,EAAiC,mBAAjC,CADK;AAEb,QAAA,QAAQ,EAAA,QAFK;AAGb,QAAA,GAAG,EAAE,cAAc,CAAC,GAAD;AAHN,OAAf;AAKD;;AACD,WAAO,MAAP;AACD,GAdD;AAeD;AAED;;;AAGG;;AACH,OAAM,SAAU,sBAAV,CACJ,iBADI,EACgH;AAEpH,SAAO,UAAU,MAAV,EAAuC;AACpC,QAAA,KAAK,GAAc,MAAM,CAApB,KAAL;AAAA,QAAO,OAAO,GAAK,MAAM,CAAX,OAAd;AACA,QAAA,aAAa,GAAK,OAAO,CAAZ,aAAb;AAEA,QAAA,IAAI,GAAK,KAAK,CAAC,UAAN,GAAL,IAAJ;;AAER,QAAI,aAAJ,EAAmB;AACT,UAAA,WAAS,GAAK,aAAa,CAAlB,SAAT;AACR,MAAA,IAAI,CAAC,OAAL,CAAa,UAAC,GAAD,EAAM,KAAN,EAAW;AACtB,YAAI,KAAK,IAAI,CAAb,EAAgB;AAChB,YAAM,UAAU,GAAG,iBAAiB,CAAC,GAAD,EAAM,KAAN,EAAa,IAAb,EAAmB;AACrD,UAAA,GAAG,EAAE,IADgD;AAErD,UAAA,IAAI,EAAE;AACJ,YAAA,OAAO,EAAE,UAAU,CAAC,WAAD,CAAV,GAAwB,WAAS,CAAC,GAAD,EAAM,IAAN,CAAjC,GAA+C,WADpD;AAEJ,YAAA,OAAO,EAAE,aAAa,CAAC,OAFnB;AAGJ,YAAA,OAAO,EAAE,aAAa,CAAC,OAHnB;AAIJ,YAAA,QAAQ,EAAE,KAJN;AAKJ,YAAA,UAAU,EAAE,KALR;AAMJ,YAAA,KAAK,EAAA,QAAA,CAAA;AACH,cAAA,SAAS,EAAE,OADR;AAEH,cAAA,YAAY,EAAE;AAFX,aAAA,EAGA,aAAa,CAAC,KAHd;AAND;AAF+C,SAAnB,CAApC;AAgBA,QAAA,KAAK,CAAC,UAAN,GAAmB,IAAnB,CAAwB,UAAxB;AACD,OAnBD;AAoBD;;AACD,WAAO,MAAP;AACD,GA9BD;AA+BD","sourcesContent":["import { Geometry } from '@antv/g2';\nimport { LineOption } from '@antv/g2/lib/interface';\nimport { isFunction } from '@antv/util';\nimport { Datum, Data } from '../../../types/common';\nimport { transformLabel } from '../../../utils';\nimport { FUNNEL_PERCENT, FUNNEL_CONVERSATION } from '../constant';\nimport { Params } from '../../../core/adaptor';\nimport { FunnelOptions } from '../types';\n\n/**\n * 漏斗图通用geometry label\n * @param geometry 对应的 chart geometry\n */\nexport function geometryLabel(geometry: Geometry) {\n  return function (params: Params<FunnelOptions>): Params<FunnelOptions> {\n    const { options } = params;\n    const { xField, yField, label } = options;\n    if (!label) {\n      geometry.label(false);\n    } else {\n      const { callback, ...cfg } = label;\n      geometry.label({\n        fields: [xField, yField, FUNNEL_PERCENT, FUNNEL_CONVERSATION],\n        callback,\n        cfg: transformLabel(cfg),\n      });\n    }\n    return params;\n  };\n}\n\n/**\n * 漏斗图通用转化率组件\n * @param getLineCoordinate 用于获取特定的 line 的位置及配置\n */\nexport function conversionTagComponent(\n  getLineCoordinate: (datum: Datum, datumIndex: number, data: Data, initLineOption: Record<string, any>) => LineOption\n) {\n  return function (params: Params<FunnelOptions>): Params<FunnelOptions> {\n    const { chart, options } = params;\n    const { conversionTag } = options;\n\n    const { data } = chart.getOptions();\n\n    if (conversionTag) {\n      const { formatter } = conversionTag;\n      data.forEach((obj, index) => {\n        if (index <= 0) return;\n        const lineOption = getLineCoordinate(obj, index, data, {\n          top: true,\n          text: {\n            content: isFunction(formatter) ? formatter(obj, data) : formatter,\n            offsetX: conversionTag.offsetX,\n            offsetY: conversionTag.offsetY,\n            position: 'end',\n            autoRotate: false,\n            style: {\n              textAlign: 'start',\n              textBaseline: 'middle',\n              ...conversionTag.style,\n            },\n          },\n        });\n\n        chart.annotation().line(lineOption);\n      });\n    }\n    return params;\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}