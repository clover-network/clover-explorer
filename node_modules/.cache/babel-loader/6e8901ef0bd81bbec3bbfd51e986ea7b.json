{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { every, filter, isFunction, isString, isNil, get, isArray, isNumber } from '@antv/util';\nimport { legend, tooltip, interaction, animation, theme, state, annotation } from '../../adaptor/common';\nimport { interval } from '../../adaptor/geometries';\nimport { flow, LEVEL, log, template, transformLabel, deepAssign, renderStatistic } from '../../utils';\nimport { adaptOffset, getTotalValue } from './utils';\n/**\n * 字段\n * @param params\n */\n\nfunction geometry(params) {\n  var chart = params.chart,\n      options = params.options;\n  var data = options.data,\n      angleField = options.angleField,\n      colorField = options.colorField,\n      color = options.color,\n      pieStyle = options.pieStyle; // 处理不合法的数据\n\n  var processData = filter(data, function (d) {\n    return typeof d[angleField] === 'number' || isNil(d[angleField]);\n  }); // 打印异常数据情况\n\n  log(LEVEL.WARN, processData.length === data.length, 'illegal data existed in chart data.');\n  var allZero = every(processData, function (d) {\n    return d[angleField] === 0;\n  });\n\n  if (allZero) {\n    // 数据全 0 处理，调整 position 映射\n    var percentageField_1 = '$$percentage$$';\n    processData = processData.map(function (d) {\n      var _a;\n\n      return __assign(__assign({}, d), (_a = {}, _a[percentageField_1] = 1 / processData.length, _a));\n    });\n    chart.data(processData);\n    var p = deepAssign({}, params, {\n      options: {\n        xField: '1',\n        yField: percentageField_1,\n        seriesField: colorField,\n        isStack: true,\n        interval: {\n          color: color,\n          style: pieStyle\n        }\n      }\n    });\n    interval(p); // all zero 额外处理\n\n    chart.geometries[0].tooltip(colorField + \"*\" + angleField);\n  } else {\n    chart.data(processData);\n    var p = deepAssign({}, params, {\n      options: {\n        xField: '1',\n        yField: angleField,\n        seriesField: colorField,\n        isStack: true,\n        interval: {\n          color: color,\n          style: pieStyle\n        }\n      }\n    });\n    interval(p);\n  }\n\n  return params;\n}\n/**\n * meta 配置\n * @param params\n */\n\n\nfunction meta(params) {\n  var _a;\n\n  var chart = params.chart,\n      options = params.options;\n  var meta = options.meta,\n      colorField = options.colorField; // meta 直接是 scale 的信息\n\n  var scales = deepAssign({}, meta);\n  chart.scale(scales, (_a = {}, _a[colorField] = {\n    type: 'cat'\n  }, _a));\n  return params;\n}\n/**\n * coord 配置\n * @param params\n */\n\n\nfunction coordinate(params) {\n  var chart = params.chart,\n      options = params.options;\n  var radius = options.radius,\n      innerRadius = options.innerRadius;\n  chart.coordinate({\n    type: 'theta',\n    cfg: {\n      radius: radius,\n      innerRadius: innerRadius\n    }\n  });\n  return params;\n}\n/**\n * label 配置\n * @param params\n */\n\n\nfunction label(params) {\n  var chart = params.chart,\n      options = params.options;\n  var label = options.label,\n      colorField = options.colorField,\n      angleField = options.angleField;\n  var geometry = chart.geometries[0]; // label 为 false, 空 则不显示 label\n\n  if (!label) {\n    geometry.label(false);\n  } else {\n    var callback = label.callback,\n        cfg = __rest(label, [\"callback\"]);\n\n    var labelCfg = transformLabel(cfg); // ① 提供模板字符串的 label content 配置\n\n    if (labelCfg.content) {\n      var content_1 = labelCfg.content;\n\n      labelCfg.content = function (data, dataum, index) {\n        var name = data[colorField];\n        var value = data[angleField]; // dymatic get scale, scale is ready this time\n\n        var angleScale = chart.getScaleByField(angleField);\n        var percent = angleScale === null || angleScale === void 0 ? void 0 : angleScale.scale(value);\n        return isFunction(content_1) ? // append pecent (number) to data, users can get origin data from `dataum._origin`\n        content_1(__assign(__assign({}, data), {\n          percent: percent\n        }), dataum, index) : isString(content_1) ? template(content_1, {\n          value: value,\n          name: name,\n          // percentage (string), default keep 2\n          percentage: isNumber(percent) && !isNil(value) ? (percent * 100).toFixed(2) + \"%\" : null\n        }) : content_1;\n      };\n    }\n\n    var LABEL_LAYOUT_TYPE_MAP = {\n      inner: '',\n      outer: 'pie-outer',\n      spider: 'pie-spider'\n    };\n    var labelLayoutType = labelCfg.type ? LABEL_LAYOUT_TYPE_MAP[labelCfg.type] : 'pie-outer';\n    var labelLayoutCfg = labelCfg.layout ? !isArray(labelCfg.layout) ? [labelCfg.layout] : labelCfg.layout : [];\n    labelCfg.layout = (labelLayoutType ? [{\n      type: labelLayoutType\n    }] : []).concat(labelLayoutCfg);\n    geometry.label({\n      // fix: could not create scale, when field is undefined（attributes 中的 fields 定义都会被用来创建 scale）\n      fields: colorField ? [angleField, colorField] : [angleField],\n      callback: callback,\n      cfg: __assign(__assign({}, labelCfg), {\n        offset: adaptOffset(labelCfg.type, labelCfg.offset),\n        type: 'pie'\n      })\n    });\n  }\n\n  return params;\n}\n/**\n * statistic 中心文本配置\n * @param params\n */\n\n\nfunction statistic(params) {\n  var chart = params.chart,\n      options = params.options;\n  var innerRadius = options.innerRadius,\n      statistic = options.statistic,\n      angleField = options.angleField,\n      colorField = options.colorField,\n      meta = options.meta;\n  /** 中心文本 指标卡 */\n\n  if (innerRadius && statistic) {\n    var title = statistic.title,\n        content = statistic.content;\n\n    if (title !== false && !get(title, 'formatter')) {\n      // @ts-ignore\n      title.formatter = function (datum) {\n        return datum ? datum[colorField] : '总计';\n      };\n    }\n\n    if (content !== false && !get(content, 'formatter')) {\n      // @ts-ignore\n      content.formatter = function (datum, data) {\n        var metaFormatter = get(meta, [angleField, 'formatter']);\n        var dataValue = datum ? datum[angleField] : getTotalValue(data, angleField);\n        return metaFormatter ? metaFormatter(dataValue) : dataValue;\n      };\n    }\n\n    renderStatistic(chart, {\n      statistic: statistic,\n      plotType: 'pie'\n    });\n  }\n\n  return params;\n}\n/**\n * 饼图适配器\n * @param chart\n * @param options\n */\n\n\nexport function adaptor(params) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(geometry, meta, theme, coordinate, legend, tooltip, label, state, annotation(),\n  /** 指标卡中心文本 放在下层 */\n  statistic, interaction, animation)(params);\n}","map":{"version":3,"sources":["../../../src/plots/pie/adaptor.ts"],"names":[],"mappings":"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","sourcesContent":["import { every, filter, isFunction, isString, isNil, get, isArray, isNumber } from '@antv/util';\nimport { Params } from '../../core/adaptor';\nimport { legend, tooltip, interaction, animation, theme, state, annotation } from '../../adaptor/common';\nimport { interval } from '../../adaptor/geometries';\nimport { flow, LEVEL, log, template, transformLabel, deepAssign, renderStatistic } from '../../utils';\nimport { adaptOffset, getTotalValue } from './utils';\nimport { PieOptions } from './types';\n\n/**\n * 字段\n * @param params\n */\nfunction geometry(params: Params<PieOptions>): Params<PieOptions> {\n  const { chart, options } = params;\n  const { data, angleField, colorField, color, pieStyle } = options;\n\n  // 处理不合法的数据\n  let processData = filter(data, (d) => typeof d[angleField] === 'number' || isNil(d[angleField]));\n\n  // 打印异常数据情况\n  log(LEVEL.WARN, processData.length === data.length, 'illegal data existed in chart data.');\n\n  const allZero = every(processData, (d) => d[angleField] === 0);\n  if (allZero) {\n    // 数据全 0 处理，调整 position 映射\n    const percentageField = '$$percentage$$';\n    processData = processData.map((d) => ({ ...d, [percentageField]: 1 / processData.length }));\n    chart.data(processData);\n\n    const p = deepAssign({}, params, {\n      options: {\n        xField: '1',\n        yField: percentageField,\n        seriesField: colorField,\n        isStack: true,\n        interval: {\n          color,\n          style: pieStyle,\n        },\n      },\n    });\n\n    interval(p);\n\n    // all zero 额外处理\n    chart.geometries[0].tooltip(`${colorField}*${angleField}`);\n  } else {\n    chart.data(processData);\n\n    const p = deepAssign({}, params, {\n      options: {\n        xField: '1',\n        yField: angleField,\n        seriesField: colorField,\n        isStack: true,\n        interval: {\n          color,\n          style: pieStyle,\n        },\n      },\n    });\n\n    interval(p);\n  }\n\n  return params;\n}\n\n/**\n * meta 配置\n * @param params\n */\nfunction meta(params: Params<PieOptions>): Params<PieOptions> {\n  const { chart, options } = params;\n  const { meta, colorField } = options;\n\n  // meta 直接是 scale 的信息\n  const scales = deepAssign({}, meta);\n  chart.scale(scales, {\n    [colorField]: { type: 'cat' },\n  });\n\n  return params;\n}\n\n/**\n * coord 配置\n * @param params\n */\nfunction coordinate(params: Params<PieOptions>): Params<PieOptions> {\n  const { chart, options } = params;\n  const { radius, innerRadius } = options;\n\n  chart.coordinate({\n    type: 'theta',\n    cfg: {\n      radius,\n      innerRadius,\n    },\n  });\n\n  return params;\n}\n\n/**\n * label 配置\n * @param params\n */\nfunction label(params: Params<PieOptions>): Params<PieOptions> {\n  const { chart, options } = params;\n  const { label, colorField, angleField } = options;\n\n  const geometry = chart.geometries[0];\n  // label 为 false, 空 则不显示 label\n  if (!label) {\n    geometry.label(false);\n  } else {\n    const { callback, ...cfg } = label;\n    const labelCfg = transformLabel(cfg);\n\n    // ① 提供模板字符串的 label content 配置\n    if (labelCfg.content) {\n      const { content } = labelCfg;\n      labelCfg.content = (data: object, dataum: any, index: number) => {\n        const name = data[colorField];\n        const value = data[angleField];\n        // dymatic get scale, scale is ready this time\n        const angleScale = chart.getScaleByField(angleField);\n        const percent = angleScale?.scale(value);\n        return isFunction(content)\n          ? // append pecent (number) to data, users can get origin data from `dataum._origin`\n            content({ ...data, percent }, dataum, index)\n          : isString(content)\n          ? template(content as string, {\n              value,\n              name,\n              // percentage (string), default keep 2\n              percentage: isNumber(percent) && !isNil(value) ? `${(percent * 100).toFixed(2)}%` : null,\n            })\n          : content;\n      };\n    }\n\n    const LABEL_LAYOUT_TYPE_MAP = {\n      inner: '',\n      outer: 'pie-outer',\n      spider: 'pie-spider',\n    };\n    const labelLayoutType = labelCfg.type ? LABEL_LAYOUT_TYPE_MAP[labelCfg.type] : 'pie-outer';\n    const labelLayoutCfg = labelCfg.layout ? (!isArray(labelCfg.layout) ? [labelCfg.layout] : labelCfg.layout) : [];\n    labelCfg.layout = (labelLayoutType ? [{ type: labelLayoutType }] : []).concat(labelLayoutCfg);\n\n    geometry.label({\n      // fix: could not create scale, when field is undefined（attributes 中的 fields 定义都会被用来创建 scale）\n      fields: colorField ? [angleField, colorField] : [angleField],\n      callback,\n      cfg: {\n        ...labelCfg,\n        offset: adaptOffset(labelCfg.type, labelCfg.offset),\n        type: 'pie',\n      },\n    });\n  }\n  return params;\n}\n\n/**\n * statistic 中心文本配置\n * @param params\n */\nfunction statistic(params: Params<PieOptions>): Params<PieOptions> {\n  const { chart, options } = params;\n  const { innerRadius, statistic, angleField, colorField, meta } = options;\n\n  /** 中心文本 指标卡 */\n  if (innerRadius && statistic) {\n    const { title, content } = statistic;\n    if (title !== false && !get(title, 'formatter')) {\n      // @ts-ignore\n      title.formatter = (datum) => (datum ? datum[colorField] : '总计');\n    }\n    if (content !== false && !get(content, 'formatter')) {\n      // @ts-ignore\n      content.formatter = (datum, data) => {\n        const metaFormatter = get(meta, [angleField, 'formatter']);\n        const dataValue = datum ? datum[angleField] : getTotalValue(data, angleField);\n        return metaFormatter ? metaFormatter(dataValue) : dataValue;\n      };\n    }\n    renderStatistic(chart, { statistic, plotType: 'pie' });\n  }\n\n  return params;\n}\n\n/**\n * 饼图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<PieOptions>) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(\n    geometry,\n    meta,\n    theme,\n    coordinate,\n    legend,\n    tooltip,\n    label,\n    state,\n    annotation(),\n    /** 指标卡中心文本 放在下层 */\n    statistic,\n    interaction,\n    animation\n  )(params);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}