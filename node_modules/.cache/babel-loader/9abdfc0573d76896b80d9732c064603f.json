{"ast":null,"code":"import { determination } from \"./utils/determination\";\nimport { interpose } from \"./utils/interpose\";\nimport { points, visitPoints } from \"./utils/points\";\nimport linear from \"./linear\";\nimport quad from \"./quadratic\"; // Adapted from regression-js by Tom Alexander\n// Source: https://github.com/Tom-Alexander/regression-js/blob/master/src/regression.js#L246\n// License: https://github.com/Tom-Alexander/regression-js/blob/master/LICENSE\n// ...with ideas from vega-statistics by Jeffrey Heer\n// Source: https://github.com/vega/vega/blob/f21cb8792b4e0cbe2b1a3fd44b0f5db370dbaadb/packages/vega-statistics/src/regression/poly.js\n// License: https://github.com/vega/vega/blob/f058b099decad9db78301405dd0d2e9d8ba3d51a/LICENSE\n\nexport default function () {\n  let x = d => d[0],\n      y = d => d[1],\n      order = 3,\n      domain;\n\n  function polynomial(data) {\n    // Use more efficient methods for lower orders\n    if (order === 1) {\n      const o = linear().x(x).y(y).domain(domain)(data);\n      o.coefficients = [o.b, o.a];\n      delete o.a;\n      delete o.b;\n      return o;\n    }\n\n    if (order === 2) {\n      const o = quad().x(x).y(y).domain(domain)(data);\n      o.coefficients = [o.c, o.b, o.a];\n      delete o.a;\n      delete o.b;\n      delete o.c;\n      return o;\n    }\n\n    const [xv, yv, ux, uy] = points(data, x, y),\n          n = xv.length,\n          lhs = [],\n          rhs = [],\n          k = order + 1;\n    let Y = 0,\n        n0 = 0,\n        xmin = domain ? +domain[0] : Infinity,\n        xmax = domain ? +domain[1] : -Infinity;\n    visitPoints(data, x, y, (dx, dy) => {\n      ++n0;\n      Y += (dy - Y) / n0;\n\n      if (!domain) {\n        if (dx < xmin) xmin = dx;\n        if (dx > xmax) xmax = dx;\n      }\n    });\n    let i, j, l, v, c;\n\n    for (i = 0; i < k; ++i) {\n      for (l = 0, v = 0; l < n; ++l) {\n        v += Math.pow(xv[l], i) * yv[l];\n      }\n\n      lhs.push(v);\n      c = new Float64Array(k);\n\n      for (j = 0; j < k; ++j) {\n        for (l = 0, v = 0; l < n; ++l) {\n          v += Math.pow(xv[l], i + j);\n        }\n\n        c[j] = v;\n      }\n\n      rhs.push(c);\n    }\n\n    rhs.push(lhs);\n\n    const coef = gaussianElimination(rhs),\n          fn = x => {\n      x -= ux;\n      let y = uy + coef[0] + coef[1] * x + coef[2] * x * x;\n\n      for (i = 3; i < k; ++i) y += coef[i] * Math.pow(x, i);\n\n      return y;\n    },\n          out = interpose(xmin, xmax, fn);\n\n    out.coefficients = uncenter(k, coef, -ux, uy);\n    out.predict = fn;\n    out.rSquared = determination(data, x, y, Y, fn);\n    return out;\n  }\n\n  polynomial.domain = function (arr) {\n    return arguments.length ? (domain = arr, polynomial) : domain;\n  };\n\n  polynomial.x = function (fn) {\n    return arguments.length ? (x = fn, polynomial) : x;\n  };\n\n  polynomial.y = function (fn) {\n    return arguments.length ? (y = fn, polynomial) : y;\n  };\n\n  polynomial.order = function (n) {\n    return arguments.length ? (order = n, polynomial) : order;\n  };\n\n  return polynomial;\n}\n\nfunction uncenter(k, a, x, y) {\n  const z = Array(k);\n  let i, j, v, c; // initialize to zero\n\n  for (i = 0; i < k; ++i) z[i] = 0; // polynomial expansion\n\n\n  for (i = k - 1; i >= 0; --i) {\n    v = a[i];\n    c = 1;\n    z[i] += v;\n\n    for (j = 1; j <= i; ++j) {\n      c *= (i + 1 - j) / j; // binomial coefficent\n\n      z[i - j] += v * Math.pow(x, j) * c;\n    }\n  } // bias term\n\n\n  z[0] += y;\n  return z;\n} // Given an array for a two-dimensional matrix and the polynomial order,\n// solve A * x = b using Gaussian elimination.\n\n\nfunction gaussianElimination(matrix) {\n  const n = matrix.length - 1,\n        coef = [];\n  let i, j, k, r, t;\n\n  for (i = 0; i < n; ++i) {\n    r = i; // max row\n\n    for (j = i + 1; j < n; ++j) {\n      if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][r])) {\n        r = j;\n      }\n    }\n\n    for (k = i; k < n + 1; ++k) {\n      t = matrix[k][i];\n      matrix[k][i] = matrix[k][r];\n      matrix[k][r] = t;\n    }\n\n    for (j = i + 1; j < n; ++j) {\n      for (k = n; k >= i; k--) {\n        matrix[k][j] -= matrix[k][i] * matrix[i][j] / matrix[i][i];\n      }\n    }\n  }\n\n  for (j = n - 1; j >= 0; --j) {\n    t = 0;\n\n    for (k = j + 1; k < n; ++k) {\n      t += matrix[k][j] * coef[k];\n    }\n\n    coef[j] = (matrix[n][j] - t) / matrix[j][j];\n  }\n\n  return coef;\n}","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/d3-regression/src/polynomial.js"],"names":["determination","interpose","points","visitPoints","linear","quad","x","d","y","order","domain","polynomial","data","o","coefficients","b","a","c","xv","yv","ux","uy","n","length","lhs","rhs","k","Y","n0","xmin","Infinity","xmax","dx","dy","i","j","l","v","Math","pow","push","Float64Array","coef","gaussianElimination","fn","out","uncenter","predict","rSquared","arr","arguments","z","Array","matrix","r","t","abs"],"mappings":"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","sourcesContent":["import { determination } from \"./utils/determination\";\nimport { interpose } from \"./utils/interpose\";\nimport { points, visitPoints } from \"./utils/points\";\nimport linear from \"./linear\";\nimport quad from \"./quadratic\";\n\n// Adapted from regression-js by Tom Alexander\n// Source: https://github.com/Tom-Alexander/regression-js/blob/master/src/regression.js#L246\n// License: https://github.com/Tom-Alexander/regression-js/blob/master/LICENSE\n// ...with ideas from vega-statistics by Jeffrey Heer\n// Source: https://github.com/vega/vega/blob/f21cb8792b4e0cbe2b1a3fd44b0f5db370dbaadb/packages/vega-statistics/src/regression/poly.js\n// License: https://github.com/vega/vega/blob/f058b099decad9db78301405dd0d2e9d8ba3d51a/LICENSE\nexport default function(){\n  let x = d => d[0],\n      y = d => d[1],\n      order = 3,\n      domain;\n  \n  function polynomial(data) {    \n    // Use more efficient methods for lower orders\n    if (order === 1) {\n      const o = linear().x(x).y(y).domain(domain)(data);\n      o.coefficients = [o.b, o.a];\n      delete o.a; delete o.b;\n      return o;\n    }\n    if (order === 2) {\n      const o = quad().x(x).y(y).domain(domain)(data);\n      o.coefficients = [o.c, o.b, o.a];\n      delete o.a; delete o.b; delete o.c;\n      return o;\n    }\n    \n    const [xv, yv, ux, uy] = points(data, x, y),\n        n = xv.length,\n        lhs = [],\n        rhs = [],\n        k = order + 1;\n\n    let Y = 0, n0 = 0,\n        xmin = domain ? +domain[0] : Infinity,\n        xmax = domain ? +domain[1] : -Infinity;\n    \n    visitPoints(data, x, y, (dx, dy) => {\n      ++n0\n      Y += (dy - Y) / n0;\n      if (!domain){\n        if (dx < xmin) xmin = dx;\n        if (dx > xmax) xmax = dx;        \n      }\n    });\n\n    let i, j, l, v, c;\n\n    for (i = 0; i < k; ++i) {\n      for (l = 0, v = 0; l < n; ++l) {\n        v += Math.pow(xv[l], i) * yv[l];\n      }\n      lhs.push(v);\n\n      c = new Float64Array(k);\n      for (j=0; j<k; ++j) {\n        for (l=0, v=0; l<n; ++l) {\n          v += Math.pow(xv[l], i + j);\n        }\n        c[j] = v;\n      }\n      rhs.push(c);\n    }\n    rhs.push(lhs);\n\n    const coef = gaussianElimination(rhs),\n          fn = x => {\n            x -= ux;\n            let y = uy + coef[0] + coef[1] * x + coef[2] * x * x;\n            for (i = 3; i < k; ++i) y += coef[i] * Math.pow(x, i);\n            return y;\n          },\n          out = interpose(xmin, xmax, fn);\n\n    out.coefficients = uncenter(k, coef, -ux, uy);\n    out.predict = fn;\n    out.rSquared = determination(data, x, y, Y, fn);\n    \n    return out;\n  }\n\n  polynomial.domain = function(arr){\n    return arguments.length ? (domain = arr, polynomial) : domain;\n  }\n\n  polynomial.x = function(fn){\n    return arguments.length ? (x = fn, polynomial) : x;\n  }\n\n  polynomial.y = function(fn){\n    return arguments.length ? (y = fn, polynomial) : y;\n  }\n\n  polynomial.order = function(n){\n    return arguments.length ? (order = n, polynomial) : order;\n  }\n  \n  return polynomial;\n}\n\nfunction uncenter(k, a, x, y) {\n  const z = Array(k);\n  let i, j, v, c;\n\n  // initialize to zero\n  for (i = 0; i < k; ++i) z[i] = 0;\n\n  // polynomial expansion\n  for (i = k - 1; i >= 0; --i) {\n    v = a[i];\n    c = 1;\n    z[i] += v;\n    for (j = 1; j <= i; ++j) {\n      c *= (i + 1 - j) / j; // binomial coefficent\n      z[i-j] += v * Math.pow(x, j) * c;\n    }\n  }\n\n  // bias term\n  z[0] += y;\n\n  return z;\n}\n\n// Given an array for a two-dimensional matrix and the polynomial order,\n// solve A * x = b using Gaussian elimination.\nfunction gaussianElimination(matrix) {\n  const n = matrix.length - 1,\n        coef = [];\n\n  let i, j, k, r, t;\n\n  for (i = 0; i < n; ++i) {\n    r = i; // max row\n    for (j = i + 1; j < n; ++j) {\n      if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][r])) {\n        r = j;\n      }\n    }\n\n    for (k = i; k < n + 1; ++k) {\n      t = matrix[k][i];\n      matrix[k][i] = matrix[k][r];\n      matrix[k][r] = t;\n    }\n\n    for (j = i + 1; j < n; ++j) {\n      for (k = n; k >= i; k--) {\n        matrix[k][j] -= (matrix[k][i] * matrix[i][j]) / matrix[i][i];\n      }\n    }\n  }\n\n  for (j = n - 1; j >= 0; --j) {\n    t = 0;\n    for (k = j + 1; k < n; ++k) {\n      t += matrix[k][j] * coef[k];\n    }\n    coef[j] = (matrix[n][j] - t) / matrix[j][j];\n  }\n\n  return coef;\n}"]},"metadata":{},"sourceType":"module"}