{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\n\nvar vector_1 = require(\"../../core/vector\");\n\nfunction smoothBezier(points, smooth, isLoop, constraint) {\n  var cps = [];\n  var v = [];\n  var v1 = [];\n  var v2 = [];\n  var prevPoint;\n  var nextPoint;\n  var min;\n  var max;\n\n  if (constraint) {\n    min = [Infinity, Infinity];\n    max = [-Infinity, -Infinity];\n\n    for (var i = 0, len = points.length; i < len; i++) {\n      vector_1.min(min, min, points[i]);\n      vector_1.max(max, max, points[i]);\n    }\n\n    vector_1.min(min, min, constraint[0]);\n    vector_1.max(max, max, constraint[1]);\n  }\n\n  for (var i = 0, len = points.length; i < len; i++) {\n    var point = points[i];\n\n    if (isLoop) {\n      prevPoint = points[i ? i - 1 : len - 1];\n      nextPoint = points[(i + 1) % len];\n    } else {\n      if (i === 0 || i === len - 1) {\n        cps.push(vector_1.clone(points[i]));\n        continue;\n      } else {\n        prevPoint = points[i - 1];\n        nextPoint = points[i + 1];\n      }\n    }\n\n    vector_1.sub(v, nextPoint, prevPoint);\n    vector_1.scale(v, v, smooth);\n    var d0 = vector_1.distance(point, prevPoint);\n    var d1 = vector_1.distance(point, nextPoint);\n    var sum = d0 + d1;\n\n    if (sum !== 0) {\n      d0 /= sum;\n      d1 /= sum;\n    }\n\n    vector_1.scale(v1, v, -d0);\n    vector_1.scale(v2, v, d1);\n    var cp0 = vector_1.add([], point, v1);\n    var cp1 = vector_1.add([], point, v2);\n\n    if (constraint) {\n      vector_1.max(cp0, cp0, min);\n      vector_1.min(cp0, cp0, max);\n      vector_1.max(cp1, cp1, min);\n      vector_1.min(cp1, cp1, max);\n    }\n\n    cps.push(cp0);\n    cps.push(cp1);\n  }\n\n  if (isLoop) {\n    cps.push(cps.shift());\n  }\n\n  return cps;\n}\n\nexports[\"default\"] = smoothBezier;","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/zrender/lib/graphic/helper/smoothBezier.js"],"names":["exports","__esModule","vector_1","require","smoothBezier","points","smooth","isLoop","constraint","cps","v","v1","v2","prevPoint","nextPoint","min","max","Infinity","i","len","length","point","push","clone","sub","scale","d0","distance","d1","sum","cp0","add","cp1","shift"],"mappings":"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","sourcesContent":["\"use strict\";\nexports.__esModule = true;\nvar vector_1 = require(\"../../core/vector\");\nfunction smoothBezier(points, smooth, isLoop, constraint) {\n    var cps = [];\n    var v = [];\n    var v1 = [];\n    var v2 = [];\n    var prevPoint;\n    var nextPoint;\n    var min;\n    var max;\n    if (constraint) {\n        min = [Infinity, Infinity];\n        max = [-Infinity, -Infinity];\n        for (var i = 0, len = points.length; i < len; i++) {\n            vector_1.min(min, min, points[i]);\n            vector_1.max(max, max, points[i]);\n        }\n        vector_1.min(min, min, constraint[0]);\n        vector_1.max(max, max, constraint[1]);\n    }\n    for (var i = 0, len = points.length; i < len; i++) {\n        var point = points[i];\n        if (isLoop) {\n            prevPoint = points[i ? i - 1 : len - 1];\n            nextPoint = points[(i + 1) % len];\n        }\n        else {\n            if (i === 0 || i === len - 1) {\n                cps.push(vector_1.clone(points[i]));\n                continue;\n            }\n            else {\n                prevPoint = points[i - 1];\n                nextPoint = points[i + 1];\n            }\n        }\n        vector_1.sub(v, nextPoint, prevPoint);\n        vector_1.scale(v, v, smooth);\n        var d0 = vector_1.distance(point, prevPoint);\n        var d1 = vector_1.distance(point, nextPoint);\n        var sum = d0 + d1;\n        if (sum !== 0) {\n            d0 /= sum;\n            d1 /= sum;\n        }\n        vector_1.scale(v1, v, -d0);\n        vector_1.scale(v2, v, d1);\n        var cp0 = vector_1.add([], point, v1);\n        var cp1 = vector_1.add([], point, v2);\n        if (constraint) {\n            vector_1.max(cp0, cp0, min);\n            vector_1.min(cp0, cp0, max);\n            vector_1.max(cp1, cp1, min);\n            vector_1.min(cp1, cp1, max);\n        }\n        cps.push(cp0);\n        cps.push(cp1);\n    }\n    if (isLoop) {\n        cps.push(cps.shift());\n    }\n    return cps;\n}\nexports[\"default\"] = smoothBezier;\n"]},"metadata":{},"sourceType":"script"}