{"ast":null,"code":"import { __assign, __spreadArrays } from \"tslib\";\nimport groupBy from '@antv/util/lib/group-by';\nexport var getAllNodeInGroups = function getAllNodeInGroups(data) {\n  var groupById = groupBy(data.groups, 'id');\n  var groupByParentId = groupBy(data.groups, 'parentId');\n  var result = {};\n\n  for (var parentId in groupByParentId) {\n    if (!parentId) {\n      continue;\n    } // 获取当前parentId的所有子group ID\n\n\n    var subGroupIds = groupByParentId[parentId]; // 获取在parentid群组中的节点\n\n    var nodeInParentGroup = groupById[parentId];\n\n    if (nodeInParentGroup && subGroupIds) {\n      // 合并\n      var parentGroupNodes = __spreadArrays(subGroupIds, nodeInParentGroup);\n\n      result[parentId] = parentGroupNodes;\n    } else if (subGroupIds) {\n      result[parentId] = subGroupIds;\n    }\n  }\n\n  var allGroupsId = __assign(__assign({}, groupById), result); // 缓存所有group包括的groupID\n\n\n  var groupIds = {};\n\n  for (var groupId in allGroupsId) {\n    if (!groupId || groupId === 'undefined') {\n      continue;\n    }\n\n    var subGroupIds = allGroupsId[groupId].map(function (node) {\n      return node.id;\n    }); // const nodesInGroup = data.nodes.filter(node => node.groupId === groupId).map(node => node.id);\n\n    groupIds[groupId] = subGroupIds;\n  } // 缓存所有groupID对应的Node\n\n\n  var groupNodes = {};\n\n  var _loop_1 = function _loop_1(groupId) {\n    if (!groupId || groupId === 'undefined') {\n      return \"continue\";\n    }\n\n    var subGroupIds = groupIds[groupId]; // const subGroupIds = allGroupsId[groupId].map(node => node.id);\n    // 解析所有子群组\n\n    var parentSubGroupIds = [];\n\n    for (var _i = 0, subGroupIds_1 = subGroupIds; _i < subGroupIds_1.length; _i++) {\n      var subId = subGroupIds_1[_i];\n      var tmpGroupId = allGroupsId[subId].map(function (node) {\n        return node.id;\n      }); // const tmpNodes = data.nodes.filter(node => node.groupId === subId).map(node => node.id);\n\n      parentSubGroupIds.push.apply(parentSubGroupIds, tmpGroupId);\n    }\n\n    var nodesInGroup = data.nodes ? data.nodes.filter(function (node) {\n      return parentSubGroupIds.indexOf(node.groupId) > -1 || parentSubGroupIds.indexOf(node.parentId) > -1;\n    }).map(function (node) {\n      return node.id;\n    }) : [];\n    groupNodes[groupId] = nodesInGroup;\n  };\n\n  for (var groupId in groupIds) {\n    _loop_1(groupId);\n  }\n\n  return groupNodes;\n};","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/@antv/g6/es/util/group.js"],"names":["__assign","__spreadArrays","groupBy","getAllNodeInGroups","data","groupById","groups","groupByParentId","result","parentId","subGroupIds","nodeInParentGroup","parentGroupNodes","allGroupsId","groupIds","groupId","map","node","id","groupNodes","_loop_1","parentSubGroupIds","_i","subGroupIds_1","length","subId","tmpGroupId","push","apply","nodesInGroup","nodes","filter","indexOf"],"mappings":"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","sourcesContent":["import { __assign, __spreadArrays } from \"tslib\";\nimport groupBy from '@antv/util/lib/group-by';\nexport var getAllNodeInGroups = function getAllNodeInGroups(data) {\n  var groupById = groupBy(data.groups, 'id');\n  var groupByParentId = groupBy(data.groups, 'parentId');\n  var result = {};\n\n  for (var parentId in groupByParentId) {\n    if (!parentId) {\n      continue;\n    } // 获取当前parentId的所有子group ID\n\n\n    var subGroupIds = groupByParentId[parentId]; // 获取在parentid群组中的节点\n\n    var nodeInParentGroup = groupById[parentId];\n\n    if (nodeInParentGroup && subGroupIds) {\n      // 合并\n      var parentGroupNodes = __spreadArrays(subGroupIds, nodeInParentGroup);\n\n      result[parentId] = parentGroupNodes;\n    } else if (subGroupIds) {\n      result[parentId] = subGroupIds;\n    }\n  }\n\n  var allGroupsId = __assign(__assign({}, groupById), result); // 缓存所有group包括的groupID\n\n\n  var groupIds = {};\n\n  for (var groupId in allGroupsId) {\n    if (!groupId || groupId === 'undefined') {\n      continue;\n    }\n\n    var subGroupIds = allGroupsId[groupId].map(function (node) {\n      return node.id;\n    }); // const nodesInGroup = data.nodes.filter(node => node.groupId === groupId).map(node => node.id);\n\n    groupIds[groupId] = subGroupIds;\n  } // 缓存所有groupID对应的Node\n\n\n  var groupNodes = {};\n\n  var _loop_1 = function _loop_1(groupId) {\n    if (!groupId || groupId === 'undefined') {\n      return \"continue\";\n    }\n\n    var subGroupIds = groupIds[groupId]; // const subGroupIds = allGroupsId[groupId].map(node => node.id);\n    // 解析所有子群组\n\n    var parentSubGroupIds = [];\n\n    for (var _i = 0, subGroupIds_1 = subGroupIds; _i < subGroupIds_1.length; _i++) {\n      var subId = subGroupIds_1[_i];\n      var tmpGroupId = allGroupsId[subId].map(function (node) {\n        return node.id;\n      }); // const tmpNodes = data.nodes.filter(node => node.groupId === subId).map(node => node.id);\n\n      parentSubGroupIds.push.apply(parentSubGroupIds, tmpGroupId);\n    }\n\n    var nodesInGroup = data.nodes ? data.nodes.filter(function (node) {\n      return parentSubGroupIds.indexOf(node.groupId) > -1 || parentSubGroupIds.indexOf(node.parentId) > -1;\n    }).map(function (node) {\n      return node.id;\n    }) : [];\n    groupNodes[groupId] = nodesInGroup;\n  };\n\n  for (var groupId in groupIds) {\n    _loop_1(groupId);\n  }\n\n  return groupNodes;\n};"]},"metadata":{},"sourceType":"module"}