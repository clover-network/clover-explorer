{"ast":null,"code":"import LuDecomposition from './dc/lu';\nimport QrDecomposition from './dc/qr';\nimport SingularValueDecomposition from './dc/svd';\nimport Matrix from './matrix';\nimport WrapperMatrix2D from './wrap/WrapperMatrix2D';\nexport function inverse(matrix, useSVD = false) {\n  matrix = WrapperMatrix2D.checkMatrix(matrix);\n\n  if (useSVD) {\n    return new SingularValueDecomposition(matrix).inverse();\n  } else {\n    return solve(matrix, Matrix.eye(matrix.rows));\n  }\n}\nexport function solve(leftHandSide, rightHandSide, useSVD = false) {\n  leftHandSide = WrapperMatrix2D.checkMatrix(leftHandSide);\n  rightHandSide = WrapperMatrix2D.checkMatrix(rightHandSide);\n\n  if (useSVD) {\n    return new SingularValueDecomposition(leftHandSide).solve(rightHandSide);\n  } else {\n    return leftHandSide.isSquare() ? new LuDecomposition(leftHandSide).solve(rightHandSide) : new QrDecomposition(leftHandSide).solve(rightHandSide);\n  }\n}","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/ml-matrix/src/decompositions.js"],"names":["LuDecomposition","QrDecomposition","SingularValueDecomposition","Matrix","WrapperMatrix2D","inverse","matrix","useSVD","checkMatrix","solve","eye","rows","leftHandSide","rightHandSide","isSquare"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,SAA5B;AACA,OAAOC,eAAP,MAA4B,SAA5B;AACA,OAAOC,0BAAP,MAAuC,UAAvC;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,eAAP,MAA4B,wBAA5B;AAEA,OAAO,SAASC,OAAT,CAAiBC,MAAjB,EAAyBC,MAAM,GAAG,KAAlC,EAAyC;AAC9CD,EAAAA,MAAM,GAAGF,eAAe,CAACI,WAAhB,CAA4BF,MAA5B,CAAT;;AACA,MAAIC,MAAJ,EAAY;AACV,WAAO,IAAIL,0BAAJ,CAA+BI,MAA/B,EAAuCD,OAAvC,EAAP;AACD,GAFD,MAEO;AACL,WAAOI,KAAK,CAACH,MAAD,EAASH,MAAM,CAACO,GAAP,CAAWJ,MAAM,CAACK,IAAlB,CAAT,CAAZ;AACD;AACF;AAED,OAAO,SAASF,KAAT,CAAeG,YAAf,EAA6BC,aAA7B,EAA4CN,MAAM,GAAG,KAArD,EAA4D;AACjEK,EAAAA,YAAY,GAAGR,eAAe,CAACI,WAAhB,CAA4BI,YAA5B,CAAf;AACAC,EAAAA,aAAa,GAAGT,eAAe,CAACI,WAAhB,CAA4BK,aAA5B,CAAhB;;AACA,MAAIN,MAAJ,EAAY;AACV,WAAO,IAAIL,0BAAJ,CAA+BU,YAA/B,EAA6CH,KAA7C,CAAmDI,aAAnD,CAAP;AACD,GAFD,MAEO;AACL,WAAOD,YAAY,CAACE,QAAb,KACH,IAAId,eAAJ,CAAoBY,YAApB,EAAkCH,KAAlC,CAAwCI,aAAxC,CADG,GAEH,IAAIZ,eAAJ,CAAoBW,YAApB,EAAkCH,KAAlC,CAAwCI,aAAxC,CAFJ;AAGD;AACF","sourcesContent":["import LuDecomposition from './dc/lu';\nimport QrDecomposition from './dc/qr';\nimport SingularValueDecomposition from './dc/svd';\nimport Matrix from './matrix';\nimport WrapperMatrix2D from './wrap/WrapperMatrix2D';\n\nexport function inverse(matrix, useSVD = false) {\n  matrix = WrapperMatrix2D.checkMatrix(matrix);\n  if (useSVD) {\n    return new SingularValueDecomposition(matrix).inverse();\n  } else {\n    return solve(matrix, Matrix.eye(matrix.rows));\n  }\n}\n\nexport function solve(leftHandSide, rightHandSide, useSVD = false) {\n  leftHandSide = WrapperMatrix2D.checkMatrix(leftHandSide);\n  rightHandSide = WrapperMatrix2D.checkMatrix(rightHandSide);\n  if (useSVD) {\n    return new SingularValueDecomposition(leftHandSide).solve(rightHandSide);\n  } else {\n    return leftHandSide.isSquare()\n      ? new LuDecomposition(leftHandSide).solve(rightHandSide)\n      : new QrDecomposition(leftHandSide).solve(rightHandSide);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}