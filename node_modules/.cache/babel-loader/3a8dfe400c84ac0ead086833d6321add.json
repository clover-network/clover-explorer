{"ast":null,"code":"import Comparator from '../../comparator';\n/**\n * 链表中单个元素节点\n */\n\nvar LinkedListNode =\n/** @class */\nfunction () {\n  function LinkedListNode(value, next) {\n    if (next === void 0) {\n      next = null;\n    }\n\n    this.value = value;\n    this.next = next;\n  }\n\n  LinkedListNode.prototype.toString = function (callback) {\n    return callback ? callback(this.value) : \"\" + this.value;\n  };\n\n  return LinkedListNode;\n}();\n\nexport { LinkedListNode };\n\nvar LinkedList =\n/** @class */\nfunction () {\n  function LinkedList(comparatorFunction) {\n    if (comparatorFunction === void 0) {\n      comparatorFunction = null;\n    }\n\n    this.head = null;\n    this.tail = null;\n    this.compare = new Comparator(comparatorFunction);\n  }\n  /**\n   * 将指定元素添加到链表头部\n   * @param value\n   */\n\n\n  LinkedList.prototype.prepend = function (value) {\n    // 在头部添加一个节点\n    var newNode = new LinkedListNode(value, this.head);\n    this.head = newNode;\n\n    if (!this.tail) {\n      this.tail = newNode;\n    }\n\n    return this;\n  };\n  /**\n   * 将指定元素添加到链表中\n   * @param value\n   */\n\n\n  LinkedList.prototype.append = function (value) {\n    var newNode = new LinkedListNode(value); // 如果不存在头节点，则将创建的新节点作为头节点\n\n    if (!this.head) {\n      this.head = newNode;\n      this.tail = newNode;\n      return this;\n    } // 将新节点附加到链表末尾\n\n\n    this.tail.next = newNode;\n    this.tail = newNode;\n    return this;\n  };\n  /**\n   * 删除指定元素\n   * @param value 要删除的元素\n   */\n\n\n  LinkedList.prototype.delete = function (value) {\n    if (!this.head) {\n      return null;\n    }\n\n    var deleteNode = null; // 如果删除的是头部元素，则将next作为头元素\n\n    while (this.head && this.compare.equal(this.head.value, value)) {\n      deleteNode = this.head;\n      this.head = this.head.next;\n    }\n\n    var currentNode = this.head;\n\n    if (currentNode !== null) {\n      // 如果删除了节点以后，将next节点前移\n      while (currentNode.next) {\n        if (this.compare.equal(currentNode.next.value, value)) {\n          deleteNode = currentNode.next;\n          currentNode.next = currentNode.next.next;\n        } else {\n          currentNode = currentNode.next;\n        }\n      }\n    } // 检查尾部节点是否被删除\n\n\n    if (this.compare.equal(this.tail.value, value)) {\n      this.tail = currentNode;\n    }\n\n    return deleteNode;\n  };\n  /**\n   * 查找指定的元素\n   * @param param0\n   */\n\n\n  LinkedList.prototype.find = function (_a) {\n    var _b = _a.value,\n        value = _b === void 0 ? undefined : _b,\n        _c = _a.callback,\n        callback = _c === void 0 ? undefined : _c;\n\n    if (!this.head) {\n      return null;\n    }\n\n    var currentNode = this.head;\n\n    while (currentNode) {\n      // 如果指定了 callback，则按指定的 callback 查找\n      if (callback && callback(currentNode.value)) {\n        return currentNode;\n      } // 如果指定了 value，则按 value 查找\n\n\n      if (value !== undefined && this.compare.equal(currentNode.value, value)) {\n        return currentNode;\n      }\n\n      currentNode = currentNode.next;\n    }\n\n    return null;\n  };\n  /**\n   * 删除尾部节点\n   */\n\n\n  LinkedList.prototype.deleteTail = function () {\n    var deletedTail = this.tail;\n\n    if (this.head === this.tail) {\n      // 链表中只有一个元素\n      this.head = null;\n      this.tail = null;\n      return deletedTail;\n    }\n\n    var currentNode = this.head;\n\n    while (currentNode.next) {\n      if (!currentNode.next.next) {\n        currentNode.next = null;\n      } else {\n        currentNode = currentNode.next;\n      }\n    }\n\n    this.tail = currentNode;\n    return deletedTail;\n  };\n  /**\n   * 删除头部节点\n   */\n\n\n  LinkedList.prototype.deleteHead = function () {\n    if (!this.head) {\n      return null;\n    }\n\n    var deletedHead = this.head;\n\n    if (this.head.next) {\n      this.head = this.head.next;\n    } else {\n      this.head = null;\n      this.tail = null;\n    }\n\n    return deletedHead;\n  };\n  /**\n   * 将一组元素转成链表中的节点\n   * @param values 链表中的元素\n   */\n\n\n  LinkedList.prototype.fromArray = function (values) {\n    var _this = this;\n\n    values.forEach(function (value) {\n      return _this.append(value);\n    });\n    return this;\n  };\n  /**\n   * 将链表中的节点转成数组元素\n   */\n\n\n  LinkedList.prototype.toArray = function () {\n    var nodes = [];\n    var currentNode = this.head;\n\n    while (currentNode) {\n      nodes.push(currentNode);\n      currentNode = currentNode.next;\n    }\n\n    return nodes;\n  };\n  /**\n   * 反转链表中的元素节点\n   */\n\n\n  LinkedList.prototype.reverse = function () {\n    var currentNode = this.head;\n    var prevNode = null;\n    var nextNode = null;\n\n    while (currentNode) {\n      // 存储下一个元素节点\n      nextNode = currentNode.next; // 更改当前节点的下一个节点，以便将它连接到上一个节点上\n\n      currentNode.next = prevNode; // 将 prevNode 和 currentNode 向前移动一步\n\n      prevNode = currentNode;\n      currentNode = nextNode;\n    }\n\n    this.tail = this.head;\n    this.head = prevNode;\n  };\n\n  LinkedList.prototype.toString = function (callback) {\n    if (callback === void 0) {\n      callback = undefined;\n    }\n\n    return this.toArray().map(function (node) {\n      return node.toString(callback);\n    }).toString();\n  };\n\n  return LinkedList;\n}();\n\nexport default LinkedList;","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/@antv/g6/es/algorithm/structs/linked-list/index.js"],"names":["Comparator","LinkedListNode","value","next","prototype","toString","callback","LinkedList","comparatorFunction","head","tail","compare","prepend","newNode","append","delete","deleteNode","equal","currentNode","find","_a","_b","undefined","_c","deleteTail","deletedTail","deleteHead","deletedHead","fromArray","values","_this","forEach","toArray","nodes","push","reverse","prevNode","nextNode","map","node"],"mappings":"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","sourcesContent":["import Comparator from '../../comparator';\n/**\n * 链表中单个元素节点\n */\n\nvar LinkedListNode =\n/** @class */\nfunction () {\n  function LinkedListNode(value, next) {\n    if (next === void 0) {\n      next = null;\n    }\n\n    this.value = value;\n    this.next = next;\n  }\n\n  LinkedListNode.prototype.toString = function (callback) {\n    return callback ? callback(this.value) : \"\" + this.value;\n  };\n\n  return LinkedListNode;\n}();\n\nexport { LinkedListNode };\n\nvar LinkedList =\n/** @class */\nfunction () {\n  function LinkedList(comparatorFunction) {\n    if (comparatorFunction === void 0) {\n      comparatorFunction = null;\n    }\n\n    this.head = null;\n    this.tail = null;\n    this.compare = new Comparator(comparatorFunction);\n  }\n  /**\n   * 将指定元素添加到链表头部\n   * @param value\n   */\n\n\n  LinkedList.prototype.prepend = function (value) {\n    // 在头部添加一个节点\n    var newNode = new LinkedListNode(value, this.head);\n    this.head = newNode;\n\n    if (!this.tail) {\n      this.tail = newNode;\n    }\n\n    return this;\n  };\n  /**\n   * 将指定元素添加到链表中\n   * @param value\n   */\n\n\n  LinkedList.prototype.append = function (value) {\n    var newNode = new LinkedListNode(value); // 如果不存在头节点，则将创建的新节点作为头节点\n\n    if (!this.head) {\n      this.head = newNode;\n      this.tail = newNode;\n      return this;\n    } // 将新节点附加到链表末尾\n\n\n    this.tail.next = newNode;\n    this.tail = newNode;\n    return this;\n  };\n  /**\n   * 删除指定元素\n   * @param value 要删除的元素\n   */\n\n\n  LinkedList.prototype.delete = function (value) {\n    if (!this.head) {\n      return null;\n    }\n\n    var deleteNode = null; // 如果删除的是头部元素，则将next作为头元素\n\n    while (this.head && this.compare.equal(this.head.value, value)) {\n      deleteNode = this.head;\n      this.head = this.head.next;\n    }\n\n    var currentNode = this.head;\n\n    if (currentNode !== null) {\n      // 如果删除了节点以后，将next节点前移\n      while (currentNode.next) {\n        if (this.compare.equal(currentNode.next.value, value)) {\n          deleteNode = currentNode.next;\n          currentNode.next = currentNode.next.next;\n        } else {\n          currentNode = currentNode.next;\n        }\n      }\n    } // 检查尾部节点是否被删除\n\n\n    if (this.compare.equal(this.tail.value, value)) {\n      this.tail = currentNode;\n    }\n\n    return deleteNode;\n  };\n  /**\n   * 查找指定的元素\n   * @param param0\n   */\n\n\n  LinkedList.prototype.find = function (_a) {\n    var _b = _a.value,\n        value = _b === void 0 ? undefined : _b,\n        _c = _a.callback,\n        callback = _c === void 0 ? undefined : _c;\n\n    if (!this.head) {\n      return null;\n    }\n\n    var currentNode = this.head;\n\n    while (currentNode) {\n      // 如果指定了 callback，则按指定的 callback 查找\n      if (callback && callback(currentNode.value)) {\n        return currentNode;\n      } // 如果指定了 value，则按 value 查找\n\n\n      if (value !== undefined && this.compare.equal(currentNode.value, value)) {\n        return currentNode;\n      }\n\n      currentNode = currentNode.next;\n    }\n\n    return null;\n  };\n  /**\n   * 删除尾部节点\n   */\n\n\n  LinkedList.prototype.deleteTail = function () {\n    var deletedTail = this.tail;\n\n    if (this.head === this.tail) {\n      // 链表中只有一个元素\n      this.head = null;\n      this.tail = null;\n      return deletedTail;\n    }\n\n    var currentNode = this.head;\n\n    while (currentNode.next) {\n      if (!currentNode.next.next) {\n        currentNode.next = null;\n      } else {\n        currentNode = currentNode.next;\n      }\n    }\n\n    this.tail = currentNode;\n    return deletedTail;\n  };\n  /**\n   * 删除头部节点\n   */\n\n\n  LinkedList.prototype.deleteHead = function () {\n    if (!this.head) {\n      return null;\n    }\n\n    var deletedHead = this.head;\n\n    if (this.head.next) {\n      this.head = this.head.next;\n    } else {\n      this.head = null;\n      this.tail = null;\n    }\n\n    return deletedHead;\n  };\n  /**\n   * 将一组元素转成链表中的节点\n   * @param values 链表中的元素\n   */\n\n\n  LinkedList.prototype.fromArray = function (values) {\n    var _this = this;\n\n    values.forEach(function (value) {\n      return _this.append(value);\n    });\n    return this;\n  };\n  /**\n   * 将链表中的节点转成数组元素\n   */\n\n\n  LinkedList.prototype.toArray = function () {\n    var nodes = [];\n    var currentNode = this.head;\n\n    while (currentNode) {\n      nodes.push(currentNode);\n      currentNode = currentNode.next;\n    }\n\n    return nodes;\n  };\n  /**\n   * 反转链表中的元素节点\n   */\n\n\n  LinkedList.prototype.reverse = function () {\n    var currentNode = this.head;\n    var prevNode = null;\n    var nextNode = null;\n\n    while (currentNode) {\n      // 存储下一个元素节点\n      nextNode = currentNode.next; // 更改当前节点的下一个节点，以便将它连接到上一个节点上\n\n      currentNode.next = prevNode; // 将 prevNode 和 currentNode 向前移动一步\n\n      prevNode = currentNode;\n      currentNode = nextNode;\n    }\n\n    this.tail = this.head;\n    this.head = prevNode;\n  };\n\n  LinkedList.prototype.toString = function (callback) {\n    if (callback === void 0) {\n      callback = undefined;\n    }\n\n    return this.toArray().map(function (node) {\n      return node.toString(callback);\n    }).toString();\n  };\n\n  return LinkedList;\n}();\n\nexport default LinkedList;"]},"metadata":{},"sourceType":"module"}