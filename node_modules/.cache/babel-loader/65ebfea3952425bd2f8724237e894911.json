{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.forEach = exports.sqrLen = exports.sqrDist = exports.dist = exports.div = exports.mul = exports.sub = exports.len = undefined;\nexports.create = create;\nexports.clone = clone;\nexports.fromValues = fromValues;\nexports.copy = copy;\nexports.set = set;\nexports.add = add;\nexports.subtract = subtract;\nexports.multiply = multiply;\nexports.divide = divide;\nexports.ceil = ceil;\nexports.floor = floor;\nexports.min = min;\nexports.max = max;\nexports.round = round;\nexports.scale = scale;\nexports.scaleAndAdd = scaleAndAdd;\nexports.distance = distance;\nexports.squaredDistance = squaredDistance;\nexports.length = length;\nexports.squaredLength = squaredLength;\nexports.negate = negate;\nexports.inverse = inverse;\nexports.normalize = normalize;\nexports.dot = dot;\nexports.cross = cross;\nexports.lerp = lerp;\nexports.random = random;\nexports.transformMat2 = transformMat2;\nexports.transformMat2d = transformMat2d;\nexports.transformMat3 = transformMat3;\nexports.transformMat4 = transformMat4;\nexports.rotate = rotate;\nexports.angle = angle;\nexports.str = str;\nexports.exactEquals = exactEquals;\nexports.equals = equals;\n\nvar _common = require('./common.js');\n\nvar glMatrix = _interopRequireWildcard(_common);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\n\n\nfunction create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {vec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\n\n\nfunction clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\n\n\nfunction fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the source vector\n * @returns {vec2} out\n */\n\n\nfunction copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\n\n\nfunction set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\n\n\nfunction add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\n\n\nfunction subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\n\n\nfunction multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\n\n\nfunction divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to ceil\n * @returns {vec2} out\n */\n\n\nfunction ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to floor\n * @returns {vec2} out\n */\n\n\nfunction floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\n\n\nfunction min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\n\n\nfunction max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to round\n * @returns {vec2} out\n */\n\n\nfunction round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\n\n\nfunction scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\n\n\nfunction scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} distance between a and b\n */\n\n\nfunction distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.sqrt(x * x + y * y);\n}\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\n\nfunction squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\n * Calculates the length of a vec2\n *\n * @param {vec2} a vector to calculate length of\n * @returns {Number} length of a\n */\n\n\nfunction length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.sqrt(x * x + y * y);\n}\n/**\n * Calculates the squared length of a vec2\n *\n * @param {vec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\n\nfunction squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to negate\n * @returns {vec2} out\n */\n\n\nfunction negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to invert\n * @returns {vec2} out\n */\n\n\nfunction inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to normalize\n * @returns {vec2} out\n */\n\n\nfunction normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n  }\n\n  return out;\n}\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} dot product of a and b\n */\n\n\nfunction dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec3} out\n */\n\n\nfunction cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec2} out\n */\n\n\nfunction lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\n\n\nfunction random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2} m matrix to transform with\n * @returns {vec2} out\n */\n\n\nfunction transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2d} m matrix to transform with\n * @returns {vec2} out\n */\n\n\nfunction transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat3} m matrix to transform with\n * @returns {vec2} out\n */\n\n\nfunction transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec2} out\n */\n\n\nfunction transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\n * Rotate a 2D vector\n * @param {vec2} out The receiving vec2\n * @param {vec2} a The vec2 point to rotate\n * @param {vec2} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec2} out\n */\n\n\nfunction rotate(out, a, b, c) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(c),\n      cosC = Math.cos(c); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\n * Get the angle between two 2D vectors\n * @param {vec2} a The first operand\n * @param {vec2} b The second operand\n * @returns {Number} The angle in radians\n */\n\n\nfunction angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1];\n  var len1 = x1 * x1 + y1 * y1;\n\n  if (len1 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len1 = 1 / Math.sqrt(len1);\n  }\n\n  var len2 = x2 * x2 + y2 * y2;\n\n  if (len2 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len2 = 1 / Math.sqrt(len2);\n  }\n\n  var cosine = (x1 * x2 + y1 * y2) * len1 * len2;\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {vec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\n\nfunction str(a) {\n  return 'vec2(' + a[0] + ', ' + a[1] + ')';\n}\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\n\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\n\nfunction equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\n * Alias for {@link vec2.length}\n * @function\n */\n\n\nvar len = exports.len = length;\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\n\nvar sub = exports.sub = subtract;\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\n\nvar mul = exports.mul = multiply;\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\n\nvar div = exports.div = divide;\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\n\nvar dist = exports.dist = distance;\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\n\nvar sqrDist = exports.sqrDist = squaredDistance;\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\n\nvar sqrLen = exports.sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nvar forEach = exports.forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i = void 0,\n        l = void 0;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/@antv/gl-matrix/lib/gl-matrix/vec2.js"],"names":["Object","defineProperty","exports","value","forEach","sqrLen","sqrDist","dist","div","mul","sub","len","undefined","create","clone","fromValues","copy","set","add","subtract","multiply","divide","ceil","floor","min","max","round","scale","scaleAndAdd","distance","squaredDistance","length","squaredLength","negate","inverse","normalize","dot","cross","lerp","random","transformMat2","transformMat2d","transformMat3","transformMat4","rotate","angle","str","exactEquals","equals","_common","require","glMatrix","_interopRequireWildcard","obj","__esModule","newObj","key","prototype","hasOwnProperty","call","default","out","ARRAY_TYPE","Float32Array","a","x","y","b","Math","sqrt","z","t","ax","ay","r","RANDOM","PI","cos","sin","m","c","p0","p1","sinC","cosC","x1","y1","x2","y2","len1","len2","cosine","acos","a0","a1","b0","b1","abs","EPSILON","vec","stride","offset","count","fn","arg","i","l"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.forEach = exports.sqrLen = exports.sqrDist = exports.dist = exports.div = exports.mul = exports.sub = exports.len = undefined;\nexports.create = create;\nexports.clone = clone;\nexports.fromValues = fromValues;\nexports.copy = copy;\nexports.set = set;\nexports.add = add;\nexports.subtract = subtract;\nexports.multiply = multiply;\nexports.divide = divide;\nexports.ceil = ceil;\nexports.floor = floor;\nexports.min = min;\nexports.max = max;\nexports.round = round;\nexports.scale = scale;\nexports.scaleAndAdd = scaleAndAdd;\nexports.distance = distance;\nexports.squaredDistance = squaredDistance;\nexports.length = length;\nexports.squaredLength = squaredLength;\nexports.negate = negate;\nexports.inverse = inverse;\nexports.normalize = normalize;\nexports.dot = dot;\nexports.cross = cross;\nexports.lerp = lerp;\nexports.random = random;\nexports.transformMat2 = transformMat2;\nexports.transformMat2d = transformMat2d;\nexports.transformMat3 = transformMat3;\nexports.transformMat4 = transformMat4;\nexports.rotate = rotate;\nexports.angle = angle;\nexports.str = str;\nexports.exactEquals = exactEquals;\nexports.equals = equals;\n\nvar _common = require('./common.js');\n\nvar glMatrix = _interopRequireWildcard(_common);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\nfunction create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n  return out;\n}\n\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {vec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\nfunction clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\nfunction fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the source vector\n * @returns {vec2} out\n */\nfunction copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\nfunction set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nfunction add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nfunction subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nfunction multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nfunction divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to ceil\n * @returns {vec2} out\n */\nfunction ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to floor\n * @returns {vec2} out\n */\nfunction floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nfunction min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nfunction max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to round\n * @returns {vec2} out\n */\nfunction round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\nfunction scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\nfunction scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} distance between a and b\n */\nfunction distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.sqrt(x * x + y * y);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\nfunction squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n\n/**\n * Calculates the length of a vec2\n *\n * @param {vec2} a vector to calculate length of\n * @returns {Number} length of a\n */\nfunction length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.sqrt(x * x + y * y);\n}\n\n/**\n * Calculates the squared length of a vec2\n *\n * @param {vec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nfunction squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to negate\n * @returns {vec2} out\n */\nfunction negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to invert\n * @returns {vec2} out\n */\nfunction inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to normalize\n * @returns {vec2} out\n */\nfunction normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} dot product of a and b\n */\nfunction dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec3} out\n */\nfunction cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec2} out\n */\nfunction lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\nfunction random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2} m matrix to transform with\n * @returns {vec2} out\n */\nfunction transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2d} m matrix to transform with\n * @returns {vec2} out\n */\nfunction transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat3} m matrix to transform with\n * @returns {vec2} out\n */\nfunction transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec2} out\n */\nfunction transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n\n/**\n * Rotate a 2D vector\n * @param {vec2} out The receiving vec2\n * @param {vec2} a The vec2 point to rotate\n * @param {vec2} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec2} out\n */\nfunction rotate(out, a, b, c) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(c),\n      cosC = Math.cos(c);\n\n  //perform rotation and translate to correct position\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n\n  return out;\n}\n\n/**\n * Get the angle between two 2D vectors\n * @param {vec2} a The first operand\n * @param {vec2} b The second operand\n * @returns {Number} The angle in radians\n */\nfunction angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1];\n\n  var len1 = x1 * x1 + y1 * y1;\n  if (len1 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len1 = 1 / Math.sqrt(len1);\n  }\n\n  var len2 = x2 * x2 + y2 * y2;\n  if (len2 > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len2 = 1 / Math.sqrt(len2);\n  }\n\n  var cosine = (x1 * x2 + y1 * y2) * len1 * len2;\n\n  if (cosine > 1.0) {\n    return 0;\n  } else if (cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nfunction str(a) {\n  return 'vec2(' + a[0] + ', ' + a[1] + ')';\n}\n\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nfunction equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n\n/**\n * Alias for {@link vec2.length}\n * @function\n */\nvar len = exports.len = length;\n\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\nvar sub = exports.sub = subtract;\n\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\nvar mul = exports.mul = multiply;\n\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\nvar div = exports.div = divide;\n\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\nvar dist = exports.dist = distance;\n\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\nvar sqrDist = exports.sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\nvar sqrLen = exports.sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nvar forEach = exports.forEach = function () {\n  var vec = create();\n\n  return function (a, stride, offset, count, fn, arg) {\n    var i = void 0,\n        l = void 0;\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();"]},"metadata":{},"sourceType":"script"}