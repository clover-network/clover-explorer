{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { registerShape } from '@antv/g2';\nregisterShape('polygon', 'circle', {\n  draw: function (cfg, group) {\n    var _a, _b;\n\n    var cx = cfg.x;\n    var cy = cfg.y;\n    var points = this.parsePoints(cfg.points);\n    var width = Math.abs(points[2].x - points[1].x);\n    var height = Math.abs(points[1].y - points[0].y);\n    var maxRadius = Math.min(width, height) / 2;\n    var value = Number(cfg.shape[1]);\n    var sizeRatio = Number(cfg.shape[2]);\n    var radiusRatio = Math.sqrt(sizeRatio);\n    var radius = maxRadius * radiusRatio * Math.sqrt(value);\n    var fill = ((_a = cfg.style) === null || _a === void 0 ? void 0 : _a.fill) || cfg.color || ((_b = cfg.defaultStyle) === null || _b === void 0 ? void 0 : _b.fill);\n    var polygon = group.addShape('circle', {\n      attrs: __assign(__assign(__assign({\n        x: cx,\n        y: cy,\n        r: radius\n      }, cfg.defaultStyle), cfg.style), {\n        fill: fill\n      })\n    });\n    return polygon;\n  }\n});","map":{"version":3,"sources":["../../../../src/plots/heatmap/shapes/circle.ts"],"names":[],"mappings":";AAAA,SAAS,aAAT,QAA8B,UAA9B;AAIA,aAAa,CAAC,SAAD,EAAY,QAAZ,EAAsB;AACjC,EAAA,IAAI,EAAJ,UAAK,GAAL,EAAqB,KAArB,EAAkC;;;AAChC,QAAM,EAAE,GAAG,GAAG,CAAC,CAAf;AACA,QAAM,EAAE,GAAG,GAAG,CAAC,CAAf;AAEA,QAAM,MAAM,GAAG,KAAK,WAAL,CAAiB,GAAG,CAAC,MAArB,CAAf;AACA,QAAM,KAAK,GAAG,IAAI,CAAC,GAAL,CAAS,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,GAAc,MAAM,CAAC,CAAD,CAAN,CAAU,CAAjC,CAAd;AACA,QAAM,MAAM,GAAG,IAAI,CAAC,GAAL,CAAS,MAAM,CAAC,CAAD,CAAN,CAAU,CAAV,GAAc,MAAM,CAAC,CAAD,CAAN,CAAU,CAAjC,CAAf;AACA,QAAM,SAAS,GAAG,IAAI,CAAC,GAAL,CAAS,KAAT,EAAgB,MAAhB,IAA0B,CAA5C;AAEA,QAAM,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,KAAJ,CAAU,CAAV,CAAD,CAApB;AACA,QAAM,SAAS,GAAG,MAAM,CAAC,GAAG,CAAC,KAAJ,CAAU,CAAV,CAAD,CAAxB;AACA,QAAM,WAAW,GAAG,IAAI,CAAC,IAAL,CAAU,SAAV,CAApB;AACA,QAAM,MAAM,GAAG,SAAS,GAAG,WAAZ,GAA0B,IAAI,CAAC,IAAL,CAAU,KAAV,CAAzC;AACA,QAAM,IAAI,GAAG,CAAA,CAAA,EAAA,GAAA,GAAG,CAAC,KAAJ,MAAS,IAAT,IAAS,EAAA,KAAA,KAAA,CAAT,GAAS,KAAA,CAAT,GAAS,EAAA,CAAE,IAAX,KAAmB,GAAG,CAAC,KAAvB,KAA4B,CAAA,EAAA,GAAI,GAAG,CAAC,YAAR,MAAoB,IAApB,IAAoB,EAAA,KAAA,KAAA,CAApB,GAAoB,KAAA,CAApB,GAAoB,EAAA,CAAE,IAAlD,CAAb;AACA,QAAM,OAAO,GAAG,KAAK,CAAC,QAAN,CAAe,QAAf,EAAyB;AACvC,MAAA,KAAK,EAAA,QAAA,CAAA,QAAA,CAAA,QAAA,CAAA;AACH,QAAA,CAAC,EAAE,EADA;AAEH,QAAA,CAAC,EAAE,EAFA;AAGH,QAAA,CAAC,EAAE;AAHA,OAAA,EAIA,GAAG,CAAC,YAJJ,CAAA,EAKA,GAAG,CAAC,KALJ,CAAA,EAKS;AACZ,QAAA,IAAI,EAAA;AADQ,OALT;AADkC,KAAzB,CAAhB;AAUA,WAAO,OAAP;AACD;AA1BgC,CAAtB,CAAb","sourcesContent":["import { registerShape } from '@antv/g2';\nimport { ShapeInfo } from '@antv/g2/lib/interface';\nimport { IGroup } from '@antv/g2/lib/dependents';\n\nregisterShape('polygon', 'circle', {\n  draw(cfg: ShapeInfo, group: IGroup) {\n    const cx = cfg.x as number;\n    const cy = cfg.y as number;\n\n    const points = this.parsePoints(cfg.points);\n    const width = Math.abs(points[2].x - points[1].x);\n    const height = Math.abs(points[1].y - points[0].y);\n    const maxRadius = Math.min(width, height) / 2;\n\n    const value = Number(cfg.shape[1]);\n    const sizeRatio = Number(cfg.shape[2]);\n    const radiusRatio = Math.sqrt(sizeRatio);\n    const radius = maxRadius * radiusRatio * Math.sqrt(value);\n    const fill = cfg.style?.fill || cfg.color || cfg.defaultStyle?.fill;\n    const polygon = group.addShape('circle', {\n      attrs: {\n        x: cx,\n        y: cy,\n        r: radius,\n        ...cfg.defaultStyle,\n        ...cfg.style,\n        fill,\n      },\n    });\n    return polygon;\n  },\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}