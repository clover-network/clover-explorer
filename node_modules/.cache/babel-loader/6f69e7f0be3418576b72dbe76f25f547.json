{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { deepMix, clone } from '@antv/util/lib';\nimport Global from '../global';\nexport default {\n  getDefaultCfg: function getDefaultCfg() {\n    return {\n      updateEdge: true,\n      delegateStyle: {},\n      // 是否开启delegate\n      enableDelegate: false,\n      // 拖动节点过程中是否只改变 Combo 的大小，而不改变其结构\n      onlyChangeComboSize: false,\n      // 拖动过程中目标 combo 状态样式\n      comboActiveState: '',\n      selectedState: 'selected'\n    };\n  },\n  getEvents: function getEvents() {\n    return {\n      'node:dragstart': 'onDragStart',\n      'node:drag': 'onDrag',\n      'node:dragend': 'onDragEnd',\n      'combo:dragenter': 'onDragEnter',\n      'combo:dragleave': 'onDragLeave',\n      'combo:drop': 'onDropCombo',\n      'node:drop': 'onDropNode',\n      'canvas:drop': 'onDropCanvas'\n    };\n  },\n  validationCombo: function validationCombo(item) {\n    if (!this.origin || !item || item.destroyed) {\n      return false;\n    }\n\n    var type = item.getType();\n\n    if (type !== 'combo') {\n      return false;\n    }\n\n    return true;\n  },\n\n  /**\n   * 开始拖动节点\n   * @param evt\n   */\n  onDragStart: function onDragStart(evt) {\n    var _this = this;\n\n    if (!this.shouldBegin.call(this, evt)) {\n      return;\n    }\n\n    var item = evt.item;\n\n    if (!item || item.destroyed || item.hasLocked()) {\n      return;\n    } // 拖动时，设置拖动元素的 capture 为false，则不拾取拖动的元素\n\n\n    var group = item.getContainer();\n    group.set('capture', false); // 如果拖动的target 是linkPoints / anchorPoints 则不允许拖动\n\n    var target = evt.target;\n\n    if (target) {\n      var isAnchorPoint = target.get('isAnchorPoint');\n\n      if (isAnchorPoint) {\n        return;\n      }\n    }\n\n    var graph = this.graph;\n    this.targets = []; // 将节点拖入到指定的 Combo\n\n    this.targetCombo = null; // 获取所有选中的元素\n\n    var nodes = graph.findAllByState('node', this.selectedState);\n    var currentNodeId = item.get('id'); // 当前拖动的节点是否是选中的节点\n\n    var dragNodes = nodes.filter(function (node) {\n      var nodeId = node.get('id');\n      return currentNodeId === nodeId;\n    }); // 只拖动当前节点\n\n    if (dragNodes.length === 0) {\n      this.targets.push(item);\n    } else if (nodes.length > 1) {\n      // 拖动多个节点\n      nodes.forEach(function (node) {\n        var locked = node.hasLocked();\n\n        if (!locked) {\n          _this.targets.push(node);\n        }\n      });\n    } else {\n      this.targets.push(item);\n    }\n\n    var beforeDragNodes = [];\n    this.targets.forEach(function (t) {\n      beforeDragNodes.push(clone(t.getModel()));\n    });\n    this.set('beforeDragNodes', beforeDragNodes);\n    this.origin = {\n      x: evt.x,\n      y: evt.y\n    };\n    this.point = {};\n    this.originPoint = {};\n  },\n\n  /**\n   * 持续拖动节点\n   * @param evt\n   */\n  onDrag: function onDrag(evt) {\n    var _this = this;\n\n    if (!this.origin) {\n      return;\n    }\n\n    if (!this.shouldUpdate(this, evt)) {\n      return;\n    }\n\n    if (this.get('enableDelegate')) {\n      this.updateDelegate(evt);\n    } else {\n      this.targets.map(function (target) {\n        _this.update(target, evt);\n      });\n    }\n  },\n\n  /**\n   * 拖动结束，设置拖动元素capture为true，更新元素位置，如果是拖动涉及到 combo，则更新 combo 结构\n   * @param evt\n   */\n  onDragEnd: function onDragEnd(evt) {\n    if (!this.origin || !this.shouldEnd.call(this, evt)) {\n      return;\n    } // 拖动结束后，设置拖动元素 group 的 capture 为 true，允许拾取拖动元素\n\n\n    var item = evt.item;\n\n    if (item) {\n      var group = item.getContainer();\n      group.set('capture', true);\n    }\n\n    if (this.delegateRect) {\n      this.delegateRect.remove();\n      this.delegateRect = null;\n    }\n\n    this.updatePositions(evt);\n    var graph = this.graph; // 拖动结束后，入栈\n\n    if (graph.get('enabledStack')) {\n      var stackData_1 = {\n        before: {\n          nodes: this.get('beforeDragNodes'),\n          edges: [],\n          combos: []\n        },\n        after: {\n          nodes: [],\n          edges: [],\n          combos: []\n        }\n      };\n      this.targets.forEach(function (target) {\n        stackData_1.after.nodes.push(target.getModel());\n      });\n      graph.pushStack('update', clone(stackData_1));\n    } // 拖动结束后emit事件，将当前操作的节点抛出去，目标节点为null\n\n\n    graph.emit('dragnodeend', {\n      items: this.targets,\n      targetItem: null\n    });\n    this.point = {};\n    this.origin = null;\n    this.originPoint = {};\n    this.targets.length = 0;\n    this.targetCombo = null;\n  },\n\n  /**\n   * 拖动过程中将节点放置到 combo 上\n   * @param evt\n   */\n  onDropCombo: function onDropCombo(evt) {\n    var item = evt.item;\n    if (!this.validationCombo(item)) return;\n    this.updatePositions(evt);\n    var graph = this.graph;\n\n    if (this.comboActiveState) {\n      graph.setItemState(item, this.comboActiveState, false);\n    }\n\n    this.targetCombo = item; // 拖动结束后是动态改变 Combo 大小还是将节点从 Combo 中删除\n\n    if (this.onlyChangeComboSize) {\n      // 拖动节点结束后，动态改变 Combo 的大小\n      graph.updateCombos();\n    } else {\n      var targetComboModel_1 = item.getModel();\n      this.targets.map(function (node) {\n        var nodeModel = node.getModel();\n\n        if (nodeModel.comboId !== targetComboModel_1.id) {\n          graph.updateComboTree(node, targetComboModel_1.id);\n        }\n      });\n      graph.updateCombo(item);\n    } // 将节点拖动到 combo 上面，emit事件抛出当前操作的节点及目标 combo\n\n\n    graph.emit('dragnodeend', {\n      items: this.targets,\n      targetItem: this.targetCombo\n    });\n  },\n  onDropCanvas: function onDropCanvas(evt) {\n    var graph = this.graph;\n    if (!this.targets || this.targets.length === 0) return;\n    this.updatePositions(evt);\n\n    if (this.onlyChangeComboSize) {\n      // 拖动节点结束后，动态改变 Combo 的大小\n      graph.updateCombos();\n    } else {\n      this.targets.map(function (node) {\n        // 拖动的节点有 comboId，即是从其他 combo 中拖出时才处理\n        var model = node.getModel();\n\n        if (model.comboId) {\n          graph.updateComboTree(node);\n        }\n      });\n    }\n  },\n\n  /**\n   * 拖动放置到某个 combo 中的子 node 上\n   * @param evt\n   */\n  onDropNode: function onDropNode(evt) {\n    if (!this.targets || this.targets.length === 0) return;\n    var self = this;\n    var item = evt.item;\n    this.updatePositions(evt);\n    var graph = self.graph;\n    var comboId = item.getModel().comboId;\n\n    if (comboId) {\n      var combo = graph.findById(comboId);\n\n      if (self.comboActiveState) {\n        graph.setItemState(combo, self.comboActiveState, false);\n      }\n\n      this.targets.map(function (node) {\n        var nodeModel = node.getModel();\n\n        if (comboId !== nodeModel.comboId) {\n          graph.updateComboTree(node, comboId);\n        }\n      });\n      graph.updateCombo(combo);\n    } else {\n      this.targets.map(function (node) {\n        var model = node.getModel();\n\n        if (model.comboId) {\n          graph.updateComboTree(node);\n        }\n      });\n    } // 将节点拖动到另外个节点上面，emit 事件抛出当前操作的节点及目标节点\n\n\n    graph.emit('dragnodeend', {\n      items: this.targets,\n      targetItem: item\n    });\n  },\n\n  /**\n   * 将节点拖入到 Combo 中\n   * @param evt\n   */\n  onDragEnter: function onDragEnter(evt) {\n    var item = evt.item;\n    if (!this.validationCombo(item)) return;\n    var graph = this.graph;\n\n    if (this.comboActiveState) {\n      graph.setItemState(item, this.comboActiveState, true);\n    }\n  },\n\n  /**\n   * 将节点从 Combo 中拖出\n   * @param evt\n   */\n  onDragLeave: function onDragLeave(evt) {\n    var item = evt.item;\n    if (!this.validationCombo(item)) return;\n    var graph = this.graph;\n\n    if (this.comboActiveState) {\n      graph.setItemState(item, this.comboActiveState, false);\n    }\n  },\n  updatePositions: function updatePositions(evt) {\n    var _this = this;\n\n    if (!this.targets || this.targets.length === 0) return; // 当开启 delegate 时，拖动结束后需要更新所有已选中节点的位置\n\n    if (this.get('enableDelegate')) {\n      this.targets.map(function (node) {\n        return _this.update(node, evt);\n      });\n    }\n  },\n\n  /**\n   * 更新节点\n   * @param item 拖动的节点实例\n   * @param evt\n   */\n  update: function update(item, evt) {\n    var origin = this.origin;\n    var model = item.get('model');\n    var nodeId = item.get('id');\n\n    if (!this.point[nodeId]) {\n      this.point[nodeId] = {\n        x: model.x || 0,\n        y: model.y || 0\n      };\n    }\n\n    var x = evt.x - origin.x + this.point[nodeId].x;\n    var y = evt.y - origin.y + this.point[nodeId].y;\n    var pos = {\n      x: x,\n      y: y\n    };\n\n    if (this.get('updateEdge')) {\n      this.graph.updateItem(item, pos, false);\n    } else {\n      item.updatePosition(pos);\n    }\n  },\n\n  /**\n   * 更新拖动元素时的delegate\n   * @param {Event} e 事件句柄\n   * @param {number} x 拖动单个元素时候的x坐标\n   * @param {number} y 拖动单个元素时候的y坐标\n   */\n  updateDelegate: function updateDelegate(e) {\n    var graph = this.graph;\n\n    if (!this.delegateRect) {\n      // 拖动多个\n      var parent_1 = this.graph.get('group');\n      var attrs = deepMix({}, Global.delegateStyle, this.delegateStyle);\n\n      var _a = this.calculationGroupPosition(e),\n          cx = _a.x,\n          cy = _a.y,\n          width = _a.width,\n          height = _a.height,\n          minX = _a.minX,\n          minY = _a.minY;\n\n      this.originPoint = {\n        x: cx,\n        y: cy,\n        width: width,\n        height: height,\n        minX: minX,\n        minY: minY\n      }; // model上的x, y是相对于图形中心的，delegateShape是g实例，x,y是绝对坐标\n\n      this.delegateRect = parent_1.addShape('rect', {\n        attrs: __assign({\n          width: width,\n          height: height,\n          x: cx,\n          y: cy\n        }, attrs),\n        name: 'rect-delegate-shape'\n      });\n      this.delegateRect.set('capture', false);\n    } else {\n      var clientX = e.x - this.origin.x + this.originPoint.minX;\n      var clientY = e.y - this.origin.y + this.originPoint.minY;\n      this.delegateRect.attr({\n        x: clientX,\n        y: clientY\n      });\n    }\n  },\n\n  /**\n   * 计算delegate位置，包括左上角左边及宽度和高度\n   * @memberof ItemGroup\n   * @return {object} 计算出来的delegate坐标信息及宽高\n   */\n  calculationGroupPosition: function calculationGroupPosition(evt) {\n    var graph = this.graph;\n    var nodes = graph.findAllByState('node', this.selectedState);\n\n    if (nodes.length === 0) {\n      nodes.push(evt.item);\n    }\n\n    var minx = Infinity;\n    var maxx = -Infinity;\n    var miny = Infinity;\n    var maxy = -Infinity; // 获取已节点的所有最大最小x y值\n\n    for (var i = 0; i < nodes.length; i++) {\n      var element = nodes[i];\n      var bbox = element.getBBox();\n      var minX = bbox.minX,\n          minY = bbox.minY,\n          maxX = bbox.maxX,\n          maxY = bbox.maxY;\n\n      if (minX < minx) {\n        minx = minX;\n      }\n\n      if (minY < miny) {\n        miny = minY;\n      }\n\n      if (maxX > maxx) {\n        maxx = maxX;\n      }\n\n      if (maxY > maxy) {\n        maxy = maxY;\n      }\n    }\n\n    var x = Math.floor(minx);\n    var y = Math.floor(miny);\n    var width = Math.ceil(maxx) - Math.floor(minx);\n    var height = Math.ceil(maxy) - Math.floor(miny);\n    return {\n      x: x,\n      y: y,\n      width: width,\n      height: height,\n      minX: minx,\n      minY: miny\n    };\n  }\n};","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/@antv/g6/es/behavior/drag-node.js"],"names":["__assign","deepMix","clone","Global","getDefaultCfg","updateEdge","delegateStyle","enableDelegate","onlyChangeComboSize","comboActiveState","selectedState","getEvents","validationCombo","item","origin","destroyed","type","getType","onDragStart","evt","_this","shouldBegin","call","hasLocked","group","getContainer","set","target","isAnchorPoint","get","graph","targets","targetCombo","nodes","findAllByState","currentNodeId","dragNodes","filter","node","nodeId","length","push","forEach","locked","beforeDragNodes","t","getModel","x","y","point","originPoint","onDrag","shouldUpdate","updateDelegate","map","update","onDragEnd","shouldEnd","delegateRect","remove","updatePositions","stackData_1","before","edges","combos","after","pushStack","emit","items","targetItem","onDropCombo","setItemState","updateCombos","targetComboModel_1","nodeModel","comboId","id","updateComboTree","updateCombo","onDropCanvas","model","onDropNode","self","combo","findById","onDragEnter","onDragLeave","pos","updateItem","updatePosition","e","parent_1","attrs","_a","calculationGroupPosition","cx","cy","width","height","minX","minY","addShape","name","clientX","clientY","attr","minx","Infinity","maxx","miny","maxy","i","element","bbox","getBBox","maxX","maxY","Math","floor","ceil"],"mappings":"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","sourcesContent":["import { __assign } from \"tslib\";\nimport { deepMix, clone } from '@antv/util/lib';\nimport Global from '../global';\nexport default {\n  getDefaultCfg: function getDefaultCfg() {\n    return {\n      updateEdge: true,\n      delegateStyle: {},\n      // 是否开启delegate\n      enableDelegate: false,\n      // 拖动节点过程中是否只改变 Combo 的大小，而不改变其结构\n      onlyChangeComboSize: false,\n      // 拖动过程中目标 combo 状态样式\n      comboActiveState: '',\n      selectedState: 'selected'\n    };\n  },\n  getEvents: function getEvents() {\n    return {\n      'node:dragstart': 'onDragStart',\n      'node:drag': 'onDrag',\n      'node:dragend': 'onDragEnd',\n      'combo:dragenter': 'onDragEnter',\n      'combo:dragleave': 'onDragLeave',\n      'combo:drop': 'onDropCombo',\n      'node:drop': 'onDropNode',\n      'canvas:drop': 'onDropCanvas'\n    };\n  },\n  validationCombo: function validationCombo(item) {\n    if (!this.origin || !item || item.destroyed) {\n      return false;\n    }\n\n    var type = item.getType();\n\n    if (type !== 'combo') {\n      return false;\n    }\n\n    return true;\n  },\n\n  /**\n   * 开始拖动节点\n   * @param evt\n   */\n  onDragStart: function onDragStart(evt) {\n    var _this = this;\n\n    if (!this.shouldBegin.call(this, evt)) {\n      return;\n    }\n\n    var item = evt.item;\n\n    if (!item || item.destroyed || item.hasLocked()) {\n      return;\n    } // 拖动时，设置拖动元素的 capture 为false，则不拾取拖动的元素\n\n\n    var group = item.getContainer();\n    group.set('capture', false); // 如果拖动的target 是linkPoints / anchorPoints 则不允许拖动\n\n    var target = evt.target;\n\n    if (target) {\n      var isAnchorPoint = target.get('isAnchorPoint');\n\n      if (isAnchorPoint) {\n        return;\n      }\n    }\n\n    var graph = this.graph;\n    this.targets = []; // 将节点拖入到指定的 Combo\n\n    this.targetCombo = null; // 获取所有选中的元素\n\n    var nodes = graph.findAllByState('node', this.selectedState);\n    var currentNodeId = item.get('id'); // 当前拖动的节点是否是选中的节点\n\n    var dragNodes = nodes.filter(function (node) {\n      var nodeId = node.get('id');\n      return currentNodeId === nodeId;\n    }); // 只拖动当前节点\n\n    if (dragNodes.length === 0) {\n      this.targets.push(item);\n    } else if (nodes.length > 1) {\n      // 拖动多个节点\n      nodes.forEach(function (node) {\n        var locked = node.hasLocked();\n\n        if (!locked) {\n          _this.targets.push(node);\n        }\n      });\n    } else {\n      this.targets.push(item);\n    }\n\n    var beforeDragNodes = [];\n    this.targets.forEach(function (t) {\n      beforeDragNodes.push(clone(t.getModel()));\n    });\n    this.set('beforeDragNodes', beforeDragNodes);\n    this.origin = {\n      x: evt.x,\n      y: evt.y\n    };\n    this.point = {};\n    this.originPoint = {};\n  },\n\n  /**\n   * 持续拖动节点\n   * @param evt\n   */\n  onDrag: function onDrag(evt) {\n    var _this = this;\n\n    if (!this.origin) {\n      return;\n    }\n\n    if (!this.shouldUpdate(this, evt)) {\n      return;\n    }\n\n    if (this.get('enableDelegate')) {\n      this.updateDelegate(evt);\n    } else {\n      this.targets.map(function (target) {\n        _this.update(target, evt);\n      });\n    }\n  },\n\n  /**\n   * 拖动结束，设置拖动元素capture为true，更新元素位置，如果是拖动涉及到 combo，则更新 combo 结构\n   * @param evt\n   */\n  onDragEnd: function onDragEnd(evt) {\n    if (!this.origin || !this.shouldEnd.call(this, evt)) {\n      return;\n    } // 拖动结束后，设置拖动元素 group 的 capture 为 true，允许拾取拖动元素\n\n\n    var item = evt.item;\n\n    if (item) {\n      var group = item.getContainer();\n      group.set('capture', true);\n    }\n\n    if (this.delegateRect) {\n      this.delegateRect.remove();\n      this.delegateRect = null;\n    }\n\n    this.updatePositions(evt);\n    var graph = this.graph; // 拖动结束后，入栈\n\n    if (graph.get('enabledStack')) {\n      var stackData_1 = {\n        before: {\n          nodes: this.get('beforeDragNodes'),\n          edges: [],\n          combos: []\n        },\n        after: {\n          nodes: [],\n          edges: [],\n          combos: []\n        }\n      };\n      this.targets.forEach(function (target) {\n        stackData_1.after.nodes.push(target.getModel());\n      });\n      graph.pushStack('update', clone(stackData_1));\n    } // 拖动结束后emit事件，将当前操作的节点抛出去，目标节点为null\n\n\n    graph.emit('dragnodeend', {\n      items: this.targets,\n      targetItem: null\n    });\n    this.point = {};\n    this.origin = null;\n    this.originPoint = {};\n    this.targets.length = 0;\n    this.targetCombo = null;\n  },\n\n  /**\n   * 拖动过程中将节点放置到 combo 上\n   * @param evt\n   */\n  onDropCombo: function onDropCombo(evt) {\n    var item = evt.item;\n    if (!this.validationCombo(item)) return;\n    this.updatePositions(evt);\n    var graph = this.graph;\n\n    if (this.comboActiveState) {\n      graph.setItemState(item, this.comboActiveState, false);\n    }\n\n    this.targetCombo = item; // 拖动结束后是动态改变 Combo 大小还是将节点从 Combo 中删除\n\n    if (this.onlyChangeComboSize) {\n      // 拖动节点结束后，动态改变 Combo 的大小\n      graph.updateCombos();\n    } else {\n      var targetComboModel_1 = item.getModel();\n      this.targets.map(function (node) {\n        var nodeModel = node.getModel();\n\n        if (nodeModel.comboId !== targetComboModel_1.id) {\n          graph.updateComboTree(node, targetComboModel_1.id);\n        }\n      });\n      graph.updateCombo(item);\n    } // 将节点拖动到 combo 上面，emit事件抛出当前操作的节点及目标 combo\n\n\n    graph.emit('dragnodeend', {\n      items: this.targets,\n      targetItem: this.targetCombo\n    });\n  },\n  onDropCanvas: function onDropCanvas(evt) {\n    var graph = this.graph;\n    if (!this.targets || this.targets.length === 0) return;\n    this.updatePositions(evt);\n\n    if (this.onlyChangeComboSize) {\n      // 拖动节点结束后，动态改变 Combo 的大小\n      graph.updateCombos();\n    } else {\n      this.targets.map(function (node) {\n        // 拖动的节点有 comboId，即是从其他 combo 中拖出时才处理\n        var model = node.getModel();\n\n        if (model.comboId) {\n          graph.updateComboTree(node);\n        }\n      });\n    }\n  },\n\n  /**\n   * 拖动放置到某个 combo 中的子 node 上\n   * @param evt\n   */\n  onDropNode: function onDropNode(evt) {\n    if (!this.targets || this.targets.length === 0) return;\n    var self = this;\n    var item = evt.item;\n    this.updatePositions(evt);\n    var graph = self.graph;\n    var comboId = item.getModel().comboId;\n\n    if (comboId) {\n      var combo = graph.findById(comboId);\n\n      if (self.comboActiveState) {\n        graph.setItemState(combo, self.comboActiveState, false);\n      }\n\n      this.targets.map(function (node) {\n        var nodeModel = node.getModel();\n\n        if (comboId !== nodeModel.comboId) {\n          graph.updateComboTree(node, comboId);\n        }\n      });\n      graph.updateCombo(combo);\n    } else {\n      this.targets.map(function (node) {\n        var model = node.getModel();\n\n        if (model.comboId) {\n          graph.updateComboTree(node);\n        }\n      });\n    } // 将节点拖动到另外个节点上面，emit 事件抛出当前操作的节点及目标节点\n\n\n    graph.emit('dragnodeend', {\n      items: this.targets,\n      targetItem: item\n    });\n  },\n\n  /**\n   * 将节点拖入到 Combo 中\n   * @param evt\n   */\n  onDragEnter: function onDragEnter(evt) {\n    var item = evt.item;\n    if (!this.validationCombo(item)) return;\n    var graph = this.graph;\n\n    if (this.comboActiveState) {\n      graph.setItemState(item, this.comboActiveState, true);\n    }\n  },\n\n  /**\n   * 将节点从 Combo 中拖出\n   * @param evt\n   */\n  onDragLeave: function onDragLeave(evt) {\n    var item = evt.item;\n    if (!this.validationCombo(item)) return;\n    var graph = this.graph;\n\n    if (this.comboActiveState) {\n      graph.setItemState(item, this.comboActiveState, false);\n    }\n  },\n  updatePositions: function updatePositions(evt) {\n    var _this = this;\n\n    if (!this.targets || this.targets.length === 0) return; // 当开启 delegate 时，拖动结束后需要更新所有已选中节点的位置\n\n    if (this.get('enableDelegate')) {\n      this.targets.map(function (node) {\n        return _this.update(node, evt);\n      });\n    }\n  },\n\n  /**\n   * 更新节点\n   * @param item 拖动的节点实例\n   * @param evt\n   */\n  update: function update(item, evt) {\n    var origin = this.origin;\n    var model = item.get('model');\n    var nodeId = item.get('id');\n\n    if (!this.point[nodeId]) {\n      this.point[nodeId] = {\n        x: model.x || 0,\n        y: model.y || 0\n      };\n    }\n\n    var x = evt.x - origin.x + this.point[nodeId].x;\n    var y = evt.y - origin.y + this.point[nodeId].y;\n    var pos = {\n      x: x,\n      y: y\n    };\n\n    if (this.get('updateEdge')) {\n      this.graph.updateItem(item, pos, false);\n    } else {\n      item.updatePosition(pos);\n    }\n  },\n\n  /**\n   * 更新拖动元素时的delegate\n   * @param {Event} e 事件句柄\n   * @param {number} x 拖动单个元素时候的x坐标\n   * @param {number} y 拖动单个元素时候的y坐标\n   */\n  updateDelegate: function updateDelegate(e) {\n    var graph = this.graph;\n\n    if (!this.delegateRect) {\n      // 拖动多个\n      var parent_1 = this.graph.get('group');\n      var attrs = deepMix({}, Global.delegateStyle, this.delegateStyle);\n\n      var _a = this.calculationGroupPosition(e),\n          cx = _a.x,\n          cy = _a.y,\n          width = _a.width,\n          height = _a.height,\n          minX = _a.minX,\n          minY = _a.minY;\n\n      this.originPoint = {\n        x: cx,\n        y: cy,\n        width: width,\n        height: height,\n        minX: minX,\n        minY: minY\n      }; // model上的x, y是相对于图形中心的，delegateShape是g实例，x,y是绝对坐标\n\n      this.delegateRect = parent_1.addShape('rect', {\n        attrs: __assign({\n          width: width,\n          height: height,\n          x: cx,\n          y: cy\n        }, attrs),\n        name: 'rect-delegate-shape'\n      });\n      this.delegateRect.set('capture', false);\n    } else {\n      var clientX = e.x - this.origin.x + this.originPoint.minX;\n      var clientY = e.y - this.origin.y + this.originPoint.minY;\n      this.delegateRect.attr({\n        x: clientX,\n        y: clientY\n      });\n    }\n  },\n\n  /**\n   * 计算delegate位置，包括左上角左边及宽度和高度\n   * @memberof ItemGroup\n   * @return {object} 计算出来的delegate坐标信息及宽高\n   */\n  calculationGroupPosition: function calculationGroupPosition(evt) {\n    var graph = this.graph;\n    var nodes = graph.findAllByState('node', this.selectedState);\n\n    if (nodes.length === 0) {\n      nodes.push(evt.item);\n    }\n\n    var minx = Infinity;\n    var maxx = -Infinity;\n    var miny = Infinity;\n    var maxy = -Infinity; // 获取已节点的所有最大最小x y值\n\n    for (var i = 0; i < nodes.length; i++) {\n      var element = nodes[i];\n      var bbox = element.getBBox();\n      var minX = bbox.minX,\n          minY = bbox.minY,\n          maxX = bbox.maxX,\n          maxY = bbox.maxY;\n\n      if (minX < minx) {\n        minx = minX;\n      }\n\n      if (minY < miny) {\n        miny = minY;\n      }\n\n      if (maxX > maxx) {\n        maxx = maxX;\n      }\n\n      if (maxY > maxy) {\n        maxy = maxY;\n      }\n    }\n\n    var x = Math.floor(minx);\n    var y = Math.floor(miny);\n    var width = Math.ceil(maxx) - Math.floor(minx);\n    var height = Math.ceil(maxy) - Math.floor(miny);\n    return {\n      x: x,\n      y: y,\n      width: width,\n      height: height,\n      minX: minx,\n      minY: miny\n    };\n  }\n};"]},"metadata":{},"sourceType":"module"}