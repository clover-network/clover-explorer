{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\"use strict\";\n\nexports.__esModule = true;\n\nvar util_1 = require(\"zrender/lib/core/util\");\n\nvar makeStyleMapper_1 = require(\"../model/mixin/makeStyleMapper\");\n\nvar itemStyle_1 = require(\"../model/mixin/itemStyle\");\n\nvar lineStyle_1 = require(\"../model/mixin/lineStyle\");\n\nvar Model_1 = require(\"../model/Model\");\n\nvar model_1 = require(\"../util/model\");\n\nvar inner = model_1.makeInner();\nvar defaultStyleMappers = {\n  itemStyle: makeStyleMapper_1[\"default\"](itemStyle_1.ITEM_STYLE_KEY_MAP, true),\n  lineStyle: makeStyleMapper_1[\"default\"](lineStyle_1.LINE_STYLE_KEY_MAP, true)\n};\nvar defaultColorKey = {\n  lineStyle: 'stroke',\n  itemStyle: 'fill'\n};\n\nfunction getStyleMapper(seriesModel, stylePath) {\n  var styleMapper = seriesModel.visualStyleMapper || defaultStyleMappers[stylePath];\n\n  if (!styleMapper) {\n    console.warn(\"Unkown style type '\" + stylePath + \"'.\");\n    return defaultStyleMappers.itemStyle;\n  }\n\n  return styleMapper;\n}\n\nfunction getDefaultColorKey(seriesModel, stylePath) {\n  var colorKey = seriesModel.visualDrawType || defaultColorKey[stylePath];\n\n  if (!colorKey) {\n    console.warn(\"Unkown style type '\" + stylePath + \"'.\");\n    return 'fill';\n  }\n\n  return colorKey;\n}\n\nvar seriesStyleTask = {\n  createOnAllSeries: true,\n  performRawSeries: true,\n  reset: function (seriesModel, ecModel) {\n    var data = seriesModel.getData();\n    var stylePath = seriesModel.visualStyleAccessPath || 'itemStyle';\n    var styleModel = seriesModel.getModel(stylePath);\n    var getStyle = getStyleMapper(seriesModel, stylePath);\n    var globalStyle = getStyle(styleModel);\n    var decalOption = styleModel.getShallow('decal');\n\n    if (decalOption) {\n      data.setVisual('decal', decalOption);\n      decalOption.dirty = true;\n    }\n\n    var colorKey = getDefaultColorKey(seriesModel, stylePath);\n    var color = globalStyle[colorKey];\n    var colorCallback = util_1.isFunction(color) ? color : null;\n\n    if (!globalStyle[colorKey] || colorCallback) {\n      globalStyle[colorKey] = seriesModel.getColorFromPalette(seriesModel.name, null, ecModel.getSeriesCount());\n      data.setVisual('colorFromPalette', true);\n    }\n\n    data.setVisual('style', globalStyle);\n    data.setVisual('drawType', colorKey);\n\n    if (!ecModel.isSeriesFiltered(seriesModel) && colorCallback) {\n      data.setVisual('colorFromPalette', false);\n      return {\n        dataEach: function (data, idx) {\n          var dataParams = seriesModel.getDataParams(idx);\n          var itemStyle = util_1.extend({}, globalStyle);\n          itemStyle[colorKey] = colorCallback(dataParams);\n          data.setItemVisual(idx, 'style', itemStyle);\n        }\n      };\n    }\n  }\n};\nexports.seriesStyleTask = seriesStyleTask;\nvar sharedModel = new Model_1[\"default\"]();\nvar dataStyleTask = {\n  createOnAllSeries: true,\n  performRawSeries: true,\n  reset: function (seriesModel, ecModel) {\n    if (seriesModel.ignoreStyleOnData || ecModel.isSeriesFiltered(seriesModel)) {\n      return;\n    }\n\n    var data = seriesModel.getData();\n    var stylePath = seriesModel.visualStyleAccessPath || 'itemStyle';\n    var getStyle = getStyleMapper(seriesModel, stylePath);\n    var colorKey = data.getVisual('drawType');\n    return {\n      dataEach: data.hasItemOption ? function (data, idx) {\n        var rawItem = data.getRawDataItem(idx);\n\n        if (rawItem && rawItem[stylePath]) {\n          sharedModel.option = rawItem[stylePath];\n          var style = getStyle(sharedModel);\n          var existsStyle = data.ensureUniqueItemVisual(idx, 'style');\n          util_1.extend(existsStyle, style);\n\n          if (sharedModel.option.decal) {\n            data.setItemVisual(idx, 'decal', sharedModel.option.decal);\n            sharedModel.option.decal.dirty = true;\n          }\n\n          if (colorKey in style) {\n            data.setItemVisual(idx, 'colorFromPalette', false);\n          }\n        }\n      } : null\n    };\n  }\n};\nexports.dataStyleTask = dataStyleTask;\nvar dataColorPaletteTask = {\n  performRawSeries: true,\n  overallReset: function (ecModel) {\n    var paletteScopeGroupByType = util_1.createHashMap();\n    ecModel.eachSeries(function (seriesModel) {\n      if (!seriesModel.useColorPaletteOnData) {\n        return;\n      }\n\n      var colorScope = paletteScopeGroupByType.get(seriesModel.type);\n\n      if (!colorScope) {\n        colorScope = {};\n        paletteScopeGroupByType.set(seriesModel.type, colorScope);\n      }\n\n      inner(seriesModel).scope = colorScope;\n    });\n    ecModel.eachSeries(function (seriesModel) {\n      if (!seriesModel.useColorPaletteOnData || ecModel.isSeriesFiltered(seriesModel)) {\n        return;\n      }\n\n      var dataAll = seriesModel.getRawData();\n      var idxMap = {};\n      var data = seriesModel.getData();\n      var colorScope = inner(seriesModel).scope;\n      var stylePath = seriesModel.visualStyleAccessPath || 'itemStyle';\n      var colorKey = getDefaultColorKey(seriesModel, stylePath);\n      data.each(function (idx) {\n        var rawIdx = data.getRawIndex(idx);\n        idxMap[rawIdx] = idx;\n      });\n      dataAll.each(function (rawIdx) {\n        var idx = idxMap[rawIdx];\n        var fromPalette = data.getItemVisual(idx, 'colorFromPalette');\n\n        if (fromPalette) {\n          var itemStyle = data.ensureUniqueItemVisual(idx, 'style');\n          var name_1 = dataAll.getName(rawIdx) || rawIdx + '';\n          var dataCount = dataAll.count();\n          itemStyle[colorKey] = seriesModel.getColorFromPalette(name_1, colorScope, dataCount);\n        }\n      });\n    });\n  }\n};\nexports.dataColorPaletteTask = dataColorPaletteTask;","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/echarts/lib/visual/style.js"],"names":["exports","__esModule","util_1","require","makeStyleMapper_1","itemStyle_1","lineStyle_1","Model_1","model_1","inner","makeInner","defaultStyleMappers","itemStyle","ITEM_STYLE_KEY_MAP","lineStyle","LINE_STYLE_KEY_MAP","defaultColorKey","getStyleMapper","seriesModel","stylePath","styleMapper","visualStyleMapper","console","warn","getDefaultColorKey","colorKey","visualDrawType","seriesStyleTask","createOnAllSeries","performRawSeries","reset","ecModel","data","getData","visualStyleAccessPath","styleModel","getModel","getStyle","globalStyle","decalOption","getShallow","setVisual","dirty","color","colorCallback","isFunction","getColorFromPalette","name","getSeriesCount","isSeriesFiltered","dataEach","idx","dataParams","getDataParams","extend","setItemVisual","sharedModel","dataStyleTask","ignoreStyleOnData","getVisual","hasItemOption","rawItem","getRawDataItem","option","style","existsStyle","ensureUniqueItemVisual","decal","dataColorPaletteTask","overallReset","paletteScopeGroupByType","createHashMap","eachSeries","useColorPaletteOnData","colorScope","get","type","set","scope","dataAll","getRawData","idxMap","each","rawIdx","getRawIndex","fromPalette","getItemVisual","name_1","getName","dataCount","count"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n\"use strict\";\n\nexports.__esModule = true;\n\nvar util_1 = require(\"zrender/lib/core/util\");\n\nvar makeStyleMapper_1 = require(\"../model/mixin/makeStyleMapper\");\n\nvar itemStyle_1 = require(\"../model/mixin/itemStyle\");\n\nvar lineStyle_1 = require(\"../model/mixin/lineStyle\");\n\nvar Model_1 = require(\"../model/Model\");\n\nvar model_1 = require(\"../util/model\");\n\nvar inner = model_1.makeInner();\nvar defaultStyleMappers = {\n  itemStyle: makeStyleMapper_1[\"default\"](itemStyle_1.ITEM_STYLE_KEY_MAP, true),\n  lineStyle: makeStyleMapper_1[\"default\"](lineStyle_1.LINE_STYLE_KEY_MAP, true)\n};\nvar defaultColorKey = {\n  lineStyle: 'stroke',\n  itemStyle: 'fill'\n};\n\nfunction getStyleMapper(seriesModel, stylePath) {\n  var styleMapper = seriesModel.visualStyleMapper || defaultStyleMappers[stylePath];\n\n  if (!styleMapper) {\n    console.warn(\"Unkown style type '\" + stylePath + \"'.\");\n    return defaultStyleMappers.itemStyle;\n  }\n\n  return styleMapper;\n}\n\nfunction getDefaultColorKey(seriesModel, stylePath) {\n  var colorKey = seriesModel.visualDrawType || defaultColorKey[stylePath];\n\n  if (!colorKey) {\n    console.warn(\"Unkown style type '\" + stylePath + \"'.\");\n    return 'fill';\n  }\n\n  return colorKey;\n}\n\nvar seriesStyleTask = {\n  createOnAllSeries: true,\n  performRawSeries: true,\n  reset: function (seriesModel, ecModel) {\n    var data = seriesModel.getData();\n    var stylePath = seriesModel.visualStyleAccessPath || 'itemStyle';\n    var styleModel = seriesModel.getModel(stylePath);\n    var getStyle = getStyleMapper(seriesModel, stylePath);\n    var globalStyle = getStyle(styleModel);\n    var decalOption = styleModel.getShallow('decal');\n\n    if (decalOption) {\n      data.setVisual('decal', decalOption);\n      decalOption.dirty = true;\n    }\n\n    var colorKey = getDefaultColorKey(seriesModel, stylePath);\n    var color = globalStyle[colorKey];\n    var colorCallback = util_1.isFunction(color) ? color : null;\n\n    if (!globalStyle[colorKey] || colorCallback) {\n      globalStyle[colorKey] = seriesModel.getColorFromPalette(seriesModel.name, null, ecModel.getSeriesCount());\n      data.setVisual('colorFromPalette', true);\n    }\n\n    data.setVisual('style', globalStyle);\n    data.setVisual('drawType', colorKey);\n\n    if (!ecModel.isSeriesFiltered(seriesModel) && colorCallback) {\n      data.setVisual('colorFromPalette', false);\n      return {\n        dataEach: function (data, idx) {\n          var dataParams = seriesModel.getDataParams(idx);\n          var itemStyle = util_1.extend({}, globalStyle);\n          itemStyle[colorKey] = colorCallback(dataParams);\n          data.setItemVisual(idx, 'style', itemStyle);\n        }\n      };\n    }\n  }\n};\nexports.seriesStyleTask = seriesStyleTask;\nvar sharedModel = new Model_1[\"default\"]();\nvar dataStyleTask = {\n  createOnAllSeries: true,\n  performRawSeries: true,\n  reset: function (seriesModel, ecModel) {\n    if (seriesModel.ignoreStyleOnData || ecModel.isSeriesFiltered(seriesModel)) {\n      return;\n    }\n\n    var data = seriesModel.getData();\n    var stylePath = seriesModel.visualStyleAccessPath || 'itemStyle';\n    var getStyle = getStyleMapper(seriesModel, stylePath);\n    var colorKey = data.getVisual('drawType');\n    return {\n      dataEach: data.hasItemOption ? function (data, idx) {\n        var rawItem = data.getRawDataItem(idx);\n\n        if (rawItem && rawItem[stylePath]) {\n          sharedModel.option = rawItem[stylePath];\n          var style = getStyle(sharedModel);\n          var existsStyle = data.ensureUniqueItemVisual(idx, 'style');\n          util_1.extend(existsStyle, style);\n\n          if (sharedModel.option.decal) {\n            data.setItemVisual(idx, 'decal', sharedModel.option.decal);\n            sharedModel.option.decal.dirty = true;\n          }\n\n          if (colorKey in style) {\n            data.setItemVisual(idx, 'colorFromPalette', false);\n          }\n        }\n      } : null\n    };\n  }\n};\nexports.dataStyleTask = dataStyleTask;\nvar dataColorPaletteTask = {\n  performRawSeries: true,\n  overallReset: function (ecModel) {\n    var paletteScopeGroupByType = util_1.createHashMap();\n    ecModel.eachSeries(function (seriesModel) {\n      if (!seriesModel.useColorPaletteOnData) {\n        return;\n      }\n\n      var colorScope = paletteScopeGroupByType.get(seriesModel.type);\n\n      if (!colorScope) {\n        colorScope = {};\n        paletteScopeGroupByType.set(seriesModel.type, colorScope);\n      }\n\n      inner(seriesModel).scope = colorScope;\n    });\n    ecModel.eachSeries(function (seriesModel) {\n      if (!seriesModel.useColorPaletteOnData || ecModel.isSeriesFiltered(seriesModel)) {\n        return;\n      }\n\n      var dataAll = seriesModel.getRawData();\n      var idxMap = {};\n      var data = seriesModel.getData();\n      var colorScope = inner(seriesModel).scope;\n      var stylePath = seriesModel.visualStyleAccessPath || 'itemStyle';\n      var colorKey = getDefaultColorKey(seriesModel, stylePath);\n      data.each(function (idx) {\n        var rawIdx = data.getRawIndex(idx);\n        idxMap[rawIdx] = idx;\n      });\n      dataAll.each(function (rawIdx) {\n        var idx = idxMap[rawIdx];\n        var fromPalette = data.getItemVisual(idx, 'colorFromPalette');\n\n        if (fromPalette) {\n          var itemStyle = data.ensureUniqueItemVisual(idx, 'style');\n          var name_1 = dataAll.getName(rawIdx) || rawIdx + '';\n          var dataCount = dataAll.count();\n          itemStyle[colorKey] = seriesModel.getColorFromPalette(name_1, colorScope, dataCount);\n        }\n      });\n    });\n  }\n};\nexports.dataColorPaletteTask = dataColorPaletteTask;"]},"metadata":{},"sourceType":"script"}