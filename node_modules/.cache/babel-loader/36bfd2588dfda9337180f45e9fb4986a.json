{"ast":null,"code":"import { __assign } from \"tslib\";\nimport Shape from '../shape';\n/**\n * 基本的图片，可以添加文本，默认文本在图片的下面\n */\n\nShape.registerNode('image', {\n  options: {\n    img: 'https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*eD7nT6tmYgAAAAAAAAAAAABkARQnAQ',\n    size: 200,\n    clipCfg: {\n      show: false,\n      type: 'circle',\n      // circle\n      r: 50,\n      // ellipse\n      rx: 50,\n      ry: 35,\n      // rect\n      width: 50,\n      height: 35,\n      // polygon\n      points: [[30, 12], [12, 30], [30, 48], [48, 30]],\n      // path\n      path: [['M', 25, 25], ['L', 50, 25], ['A', 12.5, 12.5, 0, 1, 1, 50, 50], ['A', 12.5, 12.5, 0, 1, 0, 50, 50], ['L', 25, 75], ['Z']],\n      // 坐标\n      x: 0,\n      y: 0\n    }\n  },\n  shapeType: 'image',\n  labelPosition: 'bottom',\n  drawShape: function drawShape(cfg, group) {\n    var shapeType = this.shapeType; // || this.type，都已经加了 shapeType\n\n    var style = this.getShapeStyle(cfg);\n    delete style.fill;\n    var shape = group.addShape(shapeType, {\n      attrs: style,\n      className: this.type + \"-keyShape\",\n      name: this.type + \"-keyShape\",\n      draggable: true\n    });\n    this.drawClip(cfg, shape);\n    return shape;\n  },\n  drawClip: function drawClip(cfg, shape) {\n    var clip = this.getOptions(cfg).clipCfg;\n\n    if (!clip.show) {\n      return;\n    } // 支持 circle、rect、ellipse、Polygon 及自定义 path clip\n\n\n    var type = clip.type,\n        x = clip.x,\n        y = clip.y,\n        style = clip.style;\n\n    if (type === 'circle') {\n      var r = clip.r;\n      shape.setClip({\n        type: 'circle',\n        attrs: __assign({\n          r: r,\n          x: x,\n          y: y\n        }, style)\n      });\n    } else if (type === 'rect') {\n      var width = clip.width,\n          height = clip.height;\n      var rectX = x - width / 2;\n      var rectY = y - height / 2;\n      shape.setClip({\n        type: 'rect',\n        attrs: __assign({\n          x: rectX,\n          y: rectY,\n          width: width,\n          height: height\n        }, style)\n      });\n    } else if (type === 'ellipse') {\n      var rx = clip.rx,\n          ry = clip.ry;\n      shape.setClip({\n        type: 'ellipse',\n        attrs: __assign({\n          x: x,\n          y: y,\n          rx: rx,\n          ry: ry\n        }, style)\n      });\n    } else if (type === 'polygon') {\n      var points = clip.points;\n      shape.setClip({\n        type: 'polygon',\n        attrs: __assign({\n          points: points\n        }, style)\n      });\n    } else if (type === 'path') {\n      var path = clip.path;\n      shape.setClip({\n        type: 'path',\n        attrs: __assign({\n          path: path\n        }, style)\n      });\n    }\n  },\n  getShapeStyle: function getShapeStyle(cfg) {\n    var defaultStyle = this.getOptions(cfg).style;\n    var size = this.getSize(cfg);\n    var img = this.getOptions(cfg).img;\n    var width = size[0];\n    var height = size[1];\n\n    if (defaultStyle) {\n      width = defaultStyle.width || size[0];\n      height = defaultStyle.height || size[1];\n    }\n\n    var style = __assign({\n      x: -width / 2,\n      y: -height / 2,\n      width: width,\n      height: height,\n      img: img\n    }, defaultStyle);\n\n    return style;\n  },\n  updateShapeStyle: function updateShapeStyle(cfg, item) {\n    var group = item.getContainer();\n    var shapeClassName = this.itemType + \"-shape\";\n    var shape = group.find(function (element) {\n      return element.get('className') === shapeClassName;\n    }) || item.getKeyShape();\n    var shapeStyle = this.getShapeStyle(cfg);\n\n    if (shape) {\n      shape.attr(shapeStyle);\n    }\n  }\n}, 'single-node');","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/@antv/g6/es/shape/nodes/image.js"],"names":["__assign","Shape","registerNode","options","img","size","clipCfg","show","type","r","rx","ry","width","height","points","path","x","y","shapeType","labelPosition","drawShape","cfg","group","style","getShapeStyle","fill","shape","addShape","attrs","className","name","draggable","drawClip","clip","getOptions","setClip","rectX","rectY","defaultStyle","getSize","updateShapeStyle","item","getContainer","shapeClassName","itemType","find","element","get","getKeyShape","shapeStyle","attr"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA;AACA;AACA;;AAEAA,KAAK,CAACC,YAAN,CAAmB,OAAnB,EAA4B;AAC1BC,EAAAA,OAAO,EAAE;AACPC,IAAAA,GAAG,EAAE,uFADE;AAEPC,IAAAA,IAAI,EAAE,GAFC;AAGPC,IAAAA,OAAO,EAAE;AACPC,MAAAA,IAAI,EAAE,KADC;AAEPC,MAAAA,IAAI,EAAE,QAFC;AAGP;AACAC,MAAAA,CAAC,EAAE,EAJI;AAKP;AACAC,MAAAA,EAAE,EAAE,EANG;AAOPC,MAAAA,EAAE,EAAE,EAPG;AAQP;AACAC,MAAAA,KAAK,EAAE,EATA;AAUPC,MAAAA,MAAM,EAAE,EAVD;AAWP;AACAC,MAAAA,MAAM,EAAE,CAAC,CAAC,EAAD,EAAK,EAAL,CAAD,EAAW,CAAC,EAAD,EAAK,EAAL,CAAX,EAAqB,CAAC,EAAD,EAAK,EAAL,CAArB,EAA+B,CAAC,EAAD,EAAK,EAAL,CAA/B,CAZD;AAaP;AACAC,MAAAA,IAAI,EAAE,CAAC,CAAC,GAAD,EAAM,EAAN,EAAU,EAAV,CAAD,EAAgB,CAAC,GAAD,EAAM,EAAN,EAAU,EAAV,CAAhB,EAA+B,CAAC,GAAD,EAAM,IAAN,EAAY,IAAZ,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,EAA3B,EAA+B,EAA/B,CAA/B,EAAmE,CAAC,GAAD,EAAM,IAAN,EAAY,IAAZ,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,EAA3B,EAA+B,EAA/B,CAAnE,EAAuG,CAAC,GAAD,EAAM,EAAN,EAAU,EAAV,CAAvG,EAAsH,CAAC,GAAD,CAAtH,CAdC;AAeP;AACAC,MAAAA,CAAC,EAAE,CAhBI;AAiBPC,MAAAA,CAAC,EAAE;AAjBI;AAHF,GADiB;AAwB1BC,EAAAA,SAAS,EAAE,OAxBe;AAyB1BC,EAAAA,aAAa,EAAE,QAzBW;AA0B1BC,EAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBC,GAAnB,EAAwBC,KAAxB,EAA+B;AACxC,QAAIJ,SAAS,GAAG,KAAKA,SAArB,CADwC,CACR;;AAEhC,QAAIK,KAAK,GAAG,KAAKC,aAAL,CAAmBH,GAAnB,CAAZ;AACA,WAAOE,KAAK,CAACE,IAAb;AACA,QAAIC,KAAK,GAAGJ,KAAK,CAACK,QAAN,CAAeT,SAAf,EAA0B;AACpCU,MAAAA,KAAK,EAAEL,KAD6B;AAEpCM,MAAAA,SAAS,EAAE,KAAKrB,IAAL,GAAY,WAFa;AAGpCsB,MAAAA,IAAI,EAAE,KAAKtB,IAAL,GAAY,WAHkB;AAIpCuB,MAAAA,SAAS,EAAE;AAJyB,KAA1B,CAAZ;AAMA,SAAKC,QAAL,CAAcX,GAAd,EAAmBK,KAAnB;AACA,WAAOA,KAAP;AACD,GAvCyB;AAwC1BM,EAAAA,QAAQ,EAAE,SAASA,QAAT,CAAkBX,GAAlB,EAAuBK,KAAvB,EAA8B;AACtC,QAAIO,IAAI,GAAG,KAAKC,UAAL,CAAgBb,GAAhB,EAAqBf,OAAhC;;AAEA,QAAI,CAAC2B,IAAI,CAAC1B,IAAV,EAAgB;AACd;AACD,KALqC,CAKpC;;;AAGF,QAAIC,IAAI,GAAGyB,IAAI,CAACzB,IAAhB;AAAA,QACIQ,CAAC,GAAGiB,IAAI,CAACjB,CADb;AAAA,QAEIC,CAAC,GAAGgB,IAAI,CAAChB,CAFb;AAAA,QAGIM,KAAK,GAAGU,IAAI,CAACV,KAHjB;;AAKA,QAAIf,IAAI,KAAK,QAAb,EAAuB;AACrB,UAAIC,CAAC,GAAGwB,IAAI,CAACxB,CAAb;AACAiB,MAAAA,KAAK,CAACS,OAAN,CAAc;AACZ3B,QAAAA,IAAI,EAAE,QADM;AAEZoB,QAAAA,KAAK,EAAE5B,QAAQ,CAAC;AACdS,UAAAA,CAAC,EAAEA,CADW;AAEdO,UAAAA,CAAC,EAAEA,CAFW;AAGdC,UAAAA,CAAC,EAAEA;AAHW,SAAD,EAIZM,KAJY;AAFH,OAAd;AAQD,KAVD,MAUO,IAAIf,IAAI,KAAK,MAAb,EAAqB;AAC1B,UAAII,KAAK,GAAGqB,IAAI,CAACrB,KAAjB;AAAA,UACIC,MAAM,GAAGoB,IAAI,CAACpB,MADlB;AAEA,UAAIuB,KAAK,GAAGpB,CAAC,GAAGJ,KAAK,GAAG,CAAxB;AACA,UAAIyB,KAAK,GAAGpB,CAAC,GAAGJ,MAAM,GAAG,CAAzB;AACAa,MAAAA,KAAK,CAACS,OAAN,CAAc;AACZ3B,QAAAA,IAAI,EAAE,MADM;AAEZoB,QAAAA,KAAK,EAAE5B,QAAQ,CAAC;AACdgB,UAAAA,CAAC,EAAEoB,KADW;AAEdnB,UAAAA,CAAC,EAAEoB,KAFW;AAGdzB,UAAAA,KAAK,EAAEA,KAHO;AAIdC,UAAAA,MAAM,EAAEA;AAJM,SAAD,EAKZU,KALY;AAFH,OAAd;AASD,KAdM,MAcA,IAAIf,IAAI,KAAK,SAAb,EAAwB;AAC7B,UAAIE,EAAE,GAAGuB,IAAI,CAACvB,EAAd;AAAA,UACIC,EAAE,GAAGsB,IAAI,CAACtB,EADd;AAEAe,MAAAA,KAAK,CAACS,OAAN,CAAc;AACZ3B,QAAAA,IAAI,EAAE,SADM;AAEZoB,QAAAA,KAAK,EAAE5B,QAAQ,CAAC;AACdgB,UAAAA,CAAC,EAAEA,CADW;AAEdC,UAAAA,CAAC,EAAEA,CAFW;AAGdP,UAAAA,EAAE,EAAEA,EAHU;AAIdC,UAAAA,EAAE,EAAEA;AAJU,SAAD,EAKZY,KALY;AAFH,OAAd;AASD,KAZM,MAYA,IAAIf,IAAI,KAAK,SAAb,EAAwB;AAC7B,UAAIM,MAAM,GAAGmB,IAAI,CAACnB,MAAlB;AACAY,MAAAA,KAAK,CAACS,OAAN,CAAc;AACZ3B,QAAAA,IAAI,EAAE,SADM;AAEZoB,QAAAA,KAAK,EAAE5B,QAAQ,CAAC;AACdc,UAAAA,MAAM,EAAEA;AADM,SAAD,EAEZS,KAFY;AAFH,OAAd;AAMD,KARM,MAQA,IAAIf,IAAI,KAAK,MAAb,EAAqB;AAC1B,UAAIO,IAAI,GAAGkB,IAAI,CAAClB,IAAhB;AACAW,MAAAA,KAAK,CAACS,OAAN,CAAc;AACZ3B,QAAAA,IAAI,EAAE,MADM;AAEZoB,QAAAA,KAAK,EAAE5B,QAAQ,CAAC;AACde,UAAAA,IAAI,EAAEA;AADQ,SAAD,EAEZQ,KAFY;AAFH,OAAd;AAMD;AACF,GA1GyB;AA2G1BC,EAAAA,aAAa,EAAE,SAASA,aAAT,CAAuBH,GAAvB,EAA4B;AACzC,QAAIiB,YAAY,GAAG,KAAKJ,UAAL,CAAgBb,GAAhB,EAAqBE,KAAxC;AACA,QAAIlB,IAAI,GAAG,KAAKkC,OAAL,CAAalB,GAAb,CAAX;AACA,QAAIjB,GAAG,GAAG,KAAK8B,UAAL,CAAgBb,GAAhB,EAAqBjB,GAA/B;AACA,QAAIQ,KAAK,GAAGP,IAAI,CAAC,CAAD,CAAhB;AACA,QAAIQ,MAAM,GAAGR,IAAI,CAAC,CAAD,CAAjB;;AAEA,QAAIiC,YAAJ,EAAkB;AAChB1B,MAAAA,KAAK,GAAG0B,YAAY,CAAC1B,KAAb,IAAsBP,IAAI,CAAC,CAAD,CAAlC;AACAQ,MAAAA,MAAM,GAAGyB,YAAY,CAACzB,MAAb,IAAuBR,IAAI,CAAC,CAAD,CAApC;AACD;;AAED,QAAIkB,KAAK,GAAGvB,QAAQ,CAAC;AACnBgB,MAAAA,CAAC,EAAE,CAACJ,KAAD,GAAS,CADO;AAEnBK,MAAAA,CAAC,EAAE,CAACJ,MAAD,GAAU,CAFM;AAGnBD,MAAAA,KAAK,EAAEA,KAHY;AAInBC,MAAAA,MAAM,EAAEA,MAJW;AAKnBT,MAAAA,GAAG,EAAEA;AALc,KAAD,EAMjBkC,YANiB,CAApB;;AAQA,WAAOf,KAAP;AACD,GAhIyB;AAiI1BiB,EAAAA,gBAAgB,EAAE,SAASA,gBAAT,CAA0BnB,GAA1B,EAA+BoB,IAA/B,EAAqC;AACrD,QAAInB,KAAK,GAAGmB,IAAI,CAACC,YAAL,EAAZ;AACA,QAAIC,cAAc,GAAG,KAAKC,QAAL,GAAgB,QAArC;AACA,QAAIlB,KAAK,GAAGJ,KAAK,CAACuB,IAAN,CAAW,UAAUC,OAAV,EAAmB;AACxC,aAAOA,OAAO,CAACC,GAAR,CAAY,WAAZ,MAA6BJ,cAApC;AACD,KAFW,KAENF,IAAI,CAACO,WAAL,EAFN;AAGA,QAAIC,UAAU,GAAG,KAAKzB,aAAL,CAAmBH,GAAnB,CAAjB;;AAEA,QAAIK,KAAJ,EAAW;AACTA,MAAAA,KAAK,CAACwB,IAAN,CAAWD,UAAX;AACD;AACF;AA5IyB,CAA5B,EA6IG,aA7IH","sourcesContent":["import { __assign } from \"tslib\";\nimport Shape from '../shape';\n/**\n * 基本的图片，可以添加文本，默认文本在图片的下面\n */\n\nShape.registerNode('image', {\n  options: {\n    img: 'https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*eD7nT6tmYgAAAAAAAAAAAABkARQnAQ',\n    size: 200,\n    clipCfg: {\n      show: false,\n      type: 'circle',\n      // circle\n      r: 50,\n      // ellipse\n      rx: 50,\n      ry: 35,\n      // rect\n      width: 50,\n      height: 35,\n      // polygon\n      points: [[30, 12], [12, 30], [30, 48], [48, 30]],\n      // path\n      path: [['M', 25, 25], ['L', 50, 25], ['A', 12.5, 12.5, 0, 1, 1, 50, 50], ['A', 12.5, 12.5, 0, 1, 0, 50, 50], ['L', 25, 75], ['Z']],\n      // 坐标\n      x: 0,\n      y: 0\n    }\n  },\n  shapeType: 'image',\n  labelPosition: 'bottom',\n  drawShape: function drawShape(cfg, group) {\n    var shapeType = this.shapeType; // || this.type，都已经加了 shapeType\n\n    var style = this.getShapeStyle(cfg);\n    delete style.fill;\n    var shape = group.addShape(shapeType, {\n      attrs: style,\n      className: this.type + \"-keyShape\",\n      name: this.type + \"-keyShape\",\n      draggable: true\n    });\n    this.drawClip(cfg, shape);\n    return shape;\n  },\n  drawClip: function drawClip(cfg, shape) {\n    var clip = this.getOptions(cfg).clipCfg;\n\n    if (!clip.show) {\n      return;\n    } // 支持 circle、rect、ellipse、Polygon 及自定义 path clip\n\n\n    var type = clip.type,\n        x = clip.x,\n        y = clip.y,\n        style = clip.style;\n\n    if (type === 'circle') {\n      var r = clip.r;\n      shape.setClip({\n        type: 'circle',\n        attrs: __assign({\n          r: r,\n          x: x,\n          y: y\n        }, style)\n      });\n    } else if (type === 'rect') {\n      var width = clip.width,\n          height = clip.height;\n      var rectX = x - width / 2;\n      var rectY = y - height / 2;\n      shape.setClip({\n        type: 'rect',\n        attrs: __assign({\n          x: rectX,\n          y: rectY,\n          width: width,\n          height: height\n        }, style)\n      });\n    } else if (type === 'ellipse') {\n      var rx = clip.rx,\n          ry = clip.ry;\n      shape.setClip({\n        type: 'ellipse',\n        attrs: __assign({\n          x: x,\n          y: y,\n          rx: rx,\n          ry: ry\n        }, style)\n      });\n    } else if (type === 'polygon') {\n      var points = clip.points;\n      shape.setClip({\n        type: 'polygon',\n        attrs: __assign({\n          points: points\n        }, style)\n      });\n    } else if (type === 'path') {\n      var path = clip.path;\n      shape.setClip({\n        type: 'path',\n        attrs: __assign({\n          path: path\n        }, style)\n      });\n    }\n  },\n  getShapeStyle: function getShapeStyle(cfg) {\n    var defaultStyle = this.getOptions(cfg).style;\n    var size = this.getSize(cfg);\n    var img = this.getOptions(cfg).img;\n    var width = size[0];\n    var height = size[1];\n\n    if (defaultStyle) {\n      width = defaultStyle.width || size[0];\n      height = defaultStyle.height || size[1];\n    }\n\n    var style = __assign({\n      x: -width / 2,\n      y: -height / 2,\n      width: width,\n      height: height,\n      img: img\n    }, defaultStyle);\n\n    return style;\n  },\n  updateShapeStyle: function updateShapeStyle(cfg, item) {\n    var group = item.getContainer();\n    var shapeClassName = this.itemType + \"-shape\";\n    var shape = group.find(function (element) {\n      return element.get('className') === shapeClassName;\n    }) || item.getKeyShape();\n    var shapeStyle = this.getShapeStyle(cfg);\n\n    if (shape) {\n      shape.attr(shapeStyle);\n    }\n  }\n}, 'single-node');"]},"metadata":{},"sourceType":"module"}