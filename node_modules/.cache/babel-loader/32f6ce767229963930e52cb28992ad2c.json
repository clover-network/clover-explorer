{"ast":null,"code":"import { useRef, useEffect } from 'react';\nimport { getGraphSize, processMinimap } from '../graph/util';\nimport { isObject, isString } from '@antv/util';\nexport default function useInit(graphInstance, config, container) {\n  var graphHook = useRef();\n  var data = config.data,\n      nodeStyle = config.nodeStyle,\n      nodeAnchorPoints = config.nodeAnchorPoints,\n      nodeType = config.nodeType,\n      edgeType = config.edgeType,\n      edgeStyle = config.edgeStyle,\n      width = config.width,\n      height = config.height,\n      layout = config.layout,\n      minimapCfg = config.minimapCfg,\n      behaviors = config.behaviors,\n      nodeLabelCfg = config.nodeLabelCfg,\n      edgeLabelCfg = config.edgeLabelCfg;\n  var minimap;\n  useEffect(function () {\n    if (graphInstance && !graphInstance.destroyed) {\n      graphInstance.changeData(data);\n      graphInstance.layout();\n    }\n  }, [data]);\n  useEffect(function () {\n    if (graphInstance && !graphInstance.destroyed) {\n      graphInstance.getNodes().forEach(function (node) {\n        graphInstance.updateItem(node, {\n          type: nodeType,\n          style: nodeStyle,\n          anchorPoints: nodeAnchorPoints,\n          labelCfg: nodeLabelCfg\n        });\n      });\n    }\n  }, [nodeStyle, nodeAnchorPoints, nodeType]);\n  useEffect(function () {\n    if (graphInstance && !graphInstance.destroyed) {\n      graphInstance.getEdges().forEach(function (edge) {\n        graphInstance.updateItem(edge, {\n          type: edgeType,\n          style: edgeStyle,\n          labelCfg: edgeLabelCfg\n        });\n      });\n    }\n  }, [edgeStyle, edgeType]);\n  useEffect(function () {\n    if (graphInstance && !graphInstance.destroyed) {\n      var graphSize = getGraphSize(width, height, container);\n      graphInstance.changeSize(graphSize[0], graphSize[1]);\n    }\n  }, [container, width, height]);\n  useEffect(function () {\n    if (graphInstance && !graphInstance.destroyed) {\n      graphInstance.updateLayout(layout);\n    }\n  }, [layout]);\n  useEffect(function () {\n    if (!minimapCfg || !graphInstance || graphInstance.destroyed) {\n      return;\n    }\n\n    if (minimapCfg.show) {\n      minimap = processMinimap(minimapCfg, graphInstance);\n      minimap && minimap.updateCanvas();\n    } else {\n      var minimap_1 = graphInstance.get('plugins')[0];\n      minimap_1 && graphInstance.removePlugin(minimap_1);\n    }\n  }, [minimapCfg]);\n  useEffect(function () {\n    if (graphInstance && !graphInstance.destroyed) {\n      var defaultMode = graphInstance.get('modes').default;\n      var removingBehaviors_1 = [];\n      defaultMode.forEach(function (be) {\n        if (isObject(be)) {\n          removingBehaviors_1.push(be.type);\n        } else if (isString(be)) {\n          removingBehaviors_1.push(be);\n        }\n      });\n      graphInstance.removeBehaviors(removingBehaviors_1, 'default');\n      graphInstance.addBehaviors(behaviors, 'default');\n    }\n  }, [behaviors]);\n  useEffect(function () {\n    graphHook.current = graphInstance;\n\n    if (graphInstance && !graphInstance.destroyed) {\n      return function () {\n        graphInstance.destroy();\n        graphInstance = undefined;\n      };\n    }\n\n    return;\n  }, []);\n  return {\n    graphHook: graphHook\n  };\n}","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/@ant-design/charts/es/hooks/useGraph.js"],"names":["useRef","useEffect","getGraphSize","processMinimap","isObject","isString","useInit","graphInstance","config","container","graphHook","data","nodeStyle","nodeAnchorPoints","nodeType","edgeType","edgeStyle","width","height","layout","minimapCfg","behaviors","nodeLabelCfg","edgeLabelCfg","minimap","destroyed","changeData","getNodes","forEach","node","updateItem","type","style","anchorPoints","labelCfg","getEdges","edge","graphSize","changeSize","updateLayout","show","updateCanvas","minimap_1","get","removePlugin","defaultMode","default","removingBehaviors_1","be","push","removeBehaviors","addBehaviors","current","destroy","undefined"],"mappings":"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","sourcesContent":["import { useRef, useEffect } from 'react';\nimport { getGraphSize, processMinimap } from '../graph/util';\nimport { isObject, isString } from '@antv/util';\nexport default function useInit(graphInstance, config, container) {\n    var graphHook = useRef();\n    var data = config.data, nodeStyle = config.nodeStyle, nodeAnchorPoints = config.nodeAnchorPoints, nodeType = config.nodeType, edgeType = config.edgeType, edgeStyle = config.edgeStyle, width = config.width, height = config.height, layout = config.layout, minimapCfg = config.minimapCfg, behaviors = config.behaviors, nodeLabelCfg = config.nodeLabelCfg, edgeLabelCfg = config.edgeLabelCfg;\n    var minimap;\n    useEffect(function () {\n        if (graphInstance && !graphInstance.destroyed) {\n            graphInstance.changeData(data);\n            graphInstance.layout();\n        }\n    }, [data]);\n    useEffect(function () {\n        if (graphInstance && !graphInstance.destroyed) {\n            graphInstance.getNodes().forEach(function (node) {\n                graphInstance.updateItem(node, {\n                    type: nodeType,\n                    style: nodeStyle,\n                    anchorPoints: nodeAnchorPoints,\n                    labelCfg: nodeLabelCfg\n                });\n            });\n        }\n    }, [nodeStyle, nodeAnchorPoints, nodeType]);\n    useEffect(function () {\n        if (graphInstance && !graphInstance.destroyed) {\n            graphInstance.getEdges().forEach(function (edge) {\n                graphInstance.updateItem(edge, {\n                    type: edgeType,\n                    style: edgeStyle,\n                    labelCfg: edgeLabelCfg\n                });\n            });\n        }\n    }, [edgeStyle, edgeType]);\n    useEffect(function () {\n        if (graphInstance && !graphInstance.destroyed) {\n            var graphSize = getGraphSize(width, height, container);\n            graphInstance.changeSize(graphSize[0], graphSize[1]);\n        }\n    }, [container, width, height]);\n    useEffect(function () {\n        if (graphInstance && !graphInstance.destroyed) {\n            graphInstance.updateLayout(layout);\n        }\n    }, [layout]);\n    useEffect(function () {\n        if (!minimapCfg || !graphInstance || graphInstance.destroyed) {\n            return;\n        }\n        if (minimapCfg.show) {\n            minimap = processMinimap(minimapCfg, graphInstance);\n            minimap && minimap.updateCanvas();\n        }\n        else {\n            var minimap_1 = graphInstance.get('plugins')[0];\n            minimap_1 && graphInstance.removePlugin(minimap_1);\n        }\n    }, [minimapCfg]);\n    useEffect(function () {\n        if (graphInstance && !graphInstance.destroyed) {\n            var defaultMode = graphInstance.get('modes').default;\n            var removingBehaviors_1 = [];\n            defaultMode.forEach(function (be) {\n                if (isObject(be)) {\n                    removingBehaviors_1.push(be.type);\n                }\n                else if (isString(be)) {\n                    removingBehaviors_1.push(be);\n                }\n            });\n            graphInstance.removeBehaviors(removingBehaviors_1, 'default');\n            graphInstance.addBehaviors(behaviors, 'default');\n        }\n    }, [behaviors]);\n    useEffect(function () {\n        graphHook.current = graphInstance;\n        if (graphInstance && !graphInstance.destroyed) {\n            return function () {\n                graphInstance.destroy();\n                graphInstance = undefined;\n            };\n        }\n        return;\n    }, []);\n    return {\n        graphHook: graphHook,\n    };\n}\n"]},"metadata":{},"sourceType":"module"}