{"ast":null,"code":"var _jsxFileName = \"/Users/wanglijie/wanglijie/clover-defi-wallet/src/theme/index.tsx\";\nimport React, { useMemo } from 'react';\nimport styled, { ThemeProvider as StyledComponentsThemeProvider, createGlobalStyle, css } from 'styled-components';\nimport { Text } from 'rebass';\nimport { isMobile } from 'react-device-detect';\nimport { useDarkMode } from '../state/settings/hooks';\nconst MEDIA_WIDTHS = {\n  upToExtraSmall: 500,\n  upToSmall: 600,\n  upToMedium: 960,\n  upToLarge: 1280\n};\nconst mediaWidthTemplates = Object.keys(MEDIA_WIDTHS).reduce((accumulator, size) => {\n  ;\n\n  accumulator[size] = (a, b, c) => css`\n      @media (max-width: ${MEDIA_WIDTHS[size]}px) {\n        ${css(a, b, c)}\n      }\n    `;\n\n  return accumulator;\n}, {});\nconst white = '#FFFFFF';\nconst black = '#000000';\nexport function colors(darkMode) {\n  return {\n    // base\n    white,\n    black,\n    // backgrounds\n    bg1: darkMode ? '#41485D' : '#FFFFFF',\n    bg2: darkMode ? '#2B3246' : '#FFFFFF',\n    // text\n    text1: darkMode ? '#FFFFFF' : '#41485D',\n    text2: darkMode ? 'rgba(255, 255, 255, 0.5)' : 'rgba(65, 72, 93, 0.5)',\n    // border\n    border1: darkMode ? '#5C647B' : 'rgba(65, 72, 93, 0.1)'\n  };\n}\nexport function theme(darkMode) {\n  return { ...colors(darkMode),\n    grids: {\n      sm: 8,\n      md: 12,\n      lg: 24\n    },\n    // media queries\n    mediaWidth: mediaWidthTemplates,\n    // css snippets\n    flexColumnNoWrap: css`\n      display: flex;\n      flex-flow: column nowrap;\n    `,\n    flexRowNoWrap: css`\n      display: flex;\n      flex-flow: row nowrap;\n    `\n  };\n}\nexport default function ThemeProvider({\n  children\n}) {\n  const darkMode = useDarkMode();\n  const themeObject = useMemo(() => theme(darkMode), [darkMode]);\n  return /*#__PURE__*/React.createElement(StyledComponentsThemeProvider, {\n    theme: themeObject,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 10\n    }\n  }, children);\n}\nconst TextWrapper = styled(Text)`\n  color: ${({\n  color,\n  theme\n}) => theme[color]};\n`;\nexport const TYPE = {\n  logo(props) {\n    return /*#__PURE__*/React.createElement(TextWrapper, Object.assign({\n      fontWeight: 600,\n      fontSize: 28,\n      color: 'text1'\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 12\n      }\n    }));\n  },\n\n  menuItem(props) {\n    return /*#__PURE__*/React.createElement(TextWrapper, Object.assign({\n      fontWeight: \"normal\",\n      fontSize: 16,\n      color: 'text1'\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 12\n      }\n    }));\n  },\n\n  statTotal(props) {\n    return /*#__PURE__*/React.createElement(TextWrapper, Object.assign({\n      fontWeight: 900,\n      fontSize: 36,\n      color: 'text1'\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 12\n      }\n    }));\n  },\n\n  statLabel({\n    highlight,\n    ...props\n  }) {\n    return /*#__PURE__*/React.createElement(TextWrapper, Object.assign({\n      fontWeight: \"Normal\",\n      fontSize: 20,\n      color: highlight ? 'text1' : 'text2'\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 12\n      }\n    }));\n  },\n\n  statValue(props) {\n    return /*#__PURE__*/React.createElement(TextWrapper, Object.assign({\n      fontWeight: \"Normal\",\n      fontSize: 24,\n      color: 'text1'\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 12\n      }\n    }));\n  },\n\n  h1(props) {\n    return /*#__PURE__*/React.createElement(TextWrapper, Object.assign({\n      fontWeight: 900,\n      fontSize: 40,\n      color: 'text1'\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 12\n      }\n    }));\n  },\n\n  assetColumnHeader(props) {\n    return /*#__PURE__*/React.createElement(TextWrapper, Object.assign({\n      fontWeight: 400,\n      fontSize: 20,\n      color: 'text2'\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 12\n      }\n    }));\n  },\n\n  assetRowHeader(props) {\n    return /*#__PURE__*/React.createElement(TextWrapper, Object.assign({\n      fontWeight: 700,\n      fontSize: 24,\n      color: 'text1'\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 12\n      }\n    }));\n  },\n\n  assetCell(props) {\n    return /*#__PURE__*/React.createElement(TextWrapper, Object.assign({\n      fontWeight: 700,\n      fontSize: 20,\n      color: 'text1'\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 12\n      }\n    }));\n  },\n\n  assetCellLight(props) {\n    return /*#__PURE__*/React.createElement(TextWrapper, Object.assign({\n      fontWeight: 400,\n      fontSize: 20,\n      color: 'text1'\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 12\n      }\n    }));\n  }\n\n};\nexport const ThemedGlobalStyle = createGlobalStyle`\n  body {\n    font-size: 16px;\n    font-weight: normal;\n    font-family: 'Roboto';\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n\n    margin: 0;\n    min-height: 100vh;\n\n    background: ${({\n  theme\n}) => isMobile ? '#FFFFFF' : theme.bg2};\n  }\n`;","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/src/theme/index.tsx"],"names":["React","useMemo","styled","ThemeProvider","StyledComponentsThemeProvider","createGlobalStyle","css","Text","isMobile","useDarkMode","MEDIA_WIDTHS","upToExtraSmall","upToSmall","upToMedium","upToLarge","mediaWidthTemplates","Object","keys","reduce","accumulator","size","a","b","c","white","black","colors","darkMode","bg1","bg2","text1","text2","border1","theme","grids","sm","md","lg","mediaWidth","flexColumnNoWrap","flexRowNoWrap","children","themeObject","TextWrapper","color","TYPE","logo","props","menuItem","statTotal","statLabel","highlight","statValue","h1","assetColumnHeader","assetRowHeader","assetCell","assetCellLight","ThemedGlobalStyle"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react'\nimport styled, {\n  ThemeProvider as StyledComponentsThemeProvider,\n  createGlobalStyle,\n  css,\n  DefaultTheme\n} from 'styled-components'\nimport { Text, TextProps } from 'rebass'\nimport { isMobile } from 'react-device-detect'\nimport { useDarkMode } from '../state/settings/hooks'\nimport { Colors } from './styled'\n\nconst MEDIA_WIDTHS = {\n  upToExtraSmall: 500,\n  upToSmall: 600,\n  upToMedium: 960,\n  upToLarge: 1280\n}\n\nconst mediaWidthTemplates: { [width in keyof typeof MEDIA_WIDTHS]: typeof css } = Object.keys(MEDIA_WIDTHS).reduce(\n  (accumulator, size) => {\n    ;(accumulator as any)[size] = (a: any, b: any, c: any) => css`\n      @media (max-width: ${(MEDIA_WIDTHS as any)[size]}px) {\n        ${css(a, b, c)}\n      }\n    `\n    return accumulator\n  },\n  {}\n) as any\n\nconst white = '#FFFFFF'\nconst black = '#000000'\n\nexport function colors(darkMode: boolean): Colors {\n  return {\n    // base\n    white,\n    black,\n\n    // backgrounds\n    bg1: darkMode ? '#41485D' : '#FFFFFF',\n    bg2: darkMode ? '#2B3246' : '#FFFFFF',\n\n    // text\n    text1: darkMode ? '#FFFFFF' : '#41485D',\n    text2: darkMode ? 'rgba(255, 255, 255, 0.5)' : 'rgba(65, 72, 93, 0.5)',\n    \n    // border\n    border1: darkMode ? '#5C647B' : 'rgba(65, 72, 93, 0.1)'\n  }\n}\n\nexport function theme(darkMode: boolean): DefaultTheme {\n  return {\n    ...colors(darkMode),\n\n    grids: {\n      sm: 8,\n      md: 12,\n      lg: 24\n    },\n\n    // media queries\n    mediaWidth: mediaWidthTemplates,\n\n    // css snippets\n    flexColumnNoWrap: css`\n      display: flex;\n      flex-flow: column nowrap;\n    `,\n    flexRowNoWrap: css`\n      display: flex;\n      flex-flow: row nowrap;\n    `\n  }\n}\n\nexport default function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const darkMode = useDarkMode();\n\n  const themeObject = useMemo(() => theme(darkMode), [darkMode])\n\n  return <StyledComponentsThemeProvider theme={themeObject}>{children}</StyledComponentsThemeProvider>\n}\n\nconst TextWrapper = styled(Text)<{ color: keyof Colors }>`\n  color: ${({ color, theme }) => (theme as any)[color]};\n`\n\nexport const TYPE = {\n  logo(props: TextProps) {\n    return <TextWrapper fontWeight={600} fontSize={28} color={'text1'} {...props} />\n  },\n\n  menuItem(props: TextProps) {\n    return <TextWrapper fontWeight='normal' fontSize={16} color={'text1'} {...props} />\n  },\n\n  statTotal(props: TextProps) {\n    return <TextWrapper fontWeight={900} fontSize={36} color={'text1'} {...props} />\n  },\n  statLabel({highlight, ...props}: { highlight?: boolean } & TextProps) {\n    return <TextWrapper fontWeight='Normal' fontSize={20} color={highlight ? 'text1' : 'text2'} {...props} />\n  },\n  statValue(props: TextProps) {\n    return <TextWrapper fontWeight='Normal' fontSize={24} color={'text1'} {...props} />\n  },\n\n  h1(props: TextProps) {\n    return <TextWrapper fontWeight={900} fontSize={40} color={'text1'} {...props} />\n  },\n\n  assetColumnHeader(props: TextProps) {\n    return <TextWrapper fontWeight={400} fontSize={20} color={'text2'} {...props} />\n  },\n  assetRowHeader(props: TextProps) {\n    return <TextWrapper fontWeight={700} fontSize={24} color={'text1'} {...props} />\n  },\n  assetCell(props: TextProps) {\n    return <TextWrapper fontWeight={700} fontSize={20} color={'text1'} {...props} />\n  },\n  assetCellLight(props: TextProps) {\n    return <TextWrapper fontWeight={400} fontSize={20} color={'text1'} {...props} />\n  }\n}\n\nexport const ThemedGlobalStyle = createGlobalStyle`\n  body {\n    font-size: 16px;\n    font-weight: normal;\n    font-family: 'Roboto';\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n\n    margin: 0;\n    min-height: 100vh;\n\n    background: ${({ theme }) => (isMobile ? '#FFFFFF' : theme.bg2)};\n  }\n`\n"]},"metadata":{},"sourceType":"module"}