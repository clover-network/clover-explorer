{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { groupBy, map, reduce, each } from '@antv/util';\n\nfunction sumBy(data, func) {\n  return reduce(data, function (r, d) {\n    return r += func(d);\n  }, 0);\n}\n/**\n * 对数据进行百分比化\n * @param data\n * @param measure\n * @param groupField\n * @param as\n */\n\n\nexport function percent(data, measure, groupField, as) {\n  // 1. 首先根据 dimension 分组\n  var groupedData = groupBy(data, groupField);\n  var result = [];\n  each(groupedData, function (v) {\n    var total = sumBy(v, function (o) {\n      return o[measure];\n    });\n    var percentage = map(v, function (o) {\n      var _a;\n\n      return __assign(__assign({}, o), (_a = {}, _a[as] = o[measure] / total, _a));\n    });\n    result.push.apply(result, percentage);\n  });\n  return result;\n}","map":{"version":3,"sources":["../../../src/utils/transform/percent.ts"],"names":[],"mappings":";AAAA,SAAS,OAAT,EAAkB,GAAlB,EAAuB,MAAvB,EAA+B,IAA/B,QAA2C,YAA3C;;AAGA,SAAS,KAAT,CAAe,IAAf,EAA0B,IAA1B,EAAkD;AAChD,SAAO,MAAM,CACX,IADW,EAEX,UAAC,CAAD,EAAY,CAAZ,EAAkB;AAChB,WAAQ,CAAC,IAAI,IAAI,CAAC,CAAD,CAAjB;AACD,GAJU,EAKX,CALW,CAAb;AAOD;AAED;;;;;;AAMG;;;AACH,OAAM,SAAU,OAAV,CAAkB,IAAlB,EAA8B,OAA9B,EAA+C,UAA/C,EAAmE,EAAnE,EAA6E;AACjF;AACA,MAAM,WAAW,GAAG,OAAO,CAAC,IAAD,EAAO,UAAP,CAA3B;AAEA,MAAM,MAAM,GAAG,EAAf;AACA,EAAA,IAAI,CAAC,WAAD,EAAc,UAAC,CAAD,EAAQ;AACxB,QAAM,KAAK,GAAG,KAAK,CAAC,CAAD,EAAI,UAAC,CAAD,EAAE;AAAK,aAAA,CAAC,CAAD,OAAC,CAAD;AAAU,KAArB,CAAnB;AAEA,QAAM,UAAU,GAAG,GAAG,CAAC,CAAD,EAAI,UAAC,CAAD,EAAE;;;AAAK,aAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAC5B,CAD4B,CAAA,GAC3B,EAAA,GAAA,EAAA,EAAA,EAAA,CACH,EADG,CAAA,GACE,CAAC,CAAC,OAAD,CAAD,GAAa,KADf,EACoB,EAFO,EAAA;AAG/B,KAHoB,CAAtB;AAKA,IAAA,MAAM,CAAC,IAAP,CAAW,KAAX,CAAA,MAAA,EAAe,UAAf;AACD,GATG,CAAJ;AAWA,SAAO,MAAP;AACD","sourcesContent":["import { groupBy, map, reduce, each } from '@antv/util';\nimport { Data } from '../../types';\n\nfunction sumBy(data: any, func: (d: any) => number): number {\n  return reduce(\n    data,\n    (r: number, d: any) => {\n      return (r += func(d));\n    },\n    0\n  );\n}\n\n/**\n * 对数据进行百分比化\n * @param data\n * @param measure\n * @param groupField\n * @param as\n */\nexport function percent(data: Data, measure: string, groupField: string, as: string) {\n  // 1. 首先根据 dimension 分组\n  const groupedData = groupBy(data, groupField);\n\n  const result = [];\n  each(groupedData, (v: Data) => {\n    const total = sumBy(v, (o) => o[measure]);\n\n    const percentage = map(v, (o) => ({\n      ...o,\n      [as]: o[measure] / total,\n    }));\n\n    result.push(...percentage);\n  });\n\n  return result;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}