{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport GCanvas from '@antv/g-canvas/lib/canvas';\nimport GSVGCanvas from '@antv/g-svg/lib/canvas';\nimport Base from '../base';\nimport isString from '@antv/util/lib/is-string';\nimport createDOM from '@antv/dom-util/lib/create-dom';\nimport modifyCSS from '@antv/dom-util/lib/modify-css';\nimport isNil from '@antv/util/lib/is-nil';\nimport each from '@antv/util/lib/each';\nimport { transform } from '@antv/matrix-util';\nimport { debounce } from '@antv/util';\nvar max = Math.max;\nvar DEFAULT_MODE = 'default';\nvar KEYSHAPE_MODE = 'keyShape';\nvar DELEGATE_MODE = 'delegate';\nvar SVG = 'svg';\n\nvar MiniMap =\n/** @class */\nfunction (_super) {\n  __extends(MiniMap, _super);\n\n  function MiniMap() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * 主图更新的监听函数，使用 debounce 减少渲染频率\n     * e.g. 拖拽节点只会在松手后的 100ms 后执行 updateCanvas\n     * e.g. render 时大量 addItem 也只会执行一次 updateCanvas\n     */\n\n\n    _this.handleUpdateCanvas = debounce(function (event) {\n      var self = _this;\n      if (self.destroyed) return;\n      self.updateCanvas();\n    }, 100, false);\n    return _this;\n  }\n\n  MiniMap.prototype.getDefaultCfgs = function () {\n    return {\n      container: null,\n      className: 'g6-minimap',\n      viewportClassName: 'g6-minimap-viewport',\n      // Minimap 中默认展示和主图一样的内容，KeyShape 只展示节点和边的 key shape 部分，delegate表示展示自定义的rect，用户可自定义样式\n      type: 'default',\n      padding: 50,\n      size: [200, 120],\n      delegateStyle: {\n        fill: '#40a9ff',\n        stroke: '#096dd9'\n      },\n      refresh: true\n    };\n  };\n\n  MiniMap.prototype.getEvents = function () {\n    return {\n      beforepaint: 'updateViewport',\n      beforeanimate: 'disableRefresh',\n      afteranimate: 'enableRefresh',\n      viewportchange: 'disableOneRefresh'\n    };\n  }; // 若是正在进行动画，不刷新缩略图\n\n\n  MiniMap.prototype.disableRefresh = function () {\n    this.set('refresh', false);\n  };\n\n  MiniMap.prototype.enableRefresh = function () {\n    this.set('refresh', true);\n    this.updateCanvas();\n  };\n\n  MiniMap.prototype.disableOneRefresh = function () {\n    this.set('viewportChange', true);\n  };\n\n  MiniMap.prototype.initViewport = function () {\n    var _this = this;\n\n    var cfgs = this._cfgs;\n    var size = cfgs.size,\n        graph = cfgs.graph;\n    if (this.destroyed) return;\n    var canvas = this.get('canvas');\n    var containerDOM = canvas.get('container');\n    var viewport = createDOM(\"\\n      <div\\n        class=\" + cfgs.viewportClassName + \"\\n        style='position:absolute;\\n          left:0;\\n          top:0;\\n          box-sizing:border-box;\\n          border: 2px solid #1980ff'\\n        draggable=true>\\n      </div>\"); // 计算拖拽水平方向距离\n\n    var x = 0; // 计算拖拽垂直方向距离\n\n    var y = 0; // 是否在拖拽minimap的视口\n\n    var dragging = false; // 缓存viewport当前对于画布的x\n\n    var left = 0; // 缓存viewport当前对于画布的y\n\n    var top = 0; // 缓存viewport当前宽度\n\n    var width = 0; // 缓存viewport当前高度\n\n    var height = 0;\n    var ratio = 0;\n    var zoom = 0;\n    viewport.addEventListener('dragstart', function (e) {\n      if (e.dataTransfer) {\n        var img = new Image();\n        img.src = \"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' %3E%3Cpath /%3E%3C/svg%3E\";\n        e.dataTransfer.setDragImage(img, 0, 0);\n        e.dataTransfer.setData('text', 'view-port-minimap');\n      }\n\n      cfgs.refresh = false;\n\n      if (e.target !== viewport) {\n        return;\n      } // 如果视口已经最大了，不需要拖拽\n\n\n      var style = viewport.style;\n      left = parseInt(style.left, 10);\n      top = parseInt(style.top, 10);\n      width = parseInt(style.width, 10);\n      height = parseInt(style.height, 10);\n\n      if (width > size[0] || height > size[1]) {\n        return;\n      }\n\n      zoom = graph.getZoom();\n      ratio = _this.get('ratio');\n      dragging = true;\n      x = e.clientX;\n      y = e.clientY;\n    }, false);\n    viewport.addEventListener('drag', function (e) {\n      if (!dragging || isNil(e.clientX) || isNil(e.clientY)) {\n        return;\n      }\n\n      var dx = x - e.clientX;\n      var dy = y - e.clientY; // 若视口移动到最左边或最右边了,仅移动到边界\n\n      if (left - dx < 0 || left - dx + width >= size[0]) {\n        dx = 0;\n      } // 若视口移动到最上或最下边了，仅移动到边界\n\n\n      if (top - dy < 0 || top - dy + height >= size[1]) {\n        dy = 0;\n      }\n\n      left -= dx;\n      top -= dy; // 先移动视口，避免移动到边上以后出现视口闪烁\n\n      modifyCSS(viewport, {\n        left: left + \"px\",\n        top: top + \"px\"\n      }); // graph 移动需要偏移量 dx/dy * 缩放比例才会得到正确的移动距离\n\n      graph.translate(dx * zoom / ratio, dy * zoom / ratio);\n      x = e.clientX;\n      y = e.clientY;\n    }, false);\n    viewport.addEventListener('dragend', function () {\n      dragging = false;\n      cfgs.refresh = true;\n    }, false);\n    this.set('viewport', viewport);\n    containerDOM.appendChild(viewport);\n  };\n  /**\n   * 更新 viewport 视图\n   */\n\n\n  MiniMap.prototype.updateViewport = function () {\n    if (this.destroyed) return;\n    var ratio = this.get('ratio');\n    var dx = this.get('dx');\n    var dy = this.get('dy');\n    var totaldx = this.get('totaldx');\n    var totaldy = this.get('totaldy');\n    var graph = this.get('graph');\n    var size = this.get('size');\n    var graphWidth = graph.get('width');\n    var graphHeight = graph.get('height');\n    var topLeft = graph.getPointByCanvas(0, 0);\n    var bottomRight = graph.getPointByCanvas(graphWidth, graphHeight);\n    var viewport = this.get('viewport');\n\n    if (!viewport) {\n      this.initViewport();\n    }\n\n    var zoom = graph.getZoom(); // viewport宽高,左上角点的计算\n\n    var width = (bottomRight.x - topLeft.x) * ratio;\n    var height = (bottomRight.y - topLeft.y) * ratio;\n    var left = topLeft.x * ratio + totaldx;\n    var top = topLeft.y * ratio + totaldy;\n    var right = left + width;\n    var bottom = top + height;\n\n    if (left < 0) {\n      width += left;\n      left = 0;\n    }\n\n    if (right > size[0]) {\n      width = width - (right - size[0]);\n    }\n\n    if (top < 0) {\n      height += top;\n      top = 0;\n    }\n\n    if (bottom > size[1]) {\n      height = height - (bottom - size[1]);\n    } // 缓存目前缩放比，在移动 minimap 视窗时就不用再计算大图的移动量\n\n\n    this.set('ratio', ratio);\n    var correctLeft = left + \"px\";\n    var correctTop = top + \"px\";\n    modifyCSS(viewport, {\n      left: correctLeft,\n      top: correctTop,\n      width: width + \"px\",\n      height: height + \"px\"\n    });\n  };\n  /**\n   * 将主图上的图形完全复制到小图\n   */\n\n\n  MiniMap.prototype.updateGraphShapes = function () {\n    var graph = this._cfgs.graph;\n    var canvas = this.get('canvas');\n    var graphGroup = graph.get('group');\n    if (graphGroup.destroyed) return;\n    var clonedGroup = graphGroup.clone();\n    clonedGroup.resetMatrix();\n    canvas.clear();\n    canvas.add(clonedGroup); // 当 renderer 是 svg，由于渲染引擎的 bug，这里需要将 visible 为 false 的元素手动隐藏\n\n    var renderer = graph.get('renderer');\n\n    if (renderer === SVG) {\n      // 递归更新子元素\n      this.updateVisible(clonedGroup);\n    }\n  }; // svg 在 canvas.add(clonedGroup) 之后会出现 visible 为 false 的元素被展示出来，需要递归更新\n\n\n  MiniMap.prototype.updateVisible = function (ele) {\n    var _this = this;\n\n    if (!ele.isGroup() && !ele.get('visible')) {\n      ele.hide();\n    } else {\n      var children = ele.get('children');\n      if (!children || !children.length) return;\n      children.forEach(function (child) {\n        if (!child.get('visible')) child.hide();\n\n        _this.updateVisible(child);\n      });\n    }\n  }; // 仅在 minimap 上绘制 keyShape\n  // FIXME 如果用户自定义绘制了其他内容，minimap上就无法画出\n\n\n  MiniMap.prototype.updateKeyShapes = function () {\n    var _this = this;\n\n    var graph = this._cfgs.graph;\n    each(graph.getEdges(), function (edge) {\n      _this.updateOneEdgeKeyShape(edge);\n    });\n    each(graph.getNodes(), function (node) {\n      _this.updateOneNodeKeyShape(node);\n    });\n    this.clearDestroyedShapes();\n  };\n  /**\n   * 增加/更新单个元素的 keyShape\n   * @param item INode 实例\n   */\n\n\n  MiniMap.prototype.updateOneNodeKeyShape = function (item) {\n    var canvas = this.get('canvas');\n    var group = canvas.get('children')[0] || canvas.addGroup();\n    var itemMap = this.get('itemMap') || {}; // 差量更新 minimap 上的一个节点，对应主图的 item\n\n    var mappedItem = itemMap[item.get('id')];\n    var bbox = item.getBBox(); // 计算了节点父组矩阵的 bbox\n\n    var cKeyShape = item.get('keyShape').clone();\n    var keyShapeStyle = cKeyShape.attr();\n    var attrs = {\n      x: bbox.centerX,\n      y: bbox.centerY\n    };\n\n    if (!mappedItem) {\n      mappedItem = cKeyShape;\n      group.add(mappedItem);\n    } else {\n      attrs = Object.assign(keyShapeStyle, attrs);\n    }\n\n    var shapeType = mappedItem.get('type');\n\n    if (shapeType === 'rect' || shapeType === 'image') {\n      attrs.x = bbox.minX;\n      attrs.y = bbox.minY;\n    }\n\n    mappedItem.attr(attrs);\n\n    if (!item.isVisible()) {\n      mappedItem.hide();\n    }\n\n    mappedItem.exist = true;\n    itemMap[item.get('id')] = mappedItem;\n    this.set('itemMap', itemMap);\n  };\n  /**\n   * Minimap 中展示自定义的rect，支持用户自定义样式和节点大小\n   */\n\n\n  MiniMap.prototype.updateDelegateShapes = function () {\n    var _this = this;\n\n    var graph = this._cfgs.graph; // 差量更新 minimap 上的节点和边\n\n    each(graph.getEdges(), function (edge) {\n      _this.updateOneEdgeKeyShape(edge);\n    });\n    each(graph.getNodes(), function (node) {\n      _this.updateOneNodeDelegateShape(node);\n    });\n    this.clearDestroyedShapes();\n  };\n\n  MiniMap.prototype.clearDestroyedShapes = function () {\n    var itemMap = this.get('itemMap') || {};\n    var keys = Object.keys(itemMap);\n    if (!keys || keys.length === 0) return;\n\n    for (var i = keys.length - 1; i >= 0; i--) {\n      var shape = itemMap[keys[i]];\n      var exist = shape.exist;\n      shape.exist = false;\n\n      if (!exist) {\n        shape.remove();\n        delete itemMap[keys[i]];\n      }\n    }\n  };\n  /**\n   * 设置只显示 edge 的 keyShape\n   * @param item IEdge 实例\n   */\n\n\n  MiniMap.prototype.updateOneEdgeKeyShape = function (item) {\n    var canvas = this.get('canvas');\n    var group = canvas.get('children')[0] || canvas.addGroup();\n    var itemMap = this.get('itemMap') || {}; // 差量更新 minimap 上的一个节点，对应主图的 item\n\n    var mappedItem = itemMap[item.get('id')];\n\n    if (mappedItem) {\n      var path = item.get('keyShape').attr('path');\n      mappedItem.attr('path', path);\n    } else {\n      mappedItem = item.get('keyShape').clone();\n      group.add(mappedItem);\n      mappedItem.toBack();\n    }\n\n    if (!item.isVisible()) {\n      mappedItem.hide();\n    }\n\n    mappedItem.exist = true;\n    itemMap[item.get('id')] = mappedItem;\n    this.set('itemMap', itemMap);\n  };\n  /**\n   * Minimap 中展示自定义的 rect，支持用户自定义样式和节点大小\n   * 增加/更新单个元素\n   * @param item INode 实例\n   */\n\n\n  MiniMap.prototype.updateOneNodeDelegateShape = function (item) {\n    var canvas = this.get('canvas');\n    var group = canvas.get('children')[0] || canvas.addGroup();\n    var delegateStyle = this.get('delegateStyle');\n    var itemMap = this.get('itemMap') || {}; // 差量更新 minimap 上的一个节点，对应主图的 item\n\n    var mappedItem = itemMap[item.get('id')];\n    var bbox = item.getBBox(); // 计算了节点父组矩阵的 bbox\n\n    if (mappedItem) {\n      var attrs = {\n        x: bbox.minX,\n        y: bbox.minY,\n        width: bbox.width,\n        height: bbox.height\n      };\n      mappedItem.attr(attrs);\n    } else {\n      mappedItem = group.addShape('rect', {\n        attrs: __assign({\n          x: bbox.minX,\n          y: bbox.minY,\n          width: bbox.width,\n          height: bbox.height\n        }, delegateStyle),\n        name: 'minimap-node-shape'\n      });\n    }\n\n    if (!item.isVisible()) {\n      mappedItem.hide();\n    }\n\n    mappedItem.exist = true;\n    itemMap[item.get('id')] = mappedItem;\n    this.set('itemMap', itemMap);\n  };\n\n  MiniMap.prototype.init = function () {\n    this.initContainer();\n    this.get('graph').on('afterupdateitem', this.handleUpdateCanvas);\n    this.get('graph').on('afteritemstatechange', this.handleUpdateCanvas);\n    this.get('graph').on('afteradditem', this.handleUpdateCanvas);\n    this.get('graph').on('afterremoveitem', this.handleUpdateCanvas);\n    this.get('graph').on('afterrender', this.handleUpdateCanvas);\n    this.get('graph').on('afterlayout', this.handleUpdateCanvas);\n  };\n  /**\n   * 初始化 Minimap 的容器\n   */\n\n\n  MiniMap.prototype.initContainer = function () {\n    var self = this;\n    var graph = self.get('graph');\n    var size = self.get('size');\n    var className = self.get('className');\n    var parentNode = self.get('container');\n    var container = createDOM(\"<div class='\" + className + \"' style='width: \" + size[0] + \"px; height: \" + size[1] + \"px; overflow: hidden'></div>\");\n\n    if (isString(parentNode)) {\n      parentNode = document.getElementById(parentNode);\n    }\n\n    if (parentNode) {\n      parentNode.appendChild(container);\n    } else {\n      graph.get('container').appendChild(container);\n    }\n\n    self.set('container', container);\n    var containerDOM = createDOM('<div class=\"g6-minimap-container\" style=\"position: relative;\"></div>');\n    container.appendChild(containerDOM);\n    var canvas;\n    var renderer = graph.get('renderer');\n\n    if (renderer === SVG) {\n      canvas = new GSVGCanvas({\n        container: containerDOM,\n        width: size[0],\n        height: size[1]\n      });\n    } else {\n      canvas = new GCanvas({\n        container: containerDOM,\n        width: size[0],\n        height: size[1]\n      });\n    }\n\n    self.set('canvas', canvas);\n    self.updateCanvas();\n  };\n\n  MiniMap.prototype.updateCanvas = function () {\n    // 如果是在动画，则不刷新视图\n    var isRefresh = this.get('refresh');\n\n    if (!isRefresh) {\n      return;\n    }\n\n    var graph = this.get('graph');\n\n    if (graph.get('destroyed')) {\n      return;\n    } // 如果是视口变换，也不刷新视图，但是需要重置视口大小和位置\n\n\n    if (this.get('viewportChange')) {\n      this.set('viewportChange', false);\n      this.updateViewport();\n    }\n\n    var size = this.get('size');\n    var canvas = this.get('canvas');\n    var type = this.get('type');\n    var padding = this.get('padding');\n\n    if (canvas.destroyed) {\n      return;\n    }\n\n    switch (type) {\n      case DEFAULT_MODE:\n        this.updateGraphShapes();\n        break;\n\n      case KEYSHAPE_MODE:\n        this.updateKeyShapes();\n        break;\n\n      case DELEGATE_MODE:\n        // 得到的节点直接带有 x 和 y，每个节点不存在父 group，即每个节点位置不由父 group 控制\n        this.updateDelegateShapes();\n        break;\n\n      default:\n        break;\n    }\n\n    var group = canvas.get('children')[0];\n    if (!group) return;\n    group.resetMatrix(); // 该 bbox 是准确的，不计算 matrix 的包围盒\n\n    var bbox = group.getCanvasBBox();\n    var graphBBox = graph.get('canvas').getBBox();\n    var width = graphBBox.width;\n    var height = graphBBox.height;\n\n    if (Number.isFinite(bbox.width)) {\n      // 刷新后bbox可能会变，需要重置画布矩阵以缩放到合适的大小\n      width = max(bbox.width, width);\n      height = max(bbox.height, height);\n    }\n\n    width += 2 * padding;\n    height += 2 * padding;\n    var ratio = Math.min(size[0] / width, size[1] / height);\n    var matrix = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n    var minX = 0;\n    var minY = 0; // 平移到左上角\n\n    if (Number.isFinite(bbox.minX)) {\n      minX = -bbox.minX;\n    }\n\n    if (Number.isFinite(bbox.minY)) {\n      minY = -bbox.minY;\n    } // 缩放到适合视口后, 平移到画布中心\n\n\n    var dx = (size[0] - (width - 2 * padding) * ratio) / 2;\n    var dy = (size[1] - (height - 2 * padding) * ratio) / 2;\n    matrix = transform(matrix, [['t', minX, minY], ['s', ratio, ratio], ['t', dx, dy]]);\n    group.setMatrix(matrix); // 更新minimap视口\n\n    this.set('ratio', ratio);\n    this.set('totaldx', dx + minX * ratio);\n    this.set('totaldy', dy + minY * ratio);\n    this.set('dx', dx);\n    this.set('dy', dy);\n    this.updateViewport();\n  };\n  /**\n   * 获取minimap的画布\n   * @return {GCanvas} G的canvas实例\n   */\n\n\n  MiniMap.prototype.getCanvas = function () {\n    return this.get('canvas');\n  };\n  /**\n   * 获取minimap的窗口\n   * @return {HTMLElement} 窗口的dom实例\n   */\n\n\n  MiniMap.prototype.getViewport = function () {\n    return this.get('viewport');\n  };\n  /**\n   * 获取minimap的容器dom\n   * @return {HTMLElement} dom\n   */\n\n\n  MiniMap.prototype.getContainer = function () {\n    return this.get('container');\n  };\n\n  MiniMap.prototype.destroy = function () {\n    this.get('canvas').destroy();\n    var container = this.get('container');\n    container.parentNode.removeChild(container);\n  };\n\n  return MiniMap;\n}(Base);\n\nexport default MiniMap;","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/@antv/g6/es/plugins/minimap/index.js"],"names":["__assign","__extends","GCanvas","GSVGCanvas","Base","isString","createDOM","modifyCSS","isNil","each","transform","debounce","max","Math","DEFAULT_MODE","KEYSHAPE_MODE","DELEGATE_MODE","SVG","MiniMap","_super","_this","apply","arguments","handleUpdateCanvas","event","self","destroyed","updateCanvas","prototype","getDefaultCfgs","container","className","viewportClassName","type","padding","size","delegateStyle","fill","stroke","refresh","getEvents","beforepaint","beforeanimate","afteranimate","viewportchange","disableRefresh","set","enableRefresh","disableOneRefresh","initViewport","cfgs","_cfgs","graph","canvas","get","containerDOM","viewport","x","y","dragging","left","top","width","height","ratio","zoom","addEventListener","e","dataTransfer","img","Image","src","setDragImage","setData","target","style","parseInt","getZoom","clientX","clientY","dx","dy","translate","appendChild","updateViewport","totaldx","totaldy","graphWidth","graphHeight","topLeft","getPointByCanvas","bottomRight","right","bottom","correctLeft","correctTop","updateGraphShapes","graphGroup","clonedGroup","clone","resetMatrix","clear","add","renderer","updateVisible","ele","isGroup","hide","children","length","forEach","child","updateKeyShapes","getEdges","edge","updateOneEdgeKeyShape","getNodes","node","updateOneNodeKeyShape","clearDestroyedShapes","item","group","addGroup","itemMap","mappedItem","bbox","getBBox","cKeyShape","keyShapeStyle","attr","attrs","centerX","centerY","Object","assign","shapeType","minX","minY","isVisible","exist","updateDelegateShapes","updateOneNodeDelegateShape","keys","i","shape","remove","path","toBack","addShape","name","init","initContainer","on","parentNode","document","getElementById","isRefresh","getCanvasBBox","graphBBox","Number","isFinite","min","matrix","setMatrix","getCanvas","getViewport","getContainer","destroy","removeChild"],"mappings":"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","sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport GCanvas from '@antv/g-canvas/lib/canvas';\nimport GSVGCanvas from '@antv/g-svg/lib/canvas';\nimport Base from '../base';\nimport isString from '@antv/util/lib/is-string';\nimport createDOM from '@antv/dom-util/lib/create-dom';\nimport modifyCSS from '@antv/dom-util/lib/modify-css';\nimport isNil from '@antv/util/lib/is-nil';\nimport each from '@antv/util/lib/each';\nimport { transform } from '@antv/matrix-util';\nimport { debounce } from '@antv/util';\nvar max = Math.max;\nvar DEFAULT_MODE = 'default';\nvar KEYSHAPE_MODE = 'keyShape';\nvar DELEGATE_MODE = 'delegate';\nvar SVG = 'svg';\n\nvar MiniMap =\n/** @class */\nfunction (_super) {\n  __extends(MiniMap, _super);\n\n  function MiniMap() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * 主图更新的监听函数，使用 debounce 减少渲染频率\n     * e.g. 拖拽节点只会在松手后的 100ms 后执行 updateCanvas\n     * e.g. render 时大量 addItem 也只会执行一次 updateCanvas\n     */\n\n\n    _this.handleUpdateCanvas = debounce(function (event) {\n      var self = _this;\n      if (self.destroyed) return;\n      self.updateCanvas();\n    }, 100, false);\n    return _this;\n  }\n\n  MiniMap.prototype.getDefaultCfgs = function () {\n    return {\n      container: null,\n      className: 'g6-minimap',\n      viewportClassName: 'g6-minimap-viewport',\n      // Minimap 中默认展示和主图一样的内容，KeyShape 只展示节点和边的 key shape 部分，delegate表示展示自定义的rect，用户可自定义样式\n      type: 'default',\n      padding: 50,\n      size: [200, 120],\n      delegateStyle: {\n        fill: '#40a9ff',\n        stroke: '#096dd9'\n      },\n      refresh: true\n    };\n  };\n\n  MiniMap.prototype.getEvents = function () {\n    return {\n      beforepaint: 'updateViewport',\n      beforeanimate: 'disableRefresh',\n      afteranimate: 'enableRefresh',\n      viewportchange: 'disableOneRefresh'\n    };\n  }; // 若是正在进行动画，不刷新缩略图\n\n\n  MiniMap.prototype.disableRefresh = function () {\n    this.set('refresh', false);\n  };\n\n  MiniMap.prototype.enableRefresh = function () {\n    this.set('refresh', true);\n    this.updateCanvas();\n  };\n\n  MiniMap.prototype.disableOneRefresh = function () {\n    this.set('viewportChange', true);\n  };\n\n  MiniMap.prototype.initViewport = function () {\n    var _this = this;\n\n    var cfgs = this._cfgs;\n    var size = cfgs.size,\n        graph = cfgs.graph;\n    if (this.destroyed) return;\n    var canvas = this.get('canvas');\n    var containerDOM = canvas.get('container');\n    var viewport = createDOM(\"\\n      <div\\n        class=\" + cfgs.viewportClassName + \"\\n        style='position:absolute;\\n          left:0;\\n          top:0;\\n          box-sizing:border-box;\\n          border: 2px solid #1980ff'\\n        draggable=true>\\n      </div>\"); // 计算拖拽水平方向距离\n\n    var x = 0; // 计算拖拽垂直方向距离\n\n    var y = 0; // 是否在拖拽minimap的视口\n\n    var dragging = false; // 缓存viewport当前对于画布的x\n\n    var left = 0; // 缓存viewport当前对于画布的y\n\n    var top = 0; // 缓存viewport当前宽度\n\n    var width = 0; // 缓存viewport当前高度\n\n    var height = 0;\n    var ratio = 0;\n    var zoom = 0;\n    viewport.addEventListener('dragstart', function (e) {\n      if (e.dataTransfer) {\n        var img = new Image();\n        img.src = \"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' %3E%3Cpath /%3E%3C/svg%3E\";\n        e.dataTransfer.setDragImage(img, 0, 0);\n        e.dataTransfer.setData('text', 'view-port-minimap');\n      }\n\n      cfgs.refresh = false;\n\n      if (e.target !== viewport) {\n        return;\n      } // 如果视口已经最大了，不需要拖拽\n\n\n      var style = viewport.style;\n      left = parseInt(style.left, 10);\n      top = parseInt(style.top, 10);\n      width = parseInt(style.width, 10);\n      height = parseInt(style.height, 10);\n\n      if (width > size[0] || height > size[1]) {\n        return;\n      }\n\n      zoom = graph.getZoom();\n      ratio = _this.get('ratio');\n      dragging = true;\n      x = e.clientX;\n      y = e.clientY;\n    }, false);\n    viewport.addEventListener('drag', function (e) {\n      if (!dragging || isNil(e.clientX) || isNil(e.clientY)) {\n        return;\n      }\n\n      var dx = x - e.clientX;\n      var dy = y - e.clientY; // 若视口移动到最左边或最右边了,仅移动到边界\n\n      if (left - dx < 0 || left - dx + width >= size[0]) {\n        dx = 0;\n      } // 若视口移动到最上或最下边了，仅移动到边界\n\n\n      if (top - dy < 0 || top - dy + height >= size[1]) {\n        dy = 0;\n      }\n\n      left -= dx;\n      top -= dy; // 先移动视口，避免移动到边上以后出现视口闪烁\n\n      modifyCSS(viewport, {\n        left: left + \"px\",\n        top: top + \"px\"\n      }); // graph 移动需要偏移量 dx/dy * 缩放比例才会得到正确的移动距离\n\n      graph.translate(dx * zoom / ratio, dy * zoom / ratio);\n      x = e.clientX;\n      y = e.clientY;\n    }, false);\n    viewport.addEventListener('dragend', function () {\n      dragging = false;\n      cfgs.refresh = true;\n    }, false);\n    this.set('viewport', viewport);\n    containerDOM.appendChild(viewport);\n  };\n  /**\n   * 更新 viewport 视图\n   */\n\n\n  MiniMap.prototype.updateViewport = function () {\n    if (this.destroyed) return;\n    var ratio = this.get('ratio');\n    var dx = this.get('dx');\n    var dy = this.get('dy');\n    var totaldx = this.get('totaldx');\n    var totaldy = this.get('totaldy');\n    var graph = this.get('graph');\n    var size = this.get('size');\n    var graphWidth = graph.get('width');\n    var graphHeight = graph.get('height');\n    var topLeft = graph.getPointByCanvas(0, 0);\n    var bottomRight = graph.getPointByCanvas(graphWidth, graphHeight);\n    var viewport = this.get('viewport');\n\n    if (!viewport) {\n      this.initViewport();\n    }\n\n    var zoom = graph.getZoom(); // viewport宽高,左上角点的计算\n\n    var width = (bottomRight.x - topLeft.x) * ratio;\n    var height = (bottomRight.y - topLeft.y) * ratio;\n    var left = topLeft.x * ratio + totaldx;\n    var top = topLeft.y * ratio + totaldy;\n    var right = left + width;\n    var bottom = top + height;\n\n    if (left < 0) {\n      width += left;\n      left = 0;\n    }\n\n    if (right > size[0]) {\n      width = width - (right - size[0]);\n    }\n\n    if (top < 0) {\n      height += top;\n      top = 0;\n    }\n\n    if (bottom > size[1]) {\n      height = height - (bottom - size[1]);\n    } // 缓存目前缩放比，在移动 minimap 视窗时就不用再计算大图的移动量\n\n\n    this.set('ratio', ratio);\n    var correctLeft = left + \"px\";\n    var correctTop = top + \"px\";\n    modifyCSS(viewport, {\n      left: correctLeft,\n      top: correctTop,\n      width: width + \"px\",\n      height: height + \"px\"\n    });\n  };\n  /**\n   * 将主图上的图形完全复制到小图\n   */\n\n\n  MiniMap.prototype.updateGraphShapes = function () {\n    var graph = this._cfgs.graph;\n    var canvas = this.get('canvas');\n    var graphGroup = graph.get('group');\n    if (graphGroup.destroyed) return;\n    var clonedGroup = graphGroup.clone();\n    clonedGroup.resetMatrix();\n    canvas.clear();\n    canvas.add(clonedGroup); // 当 renderer 是 svg，由于渲染引擎的 bug，这里需要将 visible 为 false 的元素手动隐藏\n\n    var renderer = graph.get('renderer');\n\n    if (renderer === SVG) {\n      // 递归更新子元素\n      this.updateVisible(clonedGroup);\n    }\n  }; // svg 在 canvas.add(clonedGroup) 之后会出现 visible 为 false 的元素被展示出来，需要递归更新\n\n\n  MiniMap.prototype.updateVisible = function (ele) {\n    var _this = this;\n\n    if (!ele.isGroup() && !ele.get('visible')) {\n      ele.hide();\n    } else {\n      var children = ele.get('children');\n      if (!children || !children.length) return;\n      children.forEach(function (child) {\n        if (!child.get('visible')) child.hide();\n\n        _this.updateVisible(child);\n      });\n    }\n  }; // 仅在 minimap 上绘制 keyShape\n  // FIXME 如果用户自定义绘制了其他内容，minimap上就无法画出\n\n\n  MiniMap.prototype.updateKeyShapes = function () {\n    var _this = this;\n\n    var graph = this._cfgs.graph;\n    each(graph.getEdges(), function (edge) {\n      _this.updateOneEdgeKeyShape(edge);\n    });\n    each(graph.getNodes(), function (node) {\n      _this.updateOneNodeKeyShape(node);\n    });\n    this.clearDestroyedShapes();\n  };\n  /**\n   * 增加/更新单个元素的 keyShape\n   * @param item INode 实例\n   */\n\n\n  MiniMap.prototype.updateOneNodeKeyShape = function (item) {\n    var canvas = this.get('canvas');\n    var group = canvas.get('children')[0] || canvas.addGroup();\n    var itemMap = this.get('itemMap') || {}; // 差量更新 minimap 上的一个节点，对应主图的 item\n\n    var mappedItem = itemMap[item.get('id')];\n    var bbox = item.getBBox(); // 计算了节点父组矩阵的 bbox\n\n    var cKeyShape = item.get('keyShape').clone();\n    var keyShapeStyle = cKeyShape.attr();\n    var attrs = {\n      x: bbox.centerX,\n      y: bbox.centerY\n    };\n\n    if (!mappedItem) {\n      mappedItem = cKeyShape;\n      group.add(mappedItem);\n    } else {\n      attrs = Object.assign(keyShapeStyle, attrs);\n    }\n\n    var shapeType = mappedItem.get('type');\n\n    if (shapeType === 'rect' || shapeType === 'image') {\n      attrs.x = bbox.minX;\n      attrs.y = bbox.minY;\n    }\n\n    mappedItem.attr(attrs);\n\n    if (!item.isVisible()) {\n      mappedItem.hide();\n    }\n\n    mappedItem.exist = true;\n    itemMap[item.get('id')] = mappedItem;\n    this.set('itemMap', itemMap);\n  };\n  /**\n   * Minimap 中展示自定义的rect，支持用户自定义样式和节点大小\n   */\n\n\n  MiniMap.prototype.updateDelegateShapes = function () {\n    var _this = this;\n\n    var graph = this._cfgs.graph; // 差量更新 minimap 上的节点和边\n\n    each(graph.getEdges(), function (edge) {\n      _this.updateOneEdgeKeyShape(edge);\n    });\n    each(graph.getNodes(), function (node) {\n      _this.updateOneNodeDelegateShape(node);\n    });\n    this.clearDestroyedShapes();\n  };\n\n  MiniMap.prototype.clearDestroyedShapes = function () {\n    var itemMap = this.get('itemMap') || {};\n    var keys = Object.keys(itemMap);\n    if (!keys || keys.length === 0) return;\n\n    for (var i = keys.length - 1; i >= 0; i--) {\n      var shape = itemMap[keys[i]];\n      var exist = shape.exist;\n      shape.exist = false;\n\n      if (!exist) {\n        shape.remove();\n        delete itemMap[keys[i]];\n      }\n    }\n  };\n  /**\n   * 设置只显示 edge 的 keyShape\n   * @param item IEdge 实例\n   */\n\n\n  MiniMap.prototype.updateOneEdgeKeyShape = function (item) {\n    var canvas = this.get('canvas');\n    var group = canvas.get('children')[0] || canvas.addGroup();\n    var itemMap = this.get('itemMap') || {}; // 差量更新 minimap 上的一个节点，对应主图的 item\n\n    var mappedItem = itemMap[item.get('id')];\n\n    if (mappedItem) {\n      var path = item.get('keyShape').attr('path');\n      mappedItem.attr('path', path);\n    } else {\n      mappedItem = item.get('keyShape').clone();\n      group.add(mappedItem);\n      mappedItem.toBack();\n    }\n\n    if (!item.isVisible()) {\n      mappedItem.hide();\n    }\n\n    mappedItem.exist = true;\n    itemMap[item.get('id')] = mappedItem;\n    this.set('itemMap', itemMap);\n  };\n  /**\n   * Minimap 中展示自定义的 rect，支持用户自定义样式和节点大小\n   * 增加/更新单个元素\n   * @param item INode 实例\n   */\n\n\n  MiniMap.prototype.updateOneNodeDelegateShape = function (item) {\n    var canvas = this.get('canvas');\n    var group = canvas.get('children')[0] || canvas.addGroup();\n    var delegateStyle = this.get('delegateStyle');\n    var itemMap = this.get('itemMap') || {}; // 差量更新 minimap 上的一个节点，对应主图的 item\n\n    var mappedItem = itemMap[item.get('id')];\n    var bbox = item.getBBox(); // 计算了节点父组矩阵的 bbox\n\n    if (mappedItem) {\n      var attrs = {\n        x: bbox.minX,\n        y: bbox.minY,\n        width: bbox.width,\n        height: bbox.height\n      };\n      mappedItem.attr(attrs);\n    } else {\n      mappedItem = group.addShape('rect', {\n        attrs: __assign({\n          x: bbox.minX,\n          y: bbox.minY,\n          width: bbox.width,\n          height: bbox.height\n        }, delegateStyle),\n        name: 'minimap-node-shape'\n      });\n    }\n\n    if (!item.isVisible()) {\n      mappedItem.hide();\n    }\n\n    mappedItem.exist = true;\n    itemMap[item.get('id')] = mappedItem;\n    this.set('itemMap', itemMap);\n  };\n\n  MiniMap.prototype.init = function () {\n    this.initContainer();\n    this.get('graph').on('afterupdateitem', this.handleUpdateCanvas);\n    this.get('graph').on('afteritemstatechange', this.handleUpdateCanvas);\n    this.get('graph').on('afteradditem', this.handleUpdateCanvas);\n    this.get('graph').on('afterremoveitem', this.handleUpdateCanvas);\n    this.get('graph').on('afterrender', this.handleUpdateCanvas);\n    this.get('graph').on('afterlayout', this.handleUpdateCanvas);\n  };\n  /**\n   * 初始化 Minimap 的容器\n   */\n\n\n  MiniMap.prototype.initContainer = function () {\n    var self = this;\n    var graph = self.get('graph');\n    var size = self.get('size');\n    var className = self.get('className');\n    var parentNode = self.get('container');\n    var container = createDOM(\"<div class='\" + className + \"' style='width: \" + size[0] + \"px; height: \" + size[1] + \"px; overflow: hidden'></div>\");\n\n    if (isString(parentNode)) {\n      parentNode = document.getElementById(parentNode);\n    }\n\n    if (parentNode) {\n      parentNode.appendChild(container);\n    } else {\n      graph.get('container').appendChild(container);\n    }\n\n    self.set('container', container);\n    var containerDOM = createDOM('<div class=\"g6-minimap-container\" style=\"position: relative;\"></div>');\n    container.appendChild(containerDOM);\n    var canvas;\n    var renderer = graph.get('renderer');\n\n    if (renderer === SVG) {\n      canvas = new GSVGCanvas({\n        container: containerDOM,\n        width: size[0],\n        height: size[1]\n      });\n    } else {\n      canvas = new GCanvas({\n        container: containerDOM,\n        width: size[0],\n        height: size[1]\n      });\n    }\n\n    self.set('canvas', canvas);\n    self.updateCanvas();\n  };\n\n  MiniMap.prototype.updateCanvas = function () {\n    // 如果是在动画，则不刷新视图\n    var isRefresh = this.get('refresh');\n\n    if (!isRefresh) {\n      return;\n    }\n\n    var graph = this.get('graph');\n\n    if (graph.get('destroyed')) {\n      return;\n    } // 如果是视口变换，也不刷新视图，但是需要重置视口大小和位置\n\n\n    if (this.get('viewportChange')) {\n      this.set('viewportChange', false);\n      this.updateViewport();\n    }\n\n    var size = this.get('size');\n    var canvas = this.get('canvas');\n    var type = this.get('type');\n    var padding = this.get('padding');\n\n    if (canvas.destroyed) {\n      return;\n    }\n\n    switch (type) {\n      case DEFAULT_MODE:\n        this.updateGraphShapes();\n        break;\n\n      case KEYSHAPE_MODE:\n        this.updateKeyShapes();\n        break;\n\n      case DELEGATE_MODE:\n        // 得到的节点直接带有 x 和 y，每个节点不存在父 group，即每个节点位置不由父 group 控制\n        this.updateDelegateShapes();\n        break;\n\n      default:\n        break;\n    }\n\n    var group = canvas.get('children')[0];\n    if (!group) return;\n    group.resetMatrix(); // 该 bbox 是准确的，不计算 matrix 的包围盒\n\n    var bbox = group.getCanvasBBox();\n    var graphBBox = graph.get('canvas').getBBox();\n    var width = graphBBox.width;\n    var height = graphBBox.height;\n\n    if (Number.isFinite(bbox.width)) {\n      // 刷新后bbox可能会变，需要重置画布矩阵以缩放到合适的大小\n      width = max(bbox.width, width);\n      height = max(bbox.height, height);\n    }\n\n    width += 2 * padding;\n    height += 2 * padding;\n    var ratio = Math.min(size[0] / width, size[1] / height);\n    var matrix = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n    var minX = 0;\n    var minY = 0; // 平移到左上角\n\n    if (Number.isFinite(bbox.minX)) {\n      minX = -bbox.minX;\n    }\n\n    if (Number.isFinite(bbox.minY)) {\n      minY = -bbox.minY;\n    } // 缩放到适合视口后, 平移到画布中心\n\n\n    var dx = (size[0] - (width - 2 * padding) * ratio) / 2;\n    var dy = (size[1] - (height - 2 * padding) * ratio) / 2;\n    matrix = transform(matrix, [['t', minX, minY], ['s', ratio, ratio], ['t', dx, dy]]);\n    group.setMatrix(matrix); // 更新minimap视口\n\n    this.set('ratio', ratio);\n    this.set('totaldx', dx + minX * ratio);\n    this.set('totaldy', dy + minY * ratio);\n    this.set('dx', dx);\n    this.set('dy', dy);\n    this.updateViewport();\n  };\n  /**\n   * 获取minimap的画布\n   * @return {GCanvas} G的canvas实例\n   */\n\n\n  MiniMap.prototype.getCanvas = function () {\n    return this.get('canvas');\n  };\n  /**\n   * 获取minimap的窗口\n   * @return {HTMLElement} 窗口的dom实例\n   */\n\n\n  MiniMap.prototype.getViewport = function () {\n    return this.get('viewport');\n  };\n  /**\n   * 获取minimap的容器dom\n   * @return {HTMLElement} dom\n   */\n\n\n  MiniMap.prototype.getContainer = function () {\n    return this.get('container');\n  };\n\n  MiniMap.prototype.destroy = function () {\n    this.get('canvas').destroy();\n    var container = this.get('container');\n    container.parentNode.removeChild(container);\n  };\n\n  return MiniMap;\n}(Base);\n\nexport default MiniMap;"]},"metadata":{},"sourceType":"module"}