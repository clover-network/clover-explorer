{"ast":null,"code":"import * as d3Hierarchy from 'd3-hierarchy';\nimport { assign, isArray } from '@antv/util';\nimport { getField, getAllNodes } from './util';\nvar DEFAULT_OPTIONS = {\n  field: 'value',\n  size: [1, 1],\n  round: false,\n  padding: 0,\n  sort: true,\n  as: ['x', 'y']\n};\nexport function partition(data, options) {\n  options = assign({}, DEFAULT_OPTIONS, options);\n  var as = options.as;\n\n  if (!isArray(as) || as.length !== 2) {\n    throw new TypeError('Invalid as: it must be an array with 2 strings (e.g. [ \"x\", \"y\" ])!');\n  }\n\n  var field;\n\n  try {\n    field = getField(options);\n  } catch (e) {\n    console.warn(e);\n  }\n\n  var partition = function (data) {\n    return d3Hierarchy.partition().size(options.size).round(options.round).padding(options.padding)(d3Hierarchy.hierarchy(data).sum(function (d) {\n      return d[field];\n    }));\n  };\n\n  var root = partition(data);\n  /*\n   * points:\n   *   3  2\n   *   0  1\n   */\n\n  var x = as[0];\n  var y = as[1];\n  root.each(function (node) {\n    node[x] = [node.x0, node.x1, node.x1, node.x0];\n    node[y] = [node.y1, node.y1, node.y0, node.y0];\n    ['x0', 'x1', 'y0', 'y1'].forEach(function (prop) {\n      if (as.indexOf(prop) === -1) {\n        delete node[prop];\n      }\n    });\n  });\n  return getAllNodes(root);\n}","map":{"version":3,"sources":["../../../../src/plots/sunburst/hierarchy/partition.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,WAAZ,MAA6B,cAA7B;AACA,SAAS,MAAT,EAAiB,OAAjB,QAAgC,YAAhC;AACA,SAAS,QAAT,EAAmB,WAAnB,QAAsC,QAAtC;AAEA,IAAM,eAAe,GAAY;AAC/B,EAAA,KAAK,EAAE,OADwB;AAE/B,EAAA,IAAI,EAAE,CAAC,CAAD,EAAI,CAAJ,CAFyB;AAG/B,EAAA,KAAK,EAAE,KAHwB;AAI/B,EAAA,OAAO,EAAE,CAJsB;AAK/B,EAAA,IAAI,EAAE,IALyB;AAM/B,EAAA,EAAE,EAAE,CAAC,GAAD,EAAM,GAAN;AAN2B,CAAjC;AAmBA,OAAM,SAAU,SAAV,CAAoB,IAApB,EAA+B,OAA/B,EAA+C;AACnD,EAAA,OAAO,GAAG,MAAM,CAAC,EAAD,EAAgB,eAAhB,EAAiC,OAAjC,CAAhB;AACA,MAAM,EAAE,GAAG,OAAO,CAAC,EAAnB;;AACA,MAAI,CAAC,OAAO,CAAC,EAAD,CAAR,IAAgB,EAAE,CAAC,MAAH,KAAc,CAAlC,EAAqC;AACnC,UAAM,IAAI,SAAJ,CAAc,qEAAd,CAAN;AACD;;AAED,MAAI,KAAJ;;AACA,MAAI;AACF,IAAA,KAAK,GAAG,QAAQ,CAAC,OAAD,CAAhB;AACD,GAFD,CAEE,OAAO,CAAP,EAAU;AACV,IAAA,OAAO,CAAC,IAAR,CAAa,CAAb;AACD;;AAED,MAAM,SAAS,GAAG,UAAC,IAAD,EAAK;AACrB,WAAA,WAAW,CAAC,SAAZ,GAAwB,IAAxB,CAA6B,OAAO,CAAC,IAArC,EAA2C,KAA3C,CAAiD,OAAO,CAAC,KAAzD,EAAgE,OAAhE,CAAwE,OAAO,CAAC,OAAhF,EACE,WAAW,CAAC,SAAZ,CAAsB,IAAtB,EAA4B,GAA5B,CAAgC,UAAC,CAAD,EAAE;AAAK,aAAA,CAAC,CAAD,KAAC,CAAD;AAAQ,KAA/C,CADF,CAAA;AAEC,GAHH;;AAIA,MAAM,IAAI,GAAG,SAAS,CAAC,IAAD,CAAtB;AAEA;;;;AAIG;;AACH,MAAM,CAAC,GAAG,EAAE,CAAC,CAAD,CAAZ;AACA,MAAM,CAAC,GAAG,EAAE,CAAC,CAAD,CAAZ;AACA,EAAA,IAAI,CAAC,IAAL,CAAU,UAAC,IAAD,EAAK;AACb,IAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAC,IAAI,CAAC,EAAN,EAAU,IAAI,CAAC,EAAf,EAAmB,IAAI,CAAC,EAAxB,EAA4B,IAAI,CAAC,EAAjC,CAAV;AACA,IAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAC,IAAI,CAAC,EAAN,EAAU,IAAI,CAAC,EAAf,EAAmB,IAAI,CAAC,EAAxB,EAA4B,IAAI,CAAC,EAAjC,CAAV;AACA,KAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,OAAzB,CAAiC,UAAC,IAAD,EAAK;AACpC,UAAI,EAAE,CAAC,OAAH,CAAW,IAAX,MAAqB,CAAC,CAA1B,EAA6B;AAC3B,eAAO,IAAI,CAAC,IAAD,CAAX;AACD;AACF,KAJD;AAKD,GARD;AAUA,SAAO,WAAW,CAAC,IAAD,CAAlB;AACD","sourcesContent":["import * as d3Hierarchy from 'd3-hierarchy';\nimport { assign, isArray } from '@antv/util';\nimport { getField, getAllNodes } from './util';\n\nconst DEFAULT_OPTIONS: Options = {\n  field: 'value',\n  size: [1, 1], // width, height\n  round: false,\n  padding: 0,\n  sort: true,\n  as: ['x', 'y'],\n};\n\nexport interface Options {\n  field: string;\n  size?: [number, number];\n  round?: boolean;\n  ratio?: number;\n  padding?: number;\n  sort?: boolean;\n  as?: [string, string];\n}\n\nexport function partition(data: any, options: Options): any[] {\n  options = assign({} as Options, DEFAULT_OPTIONS, options);\n  const as = options.as;\n  if (!isArray(as) || as.length !== 2) {\n    throw new TypeError('Invalid as: it must be an array with 2 strings (e.g. [ \"x\", \"y\" ])!');\n  }\n\n  let field;\n  try {\n    field = getField(options);\n  } catch (e) {\n    console.warn(e);\n  }\n\n  const partition = (data) =>\n    d3Hierarchy.partition().size(options.size).round(options.round).padding(options.padding)(\n      d3Hierarchy.hierarchy(data).sum((d) => d[field])\n    );\n  const root = partition(data);\n\n  /*\n   * points:\n   *   3  2\n   *   0  1\n   */\n  const x = as[0];\n  const y = as[1];\n  root.each((node) => {\n    node[x] = [node.x0, node.x1, node.x1, node.x0];\n    node[y] = [node.y1, node.y1, node.y0, node.y0];\n    ['x0', 'x1', 'y0', 'y1'].forEach((prop) => {\n      if (as.indexOf(prop) === -1) {\n        delete node[prop];\n      }\n    });\n  });\n\n  return getAllNodes(root);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}