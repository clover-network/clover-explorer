{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\nimport * as zrUtil from 'zrender/esm/core/util';\nvar KEY_DELIMITER = '-->';\n\nvar getAutoCurvenessParams = function (seriesModel) {\n  return seriesModel.get('autoCurveness') || null;\n};\n\nvar createCurveness = function (seriesModel, appendLength) {\n  var autoCurvenessParmas = getAutoCurvenessParams(seriesModel);\n  var length = 20;\n  var curvenessList = [];\n\n  if (typeof autoCurvenessParmas === 'number') {\n    length = autoCurvenessParmas;\n  } else if (zrUtil.isArray(autoCurvenessParmas)) {\n    seriesModel.__curvenessList = autoCurvenessParmas;\n    return;\n  }\n\n  if (appendLength > length) {\n    length = appendLength;\n  }\n\n  var len = length % 2 ? length + 2 : length + 3;\n  curvenessList = [];\n\n  for (var i = 0; i < len; i++) {\n    curvenessList.push((i % 2 ? i + 1 : i) / 10 * (i % 2 ? -1 : 1));\n  }\n\n  seriesModel.__curvenessList = curvenessList;\n};\n\nvar getKeyOfEdges = function (n1, n2, seriesModel) {\n  var source = [n1.id, n1.dataIndex].join('.');\n  var target = [n2.id, n2.dataIndex].join('.');\n  return [seriesModel.uid, source, target].join(KEY_DELIMITER);\n};\n\nvar getOppositeKey = function (key) {\n  var keys = key.split(KEY_DELIMITER);\n  return [keys[0], keys[2], keys[1]].join(KEY_DELIMITER);\n};\n\nvar getEdgeFromMap = function (edge, seriesModel) {\n  var key = getKeyOfEdges(edge.node1, edge.node2, seriesModel);\n  return seriesModel.__edgeMap[key];\n};\n\nvar getTotalLengthBetweenNodes = function (edge, seriesModel) {\n  var len = getEdgeMapLengthWithKey(getKeyOfEdges(edge.node1, edge.node2, seriesModel), seriesModel);\n  var lenV = getEdgeMapLengthWithKey(getKeyOfEdges(edge.node2, edge.node1, seriesModel), seriesModel);\n  return len + lenV;\n};\n\nvar getEdgeMapLengthWithKey = function (key, seriesModel) {\n  var edgeMap = seriesModel.__edgeMap;\n  return edgeMap[key] ? edgeMap[key].length : 0;\n};\n\nexport function initCurvenessList(seriesModel) {\n  if (!getAutoCurvenessParams(seriesModel)) {\n    return;\n  }\n\n  seriesModel.__curvenessList = [];\n  seriesModel.__edgeMap = {};\n  createCurveness(seriesModel);\n}\nexport function createEdgeMapForCurveness(n1, n2, seriesModel, index) {\n  if (!getAutoCurvenessParams(seriesModel)) {\n    return;\n  }\n\n  var key = getKeyOfEdges(n1, n2, seriesModel);\n  var edgeMap = seriesModel.__edgeMap;\n  var oppositeEdges = edgeMap[getOppositeKey(key)];\n\n  if (edgeMap[key] && !oppositeEdges) {\n    edgeMap[key].isForward = true;\n  } else if (oppositeEdges && edgeMap[key]) {\n    oppositeEdges.isForward = true;\n    edgeMap[key].isForward = false;\n  }\n\n  edgeMap[key] = edgeMap[key] || [];\n  edgeMap[key].push(index);\n}\nexport function getCurvenessForEdge(edge, seriesModel, index, needReverse) {\n  var autoCurvenessParams = getAutoCurvenessParams(seriesModel);\n  var isArrayParam = zrUtil.isArray(autoCurvenessParams);\n\n  if (!autoCurvenessParams) {\n    return null;\n  }\n\n  var edgeArray = getEdgeFromMap(edge, seriesModel);\n\n  if (!edgeArray) {\n    return null;\n  }\n\n  var edgeIndex = -1;\n\n  for (var i = 0; i < edgeArray.length; i++) {\n    if (edgeArray[i] === index) {\n      edgeIndex = i;\n      break;\n    }\n  }\n\n  var totalLen = getTotalLengthBetweenNodes(edge, seriesModel);\n  createCurveness(seriesModel, totalLen);\n  edge.lineStyle = edge.lineStyle || {};\n  var curKey = getKeyOfEdges(edge.node1, edge.node2, seriesModel);\n  var curvenessList = seriesModel.__curvenessList;\n  var parityCorrection = isArrayParam ? 0 : totalLen % 2 ? 0 : 1;\n\n  if (!edgeArray.isForward) {\n    var oppositeKey = getOppositeKey(curKey);\n    var len = getEdgeMapLengthWithKey(oppositeKey, seriesModel);\n    var resValue = curvenessList[edgeIndex + len + parityCorrection];\n\n    if (needReverse) {\n      if (isArrayParam) {\n        if (autoCurvenessParams && autoCurvenessParams[0] === 0) {\n          return (len + parityCorrection) % 2 ? resValue : -resValue;\n        } else {\n          return ((len % 2 ? 0 : 1) + parityCorrection) % 2 ? resValue : -resValue;\n        }\n      } else {\n        return (len + parityCorrection) % 2 ? resValue : -resValue;\n      }\n    } else {\n      return curvenessList[edgeIndex + len + parityCorrection];\n    }\n  } else {\n    return curvenessList[parityCorrection + edgeIndex];\n  }\n}","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/echarts/esm/chart/helper/multipleGraphEdgeHelper.js"],"names":["zrUtil","KEY_DELIMITER","getAutoCurvenessParams","seriesModel","get","createCurveness","appendLength","autoCurvenessParmas","length","curvenessList","isArray","__curvenessList","len","i","push","getKeyOfEdges","n1","n2","source","id","dataIndex","join","target","uid","getOppositeKey","key","keys","split","getEdgeFromMap","edge","node1","node2","__edgeMap","getTotalLengthBetweenNodes","getEdgeMapLengthWithKey","lenV","edgeMap","initCurvenessList","createEdgeMapForCurveness","index","oppositeEdges","isForward","getCurvenessForEdge","needReverse","autoCurvenessParams","isArrayParam","edgeArray","edgeIndex","totalLen","lineStyle","curKey","parityCorrection","oppositeKey","resValue"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\nimport * as zrUtil from 'zrender/esm/core/util';\nvar KEY_DELIMITER = '-->';\n\nvar getAutoCurvenessParams = function (seriesModel) {\n  return seriesModel.get('autoCurveness') || null;\n};\n\nvar createCurveness = function (seriesModel, appendLength) {\n  var autoCurvenessParmas = getAutoCurvenessParams(seriesModel);\n  var length = 20;\n  var curvenessList = [];\n\n  if (typeof autoCurvenessParmas === 'number') {\n    length = autoCurvenessParmas;\n  } else if (zrUtil.isArray(autoCurvenessParmas)) {\n    seriesModel.__curvenessList = autoCurvenessParmas;\n    return;\n  }\n\n  if (appendLength > length) {\n    length = appendLength;\n  }\n\n  var len = length % 2 ? length + 2 : length + 3;\n  curvenessList = [];\n\n  for (var i = 0; i < len; i++) {\n    curvenessList.push((i % 2 ? i + 1 : i) / 10 * (i % 2 ? -1 : 1));\n  }\n\n  seriesModel.__curvenessList = curvenessList;\n};\n\nvar getKeyOfEdges = function (n1, n2, seriesModel) {\n  var source = [n1.id, n1.dataIndex].join('.');\n  var target = [n2.id, n2.dataIndex].join('.');\n  return [seriesModel.uid, source, target].join(KEY_DELIMITER);\n};\n\nvar getOppositeKey = function (key) {\n  var keys = key.split(KEY_DELIMITER);\n  return [keys[0], keys[2], keys[1]].join(KEY_DELIMITER);\n};\n\nvar getEdgeFromMap = function (edge, seriesModel) {\n  var key = getKeyOfEdges(edge.node1, edge.node2, seriesModel);\n  return seriesModel.__edgeMap[key];\n};\n\nvar getTotalLengthBetweenNodes = function (edge, seriesModel) {\n  var len = getEdgeMapLengthWithKey(getKeyOfEdges(edge.node1, edge.node2, seriesModel), seriesModel);\n  var lenV = getEdgeMapLengthWithKey(getKeyOfEdges(edge.node2, edge.node1, seriesModel), seriesModel);\n  return len + lenV;\n};\n\nvar getEdgeMapLengthWithKey = function (key, seriesModel) {\n  var edgeMap = seriesModel.__edgeMap;\n  return edgeMap[key] ? edgeMap[key].length : 0;\n};\n\nexport function initCurvenessList(seriesModel) {\n  if (!getAutoCurvenessParams(seriesModel)) {\n    return;\n  }\n\n  seriesModel.__curvenessList = [];\n  seriesModel.__edgeMap = {};\n  createCurveness(seriesModel);\n}\nexport function createEdgeMapForCurveness(n1, n2, seriesModel, index) {\n  if (!getAutoCurvenessParams(seriesModel)) {\n    return;\n  }\n\n  var key = getKeyOfEdges(n1, n2, seriesModel);\n  var edgeMap = seriesModel.__edgeMap;\n  var oppositeEdges = edgeMap[getOppositeKey(key)];\n\n  if (edgeMap[key] && !oppositeEdges) {\n    edgeMap[key].isForward = true;\n  } else if (oppositeEdges && edgeMap[key]) {\n    oppositeEdges.isForward = true;\n    edgeMap[key].isForward = false;\n  }\n\n  edgeMap[key] = edgeMap[key] || [];\n  edgeMap[key].push(index);\n}\nexport function getCurvenessForEdge(edge, seriesModel, index, needReverse) {\n  var autoCurvenessParams = getAutoCurvenessParams(seriesModel);\n  var isArrayParam = zrUtil.isArray(autoCurvenessParams);\n\n  if (!autoCurvenessParams) {\n    return null;\n  }\n\n  var edgeArray = getEdgeFromMap(edge, seriesModel);\n\n  if (!edgeArray) {\n    return null;\n  }\n\n  var edgeIndex = -1;\n\n  for (var i = 0; i < edgeArray.length; i++) {\n    if (edgeArray[i] === index) {\n      edgeIndex = i;\n      break;\n    }\n  }\n\n  var totalLen = getTotalLengthBetweenNodes(edge, seriesModel);\n  createCurveness(seriesModel, totalLen);\n  edge.lineStyle = edge.lineStyle || {};\n  var curKey = getKeyOfEdges(edge.node1, edge.node2, seriesModel);\n  var curvenessList = seriesModel.__curvenessList;\n  var parityCorrection = isArrayParam ? 0 : totalLen % 2 ? 0 : 1;\n\n  if (!edgeArray.isForward) {\n    var oppositeKey = getOppositeKey(curKey);\n    var len = getEdgeMapLengthWithKey(oppositeKey, seriesModel);\n    var resValue = curvenessList[edgeIndex + len + parityCorrection];\n\n    if (needReverse) {\n      if (isArrayParam) {\n        if (autoCurvenessParams && autoCurvenessParams[0] === 0) {\n          return (len + parityCorrection) % 2 ? resValue : -resValue;\n        } else {\n          return ((len % 2 ? 0 : 1) + parityCorrection) % 2 ? resValue : -resValue;\n        }\n      } else {\n        return (len + parityCorrection) % 2 ? resValue : -resValue;\n      }\n    } else {\n      return curvenessList[edgeIndex + len + parityCorrection];\n    }\n  } else {\n    return curvenessList[parityCorrection + edgeIndex];\n  }\n}"]},"metadata":{},"sourceType":"module"}