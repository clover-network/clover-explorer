{"ast":null,"code":"var hierarchy = require('./hierarchy');\n\nmodule.exports = function (root, options) {\n  // separate into left and right trees\n  var left = hierarchy(root.data, options, true); // root only\n\n  var right = hierarchy(root.data, options, true); // root only\n  // automatically\n\n  var treeSize = root.children.length;\n  var rightTreeSize = Math.round(treeSize / 2); // separate left and right tree by meta data\n\n  var getSide = options.getSide || function (child, index) {\n    if (index < rightTreeSize) {\n      return 'right';\n    }\n\n    return 'left';\n  };\n\n  for (var i = 0; i < treeSize; i++) {\n    var child = root.children[i];\n    var side = getSide(child, i);\n\n    if (side === 'right') {\n      right.children.push(child);\n    } else {\n      left.children.push(child);\n    }\n  }\n\n  left.eachNode(function (node) {\n    if (!node.isRoot()) {\n      node.side = 'left';\n    }\n  });\n  right.eachNode(function (node) {\n    if (!node.isRoot()) {\n      node.side = 'right';\n    }\n  });\n  return {\n    left: left,\n    right: right\n  };\n};","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/@antv/hierarchy/lib/layout/separate-root.js"],"names":["hierarchy","require","module","exports","root","options","left","data","right","treeSize","children","length","rightTreeSize","Math","round","getSide","child","index","i","side","push","eachNode","node","isRoot"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAvB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,IAAV,EAAgBC,OAAhB,EAAyB;AACxC;AACA,MAAIC,IAAI,GAAGN,SAAS,CAACI,IAAI,CAACG,IAAN,EAAYF,OAAZ,EAAqB,IAArB,CAApB,CAFwC,CAEQ;;AAEhD,MAAIG,KAAK,GAAGR,SAAS,CAACI,IAAI,CAACG,IAAN,EAAYF,OAAZ,EAAqB,IAArB,CAArB,CAJwC,CAIS;AACjD;;AAEA,MAAII,QAAQ,GAAGL,IAAI,CAACM,QAAL,CAAcC,MAA7B;AACA,MAAIC,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAWL,QAAQ,GAAG,CAAtB,CAApB,CARwC,CAQM;;AAE9C,MAAIM,OAAO,GAAGV,OAAO,CAACU,OAAR,IAAmB,UAAUC,KAAV,EAAiBC,KAAjB,EAAwB;AACvD,QAAIA,KAAK,GAAGL,aAAZ,EAA2B;AACzB,aAAO,OAAP;AACD;;AAED,WAAO,MAAP;AACD,GAND;;AAQA,OAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,QAApB,EAA8BS,CAAC,EAA/B,EAAmC;AACjC,QAAIF,KAAK,GAAGZ,IAAI,CAACM,QAAL,CAAcQ,CAAd,CAAZ;AACA,QAAIC,IAAI,GAAGJ,OAAO,CAACC,KAAD,EAAQE,CAAR,CAAlB;;AAEA,QAAIC,IAAI,KAAK,OAAb,EAAsB;AACpBX,MAAAA,KAAK,CAACE,QAAN,CAAeU,IAAf,CAAoBJ,KAApB;AACD,KAFD,MAEO;AACLV,MAAAA,IAAI,CAACI,QAAL,CAAcU,IAAd,CAAmBJ,KAAnB;AACD;AACF;;AAEDV,EAAAA,IAAI,CAACe,QAAL,CAAc,UAAUC,IAAV,EAAgB;AAC5B,QAAI,CAACA,IAAI,CAACC,MAAL,EAAL,EAAoB;AAClBD,MAAAA,IAAI,CAACH,IAAL,GAAY,MAAZ;AACD;AACF,GAJD;AAKAX,EAAAA,KAAK,CAACa,QAAN,CAAe,UAAUC,IAAV,EAAgB;AAC7B,QAAI,CAACA,IAAI,CAACC,MAAL,EAAL,EAAoB;AAClBD,MAAAA,IAAI,CAACH,IAAL,GAAY,OAAZ;AACD;AACF,GAJD;AAKA,SAAO;AACLb,IAAAA,IAAI,EAAEA,IADD;AAELE,IAAAA,KAAK,EAAEA;AAFF,GAAP;AAID,CA3CD","sourcesContent":["var hierarchy = require('./hierarchy');\n\nmodule.exports = function (root, options) {\n  // separate into left and right trees\n  var left = hierarchy(root.data, options, true); // root only\n\n  var right = hierarchy(root.data, options, true); // root only\n  // automatically\n\n  var treeSize = root.children.length;\n  var rightTreeSize = Math.round(treeSize / 2); // separate left and right tree by meta data\n\n  var getSide = options.getSide || function (child, index) {\n    if (index < rightTreeSize) {\n      return 'right';\n    }\n\n    return 'left';\n  };\n\n  for (var i = 0; i < treeSize; i++) {\n    var child = root.children[i];\n    var side = getSide(child, i);\n\n    if (side === 'right') {\n      right.children.push(child);\n    } else {\n      left.children.push(child);\n    }\n  }\n\n  left.eachNode(function (node) {\n    if (!node.isRoot()) {\n      node.side = 'left';\n    }\n  });\n  right.eachNode(function (node) {\n    if (!node.isRoot()) {\n      node.side = 'right';\n    }\n  });\n  return {\n    left: left,\n    right: right\n  };\n};"]},"metadata":{},"sourceType":"script"}