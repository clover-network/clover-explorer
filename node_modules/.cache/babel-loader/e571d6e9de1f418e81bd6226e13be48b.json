{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { mix } from '@antv/util';\nimport Global from '../../global';\nimport Shape from '../shape';\nShape.registerNode('rect', {\n  // 自定义节点时的配置\n  options: {\n    size: [100, 30],\n    style: {\n      radius: 0,\n      stroke: Global.defaultNode.style.stroke,\n      fill: Global.defaultNode.style.fill,\n      lineWidth: Global.defaultNode.style.lineWidth\n    },\n    // 文本样式配置\n    labelCfg: {\n      style: {\n        fill: Global.nodeLabel.style.fill,\n        fontSize: Global.nodeLabel.style.fontSize\n      }\n    },\n    // 节点上左右上下四个方向上的链接circle配置\n    linkPoints: {\n      top: false,\n      right: false,\n      bottom: false,\n      left: false,\n      // circle的大小\n      size: Global.defaultNode.linkPoints.size,\n      lineWidth: Global.defaultNode.linkPoints.lineWidth,\n      fill: Global.defaultNode.linkPoints.fill,\n      stroke: Global.defaultNode.linkPoints.stroke\n    },\n    // 节点中icon配置\n    icon: {\n      // 是否显示icon，值为 false 则不渲染icon\n      show: false,\n      // icon的地址，字符串类型\n      img: 'https://gw.alipayobjects.com/zos/bmw-prod/5d015065-8505-4e7a-baec-976f81e3c41d.svg',\n      width: 20,\n      height: 20\n    },\n    // 连接点，默认为左右\n    // anchorPoints: [{ x: 0, y: 0.5 }, { x: 1, y: 0.5 }]\n    anchorPoints: [[0, 0.5], [1, 0.5]],\n    stateStyles: __assign({}, Global.nodeStateStyles)\n  },\n  shapeType: 'rect',\n  labelPosition: 'center',\n  drawShape: function drawShape(cfg, group) {\n    var style = this.getShapeStyle(cfg);\n    var keyShape = group.addShape('rect', {\n      attrs: style,\n      className: this.type + \"-keyShape\",\n      name: this.type + \"-keyShape\",\n      draggable: true\n    });\n    this.drawLinkPoints(cfg, group);\n    return keyShape;\n  },\n\n  /**\n   * 绘制节点上的LinkPoints\n   * @param {Object} cfg data数据配置项\n   * @param {Group} group Group实例\n   */\n  drawLinkPoints: function drawLinkPoints(cfg, group) {\n    var _a = this.getOptions(cfg).linkPoints,\n        linkPoints = _a === void 0 ? {} : _a;\n\n    var top = linkPoints.top,\n        left = linkPoints.left,\n        right = linkPoints.right,\n        bottom = linkPoints.bottom,\n        markSize = linkPoints.size,\n        markR = linkPoints.r,\n        markStyle = __rest(linkPoints, [\"top\", \"left\", \"right\", \"bottom\", \"size\", \"r\"]);\n\n    var size = this.getSize(cfg);\n    var width = size[0];\n    var height = size[1];\n\n    if (left) {\n      // left circle\n      group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: -width / 2,\n          y: 0,\n          r: markSize / 2 || markR || 5\n        }),\n        className: 'link-point-left',\n        name: 'link-point-left',\n        isAnchorPoint: true\n      });\n    }\n\n    if (right) {\n      // right circle\n      group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: width / 2,\n          y: 0,\n          r: markSize / 2 || markR || 5\n        }),\n        className: 'link-point-right',\n        name: 'link-point-right',\n        isAnchorPoint: true\n      });\n    }\n\n    if (top) {\n      // top circle\n      group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: 0,\n          y: -height / 2,\n          r: markSize / 2 || markR || 5\n        }),\n        className: 'link-point-top',\n        name: 'link-point-top',\n        isAnchorPoint: true\n      });\n    }\n\n    if (bottom) {\n      // bottom circle\n      group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: 0,\n          y: height / 2,\n          r: markSize / 2 || markR || 5\n        }),\n        className: 'link-point-bottom',\n        name: 'link-point-bottom',\n        isAnchorPoint: true\n      });\n    }\n  },\n\n  /**\n   * 获取节点的样式，供基于该节点自定义时使用\n   * @param {Object} cfg 节点数据模型\n   * @return {Object} 节点的样式\n   */\n  getShapeStyle: function getShapeStyle(cfg) {\n    var defaultStyle = this.getOptions(cfg).style;\n    var strokeStyle = {\n      stroke: cfg.color\n    }; // 如果设置了color，则覆盖默认的stroke属性\n\n    var style = mix({}, defaultStyle, strokeStyle);\n    var size = this.getSize(cfg);\n    var width = style.width || size[0];\n    var height = style.height || size[1];\n\n    var styles = __assign({\n      x: -width / 2,\n      y: -height / 2,\n      width: width,\n      height: height\n    }, style);\n\n    return styles;\n  },\n  update: function update(cfg, item) {\n    var group = item.getContainer(); // 这里不传 cfg 参数是因为 cfg.style 需要最后覆盖样式\n\n    var defaultStyle = this.getOptions({}).style;\n    var size = this.getSize(cfg);\n    var keyShape = item.get('keyShape');\n\n    if (!cfg.size) {\n      size[0] = keyShape.attr('width') || defaultStyle.width;\n      size[1] = keyShape.attr('height') || defaultStyle.height;\n    } // 下面这些属性需要覆盖默认样式与目前样式，但若在 cfg 中有指定则应该被 cfg 的相应配置覆盖。\n\n\n    var strokeStyle = {\n      stroke: cfg.color,\n      x: -size[0] / 2,\n      y: -size[1] / 2,\n      width: size[0],\n      height: size[1]\n    }; // 与 getShapeStyle 不同在于，update 时需要获取到当前的 style 进行融合。即新传入的配置项中没有涉及的属性，保留当前的配置。\n\n    var style = mix({}, defaultStyle, keyShape.attr(), strokeStyle);\n    style = mix(style, cfg.style);\n    this.updateShape(cfg, item, style, false);\n    this.updateLinkPoints(cfg, group);\n  }\n}, 'single-node');","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/@antv/g6/es/shape/nodes/rect.js"],"names":["__assign","__rest","mix","Global","Shape","registerNode","options","size","style","radius","stroke","defaultNode","fill","lineWidth","labelCfg","nodeLabel","fontSize","linkPoints","top","right","bottom","left","icon","show","img","width","height","anchorPoints","stateStyles","nodeStateStyles","shapeType","labelPosition","drawShape","cfg","group","getShapeStyle","keyShape","addShape","attrs","className","type","name","draggable","drawLinkPoints","_a","getOptions","markSize","markR","r","markStyle","getSize","x","y","isAnchorPoint","defaultStyle","strokeStyle","color","styles","update","item","getContainer","get","attr","updateShape","updateLinkPoints"],"mappings":"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","sourcesContent":["import { __assign, __rest } from \"tslib\";\nimport { mix } from '@antv/util';\nimport Global from '../../global';\nimport Shape from '../shape';\nShape.registerNode('rect', {\n  // 自定义节点时的配置\n  options: {\n    size: [100, 30],\n    style: {\n      radius: 0,\n      stroke: Global.defaultNode.style.stroke,\n      fill: Global.defaultNode.style.fill,\n      lineWidth: Global.defaultNode.style.lineWidth\n    },\n    // 文本样式配置\n    labelCfg: {\n      style: {\n        fill: Global.nodeLabel.style.fill,\n        fontSize: Global.nodeLabel.style.fontSize\n      }\n    },\n    // 节点上左右上下四个方向上的链接circle配置\n    linkPoints: {\n      top: false,\n      right: false,\n      bottom: false,\n      left: false,\n      // circle的大小\n      size: Global.defaultNode.linkPoints.size,\n      lineWidth: Global.defaultNode.linkPoints.lineWidth,\n      fill: Global.defaultNode.linkPoints.fill,\n      stroke: Global.defaultNode.linkPoints.stroke\n    },\n    // 节点中icon配置\n    icon: {\n      // 是否显示icon，值为 false 则不渲染icon\n      show: false,\n      // icon的地址，字符串类型\n      img: 'https://gw.alipayobjects.com/zos/bmw-prod/5d015065-8505-4e7a-baec-976f81e3c41d.svg',\n      width: 20,\n      height: 20\n    },\n    // 连接点，默认为左右\n    // anchorPoints: [{ x: 0, y: 0.5 }, { x: 1, y: 0.5 }]\n    anchorPoints: [[0, 0.5], [1, 0.5]],\n    stateStyles: __assign({}, Global.nodeStateStyles)\n  },\n  shapeType: 'rect',\n  labelPosition: 'center',\n  drawShape: function drawShape(cfg, group) {\n    var style = this.getShapeStyle(cfg);\n    var keyShape = group.addShape('rect', {\n      attrs: style,\n      className: this.type + \"-keyShape\",\n      name: this.type + \"-keyShape\",\n      draggable: true\n    });\n    this.drawLinkPoints(cfg, group);\n    return keyShape;\n  },\n\n  /**\n   * 绘制节点上的LinkPoints\n   * @param {Object} cfg data数据配置项\n   * @param {Group} group Group实例\n   */\n  drawLinkPoints: function drawLinkPoints(cfg, group) {\n    var _a = this.getOptions(cfg).linkPoints,\n        linkPoints = _a === void 0 ? {} : _a;\n\n    var top = linkPoints.top,\n        left = linkPoints.left,\n        right = linkPoints.right,\n        bottom = linkPoints.bottom,\n        markSize = linkPoints.size,\n        markR = linkPoints.r,\n        markStyle = __rest(linkPoints, [\"top\", \"left\", \"right\", \"bottom\", \"size\", \"r\"]);\n\n    var size = this.getSize(cfg);\n    var width = size[0];\n    var height = size[1];\n\n    if (left) {\n      // left circle\n      group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: -width / 2,\n          y: 0,\n          r: markSize / 2 || markR || 5\n        }),\n        className: 'link-point-left',\n        name: 'link-point-left',\n        isAnchorPoint: true\n      });\n    }\n\n    if (right) {\n      // right circle\n      group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: width / 2,\n          y: 0,\n          r: markSize / 2 || markR || 5\n        }),\n        className: 'link-point-right',\n        name: 'link-point-right',\n        isAnchorPoint: true\n      });\n    }\n\n    if (top) {\n      // top circle\n      group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: 0,\n          y: -height / 2,\n          r: markSize / 2 || markR || 5\n        }),\n        className: 'link-point-top',\n        name: 'link-point-top',\n        isAnchorPoint: true\n      });\n    }\n\n    if (bottom) {\n      // bottom circle\n      group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: 0,\n          y: height / 2,\n          r: markSize / 2 || markR || 5\n        }),\n        className: 'link-point-bottom',\n        name: 'link-point-bottom',\n        isAnchorPoint: true\n      });\n    }\n  },\n\n  /**\n   * 获取节点的样式，供基于该节点自定义时使用\n   * @param {Object} cfg 节点数据模型\n   * @return {Object} 节点的样式\n   */\n  getShapeStyle: function getShapeStyle(cfg) {\n    var defaultStyle = this.getOptions(cfg).style;\n    var strokeStyle = {\n      stroke: cfg.color\n    }; // 如果设置了color，则覆盖默认的stroke属性\n\n    var style = mix({}, defaultStyle, strokeStyle);\n    var size = this.getSize(cfg);\n    var width = style.width || size[0];\n    var height = style.height || size[1];\n\n    var styles = __assign({\n      x: -width / 2,\n      y: -height / 2,\n      width: width,\n      height: height\n    }, style);\n\n    return styles;\n  },\n  update: function update(cfg, item) {\n    var group = item.getContainer(); // 这里不传 cfg 参数是因为 cfg.style 需要最后覆盖样式\n\n    var defaultStyle = this.getOptions({}).style;\n    var size = this.getSize(cfg);\n    var keyShape = item.get('keyShape');\n\n    if (!cfg.size) {\n      size[0] = keyShape.attr('width') || defaultStyle.width;\n      size[1] = keyShape.attr('height') || defaultStyle.height;\n    } // 下面这些属性需要覆盖默认样式与目前样式，但若在 cfg 中有指定则应该被 cfg 的相应配置覆盖。\n\n\n    var strokeStyle = {\n      stroke: cfg.color,\n      x: -size[0] / 2,\n      y: -size[1] / 2,\n      width: size[0],\n      height: size[1]\n    }; // 与 getShapeStyle 不同在于，update 时需要获取到当前的 style 进行融合。即新传入的配置项中没有涉及的属性，保留当前的配置。\n\n    var style = mix({}, defaultStyle, keyShape.attr(), strokeStyle);\n    style = mix(style, cfg.style);\n    this.updateShape(cfg, item, style, false);\n    this.updateLinkPoints(cfg, group);\n  }\n}, 'single-node');"]},"metadata":{},"sourceType":"module"}