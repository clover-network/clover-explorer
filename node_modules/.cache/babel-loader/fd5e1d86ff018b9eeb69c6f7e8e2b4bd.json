{"ast":null,"code":"import { angle, midpoint } from \"./geometry\"; // Given a start point, an end point, and a prediciton function,\n// returns a smooth line.\n\nexport function interpose(xmin, xmax, predict) {\n  const l = Math.log(xmax - xmin) * Math.LOG10E + 1 | 0;\n  const precision = 1 * Math.pow(10, -l / 2 - 1),\n        maxIter = 1e4;\n  let points = [px(xmin), px(xmax)],\n      iter = 0;\n\n  while (find(points) && iter < maxIter);\n\n  return points;\n\n  function px(x) {\n    return [x, predict(x)];\n  }\n\n  function find(points) {\n    iter++;\n    const n = points.length;\n    let found = false;\n\n    for (let i = 0; i < n - 1; i++) {\n      const p0 = points[i],\n            p1 = points[i + 1],\n            m = midpoint([p0, p1]),\n            mp = px(m[0]),\n            a0 = angle([p0, m]),\n            a1 = angle([p0, mp]),\n            a = Math.abs(a0 - a1);\n\n      if (a > precision) {\n        points.splice(i + 1, 0, mp);\n        found = true;\n      }\n    }\n\n    return found;\n  }\n}","map":{"version":3,"sources":["/Users/wanglijie/wanglijie/clover-defi-wallet/node_modules/d3-regression/src/utils/interpose.js"],"names":["angle","midpoint","interpose","xmin","xmax","predict","l","Math","log","LOG10E","precision","pow","maxIter","points","px","iter","find","x","n","length","found","i","p0","p1","m","mp","a0","a1","a","abs","splice"],"mappings":"AAAA,SAASA,KAAT,EAAgBC,QAAhB,QAAgC,YAAhC,C,CAEA;AACA;;AACA,OAAO,SAASC,SAAT,CAAmBC,IAAnB,EAAyBC,IAAzB,EAA+BC,OAA/B,EAAuC;AAC5C,QAAMC,CAAC,GAAGC,IAAI,CAACC,GAAL,CAASJ,IAAI,GAAGD,IAAhB,IAAwBI,IAAI,CAACE,MAA7B,GAAsC,CAAtC,GAA0C,CAApD;AACA,QAAMC,SAAS,GAAG,IAAIH,IAAI,CAACI,GAAL,CAAS,EAAT,EAAa,CAACL,CAAD,GAAK,CAAL,GAAS,CAAtB,CAAtB;AAAA,QAAgDM,OAAO,GAAG,GAA1D;AACA,MAAIC,MAAM,GAAG,CAACC,EAAE,CAACX,IAAD,CAAH,EAAWW,EAAE,CAACV,IAAD,CAAb,CAAb;AAAA,MAAmCW,IAAI,GAAG,CAA1C;;AAEA,SAAOC,IAAI,CAACH,MAAD,CAAJ,IAAgBE,IAAI,GAAGH,OAA9B,CAAsC;;AAEtC,SAAOC,MAAP;;AAEA,WAASC,EAAT,CAAYG,CAAZ,EAAc;AACZ,WAAO,CAACA,CAAD,EAAIZ,OAAO,CAACY,CAAD,CAAX,CAAP;AACD;;AAED,WAASD,IAAT,CAAcH,MAAd,EAAqB;AACnBE,IAAAA,IAAI;AACJ,UAAMG,CAAC,GAAGL,MAAM,CAACM,MAAjB;AACA,QAAIC,KAAK,GAAG,KAAZ;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,CAAC,GAAG,CAAxB,EAA2BG,CAAC,EAA5B,EAA+B;AAC7B,YAAMC,EAAE,GAAGT,MAAM,CAACQ,CAAD,CAAjB;AAAA,YACIE,EAAE,GAAGV,MAAM,CAACQ,CAAC,GAAG,CAAL,CADf;AAAA,YAEIG,CAAC,GAAGvB,QAAQ,CAAC,CAACqB,EAAD,EAAKC,EAAL,CAAD,CAFhB;AAAA,YAGIE,EAAE,GAAGX,EAAE,CAACU,CAAC,CAAC,CAAD,CAAF,CAHX;AAAA,YAIIE,EAAE,GAAG1B,KAAK,CAAC,CAACsB,EAAD,EAAKE,CAAL,CAAD,CAJd;AAAA,YAKIG,EAAE,GAAG3B,KAAK,CAAC,CAACsB,EAAD,EAAKG,EAAL,CAAD,CALd;AAAA,YAMIG,CAAC,GAAGrB,IAAI,CAACsB,GAAL,CAASH,EAAE,GAAGC,EAAd,CANR;;AAQA,UAAIC,CAAC,GAAGlB,SAAR,EAAkB;AAChBG,QAAAA,MAAM,CAACiB,MAAP,CAAcT,CAAC,GAAG,CAAlB,EAAqB,CAArB,EAAwBI,EAAxB;AACAL,QAAAA,KAAK,GAAG,IAAR;AACD;AACF;;AAED,WAAOA,KAAP;AACD;AACF","sourcesContent":["import { angle, midpoint } from \"./geometry\";\n\n// Given a start point, an end point, and a prediciton function,\n// returns a smooth line.\nexport function interpose(xmin, xmax, predict){\n  const l = Math.log(xmax - xmin) * Math.LOG10E + 1 | 0;\n  const precision = 1 * Math.pow(10, -l / 2 - 1), maxIter = 1e4;\n  let points = [px(xmin), px(xmax)], iter = 0;\n\n  while (find(points) && iter < maxIter);\n\n  return points;\n  \n  function px(x){\n    return [x, predict(x)];\n  }\n\n  function find(points){\n    iter++;\n    const n = points.length;\n    let found = false;\n    \n    for (let i = 0; i < n - 1; i++){\n      const p0 = points[i],\n          p1 = points[i + 1],\n          m = midpoint([p0, p1]),\n          mp = px(m[0]),\n          a0 = angle([p0, m]),\n          a1 = angle([p0, mp]),\n          a = Math.abs(a0 - a1);\n      \n      if (a > precision){\n        points.splice(i + 1, 0, mp);\n        found = true;\n      }\n    }\n    \n    return found;\n  }\n}"]},"metadata":{},"sourceType":"module"}