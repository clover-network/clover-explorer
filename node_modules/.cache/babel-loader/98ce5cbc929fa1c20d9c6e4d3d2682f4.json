{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { get } from '@antv/util';\nimport { flow, renderStatistic } from '../../utils';\nimport { scale, animation, theme, annotation } from '../../adaptor/common';\nimport { geometry } from '../progress/adaptor';\nimport { PERCENT } from '../gauge/constant';\n/**\n * coordinate 配置\n * @param params\n */\n\nfunction coordinate(params) {\n  var chart = params.chart,\n      options = params.options;\n  var innerRadius = options.innerRadius,\n      radius = options.radius; // coordinate\n\n  chart.coordinate('theta', {\n    innerRadius: innerRadius,\n    radius: radius\n  });\n  return params;\n}\n/**\n * statistic 配置\n * @param params\n */\n\n\nfunction statistic(params) {\n  var chart = params.chart,\n      options = params.options;\n  var innerRadius = options.innerRadius,\n      statistic = options.statistic,\n      percent = options.percent,\n      meta = options.meta;\n  /** 中心文本 指标卡 */\n\n  if (innerRadius && statistic) {\n    var transformContent = statistic.content;\n\n    if (transformContent && !transformContent.formatter) {\n      // @ts-ignore\n      transformContent.formatter = function (_a) {\n        var percent = _a.percent;\n        var metaFormatter = get(meta, [PERCENT, 'formatter']);\n\n        if (metaFormatter) {\n          return metaFormatter(percent);\n        }\n\n        return percent;\n      };\n    }\n\n    renderStatistic(chart, {\n      statistic: __assign(__assign({}, statistic), {\n        content: transformContent\n      }),\n      plotType: 'ring-progress'\n    }, {\n      percent: percent\n    });\n  }\n\n  return params;\n}\n/**\n * 环形进度图适配器\n * @param chart\n * @param options\n */\n\n\nexport function adaptor(params) {\n  return flow(geometry, scale({}), coordinate, statistic, animation, theme, annotation())(params);\n}","map":{"version":3,"sources":["../../../src/plots/ring-progress/adaptor.ts"],"names":[],"mappings":";AAAA,SAAS,GAAT,QAAoB,YAApB;AAEA,SAAS,IAAT,EAAe,eAAf,QAAsC,aAAtC;AACA,SAAS,KAAT,EAAgB,SAAhB,EAA2B,KAA3B,EAAkC,UAAlC,QAAoD,sBAApD;AACA,SAAS,QAAT,QAAyB,qBAAzB;AACA,SAAS,OAAT,QAAwB,mBAAxB;AAGA;;;AAGG;;AACH,SAAS,UAAT,CAAoB,MAApB,EAAuD;AAC7C,MAAA,KAAK,GAAc,MAAM,CAApB,KAAL;AAAA,MAAO,OAAO,GAAK,MAAM,CAAX,OAAd;AACA,MAAA,WAAW,GAAa,OAAO,CAApB,WAAX;AAAA,MAAa,MAAM,GAAK,OAAO,CAAZ,MAAnB,CAF6C,CAIrD;;AACA,EAAA,KAAK,CAAC,UAAN,CAAiB,OAAjB,EAA0B;AACxB,IAAA,WAAW,EAAA,WADa;AAExB,IAAA,MAAM,EAAA;AAFkB,GAA1B;AAKA,SAAO,MAAP;AACD;AAED;;;AAGG;;;AACH,SAAS,SAAT,CAAmB,MAAnB,EAAsD;AAC5C,MAAA,KAAK,GAAc,MAAM,CAApB,KAAL;AAAA,MAAO,OAAO,GAAK,MAAM,CAAX,OAAd;AACA,MAAA,WAAW,GAA+B,OAAO,CAAtC,WAAX;AAAA,MAAa,SAAS,GAAoB,OAAO,CAA3B,SAAtB;AAAA,MAAwB,OAAO,GAAW,OAAO,CAAlB,OAA/B;AAAA,MAAiC,IAAI,GAAK,OAAO,CAAZ,IAArC;AAER;;AACA,MAAI,WAAW,IAAI,SAAnB,EAA8B;AAC5B,QAAM,gBAAgB,GAAG,SAAS,CAAC,OAAnC;;AACA,QAAI,gBAAgB,IAAI,CAAC,gBAAgB,CAAC,SAA1C,EAAqD;AACnD;AACA,MAAA,gBAAgB,CAAC,SAAjB,GAA6B,UAAC,EAAD,EAAY;YAAT,OAAO,GAAA,EAAA,CAAA,O;AACrC,YAAM,aAAa,GAAG,GAAG,CAAC,IAAD,EAAO,CAAC,OAAD,EAAU,WAAV,CAAP,CAAzB;;AACA,YAAI,aAAJ,EAAmB;AACjB,iBAAO,aAAa,CAAC,OAAD,CAApB;AACD;;AACD,eAAO,OAAP;AACD,OAND;AAOD;;AACD,IAAA,eAAe,CACb,KADa,EAEb;AAAE,MAAA,SAAS,EAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAAO,SAAP,CAAA,EAAgB;AAAE,QAAA,OAAO,EAAE;AAAX,OAAhB,CAAX;AAA0D,MAAA,QAAQ,EAAE;AAApE,KAFa,EAGb;AAAE,MAAA,OAAO,EAAA;AAAT,KAHa,CAAf;AAKD;;AAED,SAAO,MAAP;AACD;AAED;;;;AAIG;;;AACH,OAAM,SAAU,OAAV,CAAkB,MAAlB,EAAqD;AACzD,SAAO,IAAI,CAAC,QAAD,EAAW,KAAK,CAAC,EAAD,CAAhB,EAAsB,UAAtB,EAAkC,SAAlC,EAA6C,SAA7C,EAAwD,KAAxD,EAA+D,UAAU,EAAzE,CAAJ,CAAiF,MAAjF,CAAP;AACD","sourcesContent":["import { get } from '@antv/util';\nimport { Params } from '../../core/adaptor';\nimport { flow, renderStatistic } from '../../utils';\nimport { scale, animation, theme, annotation } from '../../adaptor/common';\nimport { geometry } from '../progress/adaptor';\nimport { PERCENT } from '../gauge/constant';\nimport { RingProgressOptions } from './types';\n\n/**\n * coordinate 配置\n * @param params\n */\nfunction coordinate(params: Params<RingProgressOptions>): Params<RingProgressOptions> {\n  const { chart, options } = params;\n  const { innerRadius, radius } = options;\n\n  // coordinate\n  chart.coordinate('theta', {\n    innerRadius,\n    radius,\n  });\n\n  return params;\n}\n\n/**\n * statistic 配置\n * @param params\n */\nfunction statistic(params: Params<RingProgressOptions>): Params<RingProgressOptions> {\n  const { chart, options } = params;\n  const { innerRadius, statistic, percent, meta } = options;\n\n  /** 中心文本 指标卡 */\n  if (innerRadius && statistic) {\n    const transformContent = statistic.content;\n    if (transformContent && !transformContent.formatter) {\n      // @ts-ignore\n      transformContent.formatter = ({ percent }) => {\n        const metaFormatter = get(meta, [PERCENT, 'formatter']);\n        if (metaFormatter) {\n          return metaFormatter(percent);\n        }\n        return percent;\n      };\n    }\n    renderStatistic(\n      chart,\n      { statistic: { ...statistic, content: transformContent }, plotType: 'ring-progress' },\n      { percent }\n    );\n  }\n\n  return params;\n}\n\n/**\n * 环形进度图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<RingProgressOptions>) {\n  return flow(geometry, scale({}), coordinate, statistic, animation, theme, annotation())(params);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}