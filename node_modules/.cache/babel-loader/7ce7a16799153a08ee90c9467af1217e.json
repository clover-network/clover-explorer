{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { Chart } from '@antv/g2';\nimport { each } from '@antv/util';\nimport EE from '@antv/event-emitter';\nimport { bind } from 'size-sensor';\nimport { getContainerSize, getAllElements, deepAssign } from '../utils';\n/**\n * 所有 plot 的基类\n */\n\nvar Plot =\n/** @class */\nfunction (_super) {\n  __extends(Plot, _super);\n\n  function Plot(container, options) {\n    var _this = _super.call(this) || this;\n    /** plot 类型名称 */\n\n\n    _this.type = 'base';\n    _this.container = typeof container === 'string' ? document.getElementById(container) : container;\n    _this.options = deepAssign({}, _this.getDefaultOptions(), options);\n\n    _this.createG2();\n\n    _this.bindEvents();\n\n    return _this;\n  }\n  /**\n   * 创建 G2 实例\n   */\n\n\n  Plot.prototype.createG2 = function () {\n    var _a = this.options,\n        width = _a.width,\n        height = _a.height,\n        padding = _a.padding,\n        appendPadding = _a.appendPadding,\n        renderer = _a.renderer,\n        pixelRatio = _a.pixelRatio,\n        syncViewPadding = _a.syncViewPadding,\n        supportCSSTransform = _a.supportCSSTransform,\n        limitInPlot = _a.limitInPlot;\n    this.chart = new Chart(__assign(__assign({\n      container: this.container,\n      autoFit: false\n    }, this.getChartSize(width, height)), {\n      padding: padding,\n      appendPadding: appendPadding,\n      renderer: renderer,\n      pixelRatio: pixelRatio,\n      localRefresh: false,\n      // 默认关闭，目前 G 还有一些位置问题，难以排查！\n      syncViewPadding: syncViewPadding,\n      supportCSSTransform: supportCSSTransform,\n      limitInPlot: limitInPlot\n    }));\n  };\n  /**\n   * 计算默认的 chart 大小。逻辑简化：如果存在 width 或 height，则直接使用，否则使用容器大小\n   * @param width\n   * @param height\n   */\n\n\n  Plot.prototype.getChartSize = function (width, height) {\n    var chartSize = getContainerSize(this.container);\n    return {\n      width: width || chartSize.width || 400,\n      height: height || chartSize.height || 400\n    };\n  };\n  /**\n   * 绑定代理所有 G2 的事件\n   */\n\n\n  Plot.prototype.bindEvents = function () {\n    var _this = this;\n\n    if (this.chart) {\n      this.chart.on('*', function (e) {\n        if (e === null || e === void 0 ? void 0 : e.type) {\n          _this.emit(e.type, e);\n        }\n      });\n    }\n  };\n  /**\n   * 获取默认的 options 配置项\n   * 每个组件都可以复写\n   */\n\n\n  Plot.prototype.getDefaultOptions = function () {\n    return {\n      renderer: 'canvas',\n      xAxis: {\n        nice: true,\n        label: {\n          autoRotate: false,\n          autoHide: true\n        }\n      },\n      yAxis: {\n        nice: true,\n        label: {\n          autoHide: true,\n          autoRotate: false\n        }\n      },\n      animation: true\n    };\n  };\n  /**\n   * 绘制\n   */\n\n\n  Plot.prototype.render = function () {\n    // 暴力处理，先清空再渲染，需要 G2 层自行做好更新渲染\n    this.chart.clear(); // 因为子 view 会继承父 view 的 options 配置（包括 legend，所以会导致 legend 重复创建）\n    // 所以这里给 chart 实例的 options 配置清空\n    // 最好的解法是在 G2 view.clear 方法的时候，重置 options 配置。或者提供方法去 resetOptions\n    // #1684 理论上在多 view 图形上，只要存在 custom legend，都存在类似问题（子弹图、双轴图）\n    // @ts-ignore\n\n    this.chart.options = {\n      data: [],\n      animate: true\n    };\n    this.chart.views = []; // 删除已有的 views\n    // 执行 adaptor\n\n    this.execAdaptor(); // 渲染\n\n    this.chart.render(); // 绑定\n\n    this.bindSizeSensor();\n  };\n  /**\n   * 更新配置\n   * @param options\n   */\n\n\n  Plot.prototype.update = function (options) {\n    this.options = deepAssign({}, this.options, options);\n    this.render();\n  };\n  /**\n   * 设置状态\n   * @param type 状态类型，支持 'active' | 'inactive' | 'selected' 三种\n   * @param conditions 条件，支持数组\n   * @param status 是否激活，默认 true\n   */\n\n\n  Plot.prototype.setState = function (type, condition, status) {\n    if (status === void 0) {\n      status = true;\n    }\n\n    var elements = getAllElements(this.chart);\n    each(elements, function (ele) {\n      if (condition(ele.getData())) {\n        ele.setState(type, status);\n      }\n    });\n  };\n  /**\n   * 获取状态\n   */\n\n\n  Plot.prototype.getStates = function () {\n    var elements = getAllElements(this.chart);\n    var stateObjects = [];\n    each(elements, function (element) {\n      var data = element.getData();\n      var states = element.getStates();\n      each(states, function (state) {\n        stateObjects.push({\n          data: data,\n          state: state,\n          geometry: element.geometry,\n          element: element\n        });\n      });\n    });\n    return stateObjects;\n  };\n  /**\n   * 更新数据\n   * @param options\n   */\n\n\n  Plot.prototype.changeData = function (data) {\n    // @ts-ignore\n    this.update({\n      data: data\n    }); // TODO: 临时方案，最好使用下面的方式去更新数据\n    // this.chart.changeData(data);\n  };\n  /**\n   * 修改画布大小\n   * @param width\n   * @param height\n   */\n\n\n  Plot.prototype.changeSize = function (width, height) {\n    this.chart.changeSize(width, height);\n  };\n  /**\n   * 销毁\n   */\n\n\n  Plot.prototype.destroy = function () {\n    // 取消 size-sensor 的绑定\n    this.unbindSizeSensor(); // G2 的销毁\n\n    this.chart.destroy(); // 清空已经绑定的事件\n\n    this.off();\n  };\n  /**\n   * 执行 adaptor 操作\n   */\n\n\n  Plot.prototype.execAdaptor = function () {\n    var adaptor = this.getSchemaAdaptor();\n    var padding = this.options.padding; // 更新 padding\n\n    this.chart.padding = padding; // 转化成 G2 API\n\n    adaptor({\n      chart: this.chart,\n      options: this.options\n    });\n  };\n  /**\n   * 当图表容器大小变化的时候，执行的函数\n   */\n\n\n  Plot.prototype.triggerResize = function () {\n    this.chart.forceFit();\n  };\n  /**\n   * 绑定 dom 容器大小变化的事件\n   */\n\n\n  Plot.prototype.bindSizeSensor = function () {\n    var _this = this;\n\n    if (this.unbind) {\n      return;\n    }\n\n    var _a = this.options.autoFit,\n        autoFit = _a === void 0 ? true : _a;\n\n    if (autoFit) {\n      this.unbind = bind(this.container, function () {\n        // 获取最新的宽高信息\n        var _a = getContainerSize(_this.container),\n            width = _a.width,\n            height = _a.height; // 主要是防止绑定的时候触发 resize 回调\n\n\n        if (width !== _this.chart.width || height !== _this.chart.height) {\n          _this.triggerResize();\n        }\n      });\n    }\n  };\n  /**\n   * 取消绑定\n   */\n\n\n  Plot.prototype.unbindSizeSensor = function () {\n    if (this.unbind) {\n      this.unbind();\n      this.unbind = undefined;\n    }\n  };\n\n  return Plot;\n}(EE);\n\nexport { Plot };","map":{"version":3,"sources":["../../src/core/plot.ts"],"names":[],"mappings":"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","sourcesContent":["import { Chart, Event } from '@antv/g2';\nimport Element from '@antv/g2/lib/geometry/element';\nimport { each } from '@antv/util';\nimport EE from '@antv/event-emitter';\nimport { bind } from 'size-sensor';\nimport { Options, StateName, StateCondition, Size, StateObject } from '../types';\nimport { getContainerSize, getAllElements, deepAssign } from '../utils';\nimport { Adaptor } from './adaptor';\n\n/** 单独 pick 出来的用于基类的类型定义 */\nexport type PickOptions = Pick<\n  Options,\n  | 'width'\n  | 'height'\n  | 'padding'\n  | 'appendPadding'\n  | 'renderer'\n  | 'pixelRatio'\n  | 'autoFit'\n  | 'syncViewPadding'\n  | 'supportCSSTransform'\n  | 'limitInPlot'\n>;\n\n/**\n * 所有 plot 的基类\n */\nexport abstract class Plot<O extends PickOptions> extends EE {\n  /** plot 类型名称 */\n  public abstract readonly type: string = 'base';\n  /** plot 的 schema 配置 */\n  public options: O;\n  /** plot 绘制的 dom */\n  public readonly container: HTMLElement;\n  /** G2 chart 实例 */\n  public chart: Chart;\n  /** resizer unbind  */\n  private unbind: () => void;\n\n  constructor(container: string | HTMLElement, options: O) {\n    super();\n    this.container = typeof container === 'string' ? document.getElementById(container) : container;\n\n    this.options = deepAssign({}, this.getDefaultOptions(), options);\n\n    this.createG2();\n\n    this.bindEvents();\n  }\n\n  /**\n   * 创建 G2 实例\n   */\n  private createG2() {\n    const {\n      width,\n      height,\n      padding,\n      appendPadding,\n      renderer,\n      pixelRatio,\n      syncViewPadding,\n      supportCSSTransform,\n      limitInPlot,\n    } = this.options;\n\n    this.chart = new Chart({\n      container: this.container,\n      autoFit: false, // G2Plot 使用 size-sensor 进行 autoFit\n      ...this.getChartSize(width, height),\n      padding,\n      appendPadding,\n      renderer,\n      pixelRatio,\n      localRefresh: false, // 默认关闭，目前 G 还有一些位置问题，难以排查！\n      syncViewPadding,\n      supportCSSTransform,\n      limitInPlot,\n    });\n  }\n\n  /**\n   * 计算默认的 chart 大小。逻辑简化：如果存在 width 或 height，则直接使用，否则使用容器大小\n   * @param width\n   * @param height\n   */\n  private getChartSize(width: number, height: number): Size {\n    const chartSize = getContainerSize(this.container);\n    return { width: width || chartSize.width || 400, height: height || chartSize.height || 400 };\n  }\n\n  /**\n   * 绑定代理所有 G2 的事件\n   */\n  private bindEvents() {\n    if (this.chart) {\n      this.chart.on('*', (e: Event) => {\n        if (e?.type) {\n          this.emit(e.type, e);\n        }\n      });\n    }\n  }\n\n  /**\n   * 获取默认的 options 配置项\n   * 每个组件都可以复写\n   */\n  protected getDefaultOptions(): any {\n    return {\n      renderer: 'canvas',\n      xAxis: {\n        nice: true,\n        label: {\n          autoRotate: false,\n          autoHide: true,\n        },\n      },\n      yAxis: {\n        nice: true,\n        label: {\n          autoHide: true,\n          autoRotate: false,\n        },\n      },\n      animation: true,\n    };\n  }\n\n  /**\n   * 每个组件有自己的 schema adaptor\n   */\n  protected abstract getSchemaAdaptor(): Adaptor<O>;\n\n  /**\n   * 绘制\n   */\n  public render() {\n    // 暴力处理，先清空再渲染，需要 G2 层自行做好更新渲染\n    this.chart.clear();\n    // 因为子 view 会继承父 view 的 options 配置（包括 legend，所以会导致 legend 重复创建）\n    // 所以这里给 chart 实例的 options 配置清空\n    // 最好的解法是在 G2 view.clear 方法的时候，重置 options 配置。或者提供方法去 resetOptions\n    // #1684 理论上在多 view 图形上，只要存在 custom legend，都存在类似问题（子弹图、双轴图）\n    // @ts-ignore\n    this.chart.options = {\n      data: [],\n      animate: true,\n    };\n    this.chart.views = []; // 删除已有的 views\n    // 执行 adaptor\n    this.execAdaptor();\n    // 渲染\n    this.chart.render();\n    // 绑定\n    this.bindSizeSensor();\n  }\n\n  /**\n   * 更新配置\n   * @param options\n   */\n  public update(options: Partial<O>) {\n    this.options = deepAssign({}, this.options, options);\n    this.render();\n  }\n\n  /**\n   * 设置状态\n   * @param type 状态类型，支持 'active' | 'inactive' | 'selected' 三种\n   * @param conditions 条件，支持数组\n   * @param status 是否激活，默认 true\n   */\n  public setState(type: StateName, condition: StateCondition, status: boolean = true) {\n    const elements = getAllElements(this.chart);\n\n    each(elements, (ele: Element) => {\n      if (condition(ele.getData())) {\n        ele.setState(type, status);\n      }\n    });\n  }\n\n  /**\n   * 获取状态\n   */\n  public getStates(): StateObject[] {\n    const elements = getAllElements(this.chart);\n\n    const stateObjects: StateObject[] = [];\n    each(elements, (element: Element) => {\n      const data = element.getData();\n      const states = element.getStates();\n      each(states, (state) => {\n        stateObjects.push({ data, state, geometry: element.geometry, element });\n      });\n    });\n\n    return stateObjects;\n  }\n\n  /**\n   * 更新数据\n   * @param options\n   */\n  public changeData(data: any) {\n    // @ts-ignore\n    this.update({ data });\n    // TODO: 临时方案，最好使用下面的方式去更新数据\n    // this.chart.changeData(data);\n  }\n\n  /**\n   * 修改画布大小\n   * @param width\n   * @param height\n   */\n  public changeSize(width: number, height: number) {\n    this.chart.changeSize(width, height);\n  }\n\n  /**\n   * 销毁\n   */\n  public destroy() {\n    // 取消 size-sensor 的绑定\n    this.unbindSizeSensor();\n    // G2 的销毁\n    this.chart.destroy();\n    // 清空已经绑定的事件\n    this.off();\n  }\n\n  /**\n   * 执行 adaptor 操作\n   */\n  protected execAdaptor() {\n    const adaptor = this.getSchemaAdaptor();\n\n    const { padding } = this.options;\n    // 更新 padding\n    this.chart.padding = padding;\n\n    // 转化成 G2 API\n    adaptor({\n      chart: this.chart,\n      options: this.options,\n    });\n  }\n\n  /**\n   * 当图表容器大小变化的时候，执行的函数\n   */\n  protected triggerResize() {\n    this.chart.forceFit();\n  }\n\n  /**\n   * 绑定 dom 容器大小变化的事件\n   */\n  private bindSizeSensor() {\n    if (this.unbind) {\n      return;\n    }\n\n    const { autoFit = true } = this.options;\n    if (autoFit) {\n      this.unbind = bind(this.container, () => {\n        // 获取最新的宽高信息\n        const { width, height } = getContainerSize(this.container);\n\n        // 主要是防止绑定的时候触发 resize 回调\n        if (width !== this.chart.width || height !== this.chart.height) {\n          this.triggerResize();\n        }\n      });\n    }\n  }\n\n  /**\n   * 取消绑定\n   */\n  private unbindSizeSensor() {\n    if (this.unbind) {\n      this.unbind();\n      this.unbind = undefined;\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}