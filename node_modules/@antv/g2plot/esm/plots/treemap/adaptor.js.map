{"version":3,"file":"adaptor.js","sourceRoot":"","sources":["../../../src/plots/treemap/adaptor.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,IAAI,WAAW,EAAE,MAAM,kCAAkC,CAAC;AAE1E,OAAO,EAAE,WAAW,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,sBAAsB,CAAC;AAClG,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,aAAa,CAAC;AAC/C,OAAO,EAAE,aAAa,EAAE,MAAM,SAAS,CAAC;AAGxC;;;GAGG;AACH,SAAS,cAAc,CAAC,MAA8B;IAC5C,IAAA,OAAO,GAAK,MAAM,QAAX,CAAY;IACnB,IAAA,UAAU,GAAK,OAAO,WAAZ,CAAa;IAE/B,OAAO,UAAU,CACf;QACE,OAAO,EAAE;YACP,sBAAsB;YACtB,UAAU,EAAE,MAAM;YAClB,KAAK,EAAE;gBACL,MAAM,EAAE,CAAC,MAAM,CAAC;gBAChB,MAAM,EAAE;oBACN,IAAI,EAAE,gBAAgB;iBACvB;aACF;YACD,OAAO,EAAE;gBACP,WAAW,EAAE,KAAK;gBAClB,SAAS,EAAE,KAAK;gBAChB,MAAM,EAAE,CAAC,MAAM,EAAE,OAAO,EAAE,UAAU,CAAC;gBACrC,SAAS,EAAE,UAAC,IAAI;oBACd,OAAO;wBACL,IAAI,EAAE,IAAI,CAAC,IAAI;wBACf,KAAK,EAAE,IAAI,CAAC,KAAK;qBAClB,CAAC;gBACJ,CAAC;aACF;SACF;KACF,EACD,MAAM,CACP,CAAC;AACJ,CAAC;AAED;;;GAGG;AACH,SAAS,QAAQ,CAAC,MAA8B;IACtC,IAAA,KAAK,GAAc,MAAM,MAApB,EAAE,OAAO,GAAK,MAAM,QAAX,CAAY;IAC1B,IAAA,KAAK,GAAiB,OAAO,MAAxB,EAAE,UAAU,GAAK,OAAO,WAAZ,CAAa;IACtC,IAAM,IAAI,GAAG,aAAa,CAAC,OAAO,CAAC,CAAC;IACpC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAEjB,WAAW;IACX,WAAW,CACT,UAAU,CAAC,EAAE,EAAE,MAAM,EAAE;QACrB,OAAO,EAAE;YACP,MAAM,EAAE,GAAG;YACX,MAAM,EAAE,GAAG;YACX,WAAW,EAAE,UAAU;YACvB,OAAO,EAAE;gBACP,KAAK,OAAA;gBACL,KAAK,EAAE;oBACL,SAAS,EAAE,CAAC;oBACZ,MAAM,EAAE,MAAM;iBACf;aACF;SACF;KACF,CAAC,CACH,CAAC;IAEF,OAAO,MAAM,CAAC;AAChB,CAAC;AAED;;;GAGG;AACH,SAAS,IAAI,CAAC,MAA8B;IAClC,IAAA,KAAK,GAAK,MAAM,MAAX,CAAY;IACzB,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAClB,OAAO,MAAM,CAAC;AAChB,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,OAAO,CAAC,MAA8B;IACpD,OAAO,IAAI,CAAC,cAAc,EAAE,QAAQ,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,WAAW,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;AACpH,CAAC","sourcesContent":["import { polygon as basePolygon } from '../../adaptor/geometries/polygon';\nimport { Params } from '../../core/adaptor';\nimport { interaction, animation, theme, legend, annotation, tooltip } from '../../adaptor/common';\nimport { flow, deepAssign } from '../../utils';\nimport { transformData } from './utils';\nimport { TreemapOptions } from './types';\n\n/**\n * 获取默认 option\n * @param params\n */\nfunction defaultOptions(params: Params<TreemapOptions>): Params<TreemapOptions> {\n  const { options } = params;\n  const { colorField } = options;\n\n  return deepAssign(\n    {\n      options: {\n        // 默认按照 name 字段对颜色进行分类\n        colorField: 'name',\n        label: {\n          fields: ['name'],\n          layout: {\n            type: 'limit-in-shape',\n          },\n        },\n        tooltip: {\n          showMarkers: false,\n          showTitle: false,\n          fields: ['name', 'value', colorField],\n          formatter: (data) => {\n            return {\n              name: data.name,\n              value: data.value,\n            };\n          },\n        },\n      },\n    },\n    params\n  );\n}\n\n/**\n * 字段\n * @param params\n */\nfunction geometry(params: Params<TreemapOptions>): Params<TreemapOptions> {\n  const { chart, options } = params;\n  const { color, colorField } = options;\n  const data = transformData(options);\n  chart.data(data);\n\n  // geometry\n  basePolygon(\n    deepAssign({}, params, {\n      options: {\n        xField: 'x',\n        yField: 'y',\n        seriesField: colorField,\n        polygon: {\n          color,\n          style: {\n            lineWidth: 1,\n            stroke: '#fff',\n          },\n        },\n      },\n    })\n  );\n\n  return params;\n}\n\n/**\n * 坐标轴\n * @param params\n */\nfunction axis(params: Params<TreemapOptions>): Params<TreemapOptions> {\n  const { chart } = params;\n  chart.axis(false);\n  return params;\n}\n\n/**\n * 矩形树图\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<TreemapOptions>) {\n  return flow(defaultOptions, geometry, axis, theme, legend, tooltip, interaction, animation, annotation())(params);\n}\n"]}