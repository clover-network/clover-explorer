{"version":3,"file":"treemap.js","sourceRoot":"","sources":["../../../../src/plots/sunburst/hierarchy/treemap.ts"],"names":[],"mappings":"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","sourcesContent":["import * as d3Hierarchy from 'd3-hierarchy';\nimport { assign, isArray } from '@antv/util';\nimport { HierarchyOption } from '../types';\nimport { getField, getAllNodes } from './util';\n\nconst DEFAULT_OPTIONS: HierarchyOption = {\n  field: 'value',\n  tile: 'treemapSquarify', // treemapBinary, treemapDice, treemapSlice, treemapSliceDice, treemapSquarify, treemapResquarify\n  size: [1, 1], // width, height\n  round: false,\n  padding: 0,\n  paddingInner: 0,\n  paddingOuter: 0,\n  paddingTop: 0,\n  paddingRight: 0,\n  paddingBottom: 0,\n  paddingLeft: 0,\n  as: ['x', 'y'],\n};\n\nexport function treemap(data: any, options: HierarchyOption): any[] {\n  options = assign({} as HierarchyOption, DEFAULT_OPTIONS, options);\n  const as = options.as;\n  if (!isArray(as) || as.length !== 2) {\n    throw new TypeError('Invalid as: it must be an array with 2 strings (e.g. [ \"x\", \"y\" ])!');\n  }\n\n  let field;\n  try {\n    field = getField(options);\n  } catch (e) {\n    console.warn(e);\n  }\n\n  const partition = (data) =>\n    d3Hierarchy\n      .treemap()\n      .tile(d3Hierarchy[options.tile])\n      .size(options.size)\n      .round(options.round)\n      .padding(options.padding)\n      .paddingInner(options.paddingInner)\n      .paddingOuter(options.paddingOuter)\n      .paddingTop(options.paddingTop)\n      .paddingRight(options.paddingRight)\n      .paddingBottom(options.paddingBottom)\n      .paddingLeft(options.paddingLeft)(d3Hierarchy.hierarchy(data).sum((d) => d[field]));\n  const root = partition(data);\n\n  /*\n   * points:\n   *   3  2\n   *   0  1\n   */\n  const x = as[0];\n  const y = as[1];\n  root.each((node) => {\n    node[x] = [node.x0, node.x1, node.x1, node.x0];\n    node[y] = [node.y1, node.y1, node.y0, node.y0];\n    ['x0', 'x1', 'y0', 'y1'].forEach((prop) => {\n      if (as.indexOf(prop) === -1) {\n        delete node[prop];\n      }\n    });\n  });\n\n  return getAllNodes(root);\n}\n"]}