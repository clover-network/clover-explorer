import { __assign } from "tslib";
import { get, isArray } from '@antv/util';
import { deepAssign } from '../../../utils';
import { DualAxesGeometry, AxisType, } from '../types';
import { DEFAULT_LEFT_YAXIS_CONFIG, DEFAULT_RIGHT_YAXIS_CONFIG } from '../constant';
/**
 * 根据 GeometryOption 判断 geometry 是否为 line
 */
export function isLine(geometryOption) {
    return get(geometryOption, 'geometry') === DualAxesGeometry.Line;
}
/**
 * 根据 GeometryOption 判断 geometry 是否为 Column
 */
export function isColumn(geometryOption) {
    return get(geometryOption, 'geometry') === DualAxesGeometry.Column;
}
/**
 * 获取 GeometryOption
 * @param geometryOption
 * @param axis
 */
export function getGeometryOption(xField, yField, geometryOption) {
    // 空默认为线
    return isColumn(geometryOption)
        ? deepAssign({}, {
            geometry: DualAxesGeometry.Column,
            label: geometryOption.label && geometryOption.isRange
                ? {
                    content: function (item) {
                        var _a;
                        return (_a = item[yField]) === null || _a === void 0 ? void 0 : _a.join('-');
                    },
                }
                : undefined,
        }, geometryOption)
        : __assign({ geometry: DualAxesGeometry.Line }, geometryOption);
}
/**
 * 兼容一些属性 为 arr 和 obj 的两种情况， 如 yAxis，annotations
 * @param yField
 * @param options['some attribute']
 */
export function transArrayToObject(yField, transAttribute, arrayTip) {
    var _a, _b;
    var y1 = yField[0], y2 = yField[1];
    if (isArray(transAttribute)) {
        if (arrayTip) {
            console.warn('yAxis should be object.');
        }
        return _a = {}, _a[y1] = transAttribute[0], _a[y2] = transAttribute[1], _a;
    }
    // 追加默认值
    return deepAssign((_b = {}, _b[y1] = undefined, _b[y2] = undefined, _b), transAttribute);
}
/**
 * 获取默认值
 * @param yAxis
 * @param axisType
 */
export function getYAxisWithDefault(yAxis, axisType) {
    if (axisType === AxisType.Left) {
        return yAxis === false ? false : deepAssign({}, DEFAULT_LEFT_YAXIS_CONFIG, yAxis);
    }
    else if (axisType === AxisType.Right) {
        return yAxis === false ? false : deepAssign({}, DEFAULT_RIGHT_YAXIS_CONFIG, yAxis);
    }
    return yAxis;
}
//# sourceMappingURL=option.js.map