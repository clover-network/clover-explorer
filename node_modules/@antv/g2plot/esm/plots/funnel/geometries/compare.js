import { map } from '@antv/util';
import { flow, findGeometry, deepAssign } from '../../../utils';
import { getTooltipMapping } from '../../../utils/tooltip';
import { geometry as baseGeometry } from '../../../adaptor/geometries/base';
import { FUNNEL_PERCENT, FUNNEL_CONVERSATION } from '../constant';
import { geometryLabel, conversionTagComponent } from './common';
/**
 * 处理字段数据
 * @param params
 */
function field(params) {
    var _a;
    var chart = params.chart, options = params.options;
    var _b = options.data, data = _b === void 0 ? [] : _b, yField = options.yField, compareField = options.compareField;
    // 处理数据
    var formatData = [];
    if (data[0][yField]) {
        // format 数据
        var depRecord_1 = {};
        formatData = map(data, function (row) {
            if (row[yField] !== undefined && row[compareField]) {
                if (!depRecord_1[row[compareField]])
                    depRecord_1[row[compareField]] = row[yField];
                if (!depRecord_1["last_" + row[compareField]])
                    depRecord_1["last_" + row[compareField]] = row[yField];
                row[FUNNEL_PERCENT] = row[yField] / depRecord_1[row[compareField]];
                row[FUNNEL_CONVERSATION] = row[yField] / depRecord_1["last_" + row[compareField]];
                // 更新 lastVersion
                depRecord_1["last_" + row[compareField]] = row[yField];
            }
            return row;
        });
    }
    // 绘制漏斗图
    chart.data(formatData);
    chart.scale((_a = {},
        _a[yField] = {
            sync: true,
        },
        _a));
    return params;
}
/**
 * geometry处理
 * @param params
 */
function geometry(params) {
    var chart = params.chart, options = params.options;
    var xField = options.xField, yField = options.yField, color = options.color, compareField = options.compareField, isTransposed = options.isTransposed, tooltip = options.tooltip;
    chart.facet('mirror', {
        fields: [compareField],
        // 漏斗图的转置规则与分面相反，默认是垂直布局
        transpose: !isTransposed,
        padding: isTransposed ? 0 : [32, 0, 0, 0],
        eachView: function (view, facet) {
            if (!isTransposed) {
                view.coordinate({
                    type: 'rect',
                    actions: [['transpose'], ['scale', facet.columnIndex === 0 ? -1 : 1, -1]],
                });
            }
            // 绘制图形
            var _a = getTooltipMapping(tooltip, [xField, yField, FUNNEL_PERCENT, FUNNEL_CONVERSATION]), fields = _a.fields, formatter = _a.formatter;
            baseGeometry({
                chart: view,
                options: {
                    type: 'interval',
                    xField: xField,
                    yField: yField,
                    colorField: xField,
                    tooltipFields: fields,
                    mapping: {
                        shape: 'funnel',
                        tooltip: formatter,
                        color: color,
                        style: {
                            lineWidth: 1,
                            stroke: '#fff',
                        },
                    },
                },
            });
        },
    });
    return params;
}
/**
 * label 处理
 * @param params
 */
function label(params) {
    var chart = params.chart, options = params.options;
    var label = options.label, isTransposed = options.isTransposed;
    chart.once('beforepaint', function () {
        chart.views.forEach(function (view, index) {
            var geometry = findGeometry(view, 'interval');
            geometryLabel(geometry)(label
                ? deepAssign({}, params, {
                    chart: view,
                    options: {
                        label: isTransposed
                            ? {
                                offset: index === 0 ? 10 : -23,
                                position: index === 0 ? 'bottom' : 'top',
                            }
                            : {
                                offset: 10,
                                position: 'left',
                                style: {
                                    textAlign: index === 0 ? 'end' : 'start',
                                },
                            },
                    },
                })
                : params);
        });
    });
    return params;
}
/**
 * 转化率组件
 * @param params
 */
function conversionTag(params) {
    var chart = params.chart, options = params.options;
    var yField = options.yField, conversionTag = options.conversionTag, isTransposed = options.isTransposed;
    chart.once('beforepaint', function () {
        chart.views.forEach(function (view, viewIndex) {
            var getLineCoordinate = function (datum, datumIndex, data, initLineOption) {
                var ratio = viewIndex === 0 ? -1 : 1;
                return deepAssign({}, initLineOption, {
                    start: [datumIndex - 0.5, data[0][yField] * datum[FUNNEL_PERCENT]],
                    end: [datumIndex - 0.5, data[0][yField] * (datum[FUNNEL_PERCENT] + 0.05)],
                    text: isTransposed
                        ? {
                            style: {
                                textAlign: 'start',
                            },
                        }
                        : {
                            offsetX: conversionTag !== false ? ratio * conversionTag.offsetX : 0,
                            style: {
                                textAlign: viewIndex === 0 ? 'end' : 'start',
                            },
                        },
                });
            };
            conversionTagComponent(getLineCoordinate)(deepAssign({}, {
                chart: view,
                options: options,
            }));
        });
    });
    return params;
}
/**
 * 对比漏斗
 * @param chart
 * @param options
 */
export function compareFunnel(params) {
    return flow(field, geometry, label, conversionTag)(params);
}
//# sourceMappingURL=compare.js.map