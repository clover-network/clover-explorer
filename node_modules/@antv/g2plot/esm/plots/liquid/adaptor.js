import { get } from '@antv/util';
import { interaction, animation, theme, scale } from '../../adaptor/common';
import { flow, deepAssign, renderStatistic } from '../../utils';
import { interval } from '../../adaptor/geometries';
var CAT_VALUE = 'liquid';
/**
 * geometry 处理
 * @param params
 */
function geometry(params) {
    var chart = params.chart, options = params.options;
    var percent = options.percent, color = options.color, liquidStyle = options.liquidStyle, radius = options.radius;
    var data = [{ percent: percent, type: CAT_VALUE }];
    chart.scale({
        percent: {
            min: 0,
            max: 1,
        },
    });
    chart.data(data);
    var p = deepAssign({}, params, {
        options: {
            xField: 'type',
            yField: 'percent',
            // radius 放到 columnWidthRatio 中。
            // 保证横向的大小是根据  redius 生成的
            widthRatio: radius,
            interval: {
                color: color,
                style: liquidStyle,
                shape: 'liquid-fill-gauge',
            },
        },
    });
    var ext = interval(p).ext;
    var geometry = ext.geometry;
    // 将 radius 传入到自定义 shape 中
    geometry.customInfo({
        radius: radius,
    });
    // 关闭组件
    chart.legend(false);
    chart.axis(false);
    chart.tooltip(false);
    return params;
}
/**
 * 统计指标文档
 * @param params
 */
function statistic(params) {
    var chart = params.chart, options = params.options;
    var statistic = options.statistic, percent = options.percent, meta = options.meta;
    if (statistic.content && !statistic.content.formatter) {
        var metaFormatter_1 = get(meta, ['percent', 'formatter']);
        // @ts-ignore
        statistic.content.formatter = function (_a) {
            var percent = _a.percent;
            return metaFormatter_1 ? metaFormatter_1(percent) : (percent * 100).toFixed(2) + "%";
        };
    }
    renderStatistic(chart, { statistic: statistic, plotType: 'liquid' }, { percent: percent });
    return params;
}
/**
 * 水波图适配器
 * @param chart
 * @param options
 */
export function adaptor(params) {
    // flow 的方式处理所有的配置到 G2 API
    return flow(geometry, statistic, scale({}), animation, theme, interaction)(params);
}
//# sourceMappingURL=adaptor.js.map