"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.adaptor = void 0;
var utils_1 = require("../../utils");
var common_1 = require("../../adaptor/common");
var geometries_1 = require("../../adaptor/geometries");
var data_1 = require("../../utils/data");
var utils_2 = require("./utils");
var constants_1 = require("./constants");
/**
 * 字段
 * @param params
 */
function geometry(params) {
    var _a, _b;
    var chart = params.chart, options = params.options;
    var data = options.data, xAxis = options.xAxis, yAxis = options.yAxis, color = options.color, lineStyle = options.lineStyle, pointMapping = options.point;
    var seriesData = utils_2.getTinyData(data);
    chart.data(seriesData);
    // line geometry 处理
    var primary = utils_1.deepAssign({}, params, {
        options: {
            xField: constants_1.X_FIELD,
            yField: constants_1.Y_FIELD,
            line: {
                color: color,
                style: lineStyle,
            },
            point: pointMapping,
        },
    });
    var second = utils_1.deepAssign({}, primary, { options: { tooltip: false } });
    geometries_1.line(primary);
    geometries_1.point(second);
    chart.axis(false);
    chart.legend(false);
    // scale
    common_1.scale((_a = {},
        _a[constants_1.X_FIELD] = xAxis,
        _a[constants_1.Y_FIELD] = yAxis,
        _a), (_b = {},
        _b[constants_1.X_FIELD] = {
            type: 'cat',
        },
        _b[constants_1.Y_FIELD] = data_1.adjustYMetaByZero(seriesData, constants_1.Y_FIELD),
        _b))(params);
    return params;
}
/**
 * 迷你折线图适配器
 * @param chart
 * @param options
 */
function adaptor(params) {
    return utils_1.flow(geometry, common_1.theme, common_1.tooltip, common_1.animation, common_1.annotation())(params);
}
exports.adaptor = adaptor;
//# sourceMappingURL=adaptor.js.map