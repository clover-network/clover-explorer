{"version":3,"file":"adaptor.js","sourceRoot":"","sources":["../../../src/plots/progress/adaptor.ts"],"names":[],"mappings":";;;AAAA,mCAA6C;AAE7C,qCAA+C;AAC/C,+CAA2E;AAC3E,uDAAoD;AAEpD,uCAA2C;AAE3C;;;GAGG;AACH,SAAgB,QAAQ,CAAC,MAA+B;IAC9C,IAAA,KAAK,GAAc,MAAM,MAApB,EAAE,OAAO,GAAK,MAAM,QAAX,CAAY;IAC1B,IAAA,OAAO,GAA0C,OAAO,QAAjD,EAAE,aAAa,GAA2B,OAAO,cAAlC,EAAE,KAAK,GAAoB,OAAO,MAA3B,EAAE,aAAa,GAAK,OAAO,cAAZ,CAAa;IAEjE,IAAM,YAAY,GAAG,YAAK,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC1C,IAAM,IAAI,GAAG;QACX;YACE,IAAI,EAAE,SAAS;YACf,OAAO,EAAE,YAAY;SACtB;QACD;YACE,IAAI,EAAE,QAAQ;YACd,OAAO,EAAE,CAAC,GAAG,YAAY;SAC1B;KACF,CAAC;IAEF,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAEjB,IAAM,CAAC,GAAG,kBAAU,CAAC,EAAE,EAAE,MAAM,EAAE;QAC/B,OAAO,EAAE;YACP,MAAM,EAAE,GAAG;YACX,MAAM,EAAE,SAAS;YACjB,WAAW,EAAE,MAAM;YACnB,OAAO,EAAE,IAAI;YACb,UAAU,EAAE,aAAa;YACzB,QAAQ,EAAE;gBACR,KAAK,EAAE,aAAa;gBACpB,KAAK,EAAE,eAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,wBAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK;aAC3D;SACF;KACF,CAAC,CAAC;IAEH,qBAAQ,CAAC,CAAC,CAAC,CAAC;IAEZ,OAAO;IACP,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IACrB,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAClB,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAEpB,OAAO,MAAM,CAAC;AAChB,CAAC;AAxCD,4BAwCC;AAED;;;GAGG;AACH,SAAS,UAAU,CAAC,MAA+B;IACzC,IAAA,KAAK,GAAK,MAAM,MAAX,CAAY;IAEzB,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,SAAS,EAAE,CAAC;IAErC,OAAO,MAAM,CAAC;AAChB,CAAC;AAED;;;;GAIG;AACH,SAAgB,OAAO,CAAC,MAA+B;IACrD,aAAa;IACb,OAAO,YAAI,CAAC,QAAQ,EAAE,cAAK,CAAC,EAAE,CAAC,EAAE,UAAU,EAAE,kBAAS,EAAE,cAAK,EAAE,mBAAU,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;AACvF,CAAC;AAHD,0BAGC","sourcesContent":["import { isString, clamp } from '@antv/util';\nimport { Params } from '../../core/adaptor';\nimport { flow, deepAssign } from '../../utils';\nimport { scale, animation, theme, annotation } from '../../adaptor/common';\nimport { interval } from '../../adaptor/geometries';\nimport { ProgressOptions } from './types';\nimport { DEFAULT_COLOR } from './constant';\n\n/**\n * 字段\n * @param params\n */\nexport function geometry(params: Params<ProgressOptions>): Params<ProgressOptions> {\n  const { chart, options } = params;\n  const { percent, progressStyle, color, barWidthRatio } = options;\n\n  const clampPercent = clamp(percent, 0, 1);\n  const data = [\n    {\n      type: 'current',\n      percent: clampPercent,\n    },\n    {\n      type: 'target',\n      percent: 1 - clampPercent,\n    },\n  ];\n\n  chart.data(data);\n\n  const p = deepAssign({}, params, {\n    options: {\n      xField: '1',\n      yField: 'percent',\n      seriesField: 'type',\n      isStack: true,\n      widthRatio: barWidthRatio,\n      interval: {\n        style: progressStyle,\n        color: isString(color) ? [color, DEFAULT_COLOR[1]] : color,\n      },\n    },\n  });\n\n  interval(p);\n\n  // 关闭组件\n  chart.tooltip(false);\n  chart.axis(false);\n  chart.legend(false);\n\n  return params;\n}\n\n/**\n * other 配置\n * @param params\n */\nfunction coordinate(params: Params<ProgressOptions>): Params<ProgressOptions> {\n  const { chart } = params;\n\n  chart.coordinate('rect').transpose();\n\n  return params;\n}\n\n/**\n * 进度图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<ProgressOptions>) {\n  // @ts-ignore\n  return flow(geometry, scale({}), coordinate, animation, theme, annotation())(params);\n}\n"]}