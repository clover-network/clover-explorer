"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.basicFunnel = void 0;
var tslib_1 = require("tslib");
var util_1 = require("@antv/util");
var utils_1 = require("../../../utils");
var tooltip_1 = require("../../../utils/tooltip");
var base_1 = require("../../../adaptor/geometries/base");
var constant_1 = require("../constant");
var common_1 = require("./common");
/**
 * 处理字段数据
 * @param params
 */
function field(params) {
    var chart = params.chart, options = params.options;
    var _a = options.data, data = _a === void 0 ? [] : _a, yField = options.yField;
    var formatData = [];
    // format 数据
    if (data[0][yField]) {
        formatData = util_1.map(data, function (row, index) {
            if (row[yField] !== undefined) {
                row[constant_1.FUNNEL_PERCENT] = row[yField] / data[0][yField];
                row[constant_1.FUNNEL_CONVERSATION] = index === 0 ? 1 : row[yField] / data[index - 1][yField];
            }
            return row;
        });
    }
    // 绘制漏斗图
    chart.data(formatData);
    return params;
}
/**
 * geometry处理
 * @param params
 */
function geometry(params) {
    var chart = params.chart, options = params.options;
    var xField = options.xField, yField = options.yField, color = options.color, tooltip = options.tooltip;
    var _a = tooltip_1.getTooltipMapping(tooltip, [xField, yField, constant_1.FUNNEL_PERCENT, constant_1.FUNNEL_CONVERSATION]), fields = _a.fields, formatter = _a.formatter;
    base_1.geometry({
        chart: chart,
        options: {
            type: 'interval',
            xField: xField,
            yField: yField,
            colorField: xField,
            tooltipFields: fields,
            mapping: {
                shape: 'funnel',
                tooltip: formatter,
                color: color,
            },
        },
    });
    var geo = utils_1.findGeometry(params.chart, 'interval');
    geo.adjust('symmetric');
    return params;
}
/**
 * 转置处理
 * @param params
 */
function transpose(params) {
    var chart = params.chart, options = params.options;
    var isTransposed = options.isTransposed;
    chart.coordinate({
        type: 'rect',
        actions: !isTransposed ? [['transpose'], ['scale', 1, -1]] : [],
    });
    return params;
}
/**
 * label 处理
 * @param params
 */
function label(params) {
    common_1.geometryLabel(utils_1.findGeometry(params.chart, 'interval'))(params);
    return params;
}
/**
 * 转化率组件
 * @param params
 */
function conversionTag(params) {
    var options = params.options;
    var yField = options.yField;
    var getLineCoordinate = function (datum, datumIndex, data, initLineOption) {
        var percent = 1 - (1 - datum[constant_1.FUNNEL_PERCENT]) / 2;
        return tslib_1.__assign(tslib_1.__assign({}, initLineOption), { start: [datumIndex - 0.5, data[0][yField] * percent], end: [datumIndex - 0.5, data[0][yField] * (percent + 0.05)] });
    };
    common_1.conversionTagComponent(getLineCoordinate)(params);
    return params;
}
/**
 * 基础漏斗
 * @param chart
 * @param options
 */
function basicFunnel(params) {
    return utils_1.flow(field, geometry, transpose, conversionTag, label)(params);
}
exports.basicFunnel = basicFunnel;
//# sourceMappingURL=basic.js.map