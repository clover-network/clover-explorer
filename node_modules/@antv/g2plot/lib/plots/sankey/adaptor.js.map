{"version":3,"file":"adaptor.js","sourceRoot":"","sources":["../../../src/plots/sankey/adaptor.ts"],"names":[],"mappings":";;;AAAA,+CAAqE;AAErE,qCAAmC;AACnC,uDAA4D;AAC5D,uDAAyD;AAEzD,oCAAoD;AACpD,uCAA2D;AAE3D;;;GAGG;AACH,SAAS,QAAQ,CAAC,MAA6B;IACrC,IAAA,KAAK,GAAc,MAAM,MAApB,EAAE,OAAO,GAAK,MAAM,QAAX,CAAY;IAEhC,IAAA,IAAI,GAaF,OAAO,KAbL,EACJ,WAAW,GAYT,OAAO,YAZE,EACX,WAAW,GAWT,OAAO,YAXE,EACX,WAAW,GAUT,OAAO,YAVE,EACX,KAAK,GASH,OAAO,MATJ,EACL,SAAS,GAQP,OAAO,UARA,EACT,SAAS,GAOP,OAAO,UAPA,EACT,KAAK,GAMH,OAAO,MANJ,EACL,OAAO,GAKL,OAAO,QALF,EACP,SAAS,GAIP,OAAO,UAJA,EACT,gBAAgB,GAGd,OAAO,iBAHO,EAChB,cAAc,GAEZ,OAAO,eAFK,EACd,QAAQ,GACN,OAAO,SADD,CACE;IAEZ,4BAA4B;IAC5B,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACpB,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IACvB,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAElB,oBAAoB;IACpB,IAAM,qBAAqB,GAAG,4BAAqB,CAAC,IAAI,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,CAAC,CAAC;IAEjG,kBAAkB;IACZ,IAAA,KAAmB,qBAAY,CACnC;QACE,SAAS,WAAA;QACT,WAAW,EAAE,gBAAgB;QAC7B,SAAS,EAAE,cAAc;QACzB,QAAQ,UAAA;KACT,EACD,qBAAqB,CACtB,EARO,KAAK,WAAA,EAAE,KAAK,WAQnB,CAAC;IAEF,YAAY;IACZ,IAAM,SAAS,GAAG,KAAK,CAAC,GAAG,CAAC,UAAC,IAAI;QAC/B,OAAO;YACL,CAAC,EAAE,IAAI,CAAC,CAAC;YACT,CAAC,EAAE,IAAI,CAAC,CAAC;YACT,IAAI,EAAE,IAAI,CAAC,IAAI;SAChB,CAAC;IACJ,CAAC,CAAC,CAAC;IACH,IAAM,SAAS,GAAG,KAAK,CAAC,GAAG,CAAC,UAAC,IAAI;QAC/B,OAAO;YACL,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI;YACxB,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI;YACxB,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI;YAC1C,CAAC,EAAE,IAAI,CAAC,CAAC;YACT,CAAC,EAAE,IAAI,CAAC,CAAC;YACT,KAAK,EAAE,IAAI,CAAC,KAAK;SAClB,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,qBAAqB;IACrB,IAAM,QAAQ,GAAG,KAAK,CAAC,UAAU,EAAE,CAAC;IACpC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAEzB,oBAAO,CAAC;QACN,KAAK,EAAE,QAAQ;QACf,OAAO,EAAE;YACP,MAAM,EAAE,kBAAO;YACf,MAAM,EAAE,kBAAO;YACf,WAAW,EAAE,sBAAW;YACxB,OAAO,EAAE;gBACP,KAAK,OAAA;gBACL,KAAK,EAAE,SAAS;aACjB;YACD,KAAK,OAAA;YACL,OAAO,EAAE,KAAK;SACf;KACF,CAAC,CAAC;IAEH,YAAY;IACZ,IAAM,QAAQ,GAAG,KAAK,CAAC,UAAU,EAAE,CAAC;IACpC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAEzB,iBAAI,CAAC;QACH,KAAK,EAAE,QAAQ;QACf,aAAa;QACb,OAAO,EAAE;YACP,MAAM,EAAE,kBAAO;YACf,MAAM,EAAE,kBAAO;YACf,WAAW,EAAE,sBAAW;YACxB,IAAI,EAAE;gBACJ,KAAK,OAAA;gBACL,KAAK,EAAE,SAAS;gBAChB,KAAK,EAAE,KAAK;aACb;YACD,OAAO,SAAA;YACP,KAAK,EAAE;gBACL,MAAM,EAAE;oBACN,KAAK,EAAE;wBACL,OAAO,EAAE,GAAG;wBACZ,SAAS,EAAE,CAAC;qBACb;iBACF;aACF;SACF;KACF,CAAC,CAAC;IAEH,KAAK,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC;IAEpC,QAAQ;IACR,KAAK,CAAC,KAAK,CAAC;QACV,CAAC,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE;QAC7B,CAAC,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE;QAC7B,IAAI,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE;KACxB,CAAC,CAAC;IAEH,OAAO,MAAM,CAAC;AAChB,CAAC;AAED;;;;GAIG;AACH,SAAgB,OAAO,CAAC,MAA6B;IACnD,0BAA0B;IAC1B,OAAO,YAAI,CACT,QAAQ,EACR,oBAAW,EACX,kBAAS,EACT,cAAK;IACL,uBAAuB;KACxB,CAAC,MAAM,CAAC,CAAC;AACZ,CAAC;AATD,0BASC","sourcesContent":["import { interaction, animation, theme } from '../../adaptor/common';\nimport { Params } from '../../core/adaptor';\nimport { flow } from '../../utils';\nimport { sankeyLayout } from '../../utils/transform/sankey';\nimport { polygon, edge } from '../../adaptor/geometries';\nimport { SankeyOptions } from './types';\nimport { transformDataToSankey } from './util/data';\nimport { X_FIELD, Y_FIELD, COLOR_FIELD } from './constant';\n\n/**\n * geometry 处理\n * @param params\n */\nfunction geometry(params: Params<SankeyOptions>): Params<SankeyOptions> {\n  const { chart, options } = params;\n  const {\n    data,\n    sourceField,\n    targetField,\n    weightField,\n    color,\n    nodeStyle,\n    edgeStyle,\n    label,\n    tooltip,\n    nodeAlign,\n    nodePaddingRatio,\n    nodeWidthRatio,\n    nodeSort,\n  } = options;\n\n  // 1. 组件，优先设置，因为子 view 会继承配置\n  chart.legend(false);\n  chart.tooltip(tooltip);\n  chart.axis(false);\n\n  // 2. 转换出 layout 前数据\n  const sankeyLayoutInputData = transformDataToSankey(data, sourceField, targetField, weightField);\n\n  // 3. layout 之后的数据\n  const { nodes, links } = sankeyLayout(\n    {\n      nodeAlign,\n      nodePadding: nodePaddingRatio,\n      nodeWidth: nodeWidthRatio,\n      nodeSort,\n    },\n    sankeyLayoutInputData\n  );\n\n  // 4. 生成绘图数据\n  const nodesData = nodes.map((node) => {\n    return {\n      x: node.x,\n      y: node.y,\n      name: node.name,\n    };\n  });\n  const edgesData = links.map((link) => {\n    return {\n      source: link.source.name,\n      target: link.target.name,\n      name: link.source.name || link.target.name,\n      x: link.x,\n      y: link.y,\n      value: link.value,\n    };\n  });\n\n  // 5. node edge views\n  const nodeView = chart.createView();\n  nodeView.data(nodesData);\n\n  polygon({\n    chart: nodeView,\n    options: {\n      xField: X_FIELD,\n      yField: Y_FIELD,\n      seriesField: COLOR_FIELD,\n      polygon: {\n        color,\n        style: nodeStyle,\n      },\n      label,\n      tooltip: false,\n    },\n  });\n\n  // edge view\n  const edgeView = chart.createView();\n  edgeView.data(edgesData);\n\n  edge({\n    chart: edgeView,\n    // @ts-ignore\n    options: {\n      xField: X_FIELD,\n      yField: Y_FIELD,\n      seriesField: COLOR_FIELD,\n      edge: {\n        color,\n        style: edgeStyle,\n        shape: 'arc',\n      },\n      tooltip,\n      state: {\n        active: {\n          style: {\n            opacity: 0.8,\n            lineWidth: 0,\n          },\n        },\n      },\n    },\n  });\n\n  chart.interaction('element-active');\n\n  // scale\n  chart.scale({\n    x: { sync: true, nice: true },\n    y: { sync: true, nice: true },\n    name: { sync: 'color' },\n  });\n\n  return params;\n}\n\n/**\n * 图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<SankeyOptions>) {\n  // flow 的方式处理所有的配置到 G2 API\n  return flow(\n    geometry,\n    interaction,\n    animation,\n    theme\n    // ... 其他的 adaptor flow\n  )(params);\n}\n"]}