"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.adaptor = void 0;
var util_1 = require("@antv/util");
var common_1 = require("../../adaptor/common");
var utils_1 = require("../../utils");
var constant_1 = require("../../constant");
var geometries_1 = require("../../adaptor/geometries");
var utils_2 = require("./utils");
/**
 * geometry 处理
 * @param params
 */
function geometry(params) {
    var _a;
    var chart = params.chart, options = params.options;
    var bulletStyle = options.bulletStyle, targetField = options.targetField, rangeField = options.rangeField, measureField = options.measureField, xField = options.xField, color = options.color, layout = options.layout, size = options.size, label = options.label;
    // 处理数据
    var _b = utils_2.transformData(options), min = _b.min, max = _b.max, ds = _b.ds;
    // 需要统一比列尺
    chart.scale((_a = {},
        _a[measureField] = {
            min: min,
            max: max,
        },
        _a[rangeField] = {
            sync: "" + measureField,
        },
        _a[targetField] = {
            sync: "" + measureField,
        },
        _a));
    chart.data(ds);
    chart.axis("" + rangeField, false);
    chart.axis("" + targetField, false);
    // rangeGeometry
    var r = utils_1.deepAssign({}, params, {
        options: {
            xField: xField,
            yField: rangeField,
            seriesField: 'rKey',
            isStack: true,
            label: util_1.get(label, 'range'),
            interval: {
                color: util_1.get(color, 'range'),
                style: util_1.get(bulletStyle, 'range'),
                size: util_1.get(size, 'range'),
            },
        },
    });
    geometries_1.interval(r);
    // 范围值的 tooltip 隐藏掉
    chart.geometries[0].tooltip(false);
    // measureGeometry
    var m = utils_1.deepAssign({}, params, {
        options: {
            xField: xField,
            yField: measureField,
            seriesField: 'mKey',
            isStack: true,
            label: util_1.get(label, 'measure'),
            interval: {
                color: util_1.get(color, 'measure'),
                style: util_1.get(bulletStyle, 'measure'),
                size: util_1.get(size, 'measure'),
            },
        },
    });
    geometries_1.interval(m);
    // targetGeometry
    var t = utils_1.deepAssign({}, params, {
        options: {
            xField: xField,
            yField: targetField,
            seriesField: 'tKey',
            label: util_1.get(label, 'target'),
            point: {
                color: util_1.get(color, 'target'),
                style: util_1.get(bulletStyle, 'target'),
                size: util_1.get(size, 'target') / 2,
                shape: layout === 'horizontal' ? 'line' : 'hyphen',
            },
        },
    });
    geometries_1.point(t);
    // 水平的时候，要转换坐标轴
    if (layout === 'horizontal') {
        chart.coordinate().transpose();
    }
    return params;
}
/**
 * meta 配置
 * @param params
 */
function meta(params) {
    var _a;
    var chart = params.chart, options = params.options;
    var xAxis = options.xAxis, yAxis = options.yAxis, meta = options.meta, targetField = options.targetField, rangeField = options.rangeField, measureField = options.measureField, xField = options.xField;
    if (meta) {
        var scales = utils_1.deepAssign({}, meta, (_a = {},
            _a[xField] = utils_1.pick(xAxis, constant_1.AXIS_META_CONFIG_KEYS),
            _a[measureField] = utils_1.pick(yAxis, constant_1.AXIS_META_CONFIG_KEYS),
            _a[targetField] = {
                sync: "" + measureField,
            },
            _a[rangeField] = {
                sync: "" + measureField,
            },
            _a));
        chart.scale(scales);
    }
    return params;
}
/**
 * axis 配置
 * @param params
 */
function axis(params) {
    var chart = params.chart, options = params.options;
    var xAxis = options.xAxis, yAxis = options.yAxis, xField = options.xField, measureField = options.measureField;
    // 为 false 则是不显示轴
    if (xAxis === false) {
        chart.axis("" + xField, false);
    }
    else {
        chart.axis("" + xField, xAxis);
    }
    if (yAxis === false) {
        chart.axis("" + measureField, false);
    }
    else {
        chart.axis("" + measureField, yAxis);
    }
    return params;
}
/**
 * legend 配置
 * @param params
 */
function legend(params) {
    var chart = params.chart, options = params.options;
    var legend = options.legend;
    chart.removeInteraction('legend-filter');
    // @TODO 后续看是否内部自定义一个 legend
    chart.legend(legend);
    // 默认关闭掉所在 color 字段的 legend, 从而不影响自定义的legend
    chart.legend('rKey', false);
    chart.legend('mKey', false);
    chart.legend('tKey', false);
    return params;
}
/**
 * label 配置
 * @param params
 */
function label(params) {
    var chart = params.chart, options = params.options;
    var label = options.label, measureField = options.measureField, targetField = options.targetField, rangeField = options.rangeField;
    var _a = chart.geometries, rangeGeometry = _a[0], measureGeometry = _a[1], targetGeometry = _a[2];
    if (util_1.get(label, 'range')) {
        rangeGeometry.label("" + rangeField, utils_1.transformLabel(label.range));
    }
    if (util_1.get(label, 'measure')) {
        measureGeometry.label("" + measureField, utils_1.transformLabel(label.measure));
    }
    if (util_1.get(label, 'target')) {
        targetGeometry.label("" + targetField, utils_1.transformLabel(label.target));
    }
    return params;
}
/**
 * 子弹图适配器
 * @param chart
 * @param options
 */
function adaptor(params) {
    // flow 的方式处理所有的配置到 G2 API
    utils_1.flow(geometry, meta, axis, legend, common_1.theme, label, common_1.tooltip, common_1.interaction, common_1.animation)(params);
}
exports.adaptor = adaptor;
//# sourceMappingURL=adaptor.js.map