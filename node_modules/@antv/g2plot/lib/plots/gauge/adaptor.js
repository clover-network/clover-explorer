"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.adaptor = void 0;
var tslib_1 = require("tslib");
var util_1 = require("@antv/util");
var common_1 = require("../../adaptor/common");
var utils_1 = require("../../utils");
var constant_1 = require("./constant");
var utils_2 = require("./utils");
/**
 * geometry 处理
 * @param params
 */
function geometry(params) {
    var _a;
    var chart = params.chart, options = params.options;
    var percent = options.percent, range = options.range, radius = options.radius, innerRadius = options.innerRadius, startAngle = options.startAngle, endAngle = options.endAngle, axis = options.axis, indicator = options.indicator;
    var ticks = range.ticks, color = range.color;
    var clampTicks = util_1.size(ticks) ? ticks : [0, util_1.clamp(percent, 0, 1), 1];
    // 指标 & 指针
    // 如果开启在应用
    if (indicator) {
        var indicatorData = [(_a = {}, _a[constant_1.PERCENT] = util_1.clamp(percent, 0, 1), _a)];
        var v1 = chart.createView();
        v1.data(indicatorData);
        v1.point()
            .position(constant_1.PERCENT + "*1")
            .shape('gauge-indicator')
            // 传入指针的样式到自定义 shape 中
            .customInfo({
            defaultColor: chart.getTheme().defaultColor,
            indicator: indicator,
        });
        v1.coordinate('polar', {
            startAngle: startAngle,
            endAngle: endAngle,
            radius: innerRadius * radius,
        });
        v1.axis(constant_1.PERCENT, axis);
    }
    // 辅助 range
    // [{ range: 1, type: '0' }]
    var rangeData = utils_2.processRangeData(clampTicks);
    var v2 = chart.createView();
    v2.data(rangeData);
    var rangeColor = util_1.isString(color) ? [color, constant_1.DEFAULT_COLOR] : color;
    v2.interval().position("1*" + constant_1.RANGE_VALUE).color(constant_1.RANGE_TYPE, rangeColor).adjust('stack');
    v2.coordinate('polar', {
        innerRadius: innerRadius,
        radius: radius,
        startAngle: startAngle,
        endAngle: endAngle,
    }).transpose();
    return params;
}
/**
 * meta 配置
 * @param params
 */
function meta(params) {
    var _a;
    return utils_1.flow(common_1.scale((_a = {
            range: {
                min: 0,
                max: 1,
                maxLimit: 1,
                minLimit: 0,
            }
        },
        _a[constant_1.PERCENT] = {},
        _a)))(params);
}
/**
 * 统计指标文档
 * @param params
 */
function statistic(params) {
    var chart = params.chart, options = params.options;
    var statistic = options.statistic, percent = options.percent;
    if (statistic) {
        var content = statistic.content;
        var transformContent = void 0;
        // 当设置 content 的时候，设置默认样式
        if (content) {
            transformContent = utils_1.deepAssign({}, {
                formatter: function (_a) {
                    var percent = _a.percent;
                    return (percent * 100).toFixed(2) + "%";
                },
                style: {
                    opacity: 0.75,
                    fontSize: '30px',
                    lineHeight: 1,
                    textAlign: 'center',
                    color: 'rgba(44,53,66,0.85)',
                },
            }, content);
        }
        utils_1.renderGaugeStatistic(chart, { statistic: tslib_1.__assign(tslib_1.__assign({}, statistic), { content: transformContent }) }, { percent: percent });
    }
    return params;
}
/**
 * other 配置
 * @param params
 */
function other(params) {
    var chart = params.chart;
    chart.legend(false);
    chart.tooltip(false);
    return params;
}
/**
 * 图适配器
 * @param chart
 * @param options
 */
function adaptor(params) {
    // flow 的方式处理所有的配置到 G2 API
    return utils_1.flow(
    // animation 配置必须在 createView 之前，不然无法让子 View 生效
    common_1.animation, geometry, meta, statistic, common_1.interaction, common_1.theme, other
    // ... 其他的 adaptor flow
    )(params);
}
exports.adaptor = adaptor;
//# sourceMappingURL=adaptor.js.map