"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Gauge = void 0;
var tslib_1 = require("tslib");
var plot_1 = require("../../core/plot");
var adaptor_1 = require("./adaptor");
var constant_1 = require("./constant");
var utils_1 = require("./utils");
// 注册 shape
require("./shapes/gauge");
/**
 * 仪表盘盘
 */
var Gauge = /** @class */ (function (_super) {
    tslib_1.__extends(Gauge, _super);
    function Gauge() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /** 图表类型 */
        _this.type = 'gauge';
        return _this;
    }
    Gauge.prototype.getDefaultOptions = function () {
        var _a;
        return {
            percent: 0,
            range: {
                ticks: [],
            },
            innerRadius: 0.9,
            radius: 0.95,
            startAngle: (-7 / 6) * Math.PI,
            endAngle: (1 / 6) * Math.PI,
            syncViewPadding: true,
            axis: {
                line: null,
                label: {
                    offset: -24,
                    style: {
                        textAlign: 'center',
                        textBaseline: 'middle',
                    },
                },
                subTickLine: {
                    length: -8,
                },
                tickLine: {
                    length: -12,
                },
                grid: null,
            },
            indicator: {
                pointer: {
                    style: {
                        lineWidth: 5,
                        lineCap: 'round',
                    },
                },
                pin: {
                    style: {
                        r: 9.75,
                        lineWidth: 4.5,
                        fill: '#fff',
                    },
                },
            },
            statistic: {
                title: false,
            },
            meta: (_a = {},
                // 两个 view 的 scale 同步到 v 上
                _a[constant_1.RANGE_VALUE] = {
                    sync: 'v',
                },
                _a[constant_1.PERCENT] = {
                    sync: 'v',
                    tickCount: 5,
                    tickInterval: 0.2,
                },
                _a),
            animation: false,
        };
    };
    /**
     * 更新数据
     * @param percent
     */
    Gauge.prototype.changeData = function (percent) {
        this.updateOption({ percent: percent });
        var indicatorView = this.chart.views.find(function (v) { return v.id === constant_1.INDICATEOR_VIEW_ID; });
        if (indicatorView) {
            indicatorView.data(utils_1.getIndicatorData(percent));
        }
        var rangeView = this.chart.views.find(function (v) { return v.id === constant_1.RANGE_VIEW_ID; });
        if (rangeView) {
            rangeView.data(utils_1.getRangeData(percent, this.options.range));
        }
        // todo 后续让 G2 层在 afterrender 之后，来重绘 annotations
        adaptor_1.statistic({ chart: this.chart, options: this.options }, true);
    };
    /**
     * 获取适配器
     */
    Gauge.prototype.getSchemaAdaptor = function () {
        return adaptor_1.adaptor;
    };
    return Gauge;
}(plot_1.Plot));
exports.Gauge = Gauge;
//# sourceMappingURL=index.js.map