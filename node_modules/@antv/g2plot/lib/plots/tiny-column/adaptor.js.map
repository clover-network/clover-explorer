{"version":3,"file":"adaptor.js","sourceRoot":"","sources":["../../../src/plots/tiny-column/adaptor.ts"],"names":[],"mappings":";;;AAAA,+CAAoF;AAEpF,qCAA+C;AAC/C,uDAAoD;AACpD,oDAA0D;AAC1D,4CAAiD;AACjD,yCAAqD;AAErD;;;GAGG;AACH,SAAS,QAAQ,CAAC,MAAiC;;IACzC,IAAA,KAAK,GAAc,MAAM,MAApB,EAAE,OAAO,GAAK,MAAM,QAAX,CAAY;IAC1B,IAAA,IAAI,GAAyD,OAAO,KAAhE,EAAE,KAAK,GAAkD,OAAO,MAAzD,EAAE,KAAK,GAA2C,OAAO,MAAlD,EAAE,KAAK,GAAoC,OAAO,MAA3C,EAAE,WAAW,GAAuB,OAAO,YAA9B,EAAE,gBAAgB,GAAK,OAAO,iBAAZ,CAAa;IAE7E,IAAM,UAAU,GAAG,mBAAW,CAAC,IAAI,CAAC,CAAC;IAErC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAEvB,IAAM,CAAC,GAAG,kBAAU,CAAC,EAAE,EAAE,MAAM,EAAE;QAC/B,OAAO,EAAE;YACP,MAAM,EAAE,mBAAO;YACf,MAAM,EAAE,mBAAO;YACf,UAAU,EAAE,gBAAgB;YAC5B,QAAQ,EAAE;gBACR,KAAK,EAAE,WAAW;gBAClB,KAAK,OAAA;aACN;SACF;KACF,CAAC,CAAC;IACH,qBAAQ,CAAC,CAAC,CAAC,CAAC;IAEZ,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAClB,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACpB,KAAK,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC;IAEpC,QAAQ;IACR,cAAK;QAED,GAAC,mBAAO,IAAG,KAAK;QAChB,GAAC,mBAAO,IAAG,KAAK;;QAGhB,GAAC,mBAAO,IAAG;YACT,IAAI,EAAE,KAAK;SACZ;QACD,GAAC,mBAAO,IAAG,wBAAiB,CAAC,UAAU,EAAE,mBAAO,CAAC;YAEpD,CAAC,MAAM,CAAC,CAAC;IAEV,OAAO,MAAM,CAAC;AAChB,CAAC;AAED;;;;GAIG;AACH,SAAgB,OAAO,CAAC,MAAiC;IACvD,OAAO,YAAI,CAAC,QAAQ,EAAE,gBAAO,EAAE,cAAK,EAAE,kBAAS,EAAE,mBAAU,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;AACzE,CAAC;AAFD,0BAEC","sourcesContent":["import { theme, scale, animation, annotation, tooltip } from '../../adaptor/common';\nimport { Params } from '../../core/adaptor';\nimport { flow, deepAssign } from '../../utils';\nimport { interval } from '../../adaptor/geometries';\nimport { X_FIELD, Y_FIELD } from '../tiny-line/constants';\nimport { getTinyData } from '../tiny-line/utils';\nimport { adjustYMetaByZero } from '../../utils/data';\nimport { TinyColumnOptions } from './types';\n/**\n * 字段\n * @param params\n */\nfunction geometry(params: Params<TinyColumnOptions>): Params<TinyColumnOptions> {\n  const { chart, options } = params;\n  const { data, xAxis, yAxis, color, columnStyle, columnWidthRatio } = options;\n\n  const seriesData = getTinyData(data);\n\n  chart.data(seriesData);\n\n  const p = deepAssign({}, params, {\n    options: {\n      xField: X_FIELD,\n      yField: Y_FIELD,\n      widthRatio: columnWidthRatio,\n      interval: {\n        style: columnStyle,\n        color,\n      },\n    },\n  });\n  interval(p);\n\n  chart.axis(false);\n  chart.legend(false);\n  chart.interaction('element-active');\n\n  // scale\n  scale(\n    {\n      [X_FIELD]: xAxis,\n      [Y_FIELD]: yAxis,\n    },\n    {\n      [X_FIELD]: {\n        type: 'cat',\n      },\n      [Y_FIELD]: adjustYMetaByZero(seriesData, Y_FIELD),\n    }\n  )(params);\n\n  return params;\n}\n\n/**\n * 迷你柱形图适配器\n * @param chart\n * @param options\n */\nexport function adaptor(params: Params<TinyColumnOptions>) {\n  return flow(geometry, tooltip, theme, animation, annotation())(params);\n}\n"]}