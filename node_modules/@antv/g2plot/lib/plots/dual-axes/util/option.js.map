{"version":3,"file":"option.js","sourceRoot":"","sources":["../../../../src/plots/dual-axes/util/option.ts"],"names":[],"mappings":";;;;AAAA,mCAA0C;AAE1C,wCAA4C;AAC5C,kCAOkB;AAClB,wCAAoF;AAEpF;;GAEG;AACH,SAAgB,MAAM,CAAC,cAA8B;IACnD,OAAO,UAAG,CAAC,cAAc,EAAE,UAAU,CAAC,KAAK,wBAAgB,CAAC,IAAI,CAAC;AACnE,CAAC;AAFD,wBAEC;AAED;;GAEG;AACH,SAAgB,QAAQ,CAAC,cAA8B;IACrD,OAAO,UAAG,CAAC,cAAc,EAAE,UAAU,CAAC,KAAK,wBAAgB,CAAC,MAAM,CAAC;AACrE,CAAC;AAFD,4BAEC;AAED;;;;GAIG;AACH,SAAgB,iBAAiB,CAAC,MAAc,EAAE,MAAc,EAAE,cAA8B;IAC9F,QAAQ;IACR,OAAO,QAAQ,CAAC,cAAc,CAAC;QAC7B,CAAC,CAAC,kBAAU,CACR,EAAE,EACF;YACE,QAAQ,EAAE,wBAAgB,CAAC,MAAM;YACjC,KAAK,EACH,cAAc,CAAC,KAAK,IAAI,cAAc,CAAC,OAAO;gBAC5C,CAAC,CAAC;oBACE,OAAO,EAAE,UAAC,IAAY;;wBACpB,aAAO,IAAI,CAAC,MAAM,CAAC,0CAAE,IAAI,CAAC,GAAG,EAAE;oBACjC,CAAC;iBACF;gBACH,CAAC,CAAC,SAAS;SAChB,EACD,cAAc,CACf;QACH,CAAC,oBACG,QAAQ,EAAE,wBAAgB,CAAC,IAAI,IAC5B,cAAc,CAClB,CAAC;AACR,CAAC;AAtBD,8CAsBC;AAED;;;;GAIG;AACH,SAAgB,kBAAkB,CAChC,MAAiC,EACjC,cAA2C,EAC3C,QAAgB;;IAET,IAAA,EAAE,GAAQ,MAAM,GAAd,EAAE,EAAE,GAAI,MAAM,GAAV,CAAW;IACxB,IAAI,cAAO,CAAC,cAAc,CAAC,EAAE;QAC3B,IAAI,QAAQ,EAAE;YACZ,OAAO,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;SACzC;QACD,gBAAS,GAAC,EAAE,IAAG,cAAc,CAAC,CAAC,CAAC,EAAE,GAAC,EAAE,IAAG,cAAc,CAAC,CAAC,CAAC,KAAG;KAC7D;IAED,QAAQ;IACR,OAAO,kBAAU,WAAG,GAAC,EAAE,IAAG,SAAS,EAAE,GAAC,EAAE,IAAG,SAAS,OAAI,cAAc,CAAC,CAAC;AAC1E,CAAC;AAfD,gDAeC;AAED;;;;GAIG;AACH,SAAgB,mBAAmB,CAAC,KAAW,EAAE,QAAkB;IACjE,IAAI,QAAQ,KAAK,gBAAQ,CAAC,IAAI,EAAE;QAC9B,OAAO,KAAK,KAAK,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,kBAAU,CAAC,EAAE,EAAE,oCAAyB,EAAE,KAAK,CAAC,CAAC;KACnF;SAAM,IAAI,QAAQ,KAAK,gBAAQ,CAAC,KAAK,EAAE;QACtC,OAAO,KAAK,KAAK,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,kBAAU,CAAC,EAAE,EAAE,qCAA0B,EAAE,KAAK,CAAC,CAAC;KACpF;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAPD,kDAOC","sourcesContent":["import { get, isArray } from '@antv/util';\nimport { Axis } from '../../../types/axis';\nimport { deepAssign } from '../../../utils';\nimport {\n  DualAxesOptions,\n  GeometryOption,\n  DualAxesGeometry,\n  GeometryLineOption,\n  GeometryColumnOption,\n  AxisType,\n} from '../types';\nimport { DEFAULT_LEFT_YAXIS_CONFIG, DEFAULT_RIGHT_YAXIS_CONFIG } from '../constant';\n\n/**\n * 根据 GeometryOption 判断 geometry 是否为 line\n */\nexport function isLine(geometryOption: GeometryOption): geometryOption is GeometryLineOption {\n  return get(geometryOption, 'geometry') === DualAxesGeometry.Line;\n}\n\n/**\n * 根据 GeometryOption 判断 geometry 是否为 Column\n */\nexport function isColumn(geometryOption: GeometryOption): geometryOption is GeometryColumnOption {\n  return get(geometryOption, 'geometry') === DualAxesGeometry.Column;\n}\n\n/**\n * 获取 GeometryOption\n * @param geometryOption\n * @param axis\n */\nexport function getGeometryOption(xField: string, yField: string, geometryOption: GeometryOption): GeometryOption {\n  // 空默认为线\n  return isColumn(geometryOption)\n    ? deepAssign(\n        {},\n        {\n          geometry: DualAxesGeometry.Column,\n          label:\n            geometryOption.label && geometryOption.isRange\n              ? {\n                  content: (item: object) => {\n                    return item[yField]?.join('-');\n                  },\n                }\n              : undefined,\n        },\n        geometryOption\n      )\n    : {\n        geometry: DualAxesGeometry.Line,\n        ...geometryOption,\n      };\n}\n\n/**\n * 兼容一些属性 为 arr 和 obj 的两种情况， 如 yAxis，annotations\n * @param yField\n * @param options['some attribute']\n */\nexport function transArrayToObject(\n  yField: DualAxesOptions['yField'],\n  transAttribute: Record<string, any> | any[],\n  arrayTip: string\n): Record<string, any> {\n  const [y1, y2] = yField;\n  if (isArray(transAttribute)) {\n    if (arrayTip) {\n      console.warn('yAxis should be object.');\n    }\n    return { [y1]: transAttribute[0], [y2]: transAttribute[1] };\n  }\n\n  // 追加默认值\n  return deepAssign({ [y1]: undefined, [y2]: undefined }, transAttribute);\n}\n\n/**\n * 获取默认值\n * @param yAxis\n * @param axisType\n */\nexport function getYAxisWithDefault(yAxis: Axis, axisType: AxisType): Axis {\n  if (axisType === AxisType.Left) {\n    return yAxis === false ? false : deepAssign({}, DEFAULT_LEFT_YAXIS_CONFIG, yAxis);\n  } else if (axisType === AxisType.Right) {\n    return yAxis === false ? false : deepAssign({}, DEFAULT_RIGHT_YAXIS_CONFIG, yAxis);\n  }\n  return yAxis;\n}\n"]}