import color from 'color';
import { generate } from '@ant-design/colors';
/**
 * get the mix color of backColor and frontColor with alpah
 * @param backColor background color
 * @param frontColor foreground color
 * @param frontAlpha the opacity of foreground color
 */

export var mixColor = function mixColor(backColor, frontColor, frontAlpha) {
  var bc = color(backColor);
  var fc = color(frontColor);
  return color([(1 - frontAlpha) * bc.color[0] + frontAlpha * fc.color[0], (1 - frontAlpha) * bc.color[1] + frontAlpha * fc.color[1], (1 - frontAlpha) * bc.color[2] + frontAlpha * fc.color[2]]).rgb();
};
/**
 * get the set of colors according to the subject color and background color
 * @param subjectColor the subject color
 * @param backColor background color
 * @param disableColor the color for disable state
 */

export var getColorsWithSubjectColor = function getColorsWithSubjectColor(subjectColor, backColor, theme, disableColor) {
  if (backColor === void 0) {
    backColor = '#fff';
  }

  if (theme === void 0) {
    theme = 'default';
  }

  if (disableColor === void 0) {
    disableColor = 'rgb(150, 150, 150)';
  }

  var lightSubject = mixColor(backColor, subjectColor, 0.05).rgb().toString();
  var lightestDisable = mixColor(backColor, disableColor, 0.02).rgb().toString();
  var lightDisable = mixColor(backColor, disableColor, 0.05).rgb().toString();
  var middleDisable = mixColor(backColor, disableColor, 0.1).rgb().toString();
  var deepDisable = mixColor(backColor, disableColor, 0.2).rgb().toString();
  var deepestDisable = mixColor(backColor, disableColor, 0.3).rgb().toString();
  var paletteFromSubject = generate(subjectColor, {
    theme: theme,
    backgroundColor: backColor
  });
  var subjectHex = color(subjectColor).hex().toLowerCase();
  var subjectIdx = paletteFromSubject.indexOf(subjectHex);
  var deeperSubject = subjectColor;

  if (subjectIdx !== -1) {
    deeperSubject = paletteFromSubject[subjectIdx + 1];
  }

  return {
    // for nodes
    mainStroke: subjectColor,
    mainFill: mixColor(backColor, subjectColor, 0.1).rgb().toString(),
    activeStroke: subjectColor,
    activeFill: lightSubject,
    inactiveStroke: mixColor(backColor, subjectColor, 0.4).rgb().toString(),
    inactiveFill: lightSubject,
    selectedStroke: subjectColor,
    selectedFill: backColor,
    highlightStroke: deeperSubject,
    highlightFill: mixColor(backColor, subjectColor, 0.2).rgb().toString(),
    disableStroke: deepestDisable,
    disableFill: lightDisable,
    // for edges
    edgeMainStroke: deepestDisable,
    edgeActiveStroke: subjectColor,
    edgeInactiveStroke: deepDisable,
    edgeSelectedStroke: subjectColor,
    edgeHighlightStroke: subjectColor,
    edgeDisableStroke: middleDisable,
    // for combos
    comboMainStroke: deepestDisable,
    comboMainFill: lightestDisable,
    comboActiveStroke: subjectColor,
    comboActiveFill: lightSubject,
    comboInactiveStroke: deepestDisable,
    comboInactiveFill: lightestDisable,
    comboSelectedStroke: subjectColor,
    comboSelectedFill: lightestDisable,
    comboHighlightStroke: deeperSubject,
    comboHighlightFill: lightestDisable,
    comboDisableStroke: deepDisable,
    comboDisableFill: lightDisable
  };
};